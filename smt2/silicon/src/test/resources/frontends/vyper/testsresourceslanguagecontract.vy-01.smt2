(get-info :version)
; (:version "4.12.1")
; Started: 2025-01-27 02:50:21
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int> 0)
(declare-sort s$struct$self 0)
(declare-sort $Struct 0)
(declare-sort s$resource$$creator 0)
(declare-sort $Contract 0)
(declare-sort $Blockchain 0)
(declare-sort $Convert 0)
(declare-sort $StructOps<$Struct> 0)
(declare-sort $StructOps<Seq<Int>> 0)
(declare-sort $Range 0)
(declare-sort $Int 0)
(declare-sort $StructOps<$Map<Int~_Int>> 0)
(declare-sort $Math 0)
(declare-sort $StructOps<Int> 0)
(declare-sort $Map<Int~_$Struct> 0)
(declare-sort $StructOps<Bool> 0)
(declare-sort $MapInt<Int> 0)
(declare-sort $Map<Int~_Int> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.s$struct$selfTo$Snap (s$struct$self) $Snap)
(declare-fun $SortWrappers.$SnapTos$struct$self ($Snap) s$struct$self)
(assert (forall ((x s$struct$self)) (!
    (= x ($SortWrappers.$SnapTos$struct$self($SortWrappers.s$struct$selfTo$Snap x)))
    :pattern (($SortWrappers.s$struct$selfTo$Snap x))
    :qid |$Snap.$SnapTos$struct$selfTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$struct$selfTo$Snap($SortWrappers.$SnapTos$struct$self x)))
    :pattern (($SortWrappers.$SnapTos$struct$self x))
    :qid |$Snap.s$struct$selfTo$SnapTos$struct$self|
    )))
(declare-fun $SortWrappers.$StructTo$Snap ($Struct) $Snap)
(declare-fun $SortWrappers.$SnapTo$Struct ($Snap) $Struct)
(assert (forall ((x $Struct)) (!
    (= x ($SortWrappers.$SnapTo$Struct($SortWrappers.$StructTo$Snap x)))
    :pattern (($SortWrappers.$StructTo$Snap x))
    :qid |$Snap.$SnapTo$StructTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructTo$Snap($SortWrappers.$SnapTo$Struct x)))
    :pattern (($SortWrappers.$SnapTo$Struct x))
    :qid |$Snap.$StructTo$SnapTo$Struct|
    )))
(declare-fun $SortWrappers.s$resource$$creatorTo$Snap (s$resource$$creator) $Snap)
(declare-fun $SortWrappers.$SnapTos$resource$$creator ($Snap) s$resource$$creator)
(assert (forall ((x s$resource$$creator)) (!
    (= x ($SortWrappers.$SnapTos$resource$$creator($SortWrappers.s$resource$$creatorTo$Snap x)))
    :pattern (($SortWrappers.s$resource$$creatorTo$Snap x))
    :qid |$Snap.$SnapTos$resource$$creatorTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$resource$$creatorTo$Snap($SortWrappers.$SnapTos$resource$$creator x)))
    :pattern (($SortWrappers.$SnapTos$resource$$creator x))
    :qid |$Snap.s$resource$$creatorTo$SnapTos$resource$$creator|
    )))
(declare-fun $SortWrappers.$ContractTo$Snap ($Contract) $Snap)
(declare-fun $SortWrappers.$SnapTo$Contract ($Snap) $Contract)
(assert (forall ((x $Contract)) (!
    (= x ($SortWrappers.$SnapTo$Contract($SortWrappers.$ContractTo$Snap x)))
    :pattern (($SortWrappers.$ContractTo$Snap x))
    :qid |$Snap.$SnapTo$ContractTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$ContractTo$Snap($SortWrappers.$SnapTo$Contract x)))
    :pattern (($SortWrappers.$SnapTo$Contract x))
    :qid |$Snap.$ContractTo$SnapTo$Contract|
    )))
(declare-fun $SortWrappers.$BlockchainTo$Snap ($Blockchain) $Snap)
(declare-fun $SortWrappers.$SnapTo$Blockchain ($Snap) $Blockchain)
(assert (forall ((x $Blockchain)) (!
    (= x ($SortWrappers.$SnapTo$Blockchain($SortWrappers.$BlockchainTo$Snap x)))
    :pattern (($SortWrappers.$BlockchainTo$Snap x))
    :qid |$Snap.$SnapTo$BlockchainTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$BlockchainTo$Snap($SortWrappers.$SnapTo$Blockchain x)))
    :pattern (($SortWrappers.$SnapTo$Blockchain x))
    :qid |$Snap.$BlockchainTo$SnapTo$Blockchain|
    )))
(declare-fun $SortWrappers.$ConvertTo$Snap ($Convert) $Snap)
(declare-fun $SortWrappers.$SnapTo$Convert ($Snap) $Convert)
(assert (forall ((x $Convert)) (!
    (= x ($SortWrappers.$SnapTo$Convert($SortWrappers.$ConvertTo$Snap x)))
    :pattern (($SortWrappers.$ConvertTo$Snap x))
    :qid |$Snap.$SnapTo$ConvertTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$ConvertTo$Snap($SortWrappers.$SnapTo$Convert x)))
    :pattern (($SortWrappers.$SnapTo$Convert x))
    :qid |$Snap.$ConvertTo$SnapTo$Convert|
    )))
(declare-fun $SortWrappers.$StructOps<$Struct>To$Snap ($StructOps<$Struct>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Struct> ($Snap) $StructOps<$Struct>)
(assert (forall ((x $StructOps<$Struct>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Struct>($SortWrappers.$StructOps<$Struct>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Struct>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Struct>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Struct>To$Snap($SortWrappers.$SnapTo$StructOps<$Struct> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Struct> x))
    :qid |$Snap.$StructOps<$Struct>To$SnapTo$StructOps<$Struct>|
    )))
(declare-fun $SortWrappers.$StructOps<Seq<Int>>To$Snap ($StructOps<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Seq<Int>> ($Snap) $StructOps<Seq<Int>>)
(assert (forall ((x $StructOps<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Seq<Int>>($SortWrappers.$StructOps<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Seq<Int>>To$Snap($SortWrappers.$SnapTo$StructOps<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Seq<Int>> x))
    :qid |$Snap.$StructOps<Seq<Int>>To$SnapTo$StructOps<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$RangeTo$Snap ($Range) $Snap)
(declare-fun $SortWrappers.$SnapTo$Range ($Snap) $Range)
(assert (forall ((x $Range)) (!
    (= x ($SortWrappers.$SnapTo$Range($SortWrappers.$RangeTo$Snap x)))
    :pattern (($SortWrappers.$RangeTo$Snap x))
    :qid |$Snap.$SnapTo$RangeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RangeTo$Snap($SortWrappers.$SnapTo$Range x)))
    :pattern (($SortWrappers.$SnapTo$Range x))
    :qid |$Snap.$RangeTo$SnapTo$Range|
    )))
(declare-fun $SortWrappers.$IntTo$Snap ($Int) $Snap)
(declare-fun $SortWrappers.$SnapTo$Int ($Snap) $Int)
(assert (forall ((x $Int)) (!
    (= x ($SortWrappers.$SnapTo$Int($SortWrappers.$IntTo$Snap x)))
    :pattern (($SortWrappers.$IntTo$Snap x))
    :qid |$Snap.$SnapTo$IntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$IntTo$Snap($SortWrappers.$SnapTo$Int x)))
    :pattern (($SortWrappers.$SnapTo$Int x))
    :qid |$Snap.$IntTo$SnapTo$Int|
    )))
(declare-fun $SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap ($StructOps<$Map<Int~_Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> ($Snap) $StructOps<$Map<Int~_Int>>)
(assert (forall ((x $StructOps<$Map<Int~_Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>>($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Map<Int~_Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> x))
    :qid |$Snap.$StructOps<$Map<Int~_Int>>To$SnapTo$StructOps<$Map<Int~_Int>>|
    )))
(declare-fun $SortWrappers.$MathTo$Snap ($Math) $Snap)
(declare-fun $SortWrappers.$SnapTo$Math ($Snap) $Math)
(assert (forall ((x $Math)) (!
    (= x ($SortWrappers.$SnapTo$Math($SortWrappers.$MathTo$Snap x)))
    :pattern (($SortWrappers.$MathTo$Snap x))
    :qid |$Snap.$SnapTo$MathTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MathTo$Snap($SortWrappers.$SnapTo$Math x)))
    :pattern (($SortWrappers.$SnapTo$Math x))
    :qid |$Snap.$MathTo$SnapTo$Math|
    )))
(declare-fun $SortWrappers.$StructOps<Int>To$Snap ($StructOps<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Int> ($Snap) $StructOps<Int>)
(assert (forall ((x $StructOps<Int>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Int>($SortWrappers.$StructOps<Int>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Int>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Int>To$Snap($SortWrappers.$SnapTo$StructOps<Int> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Int> x))
    :qid |$Snap.$StructOps<Int>To$SnapTo$StructOps<Int>|
    )))
(declare-fun $SortWrappers.$Map<Int~_$Struct>To$Snap ($Map<Int~_$Struct>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_$Struct> ($Snap) $Map<Int~_$Struct>)
(assert (forall ((x $Map<Int~_$Struct>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_$Struct>($SortWrappers.$Map<Int~_$Struct>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_$Struct>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_$Struct>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_$Struct>To$Snap($SortWrappers.$SnapTo$Map<Int~_$Struct> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_$Struct> x))
    :qid |$Snap.$Map<Int~_$Struct>To$SnapTo$Map<Int~_$Struct>|
    )))
(declare-fun $SortWrappers.$StructOps<Bool>To$Snap ($StructOps<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Bool> ($Snap) $StructOps<Bool>)
(assert (forall ((x $StructOps<Bool>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Bool>($SortWrappers.$StructOps<Bool>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Bool>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Bool>To$Snap($SortWrappers.$SnapTo$StructOps<Bool> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Bool> x))
    :qid |$Snap.$StructOps<Bool>To$SnapTo$StructOps<Bool>|
    )))
(declare-fun $SortWrappers.$MapInt<Int>To$Snap ($MapInt<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$MapInt<Int> ($Snap) $MapInt<Int>)
(assert (forall ((x $MapInt<Int>)) (!
    (= x ($SortWrappers.$SnapTo$MapInt<Int>($SortWrappers.$MapInt<Int>To$Snap x)))
    :pattern (($SortWrappers.$MapInt<Int>To$Snap x))
    :qid |$Snap.$SnapTo$MapInt<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MapInt<Int>To$Snap($SortWrappers.$SnapTo$MapInt<Int> x)))
    :pattern (($SortWrappers.$SnapTo$MapInt<Int> x))
    :qid |$Snap.$MapInt<Int>To$SnapTo$MapInt<Int>|
    )))
(declare-fun $SortWrappers.$Map<Int~_Int>To$Snap ($Map<Int~_Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_Int> ($Snap) $Map<Int~_Int>)
(assert (forall ((x $Map<Int~_Int>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_Int>($SortWrappers.$Map<Int~_Int>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_Int>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_Int>To$Snap($SortWrappers.$SnapTo$Map<Int~_Int> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_Int> x))
    :qid |$Snap.$Map<Int~_Int>To$SnapTo$Map<Int~_Int>|
    )))
; ////////// Symbols
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_contains_trigger (Seq<Int> Int) Bool)
(declare-fun Seq_skolem (Seq<Int> Int) Int)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_skolem_diff (Seq<Int> Seq<Int>) Int)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun $map_init<$Map<Int~_$Struct>> ($Struct) $Map<Int~_$Struct>)
(declare-fun $map_eq<Bool> ($Map<Int~_$Struct> $Map<Int~_$Struct>) Bool)
(declare-fun $map_get<$Struct> ($Map<Int~_$Struct> Int) $Struct)
(declare-fun $map_set<$Map<Int~_$Struct>> ($Map<Int~_$Struct> Int $Struct) $Map<Int~_$Struct>)
(declare-fun $struct_get<Int> (Int) Int)
(declare-fun $struct_set<$Struct> ($Struct Int Int) $Struct)
(declare-fun $struct_get<Bool> (Int) Bool)
(declare-fun $struct_set<$Struct> ($Struct Int Bool) $Struct)
(declare-fun $blockhash<Seq<Int>> (Int) Seq<Int>)
(declare-fun $method_id<Seq<Int>> (Seq<Int> Int) Seq<Int>)
(declare-fun $keccak256<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $sha256<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $ecrecover<Int> (Seq<Int> Int Int Int) Int)
(declare-fun $ecadd<Seq<Int>> (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun $ecmul<Seq<Int>> (Seq<Int> Int) Seq<Int>)
(declare-fun $wrap<$Int> (Int) $Int)
(declare-fun $unwrap<Int> ($Int) Int)
(declare-fun $w_mul<$Int> ($Int $Int) $Int)
(declare-fun $w_mulI<$Int> ($Int $Int) $Int)
(declare-fun $w_mulL<$Int> ($Int $Int) $Int)
(declare-fun $w_abs<Int> ($Int) Int)
(declare-fun $w_mod<$Int> ($Int $Int) $Int)
(declare-fun $w_modL<$Int> ($Int $Int) $Int)
(declare-fun $w_div<$Int> ($Int $Int) $Int)
(declare-fun $w_div_down<$Int> ($Int $Int) $Int)
(declare-fun $w_div_nat<$Int> ($Int $Int) $Int)
(declare-fun $w_div_natL<$Int> ($Int $Int) $Int)
(declare-fun $struct_loc<Int> ($Struct Int) Int)
(declare-fun $map_init<$Map<Int~_Int>> (Int) $Map<Int~_Int>)
(declare-fun $map_eq<Bool> ($Map<Int~_Int> $Map<Int~_Int>) Bool)
(declare-fun $map_get<Int> ($Map<Int~_Int> Int) Int)
(declare-fun $map_set<$Map<Int~_Int>> ($Map<Int~_Int> Int Int) $Map<Int~_Int>)
(declare-fun $sign<Int> (Int) Int)
(declare-fun $div<Int> (Int Int Int) Int)
(declare-fun $mod<Int> (Int Int Int) Int)
(declare-fun $pow<Int> (Int Int) Int)
(declare-fun $sqrt<Int> (Int) Int)
(declare-fun $floor<Int> (Int Int) Int)
(declare-fun $ceil<Int> (Int Int) Int)
(declare-fun $shift<Int> (Int Int) Int)
(declare-fun $bitwise_not<Int> (Int) Int)
(declare-fun $bitwise_and<Int> (Int Int) Int)
(declare-fun $bitwise_or<Int> (Int Int) Int)
(declare-fun $bitwise_xor<Int> (Int Int) Int)
(declare-const $self_address<Int> Int)
(declare-fun $implements<Bool> (Int Int) Bool)
(declare-fun $struct_get<$Struct> (Int) $Struct)
(declare-fun $struct_set<$Struct> ($Struct Int $Struct) $Struct)
(declare-fun $range<Seq<Int>> (Int Int) Seq<Int>)
(declare-fun $bytes32_to_signed_int<Int> (Seq<Int>) Int)
(declare-fun $bytes32_to_unsigned_int<Int> (Seq<Int>) Int)
(declare-fun $signed_int_to_bytes32<Seq<Int>> (Int) Seq<Int>)
(declare-fun $unsigned_int_to_bytes32<Seq<Int>> (Int) Seq<Int>)
(declare-fun $pad32<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun s$struct$self$init<$Struct> (Int Int Int Bool Int Int Bool $Map<Int~_Int> $Map<Int~_Int> Bool) $Struct)
(declare-fun s$struct$self$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $struct_get<$Map<Int~_Int>> (Int) $Map<Int~_Int>)
(declare-fun $struct_set<$Struct> ($Struct Int $Map<Int~_Int>) $Struct)
(declare-fun $struct_get<Seq<Int>> (Int) Seq<Int>)
(declare-fun $struct_set<$Struct> ($Struct Int Seq<Int>) $Struct)
(declare-fun s$resource$$creator$init<$Struct> ($Struct) $Struct)
(declare-fun s$resource$$creator$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $map_sum<Int> ($Map<Int~_Int>) Int)
; Declaring symbols related to program functions (from program analysis)
(declare-fun $pure$success_get ($Snap $Struct) Bool)
(declare-fun $pure$success_get%limited ($Snap $Struct) Bool)
(declare-fun $pure$success_get%stateless ($Struct) Bool)
(declare-fun $pure$success_get%precondition ($Snap $Struct) Bool)
(declare-fun $pure$return_get ($Snap $Struct) Int)
(declare-fun $pure$return_get%limited ($Snap $Struct) Int)
(declare-fun $pure$return_get%stateless ($Struct) Bool)
(declare-fun $pure$return_get%precondition ($Snap $Struct) Bool)
(declare-fun $range_sum ($Snap Int Int) Int)
(declare-fun $range_sum%limited ($Snap Int Int) Int)
(declare-fun $range_sum%stateless (Int Int) Bool)
(declare-fun $range_sum%precondition ($Snap Int Int) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun $failed%trigger ($Snap Int) Bool)
(declare-fun $failed_0%trigger ($Snap Int) Bool)
(declare-fun $allocation%trigger ($Snap $Struct Int) Bool)
(declare-fun $allocation_0%trigger ($Snap $Struct Int) Bool)
(declare-fun $offer%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $offer_0%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $trust%trigger ($Snap Int Int) Bool)
(declare-fun $trust_0%trigger ($Snap Int Int) Bool)
(declare-fun $performs$create%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$create_0%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$destroy%trigger ($Snap $Struct Int Int) Bool)
(declare-fun $performs$destroy_0%trigger ($Snap $Struct Int Int) Bool)
(declare-fun $performs$reallocate%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$reallocate_0%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$offer%trigger ($Snap $Struct $Struct Int Int Int Int Int) Bool)
(declare-fun $performs$offer_0%trigger ($Snap $Struct $Struct Int Int Int Int Int) Bool)
(declare-fun $performs$revoke%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $performs$revoke_0%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $performs$trust%trigger ($Snap Int Int Bool) Bool)
(declare-fun $performs$trust_0%trigger ($Snap Int Int Bool) Bool)
(declare-fun $accessible$__init__%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$__init___0%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$set_val%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$set_val_0%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$test_list%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$test_list_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$list_reentrance%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$list_reentrance_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$send_call%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$send_call_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$update_list%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$update_list_0%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$use_ret%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$use_ret_0%trigger ($Snap Int Int Int Int) Bool)
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (not (= s1 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (x Int)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Int>) (x Int) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Int>) (b Seq<Int>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Int) (y Int)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((min_ Int) (max Int)) (!
  (and
    (=> (< min_ max) (= (Seq_length (Seq_range min_ max)) (- max min_)))
    (=> (<= max min_) (= (Seq_length (Seq_range min_ max)) 0)))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (j Int)) (!
  (=>
    (and (<= 0 j) (< j (- max min_)))
    (= (Seq_index (Seq_range min_ max) j) (+ min_ j)))
  :pattern ((Seq_index (Seq_range min_ max) j))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (v Int)) (!
  (= (Seq_contains (Seq_range min_ max) v) (and (<= min_ v) (< v max)))
  :pattern ((Seq_contains (Seq_range min_ max) v))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall (($v $Struct) ($k Int)) (!
  (= ($map_get<$Struct> ($map_init<$Map<Int~_$Struct>> $v) $k) $v)
  :pattern (($map_get<$Struct> ($map_init<$Map<Int~_$Struct>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_$Struct>) ($n $Map<Int~_$Struct>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<$Struct> $m $k) ($map_get<$Struct> $n $k))
        :pattern (($map_get<$Struct> $m $k) ($map_get<$Struct> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_$Struct>) ($k Int) ($v $Struct) ($kk Int)) (!
  (=
    ($map_get<$Struct> ($map_set<$Map<Int~_$Struct>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<$Struct> $m $kk)))
  :pattern (($map_get<$Struct> ($map_set<$Map<Int~_$Struct>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Int)) (!
  (= ($struct_get<Int> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m)) $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Int)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Bool)) (!
  (=
    ($struct_get<Bool> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Bool)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($no Int)) (!
  (= (Seq_length ($blockhash<Seq<Int>> $no)) 32)
  :pattern (($blockhash<Seq<Int>> $no))
  :qid |prog.$blockhash_ax|)))
(assert (forall (($bb Seq<Int>) ($l Int)) (!
  (= (Seq_length ($method_id<Seq<Int>> $bb $l)) $l)
  :pattern (($method_id<Seq<Int>> $bb $l))
  :qid |prog.$method_id_ax|)))
(assert (forall (($s Seq<Int>)) (!
  (= (Seq_length ($keccak256<Seq<Int>> $s)) 32)
  :pattern (($keccak256<Seq<Int>> $s))
  :qid |prog.$keccak256_ax|)))
(assert (forall (($s Seq<Int>)) (!
  (= (Seq_length ($sha256<Seq<Int>> $s)) 32)
  :pattern (($sha256<Seq<Int>> $s))
  :qid |prog.$sha256_ax|)))
(assert (forall (($p Seq<Int>) ($q Seq<Int>)) (!
  (= (Seq_length ($ecadd<Seq<Int>> $p $q)) 2)
  :pattern (($ecadd<Seq<Int>> $p $q))
  :qid |prog.$ecadd_ax|)))
(assert (forall (($p Seq<Int>) ($s Int)) (!
  (= (Seq_length ($ecmul<Seq<Int>> $p $s)) 2)
  :pattern (($ecmul<Seq<Int>> $p $s))
  :qid |prog.$ecmul_ax|)))
(assert (forall ((i Int)) (!
  (= ($unwrap<Int> ($wrap<$Int> i)) i)
  :pattern (($wrap<$Int> i))
  :qid |prog.$wrap_ax|)))
(assert (forall ((i $Int)) (!
  (= ($wrap<$Int> ($unwrap<Int> i)) i)
  :pattern (($wrap<$Int> ($unwrap<Int> i)))
  :qid |prog.$unwrap_ax|)))
(assert (forall ((i $Int)) (!
  (=> (< ($unwrap<Int> i) 0) (= ($w_abs<Int> i) (- 0 ($unwrap<Int> i))))
  :pattern (($w_abs<Int> i))
  :qid |prog.$w_abs_ax_1|)))
(assert (forall ((i $Int)) (!
  (=> (>= ($unwrap<Int> i) 0) (= ($w_abs<Int> i) ($unwrap<Int> i)))
  :pattern (($w_abs<Int> i))
  :qid |prog.$w_abs_ax_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulI<$Int> i j))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_intermediate|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulL<$Int> i j))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mulI<$Int> i j) ($w_mulL<$Int> i j))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_intermediate_to_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulI<$Int> j i))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_commutative|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (= ($w_mulI<$Int> i ($w_mulI<$Int> j k)) ($w_mulL<$Int> ($w_mulL<$Int> i j) k))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j k)))
  :qid |prog.$w_mul_associative|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (= ($unwrap<Int> j) (+ ($unwrap<Int> k) ($unwrap<Int> l)))
    (=
      ($w_mulI<$Int> i j)
      ($wrap<$Int> (+
        ($unwrap<Int> ($w_mulL<$Int> i k))
        ($unwrap<Int> ($w_mulL<$Int> i l))))))
  :pattern (($w_mulI<$Int> i j) ($w_mulI<$Int> i k) ($w_mulI<$Int> i l))
  :qid |prog.$w_mul_distributive|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_mulI<$Int> i j)
    ($w_mulL<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) ($wrap<$Int> (-
      0
      ($unwrap<Int> j)))))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_sign_1|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_mulI<$Int> i j)
    ($wrap<$Int> (-
      0
      ($unwrap<Int> ($w_mulL<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) j)))))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_sign_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> i) 0) (= ($unwrap<Int> j) 0))
    (= ($unwrap<Int> ($w_mulI<$Int> i j)) 0))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_zero_1|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or
      (and (> ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
      (and (< ($unwrap<Int> i) 0) (< ($unwrap<Int> j) 0)))
    (> ($unwrap<Int> ($w_mulI<$Int> i j)) 0))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_zero_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> i) 1) (= ($unwrap<Int> j) 0))
    (= ($w_mulI<$Int> i j) j))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_neutral|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    (>= ($w_abs<Int> ($w_mulI<$Int> i j)) ($w_abs<Int> j))
    (or (>= ($w_abs<Int> i) 1) (= ($unwrap<Int> j) 0)))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_proportional|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (> ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (> ($unwrap<Int> l) 0))
    (>
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))
      ($unwrap<Int> ($w_mulI<$Int> k l))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (>= ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (> ($unwrap<Int> l) 0))
    (>=
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))
      ($unwrap<Int> ($w_mulI<$Int> k l))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_2|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (> ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (< ($unwrap<Int> l) 0))
    (>
      ($unwrap<Int> ($w_mulI<$Int> k l))
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_3|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (>= ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (< ($unwrap<Int> l) 0))
    (>=
      ($unwrap<Int> ($w_mulI<$Int> k l))
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_4|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (<= ($w_abs<Int> i) ($w_abs<Int> j))
      (<= ($w_abs<Int> k) ($w_abs<Int> l)))
    (<= ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (< ($w_abs<Int> i) ($w_abs<Int> j))
      (and (<= ($w_abs<Int> k) ($w_abs<Int> l)) (not (= ($unwrap<Int> l) 0))))
    (< ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_2|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (<= ($w_abs<Int> i) ($w_abs<Int> j))
      (and (< ($w_abs<Int> k) ($w_abs<Int> l)) (not (= ($unwrap<Int> j) 0))))
    (< ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mod<$Int> i j) ($w_modL<$Int> i j))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (not (= j ($wrap<$Int> 0))) (or (= i j) (= i ($wrap<$Int> 0))))
    (= ($w_mod<$Int> i j) ($wrap<$Int> 0)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_identity|)))
(assert (forall ((i $Int) (j $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and
        (= ($unwrap<Int> i) (+ ($unwrap<Int> l) ($w_abs<Int> j)))
        (or (>= ($unwrap<Int> l) 0) (< ($unwrap<Int> i) 0))))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> l j)))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_basic_1|)))
(assert (forall ((i $Int) (j $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and
        (= ($unwrap<Int> i) (- ($unwrap<Int> l) ($w_abs<Int> j)))
        (or (<= ($unwrap<Int> l) 0) (> ($unwrap<Int> i) 0))))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> l j)))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_basic_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and (<= 0 ($w_abs<Int> i)) (< ($w_abs<Int> i) ($w_abs<Int> j))))
    (= ($w_mod<$Int> i j) i))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_basic_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (< ($w_abs<Int> ($w_mod<$Int> i j)) ($w_abs<Int> j)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_basic_4|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (or
      (=
        ($sign<Int> ($unwrap<Int> ($w_mod<$Int> i j)))
        ($sign<Int> ($unwrap<Int> i)))
      (= ($sign<Int> ($unwrap<Int> ($w_mod<$Int> i j))) 0)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_sign_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and (not (= j ($wrap<$Int> 0))) (= ($unwrap<Int> i) (- 0 ($unwrap<Int> k))))
    (= ($w_mod<$Int> i j) ($wrap<$Int> (- 0 ($unwrap<Int> ($w_modL<$Int> k j))))))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> k j))
  :qid |prog.$w_mod_sign_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> i j) ($w_mod<$Int> i ($wrap<$Int> (- 0 ($unwrap<Int> j))))))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_sign_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> ($w_modL<$Int> i j) j)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_mod|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (<= ($w_abs<Int> ($w_mod<$Int> i j)) ($w_abs<Int> i)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_decrease|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (= ($unwrap<Int> i) (+ ($unwrap<Int> k) ($unwrap<Int> l))))
    (and
      (=>
        (or
          (and
            (>= ($unwrap<Int> i) 0)
            (>=
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0))
          (and
            (<= ($unwrap<Int> i) 0)
            (<=
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0)))
        (or
          (and
            (<=
              ($w_abs<Int> j)
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                (* 2 ($w_abs<Int> j)))
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (-
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))
          (or
            (and
              (<
                (- 0 ($w_abs<Int> j))
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j))))
              (and
                (<
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))
                (=
                  ($w_mod<$Int> i j)
                  ($wrap<$Int> (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))))))
            (and
              (<
                (* (- 0 2) ($w_abs<Int> j))
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j))))
              (and
                (<=
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  (- 0 ($w_abs<Int> j)))
                (=
                  ($w_mod<$Int> i j)
                  ($wrap<$Int> (+
                    (+
                      ($unwrap<Int> ($w_modL<$Int> k j))
                      ($unwrap<Int> ($w_modL<$Int> l j)))
                    ($w_abs<Int> j)))))))))
      (=>
        (or
          (and
            (> ($unwrap<Int> i) 0)
            (<
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0))
          (and
            (< ($unwrap<Int> i) 0)
            (>
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0)))
        (or
          (and
            (<
              0
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                ($w_abs<Int> j))
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (-
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))
          (and
            (<
              (- 0 ($w_abs<Int> j))
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                0)
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (+
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))))))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> k j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_add|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> ($w_mul<$Int> i j) j) ($wrap<$Int> 0)))
  :pattern (($w_mod<$Int> ($w_mul<$Int> i j) j))
  :qid |prog.$w_mod_mul_basic|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (and
      (=
        ($w_mod<$Int> ($w_mulI<$Int> i k) j)
        ($w_modL<$Int> ($w_mulL<$Int> ($w_modL<$Int> i j) k) j))
      (and
        (=
          ($w_mod<$Int> ($w_mulI<$Int> i k) j)
          ($w_modL<$Int> ($w_mulL<$Int> i ($w_modL<$Int> k j)) j))
        (=
          ($w_mod<$Int> ($w_mulI<$Int> i k) j)
          ($w_modL<$Int> ($w_mulL<$Int> ($w_modL<$Int> i j) ($w_modL<$Int> k j)) j)))))
  :pattern (($w_mod<$Int> ($w_mulI<$Int> i k) j))
  :qid |prog.$w_mod_mul_mod_noop|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (=
      ($w_mod<$Int> i j)
      ($w_modL<$Int> ($wrap<$Int> (+
        ($unwrap<Int> ($w_mulL<$Int> k j))
        ($unwrap<Int> i))) j)))
  :pattern (($w_mod<$Int> i j) ($w_mulI<$Int> k j))
  :qid |prog.$w_mod_mul_vanish|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (=
      ($w_div<$Int> i j)
      (ite
        (>= ($unwrap<Int> i) 0)
        ($w_div_down<$Int> i j)
        ($wrap<$Int> (-
          0
          ($unwrap<Int> ($w_div_down<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) j)))))))
  :pattern (($w_div<$Int> i j))
  :qid |prog.$w_div_div_down|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_div_down<$Int> i j)
    (ite
      (>= ($unwrap<Int> j) 0)
      ($w_div_nat<$Int> i j)
      ($wrap<$Int> (-
        0
        ($unwrap<Int> ($w_div_nat<$Int> i ($wrap<$Int> (- 0 ($unwrap<Int> j)))))))))
  :pattern (($w_div_down<$Int> i j))
  :qid |prog.$w_div_down_div_nat|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_div_nat<$Int> i j) ($w_div_natL<$Int> i j))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> j) 1) (= ($unwrap<Int> i) 0))
    (= ($w_div_nat<$Int> i j) i))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_neutral|)))
(assert (forall ((i $Int)) (!
  (=> (> ($unwrap<Int> i) 0) (= ($w_div_nat<$Int> i i) ($wrap<$Int> 1)))
  :pattern (($w_div_nat<$Int> i i))
  :qid |prog.$w_div_nat_self|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (>= ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
    (=
      (< ($unwrap<Int> i) ($unwrap<Int> j))
      (= ($w_div_nat<$Int> i j) ($wrap<$Int> 0))))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_small|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and
          (> ($unwrap<Int> j) 0)
          (and (>= ($unwrap<Int> k) 0) (>= ($unwrap<Int> l) 0))))
      (= ($unwrap<Int> i) (+ ($unwrap<Int> k) ($unwrap<Int> l))))
    (or
      (and
        (<=
          0
          (+ ($unwrap<Int> ($w_mod<$Int> k j)) ($unwrap<Int> ($w_mod<$Int> l j))))
        (and
          (<
            (+
              ($unwrap<Int> ($w_mod<$Int> k j))
              ($unwrap<Int> ($w_mod<$Int> l j)))
            ($unwrap<Int> j))
          (=
            ($w_div_nat<$Int> i j)
            ($wrap<$Int> (+
              ($unwrap<Int> ($w_div_natL<$Int> k j))
              ($unwrap<Int> ($w_div_natL<$Int> l j)))))))
      (and
        (<=
          ($unwrap<Int> j)
          (+ ($unwrap<Int> ($w_mod<$Int> k j)) ($unwrap<Int> ($w_mod<$Int> l j))))
        (and
          (<
            (+
              ($unwrap<Int> ($w_mod<$Int> k j))
              ($unwrap<Int> ($w_mod<$Int> l j)))
            (* 2 ($unwrap<Int> j)))
          (=
            ($w_div_nat<$Int> i j)
            ($wrap<$Int> (+
              (+
                ($unwrap<Int> ($w_div_natL<$Int> k j))
                ($unwrap<Int> ($w_div_natL<$Int> l j)))
              1)))))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> k j) ($w_div_nat<$Int> l j))
  :qid |prog.$w_div_nat_dividend_add|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and (> ($unwrap<Int> j) 0) (>= ($unwrap<Int> k) 0)))
      (<= ($unwrap<Int> i) ($unwrap<Int> k)))
    (<=
      ($unwrap<Int> ($w_div_nat<$Int> i j))
      ($unwrap<Int> ($w_div_natL<$Int> k j))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> k j))
  :qid |prog.$w_div_nat_ordered_by_dividend|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and (> ($unwrap<Int> j) 0) (> ($unwrap<Int> k) 0)))
      (<= ($unwrap<Int> j) ($unwrap<Int> k)))
    (>=
      ($unwrap<Int> ($w_div_nat<$Int> i j))
      ($unwrap<Int> ($w_div_natL<$Int> i k))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> i k))
  :qid |prog.$w_div_nat_ordered_by_divisor|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (> ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 1))
    (< ($unwrap<Int> ($w_div_nat<$Int> i j)) ($unwrap<Int> i)))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_decrease|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (>= ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
    (<= ($unwrap<Int> ($w_div_nat<$Int> i j)) ($unwrap<Int> i)))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_nonincrease|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=> (not (= ($unwrap<Int> j) 0)) (= ($w_div<$Int> ($w_mulI<$Int> i j) j) i))
  :pattern (($w_div<$Int> ($w_mulI<$Int> i j) j))
  :qid |prog.$w_div_mul|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (or
      (=
        ($sign<Int> ($unwrap<Int> ($w_div<$Int> i j)))
        (* ($sign<Int> ($unwrap<Int> i)) ($sign<Int> ($unwrap<Int> j))))
      (= ($sign<Int> ($unwrap<Int> ($w_div<$Int> i j))) 0)))
  :pattern (($w_div<$Int> i j))
  :qid |prog.$w_div_sign|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (=
      ($unwrap<Int> i)
      (+
        ($unwrap<Int> ($w_mulI<$Int> j ($w_div<$Int> i j)))
        ($unwrap<Int> ($w_mod<$Int> i j)))))
  :pattern (($w_div<$Int> i j) ($w_mod<$Int> i j))
  :qid |prog.$w_div_mod_mul|)))
(assert (forall (($v Int) ($k Int)) (!
  (= ($map_get<Int> ($map_init<$Map<Int~_Int>> $v) $k) $v)
  :pattern (($map_get<Int> ($map_init<$Map<Int~_Int>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_Int>) ($n $Map<Int~_Int>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<Int> $m $k) ($map_get<Int> $n $k))
        :pattern (($map_get<Int> $m $k) ($map_get<Int> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_Int>) ($k Int) ($v Int) ($kk Int)) (!
  (=
    ($map_get<Int> ($map_set<$Map<Int~_Int>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<Int> $m $kk)))
  :pattern (($map_get<Int> ($map_set<$Map<Int~_Int>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (and
  (= ($sign<Int> 0) 0)
  (forall (($a Int)) (!
    (and
      (=> (> $a 0) (= ($sign<Int> $a) 1))
      (=> (< $a 0) (= ($sign<Int> $a) (- 0 1))))
    :pattern (($sign<Int> $a))
    ))))
(assert (forall (($a Int) ($b Int) ($r Int)) (!
  (=
    ($div<Int> $a $b $r)
    (+ (div $a $b) (ite (or (>= $a 0) (= (mod $a $b) 0)) 0 ($sign<Int> $b))))
  :pattern (($div<Int> $a $b $r))
  :qid |prog.$div_ax|)))
(assert (forall (($a Int) ($b Int) ($r Int)) (!
  (= ($mod<Int> $a $b $r) (- $a (* ($div<Int> $a $b $r) $b)))
  :pattern (($mod<Int> $a $b $r))
  :qid |prog.$mod_ax|)))
(assert (forall (($a Int)) (!
  (=> (not (= $a 0)) (= ($pow<Int> 0 $a) 0))
  :pattern (($pow<Int> 0 $a))
  :qid |prog.$pow0N_ax|)))
(assert (forall (($a Int)) (!
  (=> (not (= $a 0)) (= ($pow<Int> $a 0) 1))
  :pattern (($pow<Int> $a 0))
  :qid |prog.$powN0_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (=> (>= $a 0) (>= ($pow<Int> $a $b) 0))
  :pattern (($pow<Int> $a $b))
  :qid |prog.$pow_non_negative_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (=> (and (> $a 0) (>= $b 0)) (> ($pow<Int> $a $b) 0))
  :pattern (($pow<Int> $a $b))
  :qid |prog.$pow_non_negative_and_non_null_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (=>
    (> $s 0)
    (= ($floor<Int> $a $s) ($div<Int> (ite (< $a 0) (- $a (- $s 1)) $a) $s 0)))
  :pattern (($floor<Int> $a $s))
  :qid |prog.$floor_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (=>
    (> $s 0)
    (= ($ceil<Int> $a $s) ($div<Int> (ite (< $a 0) $a (- (+ $a $s) 1)) $s 0)))
  :pattern (($ceil<Int> $a $s))
  :qid |prog.$ceil_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (>= ($shift<Int> $a $s) 0)
  :pattern (($shift<Int> $a $s))
  :qid |prog.$shift_ax|)))
(assert (forall (($a Int)) (!
  (>= ($bitwise_not<Int> $a) 0)
  :pattern (($bitwise_not<Int> $a))
  :qid |prog.$bitwise_not_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_and<Int> $a $b) 0)
  :pattern (($bitwise_and<Int> $a $b))
  :qid |prog.$bitwise_and_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_or<Int> $a $b) 0)
  :pattern (($bitwise_or<Int> $a $b))
  :qid |prog.$bitwise_or_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_xor<Int> $a $b) 0)
  :pattern (($bitwise_xor<Int> $a $b))
  :qid |prog.$bitwise_xor_ax|)))
(assert (not (= (as $self_address<Int>  Int) 0)))
(assert (forall (($s $Struct) ($m Int) ($t $Struct)) (!
  (=
    ($struct_get<$Struct> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Struct)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($f Int) ($t Int)) (!
  (= (Seq_length ($range<Seq<Int>> $f $t)) (- $t $f))
  :pattern ((Seq_length ($range<Seq<Int>> $f $t)))
  :qid |prog.$range_len_ax|)))
(assert (forall (($f Int) ($t Int) ($i Int)) (!
  (=>
    (and (<= 0 $i) (< $i (Seq_length ($range<Seq<Int>> $f $t))))
    (= (Seq_index ($range<Seq<Int>> $f $t) $i) (+ $f $i)))
  :pattern ((Seq_index ($range<Seq<Int>> $f $t) $i))
  :qid |prog.$range_lookup_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (=>
    (<= (Seq_length $bb) 32)
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        ($bytes32_to_signed_int<Int> $bb))
      (<=
        ($bytes32_to_signed_int<Int> $bb)
        57896044618658097711785492504343953926634992332820282019728792003956564819967)))
  :pattern (($bytes32_to_signed_int<Int> $bb))
  :qid |prog.$bytes32_to_signed_int_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (=>
    (<= (Seq_length $bb) 32)
    (and
      (<= 0 ($bytes32_to_unsigned_int<Int> $bb))
      (<=
        ($bytes32_to_unsigned_int<Int> $bb)
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  :pattern (($bytes32_to_unsigned_int<Int> $bb))
  :qid |prog.$bytes32_to_unsigned_int_ax|)))
(assert (forall (($i Int)) (!
  (=>
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        $i)
      (<=
        $i
        57896044618658097711785492504343953926634992332820282019728792003956564819967))
    (= (Seq_length ($signed_int_to_bytes32<Seq<Int>> $i)) 32))
  :pattern (($signed_int_to_bytes32<Seq<Int>> $i))
  :qid |prog.$signed_int_to_bytes32_ax|)))
(assert (forall (($i Int)) (!
  (=>
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        $i)
      (<=
        $i
        57896044618658097711785492504343953926634992332820282019728792003956564819967))
    (= (Seq_length ($unsigned_int_to_bytes32<Seq<Int>> $i)) 32))
  :pattern (($unsigned_int_to_bytes32<Seq<Int>> $i))
  :qid |prog.$unsigned_int_to_bytes32_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (= (Seq_length ($pad32<Seq<Int>> $bb)) 32)
  :pattern (($pad32<Seq<Int>> $bb))
  :qid |prog.$pad32_len_ax|)))
(assert (and
  (forall (($bb Seq<Int>) ($i Int)) (!
    (let ((diff (- 32 (Seq_length $bb)))) true)
    :pattern ((Seq_index ($pad32<Seq<Int>> $bb) $i))
    :qid |prog.$pad32_vals_ax|))
  (forall (($bb Seq<Int>) ($i Int)) (!
    (let ((diff (- 32 (Seq_length $bb)))) (=>
      (and (<= 0 $i) (< $i (Seq_length ($pad32<Seq<Int>> $bb))))
      (=
        (Seq_index ($pad32<Seq<Int>> $bb) $i)
        (ite (< $i diff) 0 (Seq_index $bb (- $i diff))))))
    :pattern ((Seq_index ($pad32<Seq<Int>> $bb) $i))
    :qid |prog.$pad32_vals_ax|))))
(assert (forall (($arg_0 Int) ($arg_1 Int) ($arg_2 Int) ($arg_3 Bool) ($arg_4 Int) ($arg_5 Int) ($arg_6 Bool) ($arg_7 $Map<Int~_Int>) ($arg_8 $Map<Int~_Int>) ($arg_9 Bool)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) (- 0 1)))
      9122519725869122497593506884710)
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 0))
        $arg_0)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 1))
          $arg_1)
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 2))
            $arg_2)
          (and
            (=
              ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 3))
              $arg_3)
            (and
              (=
                ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 4))
                $arg_4)
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 5))
                  $arg_5)
                (and
                  (=
                    ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 6))
                    $arg_6)
                  (and
                    (=
                      ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 7))
                      $arg_7)
                    (and
                      (=
                        ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 8))
                        $arg_8)
                      (=
                        ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 9))
                        $arg_9)))))))))))
  :pattern ((s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9))
  :qid |prog.s$struct$self$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$struct$self$eq<Bool> $l $r) (= $l $r))
    (=
      (s$struct$self$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> $l 0))
            ($struct_get<Int> ($struct_loc<Int> $r 0)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> $l 1))
              ($struct_get<Int> ($struct_loc<Int> $r 1)))
            (and
              (=
                ($struct_get<Int> ($struct_loc<Int> $l 2))
                ($struct_get<Int> ($struct_loc<Int> $r 2)))
              (and
                (=
                  ($struct_get<Bool> ($struct_loc<Int> $l 3))
                  ($struct_get<Bool> ($struct_loc<Int> $r 3)))
                (and
                  (=
                    ($struct_get<Int> ($struct_loc<Int> $l 4))
                    ($struct_get<Int> ($struct_loc<Int> $r 4)))
                  (and
                    (=
                      ($struct_get<Int> ($struct_loc<Int> $l 5))
                      ($struct_get<Int> ($struct_loc<Int> $r 5)))
                    (and
                      (=
                        ($struct_get<Bool> ($struct_loc<Int> $l 6))
                        ($struct_get<Bool> ($struct_loc<Int> $r 6)))
                      (and
                        ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 7)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 7)))
                        (and
                          ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 8)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 8)))
                          (=
                            ($struct_get<Bool> ($struct_loc<Int> $l 9))
                            ($struct_get<Bool> ($struct_loc<Int> $r 9)))))))))))))))
  :pattern ((s$struct$self$eq<Bool> $l $r))
  :qid |prog.s$struct$self$eq$ax|)))
(assert (forall (($s $Struct) ($m Int) ($t $Map<Int~_Int>)) (!
  (=
    ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Map<Int~_Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Seq<Int>)) (!
  (Seq_equal
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Seq<Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($arg_0 $Struct)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$resource$$creator$init<$Struct> $arg_0) (- 0 1)))
      2567760667165796382711201132846784524754120562)
    (=
      ($struct_get<$Struct> ($struct_loc<Int> (s$resource$$creator$init<$Struct> $arg_0) 0))
      $arg_0))
  :pattern ((s$resource$$creator$init<$Struct> $arg_0))
  :qid |prog.s$resource$$creator$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$resource$$creator$eq<Bool> $l $r) (= $l $r))
    (=
      (s$resource$$creator$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (=
          ($struct_get<$Struct> ($struct_loc<Int> $l 0))
          ($struct_get<$Struct> ($struct_loc<Int> $r 0))))))
  :pattern ((s$resource$$creator$eq<Bool> $l $r))
  :qid |prog.s$resource$$creator$eq$ax|)))
(assert (= ($map_sum<Int> ($map_init<$Map<Int~_Int>> 0)) 0))
(assert (forall (($m $Map<Int~_Int>) ($k Int) ($v Int)) (!
  (=
    ($map_sum<Int> ($map_set<$Map<Int~_Int>> $m $k $v))
    (+ (- ($map_sum<Int> $m) ($map_get<Int> $m $k)) $v))
  :pattern (($map_sum<Int> ($map_set<$Map<Int~_Int>> $m $k $v)))
  :qid |prog.$map_sum_set_ax|)))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun letvar@7@00 ($Snap Int Int) Bool)
(declare-fun letvar@8@00 ($Snap Int Int) Bool)
(declare-fun letvar@9@00 ($Snap Int Int) Int)
(declare-fun letvar@10@00 ($Snap Int Int) Int)
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  (= ($pure$success_get%limited s@$ x@0@00) ($pure$success_get s@$ x@0@00))
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1481|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  ($pure$success_get%stateless x@0@00)
  :pattern (($pure$success_get%limited s@$ x@0@00))
  :qid |quant-u-1482|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  (=>
    ($pure$success_get%precondition s@$ x@0@00)
    (=
      ($pure$success_get s@$ x@0@00)
      ($struct_get<Bool> ($struct_loc<Int> x@0@00 0))))
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1487|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  true
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1488|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  (= ($pure$return_get%limited s@$ x@2@00) ($pure$return_get s@$ x@2@00))
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1483|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  ($pure$return_get%stateless x@2@00)
  :pattern (($pure$return_get%limited s@$ x@2@00))
  :qid |quant-u-1484|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  (=>
    ($pure$return_get%precondition s@$ x@2@00)
    (= ($pure$return_get s@$ x@2@00) ($struct_loc<Int> x@2@00 1)))
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1489|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  true
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1490|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (= ($range_sum%limited s@$ $x@4@00 $y@5@00) ($range_sum s@$ $x@4@00 $y@5@00))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1485|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  ($range_sum%stateless $x@4@00 $y@5@00)
  :pattern (($range_sum%limited s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1486|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (=>
    ($range_sum%precondition s@$ $x@4@00 $y@5@00)
    (=
      ($range_sum s@$ $x@4@00 $y@5@00)
      (let (($x_ge_0 (>= $x@4@00 0))) (let (($y_ge_0 (>= $y@5@00 0))) (let (($x_exclusive (ite
        $x_ge_0
        (div (* (- $x@4@00 1) $x@4@00) 2)
        (div (* (- (- 0 $x@4@00) 1) (- 0 $x@4@00)) 2)))) (let (($y_exclusive (ite
        $y_ge_0
        (div (* (- $y@5@00 1) $y@5@00) 2)
        (div (* (- (- 0 $y@5@00) 1) (- 0 $y@5@00)) 2)))) (ite
        (and $x_ge_0 $y_ge_0)
        (- $y_exclusive $x_exclusive)
        (ite
          (and (not $x_ge_0) $y_ge_0)
          (+ (- $y_exclusive $x_exclusive) $x@4@00)
          (+ (- (- $y_exclusive $y@5@00) $x_exclusive) $x@4@00)))))))))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1491|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (=>
    ($range_sum%precondition s@$ $x@4@00 $y@5@00)
    (let (($x_ge_0 (>= $x@4@00 0))) (let (($y_ge_0 (>= $y@5@00 0))) (let (($x_exclusive (ite
      $x_ge_0
      (div (* (- $x@4@00 1) $x@4@00) 2)
      (div (* (- (- 0 $x@4@00) 1) (- 0 $x@4@00)) 2)))) (let (($y_exclusive (ite
      $y_ge_0
      (div (* (- $y@5@00 1) $y@5@00) 2)
      (div (* (- (- 0 $y@5@00) 1) (- 0 $y@5@00)) 2)))) true)))))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1492|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- $transitivity_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var $self$0: $Struct
(declare-const $self$0@0@01 $Struct)
; [exec]
; var $$contracts$0: $Map[Int, $Struct]
(declare-const $$contracts$0@1@01 $Map<Int~_$Struct>)
; [exec]
; var $self$1: $Struct
(declare-const $self$1@2@01 $Struct)
; [exec]
; var $$contracts$1: $Map[Int, $Struct]
(declare-const $$contracts$1@3@01 $Map<Int~_$Struct>)
; [exec]
; var $self$2: $Struct
(declare-const $self$2@4@01 $Struct)
; [exec]
; var $$contracts$2: $Map[Int, $Struct]
(declare-const $$contracts$2@5@01 $Map<Int~_$Struct>)
; [exec]
; var block: $Struct
(declare-const block@6@01 $Struct)
; [exec]
; var $post: Bool
(declare-const $post@7@01 Bool)
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 0)): Int) &&
;   ($struct_get($struct_loc($self$0, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@8@01 $Snap)
(assert (= $t@8@01 ($Snap.combine ($Snap.first $t@8@01) ($Snap.second $t@8@01))))
(assert (= ($Snap.first $t@8@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
(assert (= ($Snap.second $t@8@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 1)): Int) &&
;   ($struct_get($struct_loc($self$0, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@9@01 $Snap)
(assert (= $t@9@01 ($Snap.combine ($Snap.first $t@9@01) ($Snap.second $t@9@01))))
(assert (= ($Snap.first $t@9@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
(assert (= ($Snap.second $t@9@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 2)): Int) &&
;   ($struct_get($struct_loc($self$0, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@10@01 $Snap)
(assert (= $t@10@01 ($Snap.combine ($Snap.first $t@10@01) ($Snap.second $t@10@01))))
(assert (= ($Snap.first $t@10@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2))))
(assert (= ($Snap.second $t@10@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 4)): Int) &&
;   ($struct_get($struct_loc($self$0, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@11@01 $Snap)
(assert (= $t@11@01 ($Snap.combine ($Snap.first $t@11@01) ($Snap.second $t@11@01))))
(assert (= ($Snap.first $t@11@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4))))
(assert (= ($Snap.second $t@11@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 5)): Int) &&
;   ($struct_get($struct_loc($self$0, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@12@01 $Snap)
(assert (= $t@12@01 ($Snap.combine ($Snap.first $t@12@01) ($Snap.second $t@12@01))))
(assert (= ($Snap.first $t@12@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 5))))
(assert (= ($Snap.second $t@12@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@13@01 $Snap)
(assert (= $t@13@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@14@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(push) ; 4
; [then-branch: 0 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 7)), $q0@14@01)) | live]
; [else-branch: 0 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 7)), $q0@14@01) | live]
(push) ; 5
; [then-branch: 0 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 7)), $q0@14@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q0@14@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 0 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 7)), $q0@14@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q0@14@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q0@14@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q0@14@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@14@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q0@14@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q0@14@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q0@14@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@627@11@627@354-aux|)))
(assert (forall (($q0@14@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q0@14@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q0@14@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q0@14@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@627@11@627@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int))
(declare-const $t@15@01 $Snap)
(assert (= $t@15@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int))
(declare-const $q0@16@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@16@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q0@16@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q0@16@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@628@11@628@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@17@01 $Snap)
(assert (= $t@17@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@18@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(push) ; 4
; [then-branch: 1 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q1@18@01)) | live]
; [else-branch: 1 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q1@18@01) | live]
(push) ; 5
; [then-branch: 1 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q1@18@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q1@18@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 1 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q1@18@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q1@18@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q1@18@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q1@18@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@18@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q1@18@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q1@18@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q1@18@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@629@11@629@354-aux|)))
(assert (forall (($q1@18@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q1@18@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q1@18@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q1@18@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@629@11@629@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $t@19@01 $Snap)
(assert (= $t@19@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $q1@20@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@20@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q1@20@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q1@20@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@630@11@630@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@21@01 $Snap)
(assert (= $t@21@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$0, -1)): Int)
; [eval] $struct_loc($self$0, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 0)): Int) &&
;   ($struct_get($struct_loc($self$1, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@22@01 $Snap)
(assert (= $t@22@01 ($Snap.combine ($Snap.first $t@22@01) ($Snap.second $t@22@01))))
(assert (= ($Snap.first $t@22@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
(assert (= ($Snap.second $t@22@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 1)): Int) &&
;   ($struct_get($struct_loc($self$1, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@23@01 $Snap)
(assert (= $t@23@01 ($Snap.combine ($Snap.first $t@23@01) ($Snap.second $t@23@01))))
(assert (= ($Snap.first $t@23@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
(assert (= ($Snap.second $t@23@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 2)): Int) &&
;   ($struct_get($struct_loc($self$1, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@24@01 $Snap)
(assert (= $t@24@01 ($Snap.combine ($Snap.first $t@24@01) ($Snap.second $t@24@01))))
(assert (= ($Snap.first $t@24@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2))))
(assert (= ($Snap.second $t@24@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 4)): Int) &&
;   ($struct_get($struct_loc($self$1, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@25@01 $Snap)
(assert (= $t@25@01 ($Snap.combine ($Snap.first $t@25@01) ($Snap.second $t@25@01))))
(assert (= ($Snap.first $t@25@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))))
(assert (= ($Snap.second $t@25@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 5)): Int) &&
;   ($struct_get($struct_loc($self$1, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@26@01 $Snap)
(assert (= $t@26@01 ($Snap.combine ($Snap.first $t@26@01) ($Snap.second $t@26@01))))
(assert (= ($Snap.first $t@26@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 5))))
(assert (= ($Snap.second $t@26@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@27@01 $Snap)
(assert (= $t@27@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@28@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(push) ; 4
; [then-branch: 2 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 7)), $q0@28@01)) | live]
; [else-branch: 2 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 7)), $q0@28@01) | live]
(push) ; 5
; [then-branch: 2 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 7)), $q0@28@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q0@28@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 2 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 7)), $q0@28@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q0@28@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q0@28@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q0@28@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@28@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q0@28@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q0@28@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q0@28@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@637@11@637@354-aux|)))
(assert (forall (($q0@28@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q0@28@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q0@28@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q0@28@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@637@11@637@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int))
(declare-const $t@29@01 $Snap)
(assert (= $t@29@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int))
(declare-const $q0@30@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@30@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q0@30@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q0@30@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@638@11@638@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@31@01 $Snap)
(assert (= $t@31@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@32@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(push) ; 4
; [then-branch: 3 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q1@32@01)) | live]
; [else-branch: 3 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q1@32@01) | live]
(push) ; 5
; [then-branch: 3 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q1@32@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q1@32@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 3 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q1@32@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q1@32@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q1@32@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q1@32@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@32@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q1@32@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q1@32@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q1@32@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@639@11@639@354-aux|)))
(assert (forall (($q1@32@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q1@32@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q1@32@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q1@32@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@639@11@639@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $t@33@01 $Snap)
(assert (= $t@33@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $q1@34@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@34@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q1@34@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q1@34@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@640@11@640@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@35@01 $Snap)
(assert (= $t@35@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$1, -1)): Int)
; [eval] $struct_loc($self$1, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 0)): Int) &&
;   ($struct_get($struct_loc($self$2, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@36@01 $Snap)
(assert (= $t@36@01 ($Snap.combine ($Snap.first $t@36@01) ($Snap.second $t@36@01))))
(assert (= ($Snap.first $t@36@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
(assert (= ($Snap.second $t@36@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$2, 1)): Int) &&
;   ($struct_get($struct_loc($self$2, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@37@01 $Snap)
(assert (= $t@37@01 ($Snap.combine ($Snap.first $t@37@01) ($Snap.second $t@37@01))))
(assert (= ($Snap.first $t@37@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
(assert (= ($Snap.second $t@37@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$2, 2)): Int) &&
;   ($struct_get($struct_loc($self$2, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@38@01 $Snap)
(assert (= $t@38@01 ($Snap.combine ($Snap.first $t@38@01) ($Snap.second $t@38@01))))
(assert (= ($Snap.first $t@38@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2))))
(assert (= ($Snap.second $t@38@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 4)): Int) &&
;   ($struct_get($struct_loc($self$2, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@39@01 $Snap)
(assert (= $t@39@01 ($Snap.combine ($Snap.first $t@39@01) ($Snap.second $t@39@01))))
(assert (= ($Snap.first $t@39@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))))
(assert (= ($Snap.second $t@39@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$2, 5)): Int) &&
;   ($struct_get($struct_loc($self$2, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@40@01 $Snap)
(assert (= $t@40@01 ($Snap.combine ($Snap.first $t@40@01) ($Snap.second $t@40@01))))
(assert (= ($Snap.first $t@40@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] $struct_loc($self$2, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 5))))
(assert (= ($Snap.second $t@40@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] $struct_loc($self$2, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@41@01 $Snap)
(assert (= $t@41@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@42@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 7)
(push) ; 4
; [then-branch: 4 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 7)), $q0@42@01)) | live]
; [else-branch: 4 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 7)), $q0@42@01) | live]
(push) ; 5
; [then-branch: 4 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 7)), $q0@42@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q0@42@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 4 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 7)), $q0@42@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q0@42@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q0@42@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q0@42@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@42@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q0@42@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q0@42@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q0@42@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@647@11@647@354-aux|)))
(assert (forall (($q0@42@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q0@42@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q0@42@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q0@42@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@647@11@647@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])): Int))
(declare-const $t@43@01 $Snap)
(assert (= $t@43@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])): Int))
(declare-const $q0@44@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 7)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@44@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q0@44@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q0@44@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@648@11@648@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@45@01 $Snap)
(assert (= $t@45@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@46@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(push) ; 4
; [then-branch: 5 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q1@46@01)) | live]
; [else-branch: 5 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q1@46@01) | live]
(push) ; 5
; [then-branch: 5 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q1@46@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q1@46@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 5 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q1@46@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q1@46@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q1@46@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q1@46@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@46@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q1@46@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q1@46@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q1@46@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@649@11@649@354-aux|)))
(assert (forall (($q1@46@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q1@46@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q1@46@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q1@46@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@649@11@649@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int))
(declare-const $t@47@01 $Snap)
(assert (= $t@47@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int))
(declare-const $q1@48@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@48@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q1@48@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q1@48@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@650@11@650@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@49@01 $Snap)
(assert (= $t@49@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$2, -1)): Int)
; [eval] $struct_loc($self$2, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@50@01 $Snap)
(assert (= $t@50@01 ($Snap.combine ($Snap.first $t@50@01) ($Snap.second $t@50@01))))
(assert (= ($Snap.first $t@50@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 0))))
(assert (= ($Snap.second $t@50@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@51@01 $Snap)
(assert (= $t@51@01 ($Snap.combine ($Snap.first $t@51@01) ($Snap.second $t@51@01))))
(assert (= ($Snap.first $t@51@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 1))))
(assert (= ($Snap.second $t@51@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@52@01 $Snap)
(assert (= $t@52@01 ($Snap.combine ($Snap.first $t@52@01) ($Snap.second $t@52@01))))
(assert (= ($Snap.first $t@52@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 2))))
(assert (= ($Snap.second $t@52@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@53@01 $Snap)
(assert (= $t@53@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@6@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@54@01 $Snap)
(assert (= $t@54@01 ($Snap.combine ($Snap.first $t@54@01) ($Snap.second $t@54@01))))
(assert (= ($Snap.first $t@54@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 4))))
(assert (= ($Snap.second $t@54@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@55@01 $Snap)
(assert (= $t@55@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@56@01 $Snap)
(assert (= $t@56@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@57@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 0)): Int) ==
;   ($struct_get($struct_loc($self$0, 0)): Int)
(declare-const $t@58@01 $Snap)
(assert (= $t@58@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) == ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 1)): Int) ==
;   ($struct_get($struct_loc($self$0, 1)): Int)
(declare-const $t@59@01 $Snap)
(assert (= $t@59@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$0, 3)): Bool)
(declare-const $t@60@01 $Snap)
(assert (= $t@60@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 3)): Bool) ==> ($struct_get($struct_loc($self$0, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$0, 3)): Bool)
; [eval] $struct_loc($self$0, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3)) | live]
; [else-branch: 6 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 6 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))
; [eval] ($struct_get($struct_loc($self$0, 3)): Bool)
; [eval] $struct_loc($self$0, 3)
(pop) ; 4
(push) ; 4
; [else-branch: 6 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@61@01 $Snap)
(assert (= $t@61@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc($self$0, 3)): Bool)
; [eval] $struct_loc($self$0, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3)) | live]
; [else-branch: 7 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 7 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@62@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 8 | !(0 <= q$a@62@01) | live]
; [else-branch: 8 | 0 <= q$a@62@01 | live]
(push) ; 7
; [then-branch: 8 | !(0 <= q$a@62@01)]
(assert (not (<= 0 q$a@62@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 8 | 0 <= q$a@62@01]
(assert (<= 0 q$a@62@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@62@01) (not (<= 0 q$a@62@01))))
(push) ; 6
; [then-branch: 9 | 0 <= q$a@62@01 && q$a@62@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 9 | !(0 <= q$a@62@01 && q$a@62@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 9 | 0 <= q$a@62@01 && q$a@62@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@62@01)
  (<= q$a@62@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 7
(push) ; 7
; [else-branch: 9 | !(0 <= q$a@62@01 && q$a@62@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@62@01)
    (<= q$a@62@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@62@01)
      (<= q$a@62@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@62@01)
    (<= q$a@62@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@62@01 Int)) (!
  (and
    (or (<= 0 q$a@62@01) (not (<= 0 q$a@62@01)))
    (or
      (not
        (and
          (<= 0 q$a@62@01)
          (<= q$a@62@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@62@01)
        (<= q$a@62@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) q$a@62@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@662@60@662@389-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 7 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))
    (forall ((q$a@62@01 Int)) (!
      (and
        (or (<= 0 q$a@62@01) (not (<= 0 q$a@62@01)))
        (or
          (not
            (and
              (<= 0 q$a@62@01)
              (<= q$a@62@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@62@01)
            (<= q$a@62@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) q$a@62@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@662@60@662@389-aux|)))))
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))
  (forall ((q$a@62@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) q$a@62@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@662@60@662@389|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@63@01 $Snap)
(assert (= $t@63@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@64@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@64@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $a@64@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $a@64@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $a@64@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@663@11@663@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 0)): Int) ==
;   ($struct_get($struct_loc($self$0, 0)): Int)
(declare-const $t@65@01 $Snap)
(assert (= $t@65@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) == ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 1)): Int) ==
;   ($struct_get($struct_loc($self$0, 1)): Int)
(declare-const $t@66@01 $Snap)
(assert (= $t@66@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$1, 3)): Bool)
(declare-const $t@67@01 $Snap)
(assert (= $t@67@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 3)): Bool) ==> ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$0, 3)): Bool)
; [eval] $struct_loc($self$0, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 10 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3)) | live]
; [else-branch: 10 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 10 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 4
(push) ; 4
; [else-branch: 10 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@68@01 $Snap)
(assert (= $t@68@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 11 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)) | live]
; [else-branch: 11 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 11 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@69@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 12 | !(0 <= q$a@69@01) | live]
; [else-branch: 12 | 0 <= q$a@69@01 | live]
(push) ; 7
; [then-branch: 12 | !(0 <= q$a@69@01)]
(assert (not (<= 0 q$a@69@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 12 | 0 <= q$a@69@01]
(assert (<= 0 q$a@69@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@69@01) (not (<= 0 q$a@69@01))))
(push) ; 6
; [then-branch: 13 | 0 <= q$a@69@01 && q$a@69@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 13 | !(0 <= q$a@69@01 && q$a@69@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 13 | 0 <= q$a@69@01 && q$a@69@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@69@01)
  (<= q$a@69@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 7
(push) ; 7
; [else-branch: 13 | !(0 <= q$a@69@01 && q$a@69@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@69@01)
    (<= q$a@69@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@69@01)
      (<= q$a@69@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@69@01)
    (<= q$a@69@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@69@01 Int)) (!
  (and
    (or (<= 0 q$a@69@01) (not (<= 0 q$a@69@01)))
    (or
      (not
        (and
          (<= 0 q$a@69@01)
          (<= q$a@69@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@69@01)
        (<= q$a@69@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) q$a@69@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@667@60@667@389-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 11 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))
    (forall ((q$a@69@01 Int)) (!
      (and
        (or (<= 0 q$a@69@01) (not (<= 0 q$a@69@01)))
        (or
          (not
            (and
              (<= 0 q$a@69@01)
              (<= q$a@69@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@69@01)
            (<= q$a@69@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) q$a@69@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@667@60@667@389-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))
  (forall ((q$a@69@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) q$a@69@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@667@60@667@389|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@70@01 $Snap)
(assert (= $t@70@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@71@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 7)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@71@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $a@71@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $a@71@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $a@71@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@668@11@668@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 0)): Int) ==
;   ($struct_get($struct_loc($self$1, 0)): Int)
(declare-const $t@72@01 $Snap)
(assert (= $t@72@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int) == ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 1)): Int) ==
;   ($struct_get($struct_loc($self$1, 1)): Int)
(declare-const $t@73@01 $Snap)
(assert (= $t@73@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) == ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$2, 3)): Bool)
(declare-const $t@74@01 $Snap)
(assert (= $t@74@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool) ==> ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 14 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)) | live]
; [else-branch: 14 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 14 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 4
(push) ; 4
; [else-branch: 14 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@75@01 $Snap)
(assert (= $t@75@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 15 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 15 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 15 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@76@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 16 | !(0 <= q$a@76@01) | live]
; [else-branch: 16 | 0 <= q$a@76@01 | live]
(push) ; 7
; [then-branch: 16 | !(0 <= q$a@76@01)]
(assert (not (<= 0 q$a@76@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 16 | 0 <= q$a@76@01]
(assert (<= 0 q$a@76@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@76@01) (not (<= 0 q$a@76@01))))
(push) ; 6
; [then-branch: 17 | 0 <= q$a@76@01 && q$a@76@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 17 | !(0 <= q$a@76@01 && q$a@76@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 17 | 0 <= q$a@76@01 && q$a@76@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@76@01)
  (<= q$a@76@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(pop) ; 7
(push) ; 7
; [else-branch: 17 | !(0 <= q$a@76@01 && q$a@76@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@76@01)
    (<= q$a@76@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@76@01)
      (<= q$a@76@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@76@01)
    (<= q$a@76@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 7)
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@76@01 Int)) (!
  (and
    (or (<= 0 q$a@76@01) (not (<= 0 q$a@76@01)))
    (or
      (not
        (and
          (<= 0 q$a@76@01)
          (<= q$a@76@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@76@01)
        (<= q$a@76@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) q$a@76@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@672@60@672@389-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 15 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
    (forall ((q$a@76@01 Int)) (!
      (and
        (or (<= 0 q$a@76@01) (not (<= 0 q$a@76@01)))
        (or
          (not
            (and
              (<= 0 q$a@76@01)
              (<= q$a@76@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@76@01)
            (<= q$a@76@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) q$a@76@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@672@60@672@389-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@76@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) q$a@76@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@672@60@672@389|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert ($struct_get($struct_loc($self$2, 0)): Int) ==
;   ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int) == ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
; [exec]
; assert ($struct_get($struct_loc($self$2, 1)): Int) ==
;   ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(push) ; 3
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
; [exec]
; assert ($struct_get($struct_loc($self$0, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$0, 3)): Bool) ==> ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$0, 3)): Bool)
; [eval] $struct_loc($self$0, 3)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 18 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3)) | live]
; [else-branch: 18 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 18 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 4
(push) ; 4
; [else-branch: 18 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [exec]
; assert ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 19 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 19 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 19 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@77@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 20 | !(0 <= q$a@77@01) | live]
; [else-branch: 20 | 0 <= q$a@77@01 | live]
(push) ; 7
; [then-branch: 20 | !(0 <= q$a@77@01)]
(assert (not (<= 0 q$a@77@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 20 | 0 <= q$a@77@01]
(assert (<= 0 q$a@77@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@77@01) (not (<= 0 q$a@77@01))))
(push) ; 6
; [then-branch: 21 | 0 <= q$a@77@01 && q$a@77@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 21 | !(0 <= q$a@77@01 && q$a@77@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 21 | 0 <= q$a@77@01 && q$a@77@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@77@01)
  (<= q$a@77@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 7
(push) ; 7
; [else-branch: 21 | !(0 <= q$a@77@01 && q$a@77@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@77@01)
    (<= q$a@77@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@77@01)
      (<= q$a@77@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@77@01)
    (<= q$a@77@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 7)
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@77@01 Int)) (!
  (and
    (or (<= 0 q$a@77@01) (not (<= 0 q$a@77@01)))
    (or
      (not
        (and
          (<= 0 q$a@77@01)
          (<= q$a@77@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@77@01)
        (<= q$a@77@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) q$a@77@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@676@60@676@389-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 19 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
    (forall ((q$a@77@01 Int)) (!
      (and
        (or (<= 0 q$a@77@01) (not (<= 0 q$a@77@01)))
        (or
          (not
            (and
              (<= 0 q$a@77@01)
              (<= q$a@77@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@77@01)
            (<= q$a@77@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) q$a@77@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@676@60@676@389-aux|)))))
; Joined path conditions
(push) ; 3
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@77@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) q$a@77@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@676@60@676@389|)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@77@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) q$a@77@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@676@60@676@389|))))
(pop) ; 2
(pop) ; 1
; ---------- $reflexivity_check ----------
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var $self$0: $Struct
(declare-const $self$0@78@01 $Struct)
; [exec]
; var $$contracts$0: $Map[Int, $Struct]
(declare-const $$contracts$0@79@01 $Map<Int~_$Struct>)
; [exec]
; var $self$1: $Struct
(declare-const $self$1@80@01 $Struct)
; [exec]
; var $$contracts$1: $Map[Int, $Struct]
(declare-const $$contracts$1@81@01 $Map<Int~_$Struct>)
; [exec]
; var block: $Struct
(declare-const block@82@01 $Struct)
; [exec]
; var $post: Bool
(declare-const $post@83@01 Bool)
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 0)): Int) &&
;   ($struct_get($struct_loc($self$0, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@84@01 $Snap)
(assert (= $t@84@01 ($Snap.combine ($Snap.first $t@84@01) ($Snap.second $t@84@01))))
(assert (= ($Snap.first $t@84@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@78@01 0))))
(assert (= ($Snap.second $t@84@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@78@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 1)): Int) &&
;   ($struct_get($struct_loc($self$0, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@85@01 $Snap)
(assert (= $t@85@01 ($Snap.combine ($Snap.first $t@85@01) ($Snap.second $t@85@01))))
(assert (= ($Snap.first $t@85@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@78@01 1))))
(assert (= ($Snap.second $t@85@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@78@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 2)): Int) &&
;   ($struct_get($struct_loc($self$0, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@86@01 $Snap)
(assert (= $t@86@01 ($Snap.combine ($Snap.first $t@86@01) ($Snap.second $t@86@01))))
(assert (= ($Snap.first $t@86@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@78@01 2))))
(assert (= ($Snap.second $t@86@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@78@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 4)): Int) &&
;   ($struct_get($struct_loc($self$0, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@87@01 $Snap)
(assert (= $t@87@01 ($Snap.combine ($Snap.first $t@87@01) ($Snap.second $t@87@01))))
(assert (= ($Snap.first $t@87@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@78@01 4))))
(assert (= ($Snap.second $t@87@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@78@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 5)): Int) &&
;   ($struct_get($struct_loc($self$0, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@88@01 $Snap)
(assert (= $t@88@01 ($Snap.combine ($Snap.first $t@88@01) ($Snap.second $t@88@01))))
(assert (= ($Snap.first $t@88@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@78@01 5))))
(assert (= ($Snap.second $t@88@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@78@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@89@01 $Snap)
(assert (= $t@89@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@90@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(push) ; 4
; [then-branch: 22 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@78@01, 7)), $q0@90@01)) | live]
; [else-branch: 22 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@78@01, 7)), $q0@90@01) | live]
(push) ; 5
; [then-branch: 22 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@78@01, 7)), $q0@90@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 7)) $q0@90@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 22 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@78@01, 7)), $q0@90@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 7)) $q0@90@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 7)) $q0@90@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 7)) $q0@90@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@90@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 7)) $q0@90@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 7)) $q0@90@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 7)) $q0@90@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@692@11@692@354-aux|)))
(assert (forall (($q0@90@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 7)) $q0@90@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 7)) $q0@90@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 7)) $q0@90@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@692@11@692@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int))
(declare-const $t@91@01 $Snap)
(assert (= $t@91@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int))
(declare-const $q0@92@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@92@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 7)) $q0@92@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 7)) $q0@92@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@693@11@693@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@93@01 $Snap)
(assert (= $t@93@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@94@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(push) ; 4
; [then-branch: 23 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@78@01, 8)), $q1@94@01)) | live]
; [else-branch: 23 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@78@01, 8)), $q1@94@01) | live]
(push) ; 5
; [then-branch: 23 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@78@01, 8)), $q1@94@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 8)) $q1@94@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 23 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@78@01, 8)), $q1@94@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 8)) $q1@94@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 8)) $q1@94@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 8)) $q1@94@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@94@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 8)) $q1@94@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 8)) $q1@94@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 8)) $q1@94@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@694@11@694@354-aux|)))
(assert (forall (($q1@94@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 8)) $q1@94@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 8)) $q1@94@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 8)) $q1@94@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@694@11@694@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $t@95@01 $Snap)
(assert (= $t@95@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $q1@96@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@96@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 8)) $q1@96@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 8)) $q1@96@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@695@11@695@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@97@01 $Snap)
(assert (= $t@97@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$0, -1)): Int)
; [eval] $struct_loc($self$0, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@78@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 0)): Int) &&
;   ($struct_get($struct_loc($self$1, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@98@01 $Snap)
(assert (= $t@98@01 ($Snap.combine ($Snap.first $t@98@01) ($Snap.second $t@98@01))))
(assert (= ($Snap.first $t@98@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@80@01 0))))
(assert (= ($Snap.second $t@98@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@80@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 1)): Int) &&
;   ($struct_get($struct_loc($self$1, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@99@01 $Snap)
(assert (= $t@99@01 ($Snap.combine ($Snap.first $t@99@01) ($Snap.second $t@99@01))))
(assert (= ($Snap.first $t@99@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@80@01 1))))
(assert (= ($Snap.second $t@99@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@80@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 2)): Int) &&
;   ($struct_get($struct_loc($self$1, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@100@01 $Snap)
(assert (= $t@100@01 ($Snap.combine ($Snap.first $t@100@01) ($Snap.second $t@100@01))))
(assert (= ($Snap.first $t@100@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@80@01 2))))
(assert (= ($Snap.second $t@100@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@80@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 4)): Int) &&
;   ($struct_get($struct_loc($self$1, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@101@01 $Snap)
(assert (= $t@101@01 ($Snap.combine ($Snap.first $t@101@01) ($Snap.second $t@101@01))))
(assert (= ($Snap.first $t@101@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@80@01 4))))
(assert (= ($Snap.second $t@101@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@80@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 5)): Int) &&
;   ($struct_get($struct_loc($self$1, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@102@01 $Snap)
(assert (= $t@102@01 ($Snap.combine ($Snap.first $t@102@01) ($Snap.second $t@102@01))))
(assert (= ($Snap.first $t@102@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@80@01 5))))
(assert (= ($Snap.second $t@102@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@80@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@103@01 $Snap)
(assert (= $t@103@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@104@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(push) ; 4
; [then-branch: 24 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@80@01, 7)), $q0@104@01)) | live]
; [else-branch: 24 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@80@01, 7)), $q0@104@01) | live]
(push) ; 5
; [then-branch: 24 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@80@01, 7)), $q0@104@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) $q0@104@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 24 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@80@01, 7)), $q0@104@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) $q0@104@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) $q0@104@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) $q0@104@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@104@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) $q0@104@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) $q0@104@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) $q0@104@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@702@11@702@354-aux|)))
(assert (forall (($q0@104@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) $q0@104@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) $q0@104@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) $q0@104@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@702@11@702@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int))
(declare-const $t@105@01 $Snap)
(assert (= $t@105@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int))
(declare-const $q0@106@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@106@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) $q0@106@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) $q0@106@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@703@11@703@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@107@01 $Snap)
(assert (= $t@107@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@108@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(push) ; 4
; [then-branch: 25 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@80@01, 8)), $q1@108@01)) | live]
; [else-branch: 25 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@80@01, 8)), $q1@108@01) | live]
(push) ; 5
; [then-branch: 25 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@80@01, 8)), $q1@108@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 8)) $q1@108@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 25 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@80@01, 8)), $q1@108@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 8)) $q1@108@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 8)) $q1@108@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 8)) $q1@108@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@108@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 8)) $q1@108@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 8)) $q1@108@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 8)) $q1@108@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@704@11@704@354-aux|)))
(assert (forall (($q1@108@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 8)) $q1@108@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 8)) $q1@108@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 8)) $q1@108@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@704@11@704@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $t@109@01 $Snap)
(assert (= $t@109@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $q1@110@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@110@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 8)) $q1@110@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 8)) $q1@110@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@705@11@705@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@111@01 $Snap)
(assert (= $t@111@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$1, -1)): Int)
; [eval] $struct_loc($self$1, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@80@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@112@01 $Snap)
(assert (= $t@112@01 ($Snap.combine ($Snap.first $t@112@01) ($Snap.second $t@112@01))))
(assert (= ($Snap.first $t@112@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@82@01 0))))
(assert (= ($Snap.second $t@112@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@82@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@113@01 $Snap)
(assert (= $t@113@01 ($Snap.combine ($Snap.first $t@113@01) ($Snap.second $t@113@01))))
(assert (= ($Snap.first $t@113@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@82@01 1))))
(assert (= ($Snap.second $t@113@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@82@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@114@01 $Snap)
(assert (= $t@114@01 ($Snap.combine ($Snap.first $t@114@01) ($Snap.second $t@114@01))))
(assert (= ($Snap.first $t@114@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@82@01 2))))
(assert (= ($Snap.second $t@114@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@82@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@115@01 $Snap)
(assert (= $t@115@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@82@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@116@01 $Snap)
(assert (= $t@116@01 ($Snap.combine ($Snap.first $t@116@01) ($Snap.second $t@116@01))))
(assert (= ($Snap.first $t@116@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@82@01 4))))
(assert (= ($Snap.second $t@116@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@82@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@117@01 $Snap)
(assert (= $t@117@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@82@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@118@01 $Snap)
(assert (= $t@118@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@119@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@119@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) $a@119@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@78@01 7)) $a@119@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) $a@119@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@713@11@713@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 0)): Int) ==
;   ($struct_get($struct_loc($self$0, 0)): Int)
(declare-const $t@120@01 $Snap)
(assert (= $t@120@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) == ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@80@01 0))
  ($struct_get<Int> ($struct_loc<Int> $self$0@78@01 0))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 1)): Int) ==
;   ($struct_get($struct_loc($self$0, 1)): Int)
(declare-const $t@121@01 $Snap)
(assert (= $t@121@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@80@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@78@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$1, 3)): Bool)
(declare-const $t@122@01 $Snap)
(assert (= $t@122@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 3)): Bool) ==> ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$0, 3)): Bool)
; [eval] $struct_loc($self$0, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$0@78@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@78@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 26 | $struct_get[Bool]($struct_loc[Int]($self$0@78@01, 3)) | live]
; [else-branch: 26 | !($struct_get[Bool]($struct_loc[Int]($self$0@78@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 26 | $struct_get[Bool]($struct_loc[Int]($self$0@78@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@78@01 3)))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 4
(push) ; 4
; [else-branch: 26 | !($struct_get[Bool]($struct_loc[Int]($self$0@78@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@78@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$0@78@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> $self$0@78@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@78@01 3))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@123@01 $Snap)
(assert (= $t@123@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 27 | $struct_get[Bool]($struct_loc[Int]($self$1@80@01, 3)) | live]
; [else-branch: 27 | !($struct_get[Bool]($struct_loc[Int]($self$1@80@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 27 | $struct_get[Bool]($struct_loc[Int]($self$1@80@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@124@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 28 | !(0 <= q$a@124@01) | live]
; [else-branch: 28 | 0 <= q$a@124@01 | live]
(push) ; 7
; [then-branch: 28 | !(0 <= q$a@124@01)]
(assert (not (<= 0 q$a@124@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 28 | 0 <= q$a@124@01]
(assert (<= 0 q$a@124@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@124@01) (not (<= 0 q$a@124@01))))
(push) ; 6
; [then-branch: 29 | 0 <= q$a@124@01 && q$a@124@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 29 | !(0 <= q$a@124@01 && q$a@124@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 29 | 0 <= q$a@124@01 && q$a@124@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@124@01)
  (<= q$a@124@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 7
(push) ; 7
; [else-branch: 29 | !(0 <= q$a@124@01 && q$a@124@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@124@01)
    (<= q$a@124@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@124@01)
      (<= q$a@124@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@124@01)
    (<= q$a@124@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@124@01 Int)) (!
  (and
    (or (<= 0 q$a@124@01) (not (<= 0 q$a@124@01)))
    (or
      (not
        (and
          (<= 0 q$a@124@01)
          (<= q$a@124@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@124@01)
        (<= q$a@124@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) q$a@124@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@717@60@717@389-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 27 | !($struct_get[Bool]($struct_loc[Int]($self$1@80@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3))
    (forall ((q$a@124@01 Int)) (!
      (and
        (or (<= 0 q$a@124@01) (not (<= 0 q$a@124@01)))
        (or
          (not
            (and
              (<= 0 q$a@124@01)
              (<= q$a@124@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@124@01)
            (<= q$a@124@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) q$a@124@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@717@60@717@389-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3))
  (forall ((q$a@124@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) q$a@124@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@717@60@717@389|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert ($struct_get($struct_loc($self$1, 0)): Int) ==
;   ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) == ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
; [exec]
; assert ($struct_get($struct_loc($self$1, 1)): Int) ==
;   ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) == ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [exec]
; assert ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool) ==> ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 30 | $struct_get[Bool]($struct_loc[Int]($self$1@80@01, 3)) | live]
; [else-branch: 30 | !($struct_get[Bool]($struct_loc[Int]($self$1@80@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 30 | $struct_get[Bool]($struct_loc[Int]($self$1@80@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3)))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 4
(push) ; 4
; [else-branch: 30 | !($struct_get[Bool]($struct_loc[Int]($self$1@80@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 31 | $struct_get[Bool]($struct_loc[Int]($self$1@80@01, 3)) | live]
; [else-branch: 31 | !($struct_get[Bool]($struct_loc[Int]($self$1@80@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 31 | $struct_get[Bool]($struct_loc[Int]($self$1@80@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@125@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 32 | !(0 <= q$a@125@01) | live]
; [else-branch: 32 | 0 <= q$a@125@01 | live]
(push) ; 7
; [then-branch: 32 | !(0 <= q$a@125@01)]
(assert (not (<= 0 q$a@125@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 32 | 0 <= q$a@125@01]
(assert (<= 0 q$a@125@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@125@01) (not (<= 0 q$a@125@01))))
(push) ; 6
; [then-branch: 33 | 0 <= q$a@125@01 && q$a@125@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 33 | !(0 <= q$a@125@01 && q$a@125@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 33 | 0 <= q$a@125@01 && q$a@125@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@125@01)
  (<= q$a@125@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(pop) ; 7
(push) ; 7
; [else-branch: 33 | !(0 <= q$a@125@01 && q$a@125@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@125@01)
    (<= q$a@125@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@125@01)
      (<= q$a@125@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@125@01)
    (<= q$a@125@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@125@01 Int)) (!
  (and
    (or (<= 0 q$a@125@01) (not (<= 0 q$a@125@01)))
    (or
      (not
        (and
          (<= 0 q$a@125@01)
          (<= q$a@125@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@125@01)
        (<= q$a@125@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) q$a@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@721@60@721@389-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 31 | !($struct_get[Bool]($struct_loc[Int]($self$1@80@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3))
    (forall ((q$a@125@01 Int)) (!
      (and
        (or (<= 0 q$a@125@01) (not (<= 0 q$a@125@01)))
        (or
          (not
            (and
              (<= 0 q$a@125@01)
              (<= q$a@125@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@125@01)
            (<= q$a@125@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) q$a@125@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@721@60@721@389-aux|)))))
; Joined path conditions
(push) ; 3
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3))
  (forall ((q$a@125@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) q$a@125@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@721@60@721@389|)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@80@01 3))
  (forall ((q$a@125@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@80@01 7)) q$a@125@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@721@60@721@389|))))
(pop) ; 2
(pop) ; 1
; ---------- $forced_ether_check ----------
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var self: $Struct
(declare-const self@126@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@127@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@128@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@129@01 $Map<Int~_$Struct>)
; [exec]
; var $post: Bool
(declare-const $post@130@01 Bool)
; [exec]
; var $havoc: Int
(declare-const $havoc@131@01 Int)
; [exec]
; var block: $Struct
(declare-const block@132@01 $Struct)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@133@01 $Snap)
(assert (= $t@133@01 ($Snap.combine ($Snap.first $t@133@01) ($Snap.second $t@133@01))))
(assert (= ($Snap.first $t@133@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@126@01 0))))
(assert (= ($Snap.second $t@133@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@126@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@134@01 $Snap)
(assert (= $t@134@01 ($Snap.combine ($Snap.first $t@134@01) ($Snap.second $t@134@01))))
(assert (= ($Snap.first $t@134@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@126@01 1))))
(assert (= ($Snap.second $t@134@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@126@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@135@01 $Snap)
(assert (= $t@135@01 ($Snap.combine ($Snap.first $t@135@01) ($Snap.second $t@135@01))))
(assert (= ($Snap.first $t@135@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@126@01 2))))
(assert (= ($Snap.second $t@135@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@126@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@136@01 $Snap)
(assert (= $t@136@01 ($Snap.combine ($Snap.first $t@136@01) ($Snap.second $t@136@01))))
(assert (= ($Snap.first $t@136@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@126@01 4))))
(assert (= ($Snap.second $t@136@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@126@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@137@01 $Snap)
(assert (= $t@137@01 ($Snap.combine ($Snap.first $t@137@01) ($Snap.second $t@137@01))))
(assert (= ($Snap.first $t@137@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@126@01 5))))
(assert (= ($Snap.second $t@137@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@126@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@138@01 $Snap)
(assert (= $t@138@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@139@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 34 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@126@01, 7)), $q0@139@01)) | live]
; [else-branch: 34 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@126@01, 7)), $q0@139@01) | live]
(push) ; 5
; [then-branch: 34 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@126@01, 7)), $q0@139@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 7)) $q0@139@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 34 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@126@01, 7)), $q0@139@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 7)) $q0@139@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 7)) $q0@139@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 7)) $q0@139@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@139@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 7)) $q0@139@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 7)) $q0@139@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 7)) $q0@139@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@738@11@738@345-aux|)))
(assert (forall (($q0@139@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 7)) $q0@139@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 7)) $q0@139@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 7)) $q0@139@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@738@11@738@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@140@01 $Snap)
(assert (= $t@140@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q0@141@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@141@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 7)) $q0@141@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 7)) $q0@141@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@739@11@739@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@142@01 $Snap)
(assert (= $t@142@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@143@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 35 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@126@01, 8)), $q1@143@01)) | live]
; [else-branch: 35 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@126@01, 8)), $q1@143@01) | live]
(push) ; 5
; [then-branch: 35 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@126@01, 8)), $q1@143@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 8)) $q1@143@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 35 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@126@01, 8)), $q1@143@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 8)) $q1@143@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 8)) $q1@143@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 8)) $q1@143@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@143@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 8)) $q1@143@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 8)) $q1@143@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 8)) $q1@143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@740@11@740@345-aux|)))
(assert (forall (($q1@143@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 8)) $q1@143@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 8)) $q1@143@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 8)) $q1@143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@740@11@740@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@144@01 $Snap)
(assert (= $t@144@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q1@145@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@145@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 8)) $q1@145@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 8)) $q1@145@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@741@11@741@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@146@01 $Snap)
(assert (= $t@146@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@126@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 0)): Int) &&
;   ($struct_get($struct_loc($pre_self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@147@01 $Snap)
(assert (= $t@147@01 ($Snap.combine ($Snap.first $t@147@01) ($Snap.second $t@147@01))))
(assert (= ($Snap.first $t@147@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@128@01 0))))
(assert (= ($Snap.second $t@147@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@128@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($pre_self, 1)): Int) &&
;   ($struct_get($struct_loc($pre_self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@148@01 $Snap)
(assert (= $t@148@01 ($Snap.combine ($Snap.first $t@148@01) ($Snap.second $t@148@01))))
(assert (= ($Snap.first $t@148@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $pre_self@128@01 1))))
(assert (= ($Snap.second $t@148@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@128@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($pre_self, 2)): Int) &&
;   ($struct_get($struct_loc($pre_self, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@149@01 $Snap)
(assert (= $t@149@01 ($Snap.combine ($Snap.first $t@149@01) ($Snap.second $t@149@01))))
(assert (= ($Snap.first $t@149@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] $struct_loc($pre_self, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $pre_self@128@01 2))))
(assert (= ($Snap.second $t@149@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] $struct_loc($pre_self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@128@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc($pre_self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@150@01 $Snap)
(assert (= $t@150@01 ($Snap.combine ($Snap.first $t@150@01) ($Snap.second $t@150@01))))
(assert (= ($Snap.first $t@150@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] $struct_loc($pre_self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@128@01 4))))
(assert (= ($Snap.second $t@150@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] $struct_loc($pre_self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@128@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($pre_self, 5)): Int) &&
;   ($struct_get($struct_loc($pre_self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@151@01 $Snap)
(assert (= $t@151@01 ($Snap.combine ($Snap.first $t@151@01) ($Snap.second $t@151@01))))
(assert (= ($Snap.first $t@151@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($pre_self, 5)): Int)
; [eval] $struct_loc($pre_self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $pre_self@128@01 5))))
(assert (= ($Snap.second $t@151@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($pre_self, 5)): Int)
; [eval] $struct_loc($pre_self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@128@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@152@01 $Snap)
(assert (= $t@152@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@153@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
(push) ; 4
; [then-branch: 36 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@128@01, 7)), $q0@153@01)) | live]
; [else-branch: 36 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@128@01, 7)), $q0@153@01) | live]
(push) ; 5
; [then-branch: 36 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@128@01, 7)), $q0@153@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 7)) $q0@153@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 36 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@128@01, 7)), $q0@153@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 7)) $q0@153@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 7)) $q0@153@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 7)) $q0@153@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@153@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 7)) $q0@153@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 7)) $q0@153@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 7)) $q0@153@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@748@11@748@360-aux|)))
(assert (forall (($q0@153@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 7)) $q0@153@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 7)) $q0@153@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 7)) $q0@153@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@748@11@748@360|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])): Int))
(declare-const $t@154@01 $Snap)
(assert (= $t@154@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])): Int))
(declare-const $q0@155@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@155@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 7)) $q0@155@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 7)) $q0@155@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@749@11@749@268|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@156@01 $Snap)
(assert (= $t@156@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@157@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(push) ; 4
; [then-branch: 37 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@128@01, 8)), $q1@157@01)) | live]
; [else-branch: 37 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@128@01, 8)), $q1@157@01) | live]
(push) ; 5
; [then-branch: 37 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@128@01, 8)), $q1@157@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 8)) $q1@157@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 37 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@128@01, 8)), $q1@157@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 8)) $q1@157@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 8)) $q1@157@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 8)) $q1@157@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@157@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 8)) $q1@157@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 8)) $q1@157@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 8)) $q1@157@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@750@11@750@360-aux|)))
(assert (forall (($q1@157@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 8)) $q1@157@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 8)) $q1@157@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 8)) $q1@157@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@750@11@750@360|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int))
(declare-const $t@158@01 $Snap)
(assert (= $t@158@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int))
(declare-const $q1@159@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@159@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 8)) $q1@159@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@128@01 8)) $q1@159@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@751@11@751@268|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($pre_self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@160@01 $Snap)
(assert (= $t@160@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($pre_self, -1)): Int)
; [eval] $struct_loc($pre_self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@128@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@161@01 $Snap)
(assert (= $t@161@01 ($Snap.combine ($Snap.first $t@161@01) ($Snap.second $t@161@01))))
(assert (= ($Snap.first $t@161@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@132@01 0))))
(assert (= ($Snap.second $t@161@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@132@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@162@01 $Snap)
(assert (= $t@162@01 ($Snap.combine ($Snap.first $t@162@01) ($Snap.second $t@162@01))))
(assert (= ($Snap.first $t@162@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@132@01 1))))
(assert (= ($Snap.second $t@162@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@132@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@163@01 $Snap)
(assert (= $t@163@01 ($Snap.combine ($Snap.first $t@163@01) ($Snap.second $t@163@01))))
(assert (= ($Snap.first $t@163@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@132@01 2))))
(assert (= ($Snap.second $t@163@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@132@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@164@01 $Snap)
(assert (= $t@164@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@132@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@165@01 $Snap)
(assert (= $t@165@01 ($Snap.combine ($Snap.first $t@165@01) ($Snap.second $t@165@01))))
(assert (= ($Snap.first $t@165@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@132@01 4))))
(assert (= ($Snap.second $t@165@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@132@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@166@01 $Snap)
(assert (= $t@166@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@132@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale $havoc >= 0
(declare-const $t@167@01 $Snap)
(assert (= $t@167@01 $Snap.unit))
; [eval] $havoc >= 0
(assert (>= $havoc@131@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@168@01 $Snap)
(assert (= $t@168@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@169@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc(self, 0)): Int)
(declare-const $t@170@01 $Snap)
(assert (= $t@170@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@171@01 $Snap)
(assert (= $t@171@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
(declare-const $t@172@01 $Snap)
(assert (= $t@172@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@126@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@126@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 38 | $struct_get[Bool]($struct_loc[Int](self@126@01, 3)) | live]
; [else-branch: 38 | !($struct_get[Bool]($struct_loc[Int](self@126@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 38 | $struct_get[Bool]($struct_loc[Int](self@126@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@126@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(push) ; 4
; [else-branch: 38 | !($struct_get[Bool]($struct_loc[Int](self@126@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@126@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@126@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@126@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@173@01 $Snap)
(assert (= $t@173@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@126@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@126@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 39 | $struct_get[Bool]($struct_loc[Int](self@126@01, 3)) | live]
; [else-branch: 39 | !($struct_get[Bool]($struct_loc[Int](self@126@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 39 | $struct_get[Bool]($struct_loc[Int](self@126@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@126@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@174@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 40 | !(0 <= q$a@174@01) | live]
; [else-branch: 40 | 0 <= q$a@174@01 | live]
(push) ; 7
; [then-branch: 40 | !(0 <= q$a@174@01)]
(assert (not (<= 0 q$a@174@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 40 | 0 <= q$a@174@01]
(assert (<= 0 q$a@174@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@174@01) (not (<= 0 q$a@174@01))))
(push) ; 6
; [then-branch: 41 | 0 <= q$a@174@01 && q$a@174@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 41 | !(0 <= q$a@174@01 && q$a@174@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 41 | 0 <= q$a@174@01 && q$a@174@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@174@01)
  (<= q$a@174@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 7
(push) ; 7
; [else-branch: 41 | !(0 <= q$a@174@01 && q$a@174@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@174@01)
    (<= q$a@174@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@174@01)
      (<= q$a@174@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@174@01)
    (<= q$a@174@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@174@01 Int)) (!
  (and
    (or (<= 0 q$a@174@01) (not (<= 0 q$a@174@01)))
    (or
      (not
        (and
          (<= 0 q$a@174@01)
          (<= q$a@174@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@174@01)
        (<= q$a@174@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 7)) q$a@174@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@764@57@764@377-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 39 | !($struct_get[Bool]($struct_loc[Int](self@126@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@126@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@126@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@126@01 3))
    (forall ((q$a@174@01 Int)) (!
      (and
        (or (<= 0 q$a@174@01) (not (<= 0 q$a@174@01)))
        (or
          (not
            (and
              (<= 0 q$a@174@01)
              (<= q$a@174@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@174@01)
            (<= q$a@174@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 7)) q$a@174@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@764@57@764@377-aux|)))))
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@126@01 3))
  (forall ((q$a@174@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@126@01 7)) q$a@174@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@764@57@764@377|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   $havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + $havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + $havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@175@01 $Struct)
(assert (=
  self@175@01
  ($struct_set<$Struct> self@126@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@126@01 4))
    $havoc@131@01))))
(pop) ; 2
(pop) ; 1
; ---------- f$__init__ ----------
(declare-const l$l@176@01 Int)
(declare-const $succ@177@01 Bool)
(declare-const l$l@178@01 Int)
(declare-const $succ@179@01 Bool)
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@180@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@181@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@182@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@183@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@184@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@185@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@186@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@187@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@188@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@189@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@190@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@191@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@192@01 Bool)
; [exec]
; var $first_public_state: Bool
(declare-const $first_public_state@193@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@194@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@195@01 Bool)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@196@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@197@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@198@01 $Snap)
(assert (= $t@198@01 ($Snap.combine ($Snap.first $t@198@01) ($Snap.second $t@198@01))))
(assert (= ($Snap.first $t@198@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@184@01 0))))
(assert (= ($Snap.second $t@198@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@184@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@199@01 $Snap)
(assert (= $t@199@01 ($Snap.combine ($Snap.first $t@199@01) ($Snap.second $t@199@01))))
(assert (= ($Snap.first $t@199@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@184@01 1))))
(assert (= ($Snap.second $t@199@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@184@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@200@01 $Snap)
(assert (= $t@200@01 ($Snap.combine ($Snap.first $t@200@01) ($Snap.second $t@200@01))))
(assert (= ($Snap.first $t@200@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@184@01 2))))
(assert (= ($Snap.second $t@200@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@184@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@201@01 $Snap)
(assert (= $t@201@01 ($Snap.combine ($Snap.first $t@201@01) ($Snap.second $t@201@01))))
(assert (= ($Snap.first $t@201@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@184@01 4))))
(assert (= ($Snap.second $t@201@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@184@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@202@01 $Snap)
(assert (= $t@202@01 ($Snap.combine ($Snap.first $t@202@01) ($Snap.second $t@202@01))))
(assert (= ($Snap.first $t@202@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@184@01 5))))
(assert (= ($Snap.second $t@202@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@184@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@203@01 $Snap)
(assert (= $t@203@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@204@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 42 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@184@01, 7)), $q0@204@01)) | live]
; [else-branch: 42 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@184@01, 7)), $q0@204@01) | live]
(push) ; 5
; [then-branch: 42 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@184@01, 7)), $q0@204@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 7)) $q0@204@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 42 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@184@01, 7)), $q0@204@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 7)) $q0@204@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 7)) $q0@204@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 7)) $q0@204@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@204@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 7)) $q0@204@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 7)) $q0@204@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 7)) $q0@204@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@797@11@797@345-aux|)))
(assert (forall (($q0@204@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 7)) $q0@204@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 7)) $q0@204@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 7)) $q0@204@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@797@11@797@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@205@01 $Snap)
(assert (= $t@205@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q0@206@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@206@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 7)) $q0@206@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 7)) $q0@206@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@798@11@798@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@207@01 $Snap)
(assert (= $t@207@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@208@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 43 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@184@01, 8)), $q1@208@01)) | live]
; [else-branch: 43 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@184@01, 8)), $q1@208@01) | live]
(push) ; 5
; [then-branch: 43 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@184@01, 8)), $q1@208@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 8)) $q1@208@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 43 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@184@01, 8)), $q1@208@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 8)) $q1@208@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 8)) $q1@208@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 8)) $q1@208@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@208@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 8)) $q1@208@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 8)) $q1@208@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 8)) $q1@208@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@799@11@799@345-aux|)))
(assert (forall (($q1@208@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 8)) $q1@208@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 8)) $q1@208@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 8)) $q1@208@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@799@11@799@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@209@01 $Snap)
(assert (= $t@209@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q1@210@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@210@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 8)) $q1@210@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@184@01 8)) $q1@210@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@800@11@800@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@211@01 $Snap)
(assert (= $t@211@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@184@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@212@01 $Snap)
(assert (= $t@212@01 ($Snap.combine ($Snap.first $t@212@01) ($Snap.second $t@212@01))))
(assert (= ($Snap.first $t@212@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@212@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$l && l$l <= 1461501637330902918203684832716283019655932542975
(declare-const $t@213@01 $Snap)
(assert (= $t@213@01 ($Snap.combine ($Snap.first $t@213@01) ($Snap.second $t@213@01))))
(assert (= ($Snap.first $t@213@01) $Snap.unit))
; [eval] 0 <= l$l
(assert (<= 0 l$l@178@01))
(assert (= ($Snap.second $t@213@01) $Snap.unit))
; [eval] l$l <= 1461501637330902918203684832716283019655932542975
(assert (<= l$l@178@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@214@01 $Snap)
(assert (= $t@214@01 ($Snap.combine ($Snap.first $t@214@01) ($Snap.second $t@214@01))))
(assert (= ($Snap.first $t@214@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@181@01 0))))
(assert (= ($Snap.second $t@214@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@181@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@215@01 $Snap)
(assert (= $t@215@01 ($Snap.combine ($Snap.first $t@215@01) ($Snap.second $t@215@01))))
(assert (= ($Snap.first $t@215@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@181@01 1))))
(assert (= ($Snap.second $t@215@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@181@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@216@01 $Snap)
(assert (= $t@216@01 ($Snap.combine ($Snap.first $t@216@01) ($Snap.second $t@216@01))))
(assert (= ($Snap.first $t@216@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@181@01 2))))
(assert (= ($Snap.second $t@216@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@181@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@217@01 $Snap)
(assert (= $t@217@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@181@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@218@01 $Snap)
(assert (= $t@218@01 ($Snap.combine ($Snap.first $t@218@01) ($Snap.second $t@218@01))))
(assert (= ($Snap.first $t@218@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@181@01 4))))
(assert (= ($Snap.second $t@218@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@181@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@219@01 $Snap)
(assert (= $t@219@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@181@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@220@01 $Snap)
(assert (= $t@220@01 ($Snap.combine ($Snap.first $t@220@01) ($Snap.second $t@220@01))))
(assert (= ($Snap.first $t@220@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@180@01 0))))
(assert (= ($Snap.second $t@220@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@180@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@221@01 $Snap)
(assert (= $t@221@01 ($Snap.combine ($Snap.first $t@221@01) ($Snap.second $t@221@01))))
(assert (= ($Snap.first $t@221@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@180@01 1))))
(assert (= ($Snap.second $t@221@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@180@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@222@01 $Snap)
(assert (= $t@222@01 ($Snap.combine ($Snap.first $t@222@01) ($Snap.second $t@222@01))))
(assert (= ($Snap.first $t@222@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@180@01 2))))
(assert (= ($Snap.second $t@222@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@180@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@223@01 $Snap)
(assert (= $t@223@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@180@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@224@01 $Snap)
(assert (= $t@224@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@180@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; $first_public_state := true
; [exec]
; self := s$struct$self$init(0, 0, 0, false, 0, 0, false, ($map_init(0): $Map[Int, Int]),
;   ($map_init(0): $Map[Int, Int]), false)
; [eval] s$struct$self$init(0, 0, 0, false, 0, 0, false, ($map_init(0): $Map[Int, Int]), ($map_init(0): $Map[Int, Int]), false)
; [eval] ($map_init(0): $Map[Int, Int])
; [eval] ($map_init(0): $Map[Int, Int])
(declare-const self@225@01 $Struct)
(assert (=
  self@225@01
  (s$struct$self$init<$Struct> 0 0 0 false 0 0 false ($map_init<$Map<Int~_Int>> 0) ($map_init<$Map<Int~_Int>> 0) false)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@226@01 $Snap)
(assert (= $t@226@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@194@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@227@01 $Struct)
(assert (=
  self@227@01
  ($struct_set<$Struct> self@225@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@225@01 4))
    l$havoc@194@01))))
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@228@01 $Snap)
(assert (= $t@228@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@180@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 0, l$l): $Struct)
; [eval] ($struct_set(self, 0, l$l): $Struct)
(declare-const self@229@01 $Struct)
(assert (= self@229@01 ($struct_set<$Struct> self@227@01 0 l$l@178@01)))
; [exec]
; label return
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@195@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@195@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 44 | $out_of_gas@195@01 | live]
; [else-branch: 44 | !($out_of_gas@195@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 44 | $out_of_gas@195@01]
(assert $out_of_gas@195@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 45 | True | live]
; [else-branch: 45 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 45 | True]
; [exec]
; $old_self := self
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 46 | True | live]
; [else-branch: 46 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 46 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@230@01 $Snap)
(assert (= $t@230@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@196@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@231@01 $Struct)
(assert (=
  self@231@01
  ($struct_set<$Struct> self@184@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@184@01 4))
    l$havoc$1@196@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 47 | True | live]
; [else-branch: 47 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 47 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
(push) ; 7
; [then-branch: 48 | False | dead]
; [else-branch: 48 | True | live]
(push) ; 8
; [else-branch: 48 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
(push) ; 7
; [then-branch: 49 | False | dead]
; [else-branch: 49 | True | live]
(push) ; 8
; [else-branch: 49 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $succ ==> ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
(push) ; 7
; [then-branch: 50 | False | dead]
; [else-branch: 50 | True | live]
(push) ; 8
; [else-branch: 50 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] $succ ==> ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(push) ; 7
; [then-branch: 51 | False | dead]
; [else-branch: 51 | True | live]
(push) ; 8
; [else-branch: 51 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
; [eval] !$first_public_state
; [then-branch: 52 | False | dead]
; [else-branch: 52 | True | live]
(push) ; 6
; [else-branch: 52 | True]
(pop) ; 6
(pop) ; 5
; [then-branch: 53 | False | dead]
; [else-branch: 53 | True | live]
(push) ; 5
; [else-branch: 53 | True]
(pop) ; 5
(pop) ; 4
; [eval] !$first_public_state
; [then-branch: 54 | False | dead]
; [else-branch: 54 | True | live]
(push) ; 4
; [else-branch: 54 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 44 | !($out_of_gas@195@01)]
(assert (not $out_of_gas@195@01))
(pop) ; 3
; [eval] !$out_of_gas
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@195@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@195@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 55 | !($out_of_gas@195@01) | live]
; [else-branch: 55 | $out_of_gas@195@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 55 | !($out_of_gas@195@01)]
(assert (not $out_of_gas@195@01))
; [exec]
; label end
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 56 | True | live]
; [else-branch: 56 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 56 | True]
; [exec]
; $old_self := self
; [eval] !$succ
; [then-branch: 57 | False | dead]
; [else-branch: 57 | True | live]
(push) ; 5
; [else-branch: 57 | True]
(pop) ; 5
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 58 | True | live]
; [else-branch: 58 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 58 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@232@01 $Snap)
(assert (= $t@232@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@196@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@233@01 $Struct)
(assert (=
  self@233@01
  ($struct_set<$Struct> self@229@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@229@01 4))
    l$havoc$1@196@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 59 | True | live]
; [else-branch: 59 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 59 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 60 | True | live]
; [else-branch: 60 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 60 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 61 | True | live]
; [else-branch: 61 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 61 | True]
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $succ ==> ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 62 | True | live]
; [else-branch: 62 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 62 | True]
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@233@01 3)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 63 | $struct_get[Bool]($struct_loc[Int](self@233@01, 3)) | dead]
; [else-branch: 63 | !($struct_get[Bool]($struct_loc[Int](self@233@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 63 | !($struct_get[Bool]($struct_loc[Int](self@233@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@233@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@233@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@233@01 3))))
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] $succ ==> ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 64 | True | live]
; [else-branch: 64 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 64 | True]
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 9
; [then-branch: 65 | $struct_get[Bool]($struct_loc[Int](self@233@01, 3)) | dead]
; [else-branch: 65 | !($struct_get[Bool]($struct_loc[Int](self@233@01, 3))) | live]
(push) ; 10
; [else-branch: 65 | !($struct_get[Bool]($struct_loc[Int](self@233@01, 3)))]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
; [eval] !$first_public_state
; [then-branch: 66 | False | dead]
; [else-branch: 66 | True | live]
(push) ; 6
; [else-branch: 66 | True]
(pop) ; 6
(pop) ; 5
(pop) ; 4
; [eval] !$first_public_state
; [then-branch: 67 | False | dead]
; [else-branch: 67 | True | live]
(push) ; 4
; [else-branch: 67 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 55 | $out_of_gas@195@01]
(assert $out_of_gas@195@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$set_val ----------
(declare-const l$i@234@01 $Int)
(declare-const $succ@235@01 Bool)
(declare-const l$i@236@01 $Int)
(declare-const $succ@237@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@238@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@239@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@240@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@241@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@242@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@243@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@244@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@245@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@246@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@247@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@248@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@249@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@250@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@251@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@252@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@253@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@254@01 $Snap)
(assert (= $t@254@01 ($Snap.combine ($Snap.first $t@254@01) ($Snap.second $t@254@01))))
(assert (= ($Snap.first $t@254@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@242@01 0))))
(assert (= ($Snap.second $t@254@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@242@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@255@01 $Snap)
(assert (= $t@255@01 ($Snap.combine ($Snap.first $t@255@01) ($Snap.second $t@255@01))))
(assert (= ($Snap.first $t@255@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@242@01 1))))
(assert (= ($Snap.second $t@255@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@242@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@256@01 $Snap)
(assert (= $t@256@01 ($Snap.combine ($Snap.first $t@256@01) ($Snap.second $t@256@01))))
(assert (= ($Snap.first $t@256@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@242@01 2))))
(assert (= ($Snap.second $t@256@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@242@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@257@01 $Snap)
(assert (= $t@257@01 ($Snap.combine ($Snap.first $t@257@01) ($Snap.second $t@257@01))))
(assert (= ($Snap.first $t@257@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@242@01 4))))
(assert (= ($Snap.second $t@257@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@242@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@258@01 $Snap)
(assert (= $t@258@01 ($Snap.combine ($Snap.first $t@258@01) ($Snap.second $t@258@01))))
(assert (= ($Snap.first $t@258@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@242@01 5))))
(assert (= ($Snap.second $t@258@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@242@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@259@01 $Snap)
(assert (= $t@259@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@260@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 68 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@242@01, 7)), $q0@260@01)) | live]
; [else-branch: 68 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@242@01, 7)), $q0@260@01) | live]
(push) ; 5
; [then-branch: 68 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@242@01, 7)), $q0@260@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 7)) $q0@260@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 68 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@242@01, 7)), $q0@260@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 7)) $q0@260@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 7)) $q0@260@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 7)) $q0@260@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@260@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 7)) $q0@260@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 7)) $q0@260@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 7)) $q0@260@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@894@11@894@345-aux|)))
(assert (forall (($q0@260@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 7)) $q0@260@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 7)) $q0@260@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 7)) $q0@260@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@894@11@894@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@261@01 $Snap)
(assert (= $t@261@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q0@262@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@262@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 7)) $q0@262@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 7)) $q0@262@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@895@11@895@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@263@01 $Snap)
(assert (= $t@263@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@264@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 69 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@242@01, 8)), $q1@264@01)) | live]
; [else-branch: 69 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@242@01, 8)), $q1@264@01) | live]
(push) ; 5
; [then-branch: 69 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@242@01, 8)), $q1@264@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 8)) $q1@264@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 69 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@242@01, 8)), $q1@264@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 8)) $q1@264@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 8)) $q1@264@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 8)) $q1@264@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@264@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 8)) $q1@264@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 8)) $q1@264@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 8)) $q1@264@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@896@11@896@345-aux|)))
(assert (forall (($q1@264@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 8)) $q1@264@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 8)) $q1@264@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 8)) $q1@264@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@896@11@896@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@265@01 $Snap)
(assert (= $t@265@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q1@266@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@266@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 8)) $q1@266@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 8)) $q1@266@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@897@11@897@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@267@01 $Snap)
(assert (= $t@267@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@242@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@268@01 $Snap)
(assert (= $t@268@01 ($Snap.combine ($Snap.first $t@268@01) ($Snap.second $t@268@01))))
(assert (= ($Snap.first $t@268@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@268@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <= $unwrap(l$i) &&
;   $unwrap(l$i) <= 170141183460469231731687303715884105727
(declare-const $t@269@01 $Snap)
(assert (= $t@269@01 ($Snap.combine ($Snap.first $t@269@01) ($Snap.second $t@269@01))))
(assert (= ($Snap.first $t@269@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= $unwrap(l$i)
; [eval] -170141183460469231731687303715884105728
; [eval] $unwrap(l$i)
(assert (<= (- 0 170141183460469231731687303715884105728) ($unwrap<Int> l$i@236@01)))
(assert (= ($Snap.second $t@269@01) $Snap.unit))
; [eval] $unwrap(l$i) <= 170141183460469231731687303715884105727
; [eval] $unwrap(l$i)
(assert (<= ($unwrap<Int> l$i@236@01) 170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@270@01 $Snap)
(assert (= $t@270@01 ($Snap.combine ($Snap.first $t@270@01) ($Snap.second $t@270@01))))
(assert (= ($Snap.first $t@270@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@239@01 0))))
(assert (= ($Snap.second $t@270@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@239@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@271@01 $Snap)
(assert (= $t@271@01 ($Snap.combine ($Snap.first $t@271@01) ($Snap.second $t@271@01))))
(assert (= ($Snap.first $t@271@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@239@01 1))))
(assert (= ($Snap.second $t@271@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@239@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@272@01 $Snap)
(assert (= $t@272@01 ($Snap.combine ($Snap.first $t@272@01) ($Snap.second $t@272@01))))
(assert (= ($Snap.first $t@272@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@239@01 2))))
(assert (= ($Snap.second $t@272@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@239@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@273@01 $Snap)
(assert (= $t@273@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@239@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@274@01 $Snap)
(assert (= $t@274@01 ($Snap.combine ($Snap.first $t@274@01) ($Snap.second $t@274@01))))
(assert (= ($Snap.first $t@274@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@239@01 4))))
(assert (= ($Snap.second $t@274@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@239@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@275@01 $Snap)
(assert (= $t@275@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@239@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@276@01 $Snap)
(assert (= $t@276@01 ($Snap.combine ($Snap.first $t@276@01) ($Snap.second $t@276@01))))
(assert (= ($Snap.first $t@276@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@238@01 0))))
(assert (= ($Snap.second $t@276@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@238@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@277@01 $Snap)
(assert (= $t@277@01 ($Snap.combine ($Snap.first $t@277@01) ($Snap.second $t@277@01))))
(assert (= ($Snap.first $t@277@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@238@01 1))))
(assert (= ($Snap.second $t@277@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@238@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@278@01 $Snap)
(assert (= $t@278@01 ($Snap.combine ($Snap.first $t@278@01) ($Snap.second $t@278@01))))
(assert (= ($Snap.first $t@278@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@238@01 2))))
(assert (= ($Snap.second $t@278@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@238@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@279@01 $Snap)
(assert (= $t@279@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@238@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@280@01 $Snap)
(assert (= $t@280@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@238@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@281@01 $Snap)
(assert (= $t@281@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@282@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc(self, 0)): Int)
(declare-const $t@283@01 $Snap)
(assert (= $t@283@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@284@01 $Snap)
(assert (= $t@284@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
(declare-const $t@285@01 $Snap)
(assert (= $t@285@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@242@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@242@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 70 | $struct_get[Bool]($struct_loc[Int](self@242@01, 3)) | live]
; [else-branch: 70 | !($struct_get[Bool]($struct_loc[Int](self@242@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 70 | $struct_get[Bool]($struct_loc[Int](self@242@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@242@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(push) ; 4
; [else-branch: 70 | !($struct_get[Bool]($struct_loc[Int](self@242@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@242@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@242@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@242@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@286@01 $Snap)
(assert (= $t@286@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@242@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@242@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 71 | $struct_get[Bool]($struct_loc[Int](self@242@01, 3)) | live]
; [else-branch: 71 | !($struct_get[Bool]($struct_loc[Int](self@242@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 71 | $struct_get[Bool]($struct_loc[Int](self@242@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@242@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@287@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 72 | !(0 <= q$a@287@01) | live]
; [else-branch: 72 | 0 <= q$a@287@01 | live]
(push) ; 7
; [then-branch: 72 | !(0 <= q$a@287@01)]
(assert (not (<= 0 q$a@287@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 72 | 0 <= q$a@287@01]
(assert (<= 0 q$a@287@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@287@01) (not (<= 0 q$a@287@01))))
(push) ; 6
; [then-branch: 73 | 0 <= q$a@287@01 && q$a@287@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 73 | !(0 <= q$a@287@01 && q$a@287@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 73 | 0 <= q$a@287@01 && q$a@287@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@287@01)
  (<= q$a@287@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 7
(push) ; 7
; [else-branch: 73 | !(0 <= q$a@287@01 && q$a@287@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@287@01)
    (<= q$a@287@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@287@01)
      (<= q$a@287@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@287@01)
    (<= q$a@287@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@287@01 Int)) (!
  (and
    (or (<= 0 q$a@287@01) (not (<= 0 q$a@287@01)))
    (or
      (not
        (and
          (<= 0 q$a@287@01)
          (<= q$a@287@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@287@01)
        (<= q$a@287@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 7)) q$a@287@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@921@57@921@377-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 71 | !($struct_get[Bool]($struct_loc[Int](self@242@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@242@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@242@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@242@01 3))
    (forall ((q$a@287@01 Int)) (!
      (and
        (or (<= 0 q$a@287@01) (not (<= 0 q$a@287@01)))
        (or
          (not
            (and
              (<= 0 q$a@287@01)
              (<= q$a@287@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@287@01)
            (<= q$a@287@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 7)) q$a@287@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@921@57@921@377-aux|)))))
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@242@01 3))
  (forall ((q$a@287@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@242@01 7)) q$a@287@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@921@57@921@377|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@288@01 $Snap)
(assert (= $t@288@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@238@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 2, $unwrap(l$i)): $Struct)
; [eval] ($struct_set(self, 2, $unwrap(l$i)): $Struct)
; [eval] $unwrap(l$i)
(declare-const self@289@01 $Struct)
(assert (= self@289@01 ($struct_set<$Struct> self@242@01 2 ($unwrap<Int> l$i@236@01))))
; [exec]
; label return
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@251@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@251@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 74 | $out_of_gas@251@01 | live]
; [else-branch: 74 | !($out_of_gas@251@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 74 | $out_of_gas@251@01]
(assert $out_of_gas@251@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 75 | True | live]
; [else-branch: 75 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 75 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@290@01 $Snap)
(assert (= $t@290@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@252@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@291@01 $Struct)
(assert (=
  self@291@01
  ($struct_set<$Struct> self@242@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@242@01 4))
    l$havoc@252@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@291@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@242@01 0)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@291@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@242@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@291@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@242@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@291@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@242@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@242@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@242@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 76 | $struct_get[Bool]($struct_loc[Int](self@242@01, 3)) | live]
; [else-branch: 76 | !($struct_get[Bool]($struct_loc[Int](self@242@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 76 | $struct_get[Bool]($struct_loc[Int](self@242@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@242@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(push) ; 6
; [else-branch: 76 | !($struct_get[Bool]($struct_loc[Int](self@242@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@242@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@242@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@291@01 3)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@242@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@291@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@291@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@291@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 77 | $struct_get[Bool]($struct_loc[Int](self@291@01, 3)) | live]
; [else-branch: 77 | !($struct_get[Bool]($struct_loc[Int](self@291@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 77 | $struct_get[Bool]($struct_loc[Int](self@291@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@291@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@292@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 78 | !(0 <= q$a@292@01) | live]
; [else-branch: 78 | 0 <= q$a@292@01 | live]
(push) ; 9
; [then-branch: 78 | !(0 <= q$a@292@01)]
(assert (not (<= 0 q$a@292@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 78 | 0 <= q$a@292@01]
(assert (<= 0 q$a@292@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@292@01) (not (<= 0 q$a@292@01))))
(push) ; 8
; [then-branch: 79 | 0 <= q$a@292@01 && q$a@292@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 79 | !(0 <= q$a@292@01 && q$a@292@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 79 | 0 <= q$a@292@01 && q$a@292@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@292@01)
  (<= q$a@292@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 9
(push) ; 9
; [else-branch: 79 | !(0 <= q$a@292@01 && q$a@292@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@292@01)
    (<= q$a@292@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@292@01)
      (<= q$a@292@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@292@01)
    (<= q$a@292@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@292@01 Int)) (!
  (and
    (or (<= 0 q$a@292@01) (not (<= 0 q$a@292@01)))
    (or
      (not
        (and
          (<= 0 q$a@292@01)
          (<= q$a@292@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@292@01)
        (<= q$a@292@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@291@01 7)) q$a@292@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@960@57@960@387-aux|)))
(pop) ; 6
(push) ; 6
; [else-branch: 77 | !($struct_get[Bool]($struct_loc[Int](self@291@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@291@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@291@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@291@01 3))
    (forall ((q$a@292@01 Int)) (!
      (and
        (or (<= 0 q$a@292@01) (not (<= 0 q$a@292@01)))
        (or
          (not
            (and
              (<= 0 q$a@292@01)
              (<= q$a@292@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@292@01)
            (<= q$a@292@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@291@01 7)) q$a@292@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@960@57@960@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@291@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@291@01 3))))
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@291@01 3))
  (forall ((q$a@292@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@291@01 7)) q$a@292@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@960@57@960@387|)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@291@01 3))
  (forall ((q$a@292@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@291@01 7)) q$a@292@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@960@57@960@387|))))
(pop) ; 4
; [then-branch: 80 | False | dead]
; [else-branch: 80 | True | live]
(push) ; 4
; [else-branch: 80 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 74 | !($out_of_gas@251@01)]
(assert (not $out_of_gas@251@01))
(pop) ; 3
; [eval] !$out_of_gas
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@251@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@251@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 81 | !($out_of_gas@251@01) | live]
; [else-branch: 81 | $out_of_gas@251@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 81 | !($out_of_gas@251@01)]
(assert (not $out_of_gas@251@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 82 | False | dead]
; [else-branch: 82 | True | live]
(push) ; 4
; [else-branch: 82 | True]
(pop) ; 4
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 83 | True | live]
; [else-branch: 83 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 83 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@293@01 $Snap)
(assert (= $t@293@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@252@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@294@01 $Struct)
(assert (=
  self@294@01
  ($struct_set<$Struct> self@289@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@289@01 4))
    l$havoc@252@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@294@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@242@01 0)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@294@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@242@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@294@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@242@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@294@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@242@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@242@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@242@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 84 | $struct_get[Bool]($struct_loc[Int](self@242@01, 3)) | live]
; [else-branch: 84 | !($struct_get[Bool]($struct_loc[Int](self@242@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 84 | $struct_get[Bool]($struct_loc[Int](self@242@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@242@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(push) ; 6
; [else-branch: 84 | !($struct_get[Bool]($struct_loc[Int](self@242@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@242@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@242@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@294@01 3)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@242@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@294@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@294@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@294@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 85 | $struct_get[Bool]($struct_loc[Int](self@294@01, 3)) | live]
; [else-branch: 85 | !($struct_get[Bool]($struct_loc[Int](self@294@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 85 | $struct_get[Bool]($struct_loc[Int](self@294@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@294@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@295@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 86 | !(0 <= q$a@295@01) | live]
; [else-branch: 86 | 0 <= q$a@295@01 | live]
(push) ; 9
; [then-branch: 86 | !(0 <= q$a@295@01)]
(assert (not (<= 0 q$a@295@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 86 | 0 <= q$a@295@01]
(assert (<= 0 q$a@295@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@295@01) (not (<= 0 q$a@295@01))))
(push) ; 8
; [then-branch: 87 | 0 <= q$a@295@01 && q$a@295@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 87 | !(0 <= q$a@295@01 && q$a@295@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 87 | 0 <= q$a@295@01 && q$a@295@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@295@01)
  (<= q$a@295@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 9
(push) ; 9
; [else-branch: 87 | !(0 <= q$a@295@01 && q$a@295@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@295@01)
    (<= q$a@295@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@295@01)
      (<= q$a@295@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@295@01)
    (<= q$a@295@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@295@01 Int)) (!
  (and
    (or (<= 0 q$a@295@01) (not (<= 0 q$a@295@01)))
    (or
      (not
        (and
          (<= 0 q$a@295@01)
          (<= q$a@295@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@295@01)
        (<= q$a@295@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@294@01 7)) q$a@295@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@960@57@960@387-aux|)))
(pop) ; 6
(push) ; 6
; [else-branch: 85 | !($struct_get[Bool]($struct_loc[Int](self@294@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@294@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@294@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@294@01 3))
    (forall ((q$a@295@01 Int)) (!
      (and
        (or (<= 0 q$a@295@01) (not (<= 0 q$a@295@01)))
        (or
          (not
            (and
              (<= 0 q$a@295@01)
              (<= q$a@295@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@295@01)
            (<= q$a@295@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@294@01 7)) q$a@295@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@960@57@960@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@294@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@294@01 3))))
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@294@01 3))
  (forall ((q$a@295@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@294@01 7)) q$a@295@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@960@57@960@387|)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@294@01 3))
  (forall ((q$a@295@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@294@01 7)) q$a@295@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@960@57@960@387|))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 81 | $out_of_gas@251@01]
(assert $out_of_gas@251@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$test_list ----------
(declare-const $succ@296@01 Bool)
(declare-const $succ@297@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@298@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@299@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@300@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@301@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@302@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@303@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@304@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@305@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@306@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@307@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@308@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@309@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@310@01 Bool)
; [exec]
; var l$havoc: $Map[Int, $Struct]
(declare-const l$havoc@311@01 $Map<Int~_$Struct>)
; [exec]
; var l$send_fail: Bool
(declare-const l$send_fail@312@01 Bool)
; [exec]
; var i0$$pre_self: $Struct
(declare-const i0$$pre_self@313@01 $Struct)
; [exec]
; var i0$$pre_$contracts: $Map[Int, $Struct]
(declare-const i0$$pre_$contracts@314@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@315@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$2: $Struct
(declare-const l$havoc$2@316@01 $Struct)
; [exec]
; var l$havoc$3: $Map[Int, $Struct]
(declare-const l$havoc$3@317@01 $Map<Int~_$Struct>)
; [exec]
; var l$no_reentrant_call: Bool
(declare-const l$no_reentrant_call@318@01 Bool)
; [exec]
; var l$havoc$4: $Map[Int, $Struct]
(declare-const l$havoc$4@319@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$5: $Map[Int, $Struct]
(declare-const l$havoc$5@320@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$6: $Map[Int, $Struct]
(declare-const l$havoc$6@321@01 $Map<Int~_$Struct>)
; [exec]
; var l$send_fail$1: Bool
(declare-const l$send_fail$1@322@01 Bool)
; [exec]
; var i1$$pre_self: $Struct
(declare-const i1$$pre_self@323@01 $Struct)
; [exec]
; var i1$$pre_$contracts: $Map[Int, $Struct]
(declare-const i1$$pre_$contracts@324@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$7: $Map[Int, $Struct]
(declare-const l$havoc$7@325@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$8: $Struct
(declare-const l$havoc$8@326@01 $Struct)
; [exec]
; var l$havoc$9: $Map[Int, $Struct]
(declare-const l$havoc$9@327@01 $Map<Int~_$Struct>)
; [exec]
; var l$no_reentrant_call$1: Bool
(declare-const l$no_reentrant_call$1@328@01 Bool)
; [exec]
; var l$havoc$10: $Map[Int, $Struct]
(declare-const l$havoc$10@329@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$11: $Map[Int, $Struct]
(declare-const l$havoc$11@330@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$12: $Map[Int, $Struct]
(declare-const l$havoc$12@331@01 $Map<Int~_$Struct>)
; [exec]
; var l$send_fail$2: Bool
(declare-const l$send_fail$2@332@01 Bool)
; [exec]
; var i2$$pre_self: $Struct
(declare-const i2$$pre_self@333@01 $Struct)
; [exec]
; var i2$$pre_$contracts: $Map[Int, $Struct]
(declare-const i2$$pre_$contracts@334@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$13: $Map[Int, $Struct]
(declare-const l$havoc$13@335@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$14: $Struct
(declare-const l$havoc$14@336@01 $Struct)
; [exec]
; var l$havoc$15: $Map[Int, $Struct]
(declare-const l$havoc$15@337@01 $Map<Int~_$Struct>)
; [exec]
; var l$no_reentrant_call$2: Bool
(declare-const l$no_reentrant_call$2@338@01 Bool)
; [exec]
; var l$havoc$16: $Map[Int, $Struct]
(declare-const l$havoc$16@339@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$17: $Map[Int, $Struct]
(declare-const l$havoc$17@340@01 $Map<Int~_$Struct>)
; [exec]
; var l$send_fail$3: Bool
(declare-const l$send_fail$3@341@01 Bool)
; [exec]
; var l$raw_ret: Int
(declare-const l$raw_ret@342@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@343@01 Bool)
; [exec]
; var l$havoc$18: Int
(declare-const l$havoc$18@344@01 Int)
; [exec]
; var l$havoc$19: $Map[Int, $Struct]
(declare-const l$havoc$19@345@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@346@01 $Snap)
(assert (= $t@346@01 ($Snap.combine ($Snap.first $t@346@01) ($Snap.second $t@346@01))))
(assert (= ($Snap.first $t@346@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
(assert (= ($Snap.second $t@346@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@347@01 $Snap)
(assert (= $t@347@01 ($Snap.combine ($Snap.first $t@347@01) ($Snap.second $t@347@01))))
(assert (= ($Snap.first $t@347@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
(assert (= ($Snap.second $t@347@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@348@01 $Snap)
(assert (= $t@348@01 ($Snap.combine ($Snap.first $t@348@01) ($Snap.second $t@348@01))))
(assert (= ($Snap.first $t@348@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@302@01 2))))
(assert (= ($Snap.second $t@348@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@302@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@349@01 $Snap)
(assert (= $t@349@01 ($Snap.combine ($Snap.first $t@349@01) ($Snap.second $t@349@01))))
(assert (= ($Snap.first $t@349@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@302@01 4))))
(assert (= ($Snap.second $t@349@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@350@01 $Snap)
(assert (= $t@350@01 ($Snap.combine ($Snap.first $t@350@01) ($Snap.second $t@350@01))))
(assert (= ($Snap.first $t@350@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@302@01 5))))
(assert (= ($Snap.second $t@350@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@302@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@351@01 $Snap)
(assert (= $t@351@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@352@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 88 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@302@01, 7)), $q0@352@01)) | live]
; [else-branch: 88 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@302@01, 7)), $q0@352@01) | live]
(push) ; 5
; [then-branch: 88 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@302@01, 7)), $q0@352@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) $q0@352@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 88 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@302@01, 7)), $q0@352@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) $q0@352@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) $q0@352@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) $q0@352@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@352@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) $q0@352@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) $q0@352@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) $q0@352@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1019@11@1019@345-aux|)))
(assert (forall (($q0@352@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) $q0@352@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) $q0@352@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) $q0@352@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1019@11@1019@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@353@01 $Snap)
(assert (= $t@353@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q0@354@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@354@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) $q0@354@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) $q0@354@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1020@11@1020@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@355@01 $Snap)
(assert (= $t@355@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@356@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 89 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@302@01, 8)), $q1@356@01)) | live]
; [else-branch: 89 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@302@01, 8)), $q1@356@01) | live]
(push) ; 5
; [then-branch: 89 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@302@01, 8)), $q1@356@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 8)) $q1@356@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 89 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@302@01, 8)), $q1@356@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 8)) $q1@356@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 8)) $q1@356@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 8)) $q1@356@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@356@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 8)) $q1@356@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 8)) $q1@356@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 8)) $q1@356@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1021@11@1021@345-aux|)))
(assert (forall (($q1@356@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 8)) $q1@356@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 8)) $q1@356@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 8)) $q1@356@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1021@11@1021@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@357@01 $Snap)
(assert (= $t@357@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q1@358@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@358@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 8)) $q1@358@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 8)) $q1@358@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1022@11@1022@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@359@01 $Snap)
(assert (= $t@359@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@302@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@360@01 $Snap)
(assert (= $t@360@01 ($Snap.combine ($Snap.first $t@360@01) ($Snap.second $t@360@01))))
(assert (= ($Snap.first $t@360@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@360@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@361@01 $Snap)
(assert (= $t@361@01 ($Snap.combine ($Snap.first $t@361@01) ($Snap.second $t@361@01))))
(assert (= ($Snap.first $t@361@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@299@01 0))))
(assert (= ($Snap.second $t@361@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@299@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@362@01 $Snap)
(assert (= $t@362@01 ($Snap.combine ($Snap.first $t@362@01) ($Snap.second $t@362@01))))
(assert (= ($Snap.first $t@362@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@299@01 1))))
(assert (= ($Snap.second $t@362@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@299@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@363@01 $Snap)
(assert (= $t@363@01 ($Snap.combine ($Snap.first $t@363@01) ($Snap.second $t@363@01))))
(assert (= ($Snap.first $t@363@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@299@01 2))))
(assert (= ($Snap.second $t@363@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@299@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@364@01 $Snap)
(assert (= $t@364@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@299@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@365@01 $Snap)
(assert (= $t@365@01 ($Snap.combine ($Snap.first $t@365@01) ($Snap.second $t@365@01))))
(assert (= ($Snap.first $t@365@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@299@01 4))))
(assert (= ($Snap.second $t@365@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@299@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@366@01 $Snap)
(assert (= $t@366@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@299@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@367@01 $Snap)
(assert (= $t@367@01 ($Snap.combine ($Snap.first $t@367@01) ($Snap.second $t@367@01))))
(assert (= ($Snap.first $t@367@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@298@01 0))))
(assert (= ($Snap.second $t@367@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@298@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@368@01 $Snap)
(assert (= $t@368@01 ($Snap.combine ($Snap.first $t@368@01) ($Snap.second $t@368@01))))
(assert (= ($Snap.first $t@368@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@298@01 1))))
(assert (= ($Snap.second $t@368@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@298@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@369@01 $Snap)
(assert (= $t@369@01 ($Snap.combine ($Snap.first $t@369@01) ($Snap.second $t@369@01))))
(assert (= ($Snap.first $t@369@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@298@01 2))))
(assert (= ($Snap.second $t@369@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@298@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@370@01 $Snap)
(assert (= $t@370@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@298@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@371@01 $Snap)
(assert (= $t@371@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@298@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@372@01 $Snap)
(assert (= $t@372@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@373@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc(self, 0)): Int)
(declare-const $t@374@01 $Snap)
(assert (= $t@374@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@375@01 $Snap)
(assert (= $t@375@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
(declare-const $t@376@01 $Snap)
(assert (= $t@376@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 90 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 90 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 90 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(push) ; 4
; [else-branch: 90 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@377@01 $Snap)
(assert (= $t@377@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 91 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 91 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 91 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@378@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 92 | !(0 <= q$a@378@01) | live]
; [else-branch: 92 | 0 <= q$a@378@01 | live]
(push) ; 7
; [then-branch: 92 | !(0 <= q$a@378@01)]
(assert (not (<= 0 q$a@378@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 92 | 0 <= q$a@378@01]
(assert (<= 0 q$a@378@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@378@01) (not (<= 0 q$a@378@01))))
(push) ; 6
; [then-branch: 93 | 0 <= q$a@378@01 && q$a@378@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 93 | !(0 <= q$a@378@01 && q$a@378@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 93 | 0 <= q$a@378@01 && q$a@378@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@378@01)
  (<= q$a@378@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 7
(push) ; 7
; [else-branch: 93 | !(0 <= q$a@378@01 && q$a@378@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@378@01)
    (<= q$a@378@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@378@01)
      (<= q$a@378@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@378@01)
    (<= q$a@378@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@378@01 Int)) (!
  (and
    (or (<= 0 q$a@378@01) (not (<= 0 q$a@378@01)))
    (or
      (not
        (and
          (<= 0 q$a@378@01)
          (<= q$a@378@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@378@01)
        (<= q$a@378@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) q$a@378@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1044@57@1044@377-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 91 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
    (forall ((q$a@378@01 Int)) (!
      (and
        (or (<= 0 q$a@378@01) (not (<= 0 q$a@378@01)))
        (or
          (not
            (and
              (<= 0 q$a@378@01)
              (<= q$a@378@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@378@01)
            (<= q$a@378@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) q$a@378@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1044@57@1044@377-aux|)))))
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  (forall ((q$a@378@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) q$a@378@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1044@57@1044@377|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@379@01 $Snap)
(assert (= $t@379@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@298@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 94 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 94 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 94 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(push) ; 4
; [else-branch: 94 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 95 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 95 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 95 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@380@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 96 | !(0 <= q$a@380@01) | live]
; [else-branch: 96 | 0 <= q$a@380@01 | live]
(push) ; 7
; [then-branch: 96 | !(0 <= q$a@380@01)]
(assert (not (<= 0 q$a@380@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 96 | 0 <= q$a@380@01]
(assert (<= 0 q$a@380@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@380@01) (not (<= 0 q$a@380@01))))
(push) ; 6
; [then-branch: 97 | 0 <= q$a@380@01 && q$a@380@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 97 | !(0 <= q$a@380@01 && q$a@380@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 97 | 0 <= q$a@380@01 && q$a@380@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@380@01)
  (<= q$a@380@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 7
(push) ; 7
; [else-branch: 97 | !(0 <= q$a@380@01 && q$a@380@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@380@01)
    (<= q$a@380@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@380@01)
      (<= q$a@380@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@380@01)
    (<= q$a@380@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@380@01 Int)) (!
  (and
    (or (<= 0 q$a@380@01) (not (<= 0 q$a@380@01)))
    (or
      (not
        (and
          (<= 0 q$a@380@01)
          (<= q$a@380@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@380@01)
        (<= q$a@380@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) q$a@380@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1064@57@1064@387-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 95 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
    (forall ((q$a@380@01 Int)) (!
      (and
        (or (<= 0 q$a@380@01) (not (<= 0 q$a@380@01)))
        (or
          (not
            (and
              (<= 0 q$a@380@01)
              (<= q$a@380@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@380@01)
            (<= q$a@380@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) q$a@380@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1064@57@1064@387-aux|)))))
; Joined path conditions
(push) ; 3
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  (forall ((q$a@380@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) q$a@380@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1064@57@1064@387|)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  (forall ((q$a@380@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) q$a@380@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1064@57@1064@387|))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not l$send_fail@312@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not l$send_fail@312@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 98 | l$send_fail@312@01 | live]
; [else-branch: 98 | !(l$send_fail@312@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 98 | l$send_fail@312@01]
(assert l$send_fail@312@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@381@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 99 | True | live]
; [else-branch: 99 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 99 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@382@01 $Snap)
(assert (= $t@382@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@383@01 $Struct)
(assert (=
  self@383@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@383@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@383@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@383@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@383@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 100 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 100 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 100 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(push) ; 6
; [else-branch: 100 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@383@01 3)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@383@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@383@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@383@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 101 | $struct_get[Bool]($struct_loc[Int](self@383@01, 3)) | live]
; [else-branch: 101 | !($struct_get[Bool]($struct_loc[Int](self@383@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 101 | $struct_get[Bool]($struct_loc[Int](self@383@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@383@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@384@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 102 | !(0 <= q$a@384@01) | live]
; [else-branch: 102 | 0 <= q$a@384@01 | live]
(push) ; 9
; [then-branch: 102 | !(0 <= q$a@384@01)]
(assert (not (<= 0 q$a@384@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 102 | 0 <= q$a@384@01]
(assert (<= 0 q$a@384@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@384@01) (not (<= 0 q$a@384@01))))
(push) ; 8
; [then-branch: 103 | 0 <= q$a@384@01 && q$a@384@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 103 | !(0 <= q$a@384@01 && q$a@384@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 103 | 0 <= q$a@384@01 && q$a@384@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@384@01)
  (<= q$a@384@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 9
(push) ; 9
; [else-branch: 103 | !(0 <= q$a@384@01 && q$a@384@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@384@01)
    (<= q$a@384@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@384@01)
      (<= q$a@384@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@384@01)
    (<= q$a@384@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@384@01 Int)) (!
  (and
    (or (<= 0 q$a@384@01) (not (<= 0 q$a@384@01)))
    (or
      (not
        (and
          (<= 0 q$a@384@01)
          (<= q$a@384@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@384@01)
        (<= q$a@384@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@383@01 7)) q$a@384@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 6
(push) ; 6
; [else-branch: 101 | !($struct_get[Bool]($struct_loc[Int](self@383@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@383@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@383@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@383@01 3))
    (forall ((q$a@384@01 Int)) (!
      (and
        (or (<= 0 q$a@384@01) (not (<= 0 q$a@384@01)))
        (or
          (not
            (and
              (<= 0 q$a@384@01)
              (<= q$a@384@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@384@01)
            (<= q$a@384@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@383@01 7)) q$a@384@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@383@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@383@01 3))))
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@383@01 3))
  (forall ((q$a@384@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@383@01 7)) q$a@384@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@383@01 3))
  (forall ((q$a@384@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@383@01 7)) q$a@384@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 4
; [then-branch: 104 | False | dead]
; [else-branch: 104 | True | live]
(push) ; 4
; [else-branch: 104 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 98 | !(l$send_fail@312@01)]
(assert (not l$send_fail@312@01))
(pop) ; 3
; [eval] !l$send_fail
(push) ; 3
(set-option :timeout 10)
(assert (not l$send_fail@312@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not l$send_fail@312@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 105 | !(l$send_fail@312@01) | live]
; [else-branch: 105 | l$send_fail@312@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 105 | !(l$send_fail@312@01)]
(assert (not l$send_fail@312@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i0$$pre_self := self
; [exec]
; i0$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$1
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$2
; [exec]
; $contracts := l$havoc$3
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@385@01 $Snap)
(assert (= $t@385@01 ($Snap.combine ($Snap.first $t@385@01) ($Snap.second $t@385@01))))
(assert (= ($Snap.first $t@385@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 0))))
(assert (= ($Snap.second $t@385@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@386@01 $Snap)
(assert (= $t@386@01 ($Snap.combine ($Snap.first $t@386@01) ($Snap.second $t@386@01))))
(assert (= ($Snap.first $t@386@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 1))))
(assert (= ($Snap.second $t@386@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@387@01 $Snap)
(assert (= $t@387@01 ($Snap.combine ($Snap.first $t@387@01) ($Snap.second $t@387@01))))
(assert (= ($Snap.first $t@387@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 2))))
(assert (= ($Snap.second $t@387@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@388@01 $Snap)
(assert (= $t@388@01 ($Snap.combine ($Snap.first $t@388@01) ($Snap.second $t@388@01))))
(assert (= ($Snap.first $t@388@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 4))))
(assert (= ($Snap.second $t@388@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@389@01 $Snap)
(assert (= $t@389@01 ($Snap.combine ($Snap.first $t@389@01) ($Snap.second $t@389@01))))
(assert (= ($Snap.first $t@389@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 5))))
(assert (= ($Snap.second $t@389@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@390@01 $Snap)
(assert (= $t@390@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@391@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 5
; [then-branch: 106 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@316@01, 7)), $q0@391@01)) | live]
; [else-branch: 106 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@316@01, 7)), $q0@391@01) | live]
(push) ; 6
; [then-branch: 106 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@316@01, 7)), $q0@391@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) $q0@391@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 106 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@316@01, 7)), $q0@391@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) $q0@391@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) $q0@391@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) $q0@391@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@391@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) $q0@391@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) $q0@391@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) $q0@391@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1090@11@1090@345-aux|)))
(assert (forall (($q0@391@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) $q0@391@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) $q0@391@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) $q0@391@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1090@11@1090@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@392@01 $Snap)
(assert (= $t@392@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q0@393@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@393@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) $q0@393@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) $q0@393@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1091@11@1091@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@394@01 $Snap)
(assert (= $t@394@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@395@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 5
; [then-branch: 107 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@316@01, 8)), $q1@395@01)) | live]
; [else-branch: 107 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@316@01, 8)), $q1@395@01) | live]
(push) ; 6
; [then-branch: 107 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@316@01, 8)), $q1@395@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 8)) $q1@395@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 107 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@316@01, 8)), $q1@395@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 8)) $q1@395@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 8)) $q1@395@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 8)) $q1@395@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@395@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 8)) $q1@395@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 8)) $q1@395@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 8)) $q1@395@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1092@11@1092@345-aux|)))
(assert (forall (($q1@395@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 8)) $q1@395@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 8)) $q1@395@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 8)) $q1@395@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1092@11@1092@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@396@01 $Snap)
(assert (= $t@396@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q1@397@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@397@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 8)) $q1@397@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 8)) $q1@397@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1093@11@1093@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@398@01 $Snap)
(assert (= $t@398@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@399@01 $Snap)
(assert (= $t@399@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@400@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@400@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) $a@400@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) $a@400@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) $a@400@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1096@11@1096@259|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
(declare-const $t@401@01 $Snap)
(assert (= $t@401@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
(declare-const $t@402@01 $Snap)
(assert (= $t@402@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
(declare-const $t@403@01 $Snap)
(assert (= $t@403@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 108 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 108 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 108 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 5
(push) ; 5
; [else-branch: 108 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@404@01 $Snap)
(assert (= $t@404@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 109 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3)) | live]
; [else-branch: 109 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 109 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@405@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 110 | !(0 <= q$a@405@01) | live]
; [else-branch: 110 | 0 <= q$a@405@01 | live]
(push) ; 8
; [then-branch: 110 | !(0 <= q$a@405@01)]
(assert (not (<= 0 q$a@405@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 110 | 0 <= q$a@405@01]
(assert (<= 0 q$a@405@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@405@01) (not (<= 0 q$a@405@01))))
(push) ; 7
; [then-branch: 111 | 0 <= q$a@405@01 && q$a@405@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 111 | !(0 <= q$a@405@01 && q$a@405@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 111 | 0 <= q$a@405@01 && q$a@405@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@405@01)
  (<= q$a@405@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 8
(push) ; 8
; [else-branch: 111 | !(0 <= q$a@405@01 && q$a@405@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@405@01)
    (<= q$a@405@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@405@01)
      (<= q$a@405@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@405@01)
    (<= q$a@405@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@405@01 Int)) (!
  (and
    (or (<= 0 q$a@405@01) (not (<= 0 q$a@405@01)))
    (or
      (not
        (and
          (<= 0 q$a@405@01)
          (<= q$a@405@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@405@01)
        (<= q$a@405@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) q$a@405@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1100@57@1100@387-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 109 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))
    (forall ((q$a@405@01 Int)) (!
      (and
        (or (<= 0 q$a@405@01) (not (<= 0 q$a@405@01)))
        (or
          (not
            (and
              (<= 0 q$a@405@01)
              (<= q$a@405@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@405@01)
            (<= q$a@405@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) q$a@405@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1100@57@1100@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))
  (forall ((q$a@405@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) q$a@405@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1100@57@1100@387|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@318@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not l$no_reentrant_call@318@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 112 | l$no_reentrant_call@318@01 | live]
; [else-branch: 112 | !(l$no_reentrant_call@318@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 112 | l$no_reentrant_call@318@01]
(assert l$no_reentrant_call@318@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$6
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 113 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 113 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 113 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(push) ; 6
; [else-branch: 113 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 114 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 114 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 114 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@406@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 115 | !(0 <= q$a@406@01) | live]
; [else-branch: 115 | 0 <= q$a@406@01 | live]
(push) ; 9
; [then-branch: 115 | !(0 <= q$a@406@01)]
(assert (not (<= 0 q$a@406@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 115 | 0 <= q$a@406@01]
(assert (<= 0 q$a@406@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@406@01) (not (<= 0 q$a@406@01))))
(push) ; 8
; [then-branch: 116 | 0 <= q$a@406@01 && q$a@406@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 116 | !(0 <= q$a@406@01 && q$a@406@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 116 | 0 <= q$a@406@01 && q$a@406@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@406@01)
  (<= q$a@406@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 9
(push) ; 9
; [else-branch: 116 | !(0 <= q$a@406@01 && q$a@406@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@406@01)
    (<= q$a@406@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@406@01)
      (<= q$a@406@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@406@01)
    (<= q$a@406@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@406@01 Int)) (!
  (and
    (or (<= 0 q$a@406@01) (not (<= 0 q$a@406@01)))
    (or
      (not
        (and
          (<= 0 q$a@406@01)
          (<= q$a@406@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@406@01)
        (<= q$a@406@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) q$a@406@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1129@57@1129@387-aux|)))
(pop) ; 6
(push) ; 6
; [else-branch: 114 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
    (forall ((q$a@406@01 Int)) (!
      (and
        (or (<= 0 q$a@406@01) (not (<= 0 q$a@406@01)))
        (or
          (not
            (and
              (<= 0 q$a@406@01)
              (<= q$a@406@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@406@01)
            (<= q$a@406@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) q$a@406@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1129@57@1129@387-aux|)))))
; Joined path conditions
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  (forall ((q$a@406@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) q$a@406@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1129@57@1129@387|)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  (forall ((q$a@406@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) q$a@406@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1129@57@1129@387|))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not l$send_fail$1@322@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not l$send_fail$1@322@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 117 | l$send_fail$1@322@01 | live]
; [else-branch: 117 | !(l$send_fail$1@322@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 117 | l$send_fail$1@322@01]
(assert l$send_fail$1@322@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@407@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 118 | True | live]
; [else-branch: 118 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 118 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@408@01 $Snap)
(assert (= $t@408@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@409@01 $Struct)
(assert (=
  self@409@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@409@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@409@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@409@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@409@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 119 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 119 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 119 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(push) ; 8
; [else-branch: 119 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@409@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@409@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@409@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@409@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 120 | $struct_get[Bool]($struct_loc[Int](self@409@01, 3)) | live]
; [else-branch: 120 | !($struct_get[Bool]($struct_loc[Int](self@409@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 120 | $struct_get[Bool]($struct_loc[Int](self@409@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@409@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@410@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 121 | !(0 <= q$a@410@01) | live]
; [else-branch: 121 | 0 <= q$a@410@01 | live]
(push) ; 11
; [then-branch: 121 | !(0 <= q$a@410@01)]
(assert (not (<= 0 q$a@410@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 121 | 0 <= q$a@410@01]
(assert (<= 0 q$a@410@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@410@01) (not (<= 0 q$a@410@01))))
(push) ; 10
; [then-branch: 122 | 0 <= q$a@410@01 && q$a@410@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 122 | !(0 <= q$a@410@01 && q$a@410@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 122 | 0 <= q$a@410@01 && q$a@410@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@410@01)
  (<= q$a@410@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 11
(push) ; 11
; [else-branch: 122 | !(0 <= q$a@410@01 && q$a@410@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@410@01)
    (<= q$a@410@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@410@01)
      (<= q$a@410@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@410@01)
    (<= q$a@410@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@410@01 Int)) (!
  (and
    (or (<= 0 q$a@410@01) (not (<= 0 q$a@410@01)))
    (or
      (not
        (and
          (<= 0 q$a@410@01)
          (<= q$a@410@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@410@01)
        (<= q$a@410@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@409@01 7)) q$a@410@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 120 | !($struct_get[Bool]($struct_loc[Int](self@409@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@409@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@409@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@409@01 3))
    (forall ((q$a@410@01 Int)) (!
      (and
        (or (<= 0 q$a@410@01) (not (<= 0 q$a@410@01)))
        (or
          (not
            (and
              (<= 0 q$a@410@01)
              (<= q$a@410@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@410@01)
            (<= q$a@410@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@409@01 7)) q$a@410@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@409@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@409@01 3))))
(push) ; 7
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@409@01 3))
  (forall ((q$a@410@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@409@01 7)) q$a@410@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@409@01 3))
  (forall ((q$a@410@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@409@01 7)) q$a@410@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 6
; [then-branch: 123 | False | dead]
; [else-branch: 123 | True | live]
(push) ; 6
; [else-branch: 123 | True]
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 117 | !(l$send_fail$1@322@01)]
(assert (not l$send_fail$1@322@01))
(pop) ; 5
; [eval] !l$send_fail$1
(push) ; 5
(set-option :timeout 10)
(assert (not l$send_fail$1@322@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not l$send_fail$1@322@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 124 | !(l$send_fail$1@322@01) | live]
; [else-branch: 124 | l$send_fail$1@322@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 124 | !(l$send_fail$1@322@01)]
(assert (not l$send_fail$1@322@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i1$$pre_self := self
; [exec]
; i1$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$7
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$8
; [exec]
; $contracts := l$havoc$9
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@411@01 $Snap)
(assert (= $t@411@01 ($Snap.combine ($Snap.first $t@411@01) ($Snap.second $t@411@01))))
(assert (= ($Snap.first $t@411@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 0))))
(assert (= ($Snap.second $t@411@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@412@01 $Snap)
(assert (= $t@412@01 ($Snap.combine ($Snap.first $t@412@01) ($Snap.second $t@412@01))))
(assert (= ($Snap.first $t@412@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 1))))
(assert (= ($Snap.second $t@412@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@413@01 $Snap)
(assert (= $t@413@01 ($Snap.combine ($Snap.first $t@413@01) ($Snap.second $t@413@01))))
(assert (= ($Snap.first $t@413@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 2))))
(assert (= ($Snap.second $t@413@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@414@01 $Snap)
(assert (= $t@414@01 ($Snap.combine ($Snap.first $t@414@01) ($Snap.second $t@414@01))))
(assert (= ($Snap.first $t@414@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 4))))
(assert (= ($Snap.second $t@414@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@415@01 $Snap)
(assert (= $t@415@01 ($Snap.combine ($Snap.first $t@415@01) ($Snap.second $t@415@01))))
(assert (= ($Snap.first $t@415@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 5))))
(assert (= ($Snap.second $t@415@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@416@01 $Snap)
(assert (= $t@416@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@417@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 7
; [then-branch: 125 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$8@326@01, 7)), $q0@417@01)) | live]
; [else-branch: 125 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$8@326@01, 7)), $q0@417@01) | live]
(push) ; 8
; [then-branch: 125 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$8@326@01, 7)), $q0@417@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@417@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 125 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$8@326@01, 7)), $q0@417@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@417@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@417@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@417@01)))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@417@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@417@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@417@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@417@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1155@11@1155@345-aux|)))
(assert (forall (($q0@417@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@417@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@417@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@417@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1155@11@1155@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@418@01 $Snap)
(assert (= $t@418@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q0@419@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@419@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@419@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@419@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1156@11@1156@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@420@01 $Snap)
(assert (= $t@420@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@421@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 7
; [then-branch: 126 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$8@326@01, 8)), $q1@421@01)) | live]
; [else-branch: 126 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$8@326@01, 8)), $q1@421@01) | live]
(push) ; 8
; [then-branch: 126 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$8@326@01, 8)), $q1@421@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@421@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 126 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$8@326@01, 8)), $q1@421@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@421@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@421@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@421@01)))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@421@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@421@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@421@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@421@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1157@11@1157@345-aux|)))
(assert (forall (($q1@421@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@421@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@421@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@421@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1157@11@1157@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@422@01 $Snap)
(assert (= $t@422@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q1@423@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@423@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@423@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@423@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1158@11@1158@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@424@01 $Snap)
(assert (= $t@424@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@425@01 $Snap)
(assert (= $t@425@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@426@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@426@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $a@426@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) $a@426@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $a@426@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1161@11@1161@259|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
(declare-const $t@427@01 $Snap)
(assert (= $t@427@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
(declare-const $t@428@01 $Snap)
(assert (= $t@428@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
(declare-const $t@429@01 $Snap)
(assert (= $t@429@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 127 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 127 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 127 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 7
(push) ; 7
; [else-branch: 127 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@430@01 $Snap)
(assert (= $t@430@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 128 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)) | live]
; [else-branch: 128 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 128 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@431@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 129 | !(0 <= q$a@431@01) | live]
; [else-branch: 129 | 0 <= q$a@431@01 | live]
(push) ; 10
; [then-branch: 129 | !(0 <= q$a@431@01)]
(assert (not (<= 0 q$a@431@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 129 | 0 <= q$a@431@01]
(assert (<= 0 q$a@431@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@431@01) (not (<= 0 q$a@431@01))))
(push) ; 9
; [then-branch: 130 | 0 <= q$a@431@01 && q$a@431@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 130 | !(0 <= q$a@431@01 && q$a@431@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 130 | 0 <= q$a@431@01 && q$a@431@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@431@01)
  (<= q$a@431@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 10
(push) ; 10
; [else-branch: 130 | !(0 <= q$a@431@01 && q$a@431@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@431@01)
    (<= q$a@431@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@431@01)
      (<= q$a@431@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@431@01)
    (<= q$a@431@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@431@01 Int)) (!
  (and
    (or (<= 0 q$a@431@01) (not (<= 0 q$a@431@01)))
    (or
      (not
        (and
          (<= 0 q$a@431@01)
          (<= q$a@431@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@431@01)
        (<= q$a@431@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@431@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1165@57@1165@387-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 128 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
    (forall ((q$a@431@01 Int)) (!
      (and
        (or (<= 0 q$a@431@01) (not (<= 0 q$a@431@01)))
        (or
          (not
            (and
              (<= 0 q$a@431@01)
              (<= q$a@431@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@431@01)
            (<= q$a@431@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@431@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1165@57@1165@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  (forall ((q$a@431@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@431@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1165@57@1165@387|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call$1@328@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not l$no_reentrant_call$1@328@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 131 | l$no_reentrant_call$1@328@01 | live]
; [else-branch: 131 | !(l$no_reentrant_call$1@328@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 131 | l$no_reentrant_call$1@328@01]
(assert l$no_reentrant_call$1@328@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$10
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$11
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$12
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 132 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 132 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 132 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(push) ; 8
; [else-branch: 132 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 133 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 133 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 133 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@432@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 134 | !(0 <= q$a@432@01) | live]
; [else-branch: 134 | 0 <= q$a@432@01 | live]
(push) ; 11
; [then-branch: 134 | !(0 <= q$a@432@01)]
(assert (not (<= 0 q$a@432@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 134 | 0 <= q$a@432@01]
(assert (<= 0 q$a@432@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@432@01) (not (<= 0 q$a@432@01))))
(push) ; 10
; [then-branch: 135 | 0 <= q$a@432@01 && q$a@432@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 135 | !(0 <= q$a@432@01 && q$a@432@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 135 | 0 <= q$a@432@01 && q$a@432@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@432@01)
  (<= q$a@432@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 11
(push) ; 11
; [else-branch: 135 | !(0 <= q$a@432@01 && q$a@432@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@432@01)
    (<= q$a@432@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@432@01)
      (<= q$a@432@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@432@01)
    (<= q$a@432@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@432@01 Int)) (!
  (and
    (or (<= 0 q$a@432@01) (not (<= 0 q$a@432@01)))
    (or
      (not
        (and
          (<= 0 q$a@432@01)
          (<= q$a@432@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@432@01)
        (<= q$a@432@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) q$a@432@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1194@57@1194@387-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 133 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
    (forall ((q$a@432@01 Int)) (!
      (and
        (or (<= 0 q$a@432@01) (not (<= 0 q$a@432@01)))
        (or
          (not
            (and
              (<= 0 q$a@432@01)
              (<= q$a@432@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@432@01)
            (<= q$a@432@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) q$a@432@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1194@57@1194@387-aux|)))))
; Joined path conditions
(push) ; 7
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  (forall ((q$a@432@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) q$a@432@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1194@57@1194@387|)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  (forall ((q$a@432@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) q$a@432@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1194@57@1194@387|))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not l$send_fail$2@332@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not l$send_fail$2@332@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 136 | l$send_fail$2@332@01 | live]
; [else-branch: 136 | !(l$send_fail$2@332@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 136 | l$send_fail$2@332@01]
(assert l$send_fail$2@332@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@433@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 137 | True | live]
; [else-branch: 137 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 137 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@434@01 $Snap)
(assert (= $t@434@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@435@01 $Struct)
(assert (=
  self@435@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@435@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@435@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@435@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@435@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 138 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 138 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 138 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(push) ; 10
; [else-branch: 138 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@435@01 3)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@435@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@435@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@435@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 139 | $struct_get[Bool]($struct_loc[Int](self@435@01, 3)) | live]
; [else-branch: 139 | !($struct_get[Bool]($struct_loc[Int](self@435@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 139 | $struct_get[Bool]($struct_loc[Int](self@435@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@435@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@436@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 140 | !(0 <= q$a@436@01) | live]
; [else-branch: 140 | 0 <= q$a@436@01 | live]
(push) ; 13
; [then-branch: 140 | !(0 <= q$a@436@01)]
(assert (not (<= 0 q$a@436@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 140 | 0 <= q$a@436@01]
(assert (<= 0 q$a@436@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@436@01) (not (<= 0 q$a@436@01))))
(push) ; 12
; [then-branch: 141 | 0 <= q$a@436@01 && q$a@436@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 141 | !(0 <= q$a@436@01 && q$a@436@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 141 | 0 <= q$a@436@01 && q$a@436@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@436@01)
  (<= q$a@436@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 13
(push) ; 13
; [else-branch: 141 | !(0 <= q$a@436@01 && q$a@436@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@436@01)
    (<= q$a@436@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@436@01)
      (<= q$a@436@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@436@01)
    (<= q$a@436@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@436@01 Int)) (!
  (and
    (or (<= 0 q$a@436@01) (not (<= 0 q$a@436@01)))
    (or
      (not
        (and
          (<= 0 q$a@436@01)
          (<= q$a@436@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@436@01)
        (<= q$a@436@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@435@01 7)) q$a@436@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 10
(push) ; 10
; [else-branch: 139 | !($struct_get[Bool]($struct_loc[Int](self@435@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@435@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@435@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@435@01 3))
    (forall ((q$a@436@01 Int)) (!
      (and
        (or (<= 0 q$a@436@01) (not (<= 0 q$a@436@01)))
        (or
          (not
            (and
              (<= 0 q$a@436@01)
              (<= q$a@436@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@436@01)
            (<= q$a@436@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@435@01 7)) q$a@436@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@435@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@435@01 3))))
(push) ; 9
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@435@01 3))
  (forall ((q$a@436@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@435@01 7)) q$a@436@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@435@01 3))
  (forall ((q$a@436@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@435@01 7)) q$a@436@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 8
; [then-branch: 142 | False | dead]
; [else-branch: 142 | True | live]
(push) ; 8
; [else-branch: 142 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 136 | !(l$send_fail$2@332@01)]
(assert (not l$send_fail$2@332@01))
(pop) ; 7
; [eval] !l$send_fail$2
(push) ; 7
(set-option :timeout 10)
(assert (not l$send_fail$2@332@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not l$send_fail$2@332@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 143 | !(l$send_fail$2@332@01) | live]
; [else-branch: 143 | l$send_fail$2@332@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 143 | !(l$send_fail$2@332@01)]
(assert (not l$send_fail$2@332@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i2$$pre_self := self
; [exec]
; i2$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$13
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$14
; [exec]
; $contracts := l$havoc$15
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@437@01 $Snap)
(assert (= $t@437@01 ($Snap.combine ($Snap.first $t@437@01) ($Snap.second $t@437@01))))
(assert (= ($Snap.first $t@437@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 0))))
(assert (= ($Snap.second $t@437@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@438@01 $Snap)
(assert (= $t@438@01 ($Snap.combine ($Snap.first $t@438@01) ($Snap.second $t@438@01))))
(assert (= ($Snap.first $t@438@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 1))))
(assert (= ($Snap.second $t@438@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@439@01 $Snap)
(assert (= $t@439@01 ($Snap.combine ($Snap.first $t@439@01) ($Snap.second $t@439@01))))
(assert (= ($Snap.first $t@439@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 2))))
(assert (= ($Snap.second $t@439@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@440@01 $Snap)
(assert (= $t@440@01 ($Snap.combine ($Snap.first $t@440@01) ($Snap.second $t@440@01))))
(assert (= ($Snap.first $t@440@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 4))))
(assert (= ($Snap.second $t@440@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@441@01 $Snap)
(assert (= $t@441@01 ($Snap.combine ($Snap.first $t@441@01) ($Snap.second $t@441@01))))
(assert (= ($Snap.first $t@441@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 5))))
(assert (= ($Snap.second $t@441@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@442@01 $Snap)
(assert (= $t@442@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@443@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 9
; [then-branch: 144 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 7)), $q0@443@01)) | live]
; [else-branch: 144 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 7)), $q0@443@01) | live]
(push) ; 10
; [then-branch: 144 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 7)), $q0@443@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@443@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 144 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 7)), $q0@443@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@443@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@443@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@443@01)))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@443@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@443@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@443@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@443@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1220@11@1220@345-aux|)))
(assert (forall (($q0@443@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@443@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@443@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@443@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1220@11@1220@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@444@01 $Snap)
(assert (= $t@444@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q0@445@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@445@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@445@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@445@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1221@11@1221@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@446@01 $Snap)
(assert (= $t@446@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@447@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 9
; [then-branch: 145 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 8)), $q1@447@01)) | live]
; [else-branch: 145 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 8)), $q1@447@01) | live]
(push) ; 10
; [then-branch: 145 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 8)), $q1@447@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@447@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 145 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 8)), $q1@447@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@447@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@447@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@447@01)))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@447@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@447@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@447@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@447@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1222@11@1222@345-aux|)))
(assert (forall (($q1@447@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@447@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@447@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@447@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1222@11@1222@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@448@01 $Snap)
(assert (= $t@448@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q1@449@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@449@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@449@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@449@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1223@11@1223@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@450@01 $Snap)
(assert (= $t@450@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@451@01 $Snap)
(assert (= $t@451@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@452@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@452@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $a@452@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) $a@452@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $a@452@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1226@11@1226@259|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
(declare-const $t@453@01 $Snap)
(assert (= $t@453@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
(declare-const $t@454@01 $Snap)
(assert (= $t@454@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
(declare-const $t@455@01 $Snap)
(assert (= $t@455@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 146 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 146 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 146 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(push) ; 9
; [else-branch: 146 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@456@01 $Snap)
(assert (= $t@456@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 147 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)) | live]
; [else-branch: 147 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 147 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@457@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 148 | !(0 <= q$a@457@01) | live]
; [else-branch: 148 | 0 <= q$a@457@01 | live]
(push) ; 12
; [then-branch: 148 | !(0 <= q$a@457@01)]
(assert (not (<= 0 q$a@457@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 148 | 0 <= q$a@457@01]
(assert (<= 0 q$a@457@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@457@01) (not (<= 0 q$a@457@01))))
(push) ; 11
; [then-branch: 149 | 0 <= q$a@457@01 && q$a@457@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 149 | !(0 <= q$a@457@01 && q$a@457@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 149 | 0 <= q$a@457@01 && q$a@457@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@457@01)
  (<= q$a@457@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 12
(push) ; 12
; [else-branch: 149 | !(0 <= q$a@457@01 && q$a@457@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@457@01)
    (<= q$a@457@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@457@01)
      (<= q$a@457@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@457@01)
    (<= q$a@457@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@457@01 Int)) (!
  (and
    (or (<= 0 q$a@457@01) (not (<= 0 q$a@457@01)))
    (or
      (not
        (and
          (<= 0 q$a@457@01)
          (<= q$a@457@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@457@01)
        (<= q$a@457@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@457@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1230@57@1230@387-aux|)))
(pop) ; 9
(push) ; 9
; [else-branch: 147 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
    (forall ((q$a@457@01 Int)) (!
      (and
        (or (<= 0 q$a@457@01) (not (<= 0 q$a@457@01)))
        (or
          (not
            (and
              (<= 0 q$a@457@01)
              (<= q$a@457@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@457@01)
            (<= q$a@457@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@457@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1230@57@1230@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  (forall ((q$a@457@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@457@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1230@57@1230@387|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call$2@338@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not l$no_reentrant_call$2@338@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 150 | l$no_reentrant_call$2@338@01 | live]
; [else-branch: 150 | !(l$no_reentrant_call$2@338@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 150 | l$no_reentrant_call$2@338@01]
(assert l$no_reentrant_call$2@338@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$16
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$17
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 151 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 151 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 151 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(push) ; 10
; [else-branch: 151 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 152 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 152 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 152 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@458@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 153 | !(0 <= q$a@458@01) | live]
; [else-branch: 153 | 0 <= q$a@458@01 | live]
(push) ; 13
; [then-branch: 153 | !(0 <= q$a@458@01)]
(assert (not (<= 0 q$a@458@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 153 | 0 <= q$a@458@01]
(assert (<= 0 q$a@458@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@458@01) (not (<= 0 q$a@458@01))))
(push) ; 12
; [then-branch: 154 | 0 <= q$a@458@01 && q$a@458@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 154 | !(0 <= q$a@458@01 && q$a@458@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 154 | 0 <= q$a@458@01 && q$a@458@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@458@01)
  (<= q$a@458@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 13
(push) ; 13
; [else-branch: 154 | !(0 <= q$a@458@01 && q$a@458@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@458@01)
    (<= q$a@458@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@458@01)
      (<= q$a@458@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@458@01)
    (<= q$a@458@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@458@01 Int)) (!
  (and
    (or (<= 0 q$a@458@01) (not (<= 0 q$a@458@01)))
    (or
      (not
        (and
          (<= 0 q$a@458@01)
          (<= q$a@458@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@458@01)
        (<= q$a@458@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) q$a@458@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387-aux|)))
(pop) ; 10
(push) ; 10
; [else-branch: 152 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
    (forall ((q$a@458@01 Int)) (!
      (and
        (or (<= 0 q$a@458@01) (not (<= 0 q$a@458@01)))
        (or
          (not
            (and
              (<= 0 q$a@458@01)
              (<= q$a@458@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@458@01)
            (<= q$a@458@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) q$a@458@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387-aux|)))))
; Joined path conditions
(push) ; 9
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  (forall ((q$a@458@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) q$a@458@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387|)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  (forall ((q$a@458@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 7)) q$a@458@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387|))))
; [exec]
; inhale -170141183460469231731687303715884105728 <= l$raw_ret &&
;   l$raw_ret <= 170141183460469231731687303715884105727
(declare-const $t@459@01 $Snap)
(assert (= $t@459@01 ($Snap.combine ($Snap.first $t@459@01) ($Snap.second $t@459@01))))
(assert (= ($Snap.first $t@459@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= l$raw_ret
; [eval] -170141183460469231731687303715884105728
(assert (<= (- 0 170141183460469231731687303715884105728) l$raw_ret@342@01))
(assert (= ($Snap.second $t@459@01) $Snap.unit))
; [eval] l$raw_ret <= 170141183460469231731687303715884105727
(assert (<= l$raw_ret@342@01 170141183460469231731687303715884105727))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not l$send_fail$3@341@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not l$send_fail$3@341@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 155 | l$send_fail$3@341@01 | live]
; [else-branch: 155 | !(l$send_fail$3@341@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 155 | l$send_fail$3@341@01]
(assert l$send_fail$3@341@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@460@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 156 | True | live]
; [else-branch: 156 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 156 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@461@01 $Snap)
(assert (= $t@461@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@462@01 $Struct)
(assert (=
  self@462@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@462@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@462@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@462@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@462@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 157 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 157 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 157 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(push) ; 12
; [else-branch: 157 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@462@01 3)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@462@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@462@01 3)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@462@01 3))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 158 | $struct_get[Bool]($struct_loc[Int](self@462@01, 3)) | live]
; [else-branch: 158 | !($struct_get[Bool]($struct_loc[Int](self@462@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 158 | $struct_get[Bool]($struct_loc[Int](self@462@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@462@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@463@01 Int)
(push) ; 13
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 14
; [then-branch: 159 | !(0 <= q$a@463@01) | live]
; [else-branch: 159 | 0 <= q$a@463@01 | live]
(push) ; 15
; [then-branch: 159 | !(0 <= q$a@463@01)]
(assert (not (<= 0 q$a@463@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 159 | 0 <= q$a@463@01]
(assert (<= 0 q$a@463@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@463@01) (not (<= 0 q$a@463@01))))
(push) ; 14
; [then-branch: 160 | 0 <= q$a@463@01 && q$a@463@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 160 | !(0 <= q$a@463@01 && q$a@463@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 15
; [then-branch: 160 | 0 <= q$a@463@01 && q$a@463@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@463@01)
  (<= q$a@463@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 15
(push) ; 15
; [else-branch: 160 | !(0 <= q$a@463@01 && q$a@463@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@463@01)
    (<= q$a@463@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@463@01)
      (<= q$a@463@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@463@01)
    (<= q$a@463@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@463@01 Int)) (!
  (and
    (or (<= 0 q$a@463@01) (not (<= 0 q$a@463@01)))
    (or
      (not
        (and
          (<= 0 q$a@463@01)
          (<= q$a@463@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@463@01)
        (<= q$a@463@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@462@01 7)) q$a@463@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 12
(push) ; 12
; [else-branch: 158 | !($struct_get[Bool]($struct_loc[Int](self@462@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@462@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@462@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@462@01 3))
    (forall ((q$a@463@01 Int)) (!
      (and
        (or (<= 0 q$a@463@01) (not (<= 0 q$a@463@01)))
        (or
          (not
            (and
              (<= 0 q$a@463@01)
              (<= q$a@463@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@463@01)
            (<= q$a@463@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@462@01 7)) q$a@463@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@462@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@462@01 3))))
(push) ; 11
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@462@01 3))
  (forall ((q$a@463@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@462@01 7)) q$a@463@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@462@01 3))
  (forall ((q$a@463@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@462@01 7)) q$a@463@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 10
; [then-branch: 161 | False | dead]
; [else-branch: 161 | True | live]
(push) ; 10
; [else-branch: 161 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 155 | !(l$send_fail$3@341@01)]
(assert (not l$send_fail$3@341@01))
(pop) ; 9
; [eval] !l$send_fail$3
(push) ; 9
(set-option :timeout 10)
(assert (not l$send_fail$3@341@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not l$send_fail$3@341@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 162 | !(l$send_fail$3@341@01) | live]
; [else-branch: 162 | l$send_fail$3@341@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 162 | !(l$send_fail$3@341@01)]
(assert (not l$send_fail$3@341@01))
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [eval] !(l$raw_ret == 4)
; [eval] l$raw_ret == 4
(push) ; 10
(set-option :timeout 10)
(assert (not (= l$raw_ret@342@01 4)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= l$raw_ret@342@01 4))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 163 | l$raw_ret@342@01 != 4 | live]
; [else-branch: 163 | l$raw_ret@342@01 == 4 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 163 | l$raw_ret@342@01 != 4]
(assert (not (= l$raw_ret@342@01 4)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 164 | True | live]
; [else-branch: 164 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 164 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@464@01 $Snap)
(assert (= $t@464@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@465@01 $Struct)
(assert (=
  self@465@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 12
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@465@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@465@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 12
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@465@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@465@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 165 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 165 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 165 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 13
(push) ; 13
; [else-branch: 165 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@465@01 3)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@465@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@465@01 3)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@465@01 3))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 166 | $struct_get[Bool]($struct_loc[Int](self@465@01, 3)) | live]
; [else-branch: 166 | !($struct_get[Bool]($struct_loc[Int](self@465@01, 3))) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 166 | $struct_get[Bool]($struct_loc[Int](self@465@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@465@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@466@01 Int)
(push) ; 14
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 15
; [then-branch: 167 | !(0 <= q$a@466@01) | live]
; [else-branch: 167 | 0 <= q$a@466@01 | live]
(push) ; 16
; [then-branch: 167 | !(0 <= q$a@466@01)]
(assert (not (<= 0 q$a@466@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 167 | 0 <= q$a@466@01]
(assert (<= 0 q$a@466@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@466@01) (not (<= 0 q$a@466@01))))
(push) ; 15
; [then-branch: 168 | 0 <= q$a@466@01 && q$a@466@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 168 | !(0 <= q$a@466@01 && q$a@466@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 16
; [then-branch: 168 | 0 <= q$a@466@01 && q$a@466@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@466@01)
  (<= q$a@466@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 16
(push) ; 16
; [else-branch: 168 | !(0 <= q$a@466@01 && q$a@466@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@466@01)
    (<= q$a@466@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@466@01)
      (<= q$a@466@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@466@01)
    (<= q$a@466@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@466@01 Int)) (!
  (and
    (or (<= 0 q$a@466@01) (not (<= 0 q$a@466@01)))
    (or
      (not
        (and
          (<= 0 q$a@466@01)
          (<= q$a@466@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@466@01)
        (<= q$a@466@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@465@01 7)) q$a@466@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 13
(push) ; 13
; [else-branch: 166 | !($struct_get[Bool]($struct_loc[Int](self@465@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@465@01 3))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@465@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@465@01 3))
    (forall ((q$a@466@01 Int)) (!
      (and
        (or (<= 0 q$a@466@01) (not (<= 0 q$a@466@01)))
        (or
          (not
            (and
              (<= 0 q$a@466@01)
              (<= q$a@466@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@466@01)
            (<= q$a@466@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@465@01 7)) q$a@466@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@465@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@465@01 3))))
(push) ; 12
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@465@01 3))
  (forall ((q$a@466@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@465@01 7)) q$a@466@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@465@01 3))
  (forall ((q$a@466@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@465@01 7)) q$a@466@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 11
; [then-branch: 169 | False | dead]
; [else-branch: 169 | True | live]
(push) ; 11
; [else-branch: 169 | True]
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 163 | l$raw_ret@342@01 == 4]
(assert (= l$raw_ret@342@01 4))
(pop) ; 10
; [eval] !!(l$raw_ret == 4)
; [eval] !(l$raw_ret == 4)
; [eval] l$raw_ret == 4
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= l$raw_ret@342@01 4))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= l$raw_ret@342@01 4)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 170 | l$raw_ret@342@01 == 4 | live]
; [else-branch: 170 | l$raw_ret@342@01 != 4 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 170 | l$raw_ret@342@01 == 4]
(assert (= l$raw_ret@342@01 4))
; [exec]
; label return
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@343@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@343@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 171 | $out_of_gas@343@01 | live]
; [else-branch: 171 | !($out_of_gas@343@01) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 171 | $out_of_gas@343@01]
(assert $out_of_gas@343@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 172 | True | live]
; [else-branch: 172 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 172 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@467@01 $Snap)
(assert (= $t@467@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@468@01 $Struct)
(assert (=
  self@468@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@468@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@468@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@468@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@468@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 173 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 173 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 173 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 14
(push) ; 14
; [else-branch: 173 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@468@01 3)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@468@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@468@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@468@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 174 | $struct_get[Bool]($struct_loc[Int](self@468@01, 3)) | live]
; [else-branch: 174 | !($struct_get[Bool]($struct_loc[Int](self@468@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 174 | $struct_get[Bool]($struct_loc[Int](self@468@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@468@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@469@01 Int)
(push) ; 15
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 16
; [then-branch: 175 | !(0 <= q$a@469@01) | live]
; [else-branch: 175 | 0 <= q$a@469@01 | live]
(push) ; 17
; [then-branch: 175 | !(0 <= q$a@469@01)]
(assert (not (<= 0 q$a@469@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 175 | 0 <= q$a@469@01]
(assert (<= 0 q$a@469@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@469@01) (not (<= 0 q$a@469@01))))
(push) ; 16
; [then-branch: 176 | 0 <= q$a@469@01 && q$a@469@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 176 | !(0 <= q$a@469@01 && q$a@469@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 17
; [then-branch: 176 | 0 <= q$a@469@01 && q$a@469@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@469@01)
  (<= q$a@469@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 17
(push) ; 17
; [else-branch: 176 | !(0 <= q$a@469@01 && q$a@469@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@469@01)
    (<= q$a@469@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@469@01)
      (<= q$a@469@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@469@01)
    (<= q$a@469@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@469@01 Int)) (!
  (and
    (or (<= 0 q$a@469@01) (not (<= 0 q$a@469@01)))
    (or
      (not
        (and
          (<= 0 q$a@469@01)
          (<= q$a@469@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@469@01)
        (<= q$a@469@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@468@01 7)) q$a@469@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 14
(push) ; 14
; [else-branch: 174 | !($struct_get[Bool]($struct_loc[Int](self@468@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@468@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@468@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@468@01 3))
    (forall ((q$a@469@01 Int)) (!
      (and
        (or (<= 0 q$a@469@01) (not (<= 0 q$a@469@01)))
        (or
          (not
            (and
              (<= 0 q$a@469@01)
              (<= q$a@469@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@469@01)
            (<= q$a@469@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@468@01 7)) q$a@469@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@468@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@468@01 3))))
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@468@01 3))
  (forall ((q$a@469@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@468@01 7)) q$a@469@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@468@01 3))
  (forall ((q$a@469@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@468@01 7)) q$a@469@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 12
; [then-branch: 177 | False | dead]
; [else-branch: 177 | True | live]
(push) ; 12
; [else-branch: 177 | True]
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 171 | !($out_of_gas@343@01)]
(assert (not $out_of_gas@343@01))
(pop) ; 11
; [eval] !$out_of_gas
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@343@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@343@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 178 | !($out_of_gas@343@01) | live]
; [else-branch: 178 | $out_of_gas@343@01 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 178 | !($out_of_gas@343@01)]
(assert (not $out_of_gas@343@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 179 | False | dead]
; [else-branch: 179 | True | live]
(push) ; 12
; [else-branch: 179 | True]
(pop) ; 12
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 180 | True | live]
; [else-branch: 180 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 180 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@470@01 $Snap)
(assert (= $t@470@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@471@01 $Struct)
(assert (=
  self@471@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@471@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@471@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@471@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@471@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 181 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 181 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 181 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 14
(push) ; 14
; [else-branch: 181 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@471@01 3)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@471@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@471@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@471@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 182 | $struct_get[Bool]($struct_loc[Int](self@471@01, 3)) | live]
; [else-branch: 182 | !($struct_get[Bool]($struct_loc[Int](self@471@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 182 | $struct_get[Bool]($struct_loc[Int](self@471@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@471@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@472@01 Int)
(push) ; 15
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 16
; [then-branch: 183 | !(0 <= q$a@472@01) | live]
; [else-branch: 183 | 0 <= q$a@472@01 | live]
(push) ; 17
; [then-branch: 183 | !(0 <= q$a@472@01)]
(assert (not (<= 0 q$a@472@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 183 | 0 <= q$a@472@01]
(assert (<= 0 q$a@472@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@472@01) (not (<= 0 q$a@472@01))))
(push) ; 16
; [then-branch: 184 | 0 <= q$a@472@01 && q$a@472@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 184 | !(0 <= q$a@472@01 && q$a@472@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 17
; [then-branch: 184 | 0 <= q$a@472@01 && q$a@472@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@472@01)
  (<= q$a@472@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 17
(push) ; 17
; [else-branch: 184 | !(0 <= q$a@472@01 && q$a@472@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@472@01)
    (<= q$a@472@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@472@01)
      (<= q$a@472@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@472@01)
    (<= q$a@472@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@472@01 Int)) (!
  (and
    (or (<= 0 q$a@472@01) (not (<= 0 q$a@472@01)))
    (or
      (not
        (and
          (<= 0 q$a@472@01)
          (<= q$a@472@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@472@01)
        (<= q$a@472@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@471@01 7)) q$a@472@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 14
(push) ; 14
; [else-branch: 182 | !($struct_get[Bool]($struct_loc[Int](self@471@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@471@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@471@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@471@01 3))
    (forall ((q$a@472@01 Int)) (!
      (and
        (or (<= 0 q$a@472@01) (not (<= 0 q$a@472@01)))
        (or
          (not
            (and
              (<= 0 q$a@472@01)
              (<= q$a@472@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@472@01)
            (<= q$a@472@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@471@01 7)) q$a@472@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@471@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@471@01 3))))
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@471@01 3))
  (forall ((q$a@472@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@471@01 7)) q$a@472@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@471@01 3))
  (forall ((q$a@472@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@471@01 7)) q$a@472@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 178 | $out_of_gas@343@01]
(assert $out_of_gas@343@01)
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 170 | l$raw_ret@342@01 != 4]
(assert (not (= l$raw_ret@342@01 4)))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 162 | l$send_fail$3@341@01]
(assert l$send_fail$3@341@01)
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 150 | !(l$no_reentrant_call$2@338@01)]
(assert (not l$no_reentrant_call$2@338@01))
(pop) ; 8
; [eval] !l$no_reentrant_call$2
(push) ; 8
(set-option :timeout 10)
(assert (not l$no_reentrant_call$2@338@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call$2@338@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 185 | !(l$no_reentrant_call$2@338@01) | live]
; [else-branch: 185 | l$no_reentrant_call$2@338@01 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 185 | !(l$no_reentrant_call$2@338@01)]
(assert (not l$no_reentrant_call$2@338@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$16
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$17
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 186 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)) | live]
; [else-branch: 186 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 186 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(push) ; 10
; [else-branch: 186 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 187 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)) | live]
; [else-branch: 187 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 187 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@473@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 188 | !(0 <= q$a@473@01) | live]
; [else-branch: 188 | 0 <= q$a@473@01 | live]
(push) ; 13
; [then-branch: 188 | !(0 <= q$a@473@01)]
(assert (not (<= 0 q$a@473@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 188 | 0 <= q$a@473@01]
(assert (<= 0 q$a@473@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@473@01) (not (<= 0 q$a@473@01))))
(push) ; 12
; [then-branch: 189 | 0 <= q$a@473@01 && q$a@473@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 189 | !(0 <= q$a@473@01 && q$a@473@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 189 | 0 <= q$a@473@01 && q$a@473@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@473@01)
  (<= q$a@473@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 13
(push) ; 13
; [else-branch: 189 | !(0 <= q$a@473@01 && q$a@473@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@473@01)
    (<= q$a@473@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@473@01)
      (<= q$a@473@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@473@01)
    (<= q$a@473@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@473@01 Int)) (!
  (and
    (or (<= 0 q$a@473@01) (not (<= 0 q$a@473@01)))
    (or
      (not
        (and
          (<= 0 q$a@473@01)
          (<= q$a@473@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@473@01)
        (<= q$a@473@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@473@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387-aux|)))
(pop) ; 10
(push) ; 10
; [else-branch: 187 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
    (forall ((q$a@473@01 Int)) (!
      (and
        (or (<= 0 q$a@473@01) (not (<= 0 q$a@473@01)))
        (or
          (not
            (and
              (<= 0 q$a@473@01)
              (<= q$a@473@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@473@01)
            (<= q$a@473@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@473@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387-aux|)))))
; Joined path conditions
(push) ; 9
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  (forall ((q$a@473@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@473@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387|)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  (forall ((q$a@473@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@473@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387|))))
; [exec]
; inhale -170141183460469231731687303715884105728 <= l$raw_ret &&
;   l$raw_ret <= 170141183460469231731687303715884105727
(declare-const $t@474@01 $Snap)
(assert (= $t@474@01 ($Snap.combine ($Snap.first $t@474@01) ($Snap.second $t@474@01))))
(assert (= ($Snap.first $t@474@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= l$raw_ret
; [eval] -170141183460469231731687303715884105728
(assert (<= (- 0 170141183460469231731687303715884105728) l$raw_ret@342@01))
(assert (= ($Snap.second $t@474@01) $Snap.unit))
; [eval] l$raw_ret <= 170141183460469231731687303715884105727
(assert (<= l$raw_ret@342@01 170141183460469231731687303715884105727))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not l$send_fail$3@341@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not l$send_fail$3@341@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 190 | l$send_fail$3@341@01 | live]
; [else-branch: 190 | !(l$send_fail$3@341@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 190 | l$send_fail$3@341@01]
(assert l$send_fail$3@341@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@475@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 191 | True | live]
; [else-branch: 191 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 191 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@476@01 $Snap)
(assert (= $t@476@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@477@01 $Struct)
(assert (=
  self@477@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@477@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@477@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@477@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@477@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 192 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 192 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 192 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(push) ; 12
; [else-branch: 192 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@477@01 3)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@477@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@477@01 3)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@477@01 3))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 193 | $struct_get[Bool]($struct_loc[Int](self@477@01, 3)) | live]
; [else-branch: 193 | !($struct_get[Bool]($struct_loc[Int](self@477@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 193 | $struct_get[Bool]($struct_loc[Int](self@477@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@477@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@478@01 Int)
(push) ; 13
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 14
; [then-branch: 194 | !(0 <= q$a@478@01) | live]
; [else-branch: 194 | 0 <= q$a@478@01 | live]
(push) ; 15
; [then-branch: 194 | !(0 <= q$a@478@01)]
(assert (not (<= 0 q$a@478@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 194 | 0 <= q$a@478@01]
(assert (<= 0 q$a@478@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@478@01) (not (<= 0 q$a@478@01))))
(push) ; 14
; [then-branch: 195 | 0 <= q$a@478@01 && q$a@478@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 195 | !(0 <= q$a@478@01 && q$a@478@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 15
; [then-branch: 195 | 0 <= q$a@478@01 && q$a@478@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@478@01)
  (<= q$a@478@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 15
(push) ; 15
; [else-branch: 195 | !(0 <= q$a@478@01 && q$a@478@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@478@01)
    (<= q$a@478@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@478@01)
      (<= q$a@478@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@478@01)
    (<= q$a@478@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@478@01 Int)) (!
  (and
    (or (<= 0 q$a@478@01) (not (<= 0 q$a@478@01)))
    (or
      (not
        (and
          (<= 0 q$a@478@01)
          (<= q$a@478@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@478@01)
        (<= q$a@478@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@477@01 7)) q$a@478@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 12
(push) ; 12
; [else-branch: 193 | !($struct_get[Bool]($struct_loc[Int](self@477@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@477@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@477@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@477@01 3))
    (forall ((q$a@478@01 Int)) (!
      (and
        (or (<= 0 q$a@478@01) (not (<= 0 q$a@478@01)))
        (or
          (not
            (and
              (<= 0 q$a@478@01)
              (<= q$a@478@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@478@01)
            (<= q$a@478@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@477@01 7)) q$a@478@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@477@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@477@01 3))))
(push) ; 11
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@477@01 3))
  (forall ((q$a@478@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@477@01 7)) q$a@478@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@477@01 3))
  (forall ((q$a@478@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@477@01 7)) q$a@478@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 10
; [then-branch: 196 | False | dead]
; [else-branch: 196 | True | live]
(push) ; 10
; [else-branch: 196 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 190 | !(l$send_fail$3@341@01)]
(assert (not l$send_fail$3@341@01))
(pop) ; 9
; [eval] !l$send_fail$3
(push) ; 9
(set-option :timeout 10)
(assert (not l$send_fail$3@341@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not l$send_fail$3@341@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 197 | !(l$send_fail$3@341@01) | live]
; [else-branch: 197 | l$send_fail$3@341@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 197 | !(l$send_fail$3@341@01)]
(assert (not l$send_fail$3@341@01))
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [eval] !(l$raw_ret == 4)
; [eval] l$raw_ret == 4
(push) ; 10
(set-option :timeout 10)
(assert (not (= l$raw_ret@342@01 4)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= l$raw_ret@342@01 4))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 198 | l$raw_ret@342@01 != 4 | live]
; [else-branch: 198 | l$raw_ret@342@01 == 4 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 198 | l$raw_ret@342@01 != 4]
(assert (not (= l$raw_ret@342@01 4)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 199 | True | live]
; [else-branch: 199 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 199 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@479@01 $Snap)
(assert (= $t@479@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@480@01 $Struct)
(assert (=
  self@480@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 12
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@480@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@480@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 12
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@480@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@480@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 200 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 200 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 200 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 13
(push) ; 13
; [else-branch: 200 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@480@01 3)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@480@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@480@01 3)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@480@01 3))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 201 | $struct_get[Bool]($struct_loc[Int](self@480@01, 3)) | live]
; [else-branch: 201 | !($struct_get[Bool]($struct_loc[Int](self@480@01, 3))) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 201 | $struct_get[Bool]($struct_loc[Int](self@480@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@480@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@481@01 Int)
(push) ; 14
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 15
; [then-branch: 202 | !(0 <= q$a@481@01) | live]
; [else-branch: 202 | 0 <= q$a@481@01 | live]
(push) ; 16
; [then-branch: 202 | !(0 <= q$a@481@01)]
(assert (not (<= 0 q$a@481@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 202 | 0 <= q$a@481@01]
(assert (<= 0 q$a@481@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@481@01) (not (<= 0 q$a@481@01))))
(push) ; 15
; [then-branch: 203 | 0 <= q$a@481@01 && q$a@481@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 203 | !(0 <= q$a@481@01 && q$a@481@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 16
; [then-branch: 203 | 0 <= q$a@481@01 && q$a@481@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@481@01)
  (<= q$a@481@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 16
(push) ; 16
; [else-branch: 203 | !(0 <= q$a@481@01 && q$a@481@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@481@01)
    (<= q$a@481@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@481@01)
      (<= q$a@481@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@481@01)
    (<= q$a@481@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@481@01 Int)) (!
  (and
    (or (<= 0 q$a@481@01) (not (<= 0 q$a@481@01)))
    (or
      (not
        (and
          (<= 0 q$a@481@01)
          (<= q$a@481@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@481@01)
        (<= q$a@481@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@480@01 7)) q$a@481@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 13
(push) ; 13
; [else-branch: 201 | !($struct_get[Bool]($struct_loc[Int](self@480@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@480@01 3))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@480@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@480@01 3))
    (forall ((q$a@481@01 Int)) (!
      (and
        (or (<= 0 q$a@481@01) (not (<= 0 q$a@481@01)))
        (or
          (not
            (and
              (<= 0 q$a@481@01)
              (<= q$a@481@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@481@01)
            (<= q$a@481@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@480@01 7)) q$a@481@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@480@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@480@01 3))))
(push) ; 12
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@480@01 3))
  (forall ((q$a@481@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@480@01 7)) q$a@481@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@480@01 3))
  (forall ((q$a@481@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@480@01 7)) q$a@481@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 11
; [then-branch: 204 | False | dead]
; [else-branch: 204 | True | live]
(push) ; 11
; [else-branch: 204 | True]
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 198 | l$raw_ret@342@01 == 4]
(assert (= l$raw_ret@342@01 4))
(pop) ; 10
; [eval] !!(l$raw_ret == 4)
; [eval] !(l$raw_ret == 4)
; [eval] l$raw_ret == 4
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= l$raw_ret@342@01 4))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= l$raw_ret@342@01 4)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 205 | l$raw_ret@342@01 == 4 | live]
; [else-branch: 205 | l$raw_ret@342@01 != 4 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 205 | l$raw_ret@342@01 == 4]
(assert (= l$raw_ret@342@01 4))
; [exec]
; label return
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@343@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@343@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 206 | $out_of_gas@343@01 | live]
; [else-branch: 206 | !($out_of_gas@343@01) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 206 | $out_of_gas@343@01]
(assert $out_of_gas@343@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 207 | True | live]
; [else-branch: 207 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 207 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@482@01 $Snap)
(assert (= $t@482@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@483@01 $Struct)
(assert (=
  self@483@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@483@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@483@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@483@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@483@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 208 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 208 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 208 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 14
(push) ; 14
; [else-branch: 208 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@483@01 3)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@483@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@483@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@483@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 209 | $struct_get[Bool]($struct_loc[Int](self@483@01, 3)) | live]
; [else-branch: 209 | !($struct_get[Bool]($struct_loc[Int](self@483@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 209 | $struct_get[Bool]($struct_loc[Int](self@483@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@483@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@484@01 Int)
(push) ; 15
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 16
; [then-branch: 210 | !(0 <= q$a@484@01) | live]
; [else-branch: 210 | 0 <= q$a@484@01 | live]
(push) ; 17
; [then-branch: 210 | !(0 <= q$a@484@01)]
(assert (not (<= 0 q$a@484@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 210 | 0 <= q$a@484@01]
(assert (<= 0 q$a@484@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@484@01) (not (<= 0 q$a@484@01))))
(push) ; 16
; [then-branch: 211 | 0 <= q$a@484@01 && q$a@484@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 211 | !(0 <= q$a@484@01 && q$a@484@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 17
; [then-branch: 211 | 0 <= q$a@484@01 && q$a@484@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@484@01)
  (<= q$a@484@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 17
(push) ; 17
; [else-branch: 211 | !(0 <= q$a@484@01 && q$a@484@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@484@01)
    (<= q$a@484@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@484@01)
      (<= q$a@484@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@484@01)
    (<= q$a@484@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@484@01 Int)) (!
  (and
    (or (<= 0 q$a@484@01) (not (<= 0 q$a@484@01)))
    (or
      (not
        (and
          (<= 0 q$a@484@01)
          (<= q$a@484@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@484@01)
        (<= q$a@484@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@483@01 7)) q$a@484@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 14
(push) ; 14
; [else-branch: 209 | !($struct_get[Bool]($struct_loc[Int](self@483@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@483@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@483@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@483@01 3))
    (forall ((q$a@484@01 Int)) (!
      (and
        (or (<= 0 q$a@484@01) (not (<= 0 q$a@484@01)))
        (or
          (not
            (and
              (<= 0 q$a@484@01)
              (<= q$a@484@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@484@01)
            (<= q$a@484@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@483@01 7)) q$a@484@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@483@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@483@01 3))))
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@483@01 3))
  (forall ((q$a@484@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@483@01 7)) q$a@484@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@483@01 3))
  (forall ((q$a@484@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@483@01 7)) q$a@484@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 12
; [then-branch: 212 | False | dead]
; [else-branch: 212 | True | live]
(push) ; 12
; [else-branch: 212 | True]
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 206 | !($out_of_gas@343@01)]
(assert (not $out_of_gas@343@01))
(pop) ; 11
; [eval] !$out_of_gas
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@343@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@343@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 213 | !($out_of_gas@343@01) | live]
; [else-branch: 213 | $out_of_gas@343@01 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 213 | !($out_of_gas@343@01)]
(assert (not $out_of_gas@343@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 214 | False | dead]
; [else-branch: 214 | True | live]
(push) ; 12
; [else-branch: 214 | True]
(pop) ; 12
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 215 | True | live]
; [else-branch: 215 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 215 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@485@01 $Snap)
(assert (= $t@485@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@486@01 $Struct)
(assert (=
  self@486@01
  ($struct_set<$Struct> l$havoc$14@336@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@486@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 0)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@486@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@486@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@486@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 216 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)) | live]
; [else-branch: 216 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 216 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 14
(push) ; 14
; [else-branch: 216 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@486@01 3)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@486@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@486@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@486@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 217 | $struct_get[Bool]($struct_loc[Int](self@486@01, 3)) | live]
; [else-branch: 217 | !($struct_get[Bool]($struct_loc[Int](self@486@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 217 | $struct_get[Bool]($struct_loc[Int](self@486@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@486@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@487@01 Int)
(push) ; 15
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 16
; [then-branch: 218 | !(0 <= q$a@487@01) | live]
; [else-branch: 218 | 0 <= q$a@487@01 | live]
(push) ; 17
; [then-branch: 218 | !(0 <= q$a@487@01)]
(assert (not (<= 0 q$a@487@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 218 | 0 <= q$a@487@01]
(assert (<= 0 q$a@487@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@487@01) (not (<= 0 q$a@487@01))))
(push) ; 16
; [then-branch: 219 | 0 <= q$a@487@01 && q$a@487@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 219 | !(0 <= q$a@487@01 && q$a@487@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 17
; [then-branch: 219 | 0 <= q$a@487@01 && q$a@487@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@487@01)
  (<= q$a@487@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 17
(push) ; 17
; [else-branch: 219 | !(0 <= q$a@487@01 && q$a@487@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@487@01)
    (<= q$a@487@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@487@01)
      (<= q$a@487@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@487@01)
    (<= q$a@487@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@487@01 Int)) (!
  (and
    (or (<= 0 q$a@487@01) (not (<= 0 q$a@487@01)))
    (or
      (not
        (and
          (<= 0 q$a@487@01)
          (<= q$a@487@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@487@01)
        (<= q$a@487@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@486@01 7)) q$a@487@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 14
(push) ; 14
; [else-branch: 217 | !($struct_get[Bool]($struct_loc[Int](self@486@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@486@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@486@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@486@01 3))
    (forall ((q$a@487@01 Int)) (!
      (and
        (or (<= 0 q$a@487@01) (not (<= 0 q$a@487@01)))
        (or
          (not
            (and
              (<= 0 q$a@487@01)
              (<= q$a@487@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@487@01)
            (<= q$a@487@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@486@01 7)) q$a@487@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@486@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@486@01 3))))
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@486@01 3))
  (forall ((q$a@487@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@486@01 7)) q$a@487@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@486@01 3))
  (forall ((q$a@487@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@486@01 7)) q$a@487@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 213 | $out_of_gas@343@01]
(assert $out_of_gas@343@01)
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 205 | l$raw_ret@342@01 != 4]
(assert (not (= l$raw_ret@342@01 4)))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 197 | l$send_fail$3@341@01]
(assert l$send_fail$3@341@01)
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 185 | l$no_reentrant_call$2@338@01]
(assert l$no_reentrant_call$2@338@01)
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 143 | l$send_fail$2@332@01]
(assert l$send_fail$2@332@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 131 | !(l$no_reentrant_call$1@328@01)]
(assert (not l$no_reentrant_call$1@328@01))
(pop) ; 6
; [eval] !l$no_reentrant_call$1
(push) ; 6
(set-option :timeout 10)
(assert (not l$no_reentrant_call$1@328@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call$1@328@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 220 | !(l$no_reentrant_call$1@328@01) | live]
; [else-branch: 220 | l$no_reentrant_call$1@328@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 220 | !(l$no_reentrant_call$1@328@01)]
(assert (not l$no_reentrant_call$1@328@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$10
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$11
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$12
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 221 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)) | live]
; [else-branch: 221 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 221 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(push) ; 8
; [else-branch: 221 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 222 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)) | live]
; [else-branch: 222 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 222 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@488@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 223 | !(0 <= q$a@488@01) | live]
; [else-branch: 223 | 0 <= q$a@488@01 | live]
(push) ; 11
; [then-branch: 223 | !(0 <= q$a@488@01)]
(assert (not (<= 0 q$a@488@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 223 | 0 <= q$a@488@01]
(assert (<= 0 q$a@488@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@488@01) (not (<= 0 q$a@488@01))))
(push) ; 10
; [then-branch: 224 | 0 <= q$a@488@01 && q$a@488@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 224 | !(0 <= q$a@488@01 && q$a@488@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 224 | 0 <= q$a@488@01 && q$a@488@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@488@01)
  (<= q$a@488@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 11
(push) ; 11
; [else-branch: 224 | !(0 <= q$a@488@01 && q$a@488@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@488@01)
    (<= q$a@488@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@488@01)
      (<= q$a@488@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@488@01)
    (<= q$a@488@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@488@01 Int)) (!
  (and
    (or (<= 0 q$a@488@01) (not (<= 0 q$a@488@01)))
    (or
      (not
        (and
          (<= 0 q$a@488@01)
          (<= q$a@488@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@488@01)
        (<= q$a@488@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@488@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1194@57@1194@387-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 222 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
    (forall ((q$a@488@01 Int)) (!
      (and
        (or (<= 0 q$a@488@01) (not (<= 0 q$a@488@01)))
        (or
          (not
            (and
              (<= 0 q$a@488@01)
              (<= q$a@488@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@488@01)
            (<= q$a@488@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@488@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1194@57@1194@387-aux|)))))
; Joined path conditions
(push) ; 7
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  (forall ((q$a@488@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@488@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1194@57@1194@387|)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  (forall ((q$a@488@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@488@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1194@57@1194@387|))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not l$send_fail$2@332@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not l$send_fail$2@332@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 225 | l$send_fail$2@332@01 | live]
; [else-branch: 225 | !(l$send_fail$2@332@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 225 | l$send_fail$2@332@01]
(assert l$send_fail$2@332@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@489@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 226 | True | live]
; [else-branch: 226 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 226 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@490@01 $Snap)
(assert (= $t@490@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@491@01 $Struct)
(assert (=
  self@491@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@491@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@491@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@491@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@491@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 227 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 227 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 227 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(push) ; 10
; [else-branch: 227 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@491@01 3)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@491@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@491@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@491@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 228 | $struct_get[Bool]($struct_loc[Int](self@491@01, 3)) | live]
; [else-branch: 228 | !($struct_get[Bool]($struct_loc[Int](self@491@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 228 | $struct_get[Bool]($struct_loc[Int](self@491@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@491@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@492@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 229 | !(0 <= q$a@492@01) | live]
; [else-branch: 229 | 0 <= q$a@492@01 | live]
(push) ; 13
; [then-branch: 229 | !(0 <= q$a@492@01)]
(assert (not (<= 0 q$a@492@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 229 | 0 <= q$a@492@01]
(assert (<= 0 q$a@492@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@492@01) (not (<= 0 q$a@492@01))))
(push) ; 12
; [then-branch: 230 | 0 <= q$a@492@01 && q$a@492@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 230 | !(0 <= q$a@492@01 && q$a@492@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 230 | 0 <= q$a@492@01 && q$a@492@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@492@01)
  (<= q$a@492@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 13
(push) ; 13
; [else-branch: 230 | !(0 <= q$a@492@01 && q$a@492@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@492@01)
    (<= q$a@492@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@492@01)
      (<= q$a@492@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@492@01)
    (<= q$a@492@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@492@01 Int)) (!
  (and
    (or (<= 0 q$a@492@01) (not (<= 0 q$a@492@01)))
    (or
      (not
        (and
          (<= 0 q$a@492@01)
          (<= q$a@492@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@492@01)
        (<= q$a@492@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 7)) q$a@492@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 10
(push) ; 10
; [else-branch: 228 | !($struct_get[Bool]($struct_loc[Int](self@491@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@491@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@491@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@491@01 3))
    (forall ((q$a@492@01 Int)) (!
      (and
        (or (<= 0 q$a@492@01) (not (<= 0 q$a@492@01)))
        (or
          (not
            (and
              (<= 0 q$a@492@01)
              (<= q$a@492@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@492@01)
            (<= q$a@492@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 7)) q$a@492@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@491@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@491@01 3))))
(push) ; 9
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@491@01 3))
  (forall ((q$a@492@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 7)) q$a@492@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@491@01 3))
  (forall ((q$a@492@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 7)) q$a@492@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 8
; [then-branch: 231 | False | dead]
; [else-branch: 231 | True | live]
(push) ; 8
; [else-branch: 231 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 225 | !(l$send_fail$2@332@01)]
(assert (not l$send_fail$2@332@01))
(pop) ; 7
; [eval] !l$send_fail$2
(push) ; 7
(set-option :timeout 10)
(assert (not l$send_fail$2@332@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not l$send_fail$2@332@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 232 | !(l$send_fail$2@332@01) | live]
; [else-branch: 232 | l$send_fail$2@332@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 232 | !(l$send_fail$2@332@01)]
(assert (not l$send_fail$2@332@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i2$$pre_self := self
; [exec]
; i2$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$13
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$14
; [exec]
; $contracts := l$havoc$15
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@493@01 $Snap)
(assert (= $t@493@01 ($Snap.combine ($Snap.first $t@493@01) ($Snap.second $t@493@01))))
(assert (= ($Snap.first $t@493@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 0))))
(assert (= ($Snap.second $t@493@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@494@01 $Snap)
(assert (= $t@494@01 ($Snap.combine ($Snap.first $t@494@01) ($Snap.second $t@494@01))))
(assert (= ($Snap.first $t@494@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 1))))
(assert (= ($Snap.second $t@494@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@495@01 $Snap)
(assert (= $t@495@01 ($Snap.combine ($Snap.first $t@495@01) ($Snap.second $t@495@01))))
(assert (= ($Snap.first $t@495@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 2))))
(assert (= ($Snap.second $t@495@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@496@01 $Snap)
(assert (= $t@496@01 ($Snap.combine ($Snap.first $t@496@01) ($Snap.second $t@496@01))))
(assert (= ($Snap.first $t@496@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 4))))
(assert (= ($Snap.second $t@496@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@497@01 $Snap)
(assert (= $t@497@01 ($Snap.combine ($Snap.first $t@497@01) ($Snap.second $t@497@01))))
(assert (= ($Snap.first $t@497@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 5))))
(assert (= ($Snap.second $t@497@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@498@01 $Snap)
(assert (= $t@498@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@499@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 9
; [then-branch: 233 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 7)), $q0@499@01)) | live]
; [else-branch: 233 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 7)), $q0@499@01) | live]
(push) ; 10
; [then-branch: 233 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 7)), $q0@499@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@499@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 233 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 7)), $q0@499@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@499@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@499@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@499@01)))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@499@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@499@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@499@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@499@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1220@11@1220@345-aux|)))
(assert (forall (($q0@499@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@499@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@499@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@499@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1220@11@1220@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@500@01 $Snap)
(assert (= $t@500@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q0@501@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@501@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@501@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@501@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1221@11@1221@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@502@01 $Snap)
(assert (= $t@502@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@503@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 9
; [then-branch: 234 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 8)), $q1@503@01)) | live]
; [else-branch: 234 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 8)), $q1@503@01) | live]
(push) ; 10
; [then-branch: 234 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 8)), $q1@503@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@503@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 234 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 8)), $q1@503@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@503@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@503@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@503@01)))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@503@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@503@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@503@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@503@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1222@11@1222@345-aux|)))
(assert (forall (($q1@503@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@503@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@503@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@503@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1222@11@1222@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@504@01 $Snap)
(assert (= $t@504@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q1@505@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@505@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@505@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@505@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1223@11@1223@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@506@01 $Snap)
(assert (= $t@506@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@507@01 $Snap)
(assert (= $t@507@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@508@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@508@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $a@508@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $a@508@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $a@508@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1226@11@1226@259|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
(declare-const $t@509@01 $Snap)
(assert (= $t@509@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 0))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
(declare-const $t@510@01 $Snap)
(assert (= $t@510@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
(declare-const $t@511@01 $Snap)
(assert (= $t@511@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 235 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)) | live]
; [else-branch: 235 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 235 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(push) ; 9
; [else-branch: 235 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@512@01 $Snap)
(assert (= $t@512@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 236 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)) | live]
; [else-branch: 236 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 236 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@513@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 237 | !(0 <= q$a@513@01) | live]
; [else-branch: 237 | 0 <= q$a@513@01 | live]
(push) ; 12
; [then-branch: 237 | !(0 <= q$a@513@01)]
(assert (not (<= 0 q$a@513@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 237 | 0 <= q$a@513@01]
(assert (<= 0 q$a@513@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@513@01) (not (<= 0 q$a@513@01))))
(push) ; 11
; [then-branch: 238 | 0 <= q$a@513@01 && q$a@513@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 238 | !(0 <= q$a@513@01 && q$a@513@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 238 | 0 <= q$a@513@01 && q$a@513@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@513@01)
  (<= q$a@513@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 12
(push) ; 12
; [else-branch: 238 | !(0 <= q$a@513@01 && q$a@513@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@513@01)
    (<= q$a@513@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@513@01)
      (<= q$a@513@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@513@01)
    (<= q$a@513@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@513@01 Int)) (!
  (and
    (or (<= 0 q$a@513@01) (not (<= 0 q$a@513@01)))
    (or
      (not
        (and
          (<= 0 q$a@513@01)
          (<= q$a@513@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@513@01)
        (<= q$a@513@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@513@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1230@57@1230@387-aux|)))
(pop) ; 9
(push) ; 9
; [else-branch: 236 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
    (forall ((q$a@513@01 Int)) (!
      (and
        (or (<= 0 q$a@513@01) (not (<= 0 q$a@513@01)))
        (or
          (not
            (and
              (<= 0 q$a@513@01)
              (<= q$a@513@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@513@01)
            (<= q$a@513@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@513@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1230@57@1230@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  (forall ((q$a@513@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@513@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1230@57@1230@387|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call$2@338@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not l$no_reentrant_call$2@338@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 239 | l$no_reentrant_call$2@338@01 | live]
; [else-branch: 239 | !(l$no_reentrant_call$2@338@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 239 | l$no_reentrant_call$2@338@01]
(assert l$no_reentrant_call$2@338@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$16
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$17
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 240 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)) | live]
; [else-branch: 240 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 240 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(push) ; 10
; [else-branch: 240 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 241 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)) | live]
; [else-branch: 241 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 241 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@514@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 242 | !(0 <= q$a@514@01) | live]
; [else-branch: 242 | 0 <= q$a@514@01 | live]
(push) ; 13
; [then-branch: 242 | !(0 <= q$a@514@01)]
(assert (not (<= 0 q$a@514@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 242 | 0 <= q$a@514@01]
(assert (<= 0 q$a@514@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@514@01) (not (<= 0 q$a@514@01))))
(push) ; 12
; [then-branch: 243 | 0 <= q$a@514@01 && q$a@514@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 243 | !(0 <= q$a@514@01 && q$a@514@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 243 | 0 <= q$a@514@01 && q$a@514@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@514@01)
  (<= q$a@514@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 13
(push) ; 13
; [else-branch: 243 | !(0 <= q$a@514@01 && q$a@514@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@514@01)
    (<= q$a@514@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@514@01)
      (<= q$a@514@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@514@01)
    (<= q$a@514@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@514@01 Int)) (!
  (and
    (or (<= 0 q$a@514@01) (not (<= 0 q$a@514@01)))
    (or
      (not
        (and
          (<= 0 q$a@514@01)
          (<= q$a@514@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@514@01)
        (<= q$a@514@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@514@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387-aux|)))
(pop) ; 10
(push) ; 10
; [else-branch: 241 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
    (forall ((q$a@514@01 Int)) (!
      (and
        (or (<= 0 q$a@514@01) (not (<= 0 q$a@514@01)))
        (or
          (not
            (and
              (<= 0 q$a@514@01)
              (<= q$a@514@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@514@01)
            (<= q$a@514@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@514@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387-aux|)))))
; Joined path conditions
(push) ; 9
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  (forall ((q$a@514@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@514@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387|)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  (forall ((q$a@514@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@514@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387|))))
; [exec]
; inhale -170141183460469231731687303715884105728 <= l$raw_ret &&
;   l$raw_ret <= 170141183460469231731687303715884105727
(declare-const $t@515@01 $Snap)
(assert (= $t@515@01 ($Snap.combine ($Snap.first $t@515@01) ($Snap.second $t@515@01))))
(assert (= ($Snap.first $t@515@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= l$raw_ret
; [eval] -170141183460469231731687303715884105728
(assert (<= (- 0 170141183460469231731687303715884105728) l$raw_ret@342@01))
(assert (= ($Snap.second $t@515@01) $Snap.unit))
; [eval] l$raw_ret <= 170141183460469231731687303715884105727
(assert (<= l$raw_ret@342@01 170141183460469231731687303715884105727))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not l$send_fail$3@341@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not l$send_fail$3@341@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 244 | l$send_fail$3@341@01 | live]
; [else-branch: 244 | !(l$send_fail$3@341@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 244 | l$send_fail$3@341@01]
(assert l$send_fail$3@341@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@516@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 245 | True | live]
; [else-branch: 245 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 245 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@517@01 $Snap)
(assert (= $t@517@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@518@01 $Struct)
(assert (=
  self@518@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@518@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@518@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@518@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@518@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 246 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 246 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 246 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(push) ; 12
; [else-branch: 246 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@518@01 3)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@518@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@518@01 3)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@518@01 3))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 247 | $struct_get[Bool]($struct_loc[Int](self@518@01, 3)) | live]
; [else-branch: 247 | !($struct_get[Bool]($struct_loc[Int](self@518@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 247 | $struct_get[Bool]($struct_loc[Int](self@518@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@518@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@519@01 Int)
(push) ; 13
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 14
; [then-branch: 248 | !(0 <= q$a@519@01) | live]
; [else-branch: 248 | 0 <= q$a@519@01 | live]
(push) ; 15
; [then-branch: 248 | !(0 <= q$a@519@01)]
(assert (not (<= 0 q$a@519@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 248 | 0 <= q$a@519@01]
(assert (<= 0 q$a@519@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@519@01) (not (<= 0 q$a@519@01))))
(push) ; 14
; [then-branch: 249 | 0 <= q$a@519@01 && q$a@519@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 249 | !(0 <= q$a@519@01 && q$a@519@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 15
; [then-branch: 249 | 0 <= q$a@519@01 && q$a@519@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@519@01)
  (<= q$a@519@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 15
(push) ; 15
; [else-branch: 249 | !(0 <= q$a@519@01 && q$a@519@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@519@01)
    (<= q$a@519@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@519@01)
      (<= q$a@519@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@519@01)
    (<= q$a@519@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@519@01 Int)) (!
  (and
    (or (<= 0 q$a@519@01) (not (<= 0 q$a@519@01)))
    (or
      (not
        (and
          (<= 0 q$a@519@01)
          (<= q$a@519@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@519@01)
        (<= q$a@519@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@518@01 7)) q$a@519@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 12
(push) ; 12
; [else-branch: 247 | !($struct_get[Bool]($struct_loc[Int](self@518@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@518@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@518@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@518@01 3))
    (forall ((q$a@519@01 Int)) (!
      (and
        (or (<= 0 q$a@519@01) (not (<= 0 q$a@519@01)))
        (or
          (not
            (and
              (<= 0 q$a@519@01)
              (<= q$a@519@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@519@01)
            (<= q$a@519@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@518@01 7)) q$a@519@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@518@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@518@01 3))))
(push) ; 11
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@518@01 3))
  (forall ((q$a@519@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@518@01 7)) q$a@519@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@518@01 3))
  (forall ((q$a@519@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@518@01 7)) q$a@519@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 10
; [then-branch: 250 | False | dead]
; [else-branch: 250 | True | live]
(push) ; 10
; [else-branch: 250 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 244 | !(l$send_fail$3@341@01)]
(assert (not l$send_fail$3@341@01))
(pop) ; 9
; [eval] !l$send_fail$3
(push) ; 9
(set-option :timeout 10)
(assert (not l$send_fail$3@341@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not l$send_fail$3@341@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 251 | !(l$send_fail$3@341@01) | live]
; [else-branch: 251 | l$send_fail$3@341@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 251 | !(l$send_fail$3@341@01)]
(assert (not l$send_fail$3@341@01))
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [eval] !(l$raw_ret == 4)
; [eval] l$raw_ret == 4
(push) ; 10
(set-option :timeout 10)
(assert (not (= l$raw_ret@342@01 4)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= l$raw_ret@342@01 4))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 252 | l$raw_ret@342@01 != 4 | live]
; [else-branch: 252 | l$raw_ret@342@01 == 4 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 252 | l$raw_ret@342@01 != 4]
(assert (not (= l$raw_ret@342@01 4)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 253 | True | live]
; [else-branch: 253 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 253 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@520@01 $Snap)
(assert (= $t@520@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@521@01 $Struct)
(assert (=
  self@521@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 12
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@521@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@521@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 12
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@521@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@521@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 254 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 254 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 254 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 13
(push) ; 13
; [else-branch: 254 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@521@01 3)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@521@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@521@01 3)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@521@01 3))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 255 | $struct_get[Bool]($struct_loc[Int](self@521@01, 3)) | live]
; [else-branch: 255 | !($struct_get[Bool]($struct_loc[Int](self@521@01, 3))) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 255 | $struct_get[Bool]($struct_loc[Int](self@521@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@521@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@522@01 Int)
(push) ; 14
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 15
; [then-branch: 256 | !(0 <= q$a@522@01) | live]
; [else-branch: 256 | 0 <= q$a@522@01 | live]
(push) ; 16
; [then-branch: 256 | !(0 <= q$a@522@01)]
(assert (not (<= 0 q$a@522@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 256 | 0 <= q$a@522@01]
(assert (<= 0 q$a@522@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@522@01) (not (<= 0 q$a@522@01))))
(push) ; 15
; [then-branch: 257 | 0 <= q$a@522@01 && q$a@522@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 257 | !(0 <= q$a@522@01 && q$a@522@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 16
; [then-branch: 257 | 0 <= q$a@522@01 && q$a@522@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@522@01)
  (<= q$a@522@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 16
(push) ; 16
; [else-branch: 257 | !(0 <= q$a@522@01 && q$a@522@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@522@01)
    (<= q$a@522@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@522@01)
      (<= q$a@522@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@522@01)
    (<= q$a@522@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@522@01 Int)) (!
  (and
    (or (<= 0 q$a@522@01) (not (<= 0 q$a@522@01)))
    (or
      (not
        (and
          (<= 0 q$a@522@01)
          (<= q$a@522@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@522@01)
        (<= q$a@522@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@521@01 7)) q$a@522@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 13
(push) ; 13
; [else-branch: 255 | !($struct_get[Bool]($struct_loc[Int](self@521@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@521@01 3))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@521@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@521@01 3))
    (forall ((q$a@522@01 Int)) (!
      (and
        (or (<= 0 q$a@522@01) (not (<= 0 q$a@522@01)))
        (or
          (not
            (and
              (<= 0 q$a@522@01)
              (<= q$a@522@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@522@01)
            (<= q$a@522@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@521@01 7)) q$a@522@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@521@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@521@01 3))))
(push) ; 12
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@521@01 3))
  (forall ((q$a@522@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@521@01 7)) q$a@522@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@521@01 3))
  (forall ((q$a@522@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@521@01 7)) q$a@522@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 11
; [then-branch: 258 | False | dead]
; [else-branch: 258 | True | live]
(push) ; 11
; [else-branch: 258 | True]
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 252 | l$raw_ret@342@01 == 4]
(assert (= l$raw_ret@342@01 4))
(pop) ; 10
; [eval] !!(l$raw_ret == 4)
; [eval] !(l$raw_ret == 4)
; [eval] l$raw_ret == 4
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= l$raw_ret@342@01 4))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= l$raw_ret@342@01 4)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 259 | l$raw_ret@342@01 == 4 | live]
; [else-branch: 259 | l$raw_ret@342@01 != 4 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 259 | l$raw_ret@342@01 == 4]
(assert (= l$raw_ret@342@01 4))
; [exec]
; label return
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@343@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@343@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 260 | $out_of_gas@343@01 | live]
; [else-branch: 260 | !($out_of_gas@343@01) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 260 | $out_of_gas@343@01]
(assert $out_of_gas@343@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 261 | True | live]
; [else-branch: 261 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 261 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@523@01 $Snap)
(assert (= $t@523@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@524@01 $Struct)
(assert (=
  self@524@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@524@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@524@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@524@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@524@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 262 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 262 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 262 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 14
(push) ; 14
; [else-branch: 262 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@524@01 3)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@524@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@524@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@524@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 263 | $struct_get[Bool]($struct_loc[Int](self@524@01, 3)) | live]
; [else-branch: 263 | !($struct_get[Bool]($struct_loc[Int](self@524@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 263 | $struct_get[Bool]($struct_loc[Int](self@524@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@524@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@525@01 Int)
(push) ; 15
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 16
; [then-branch: 264 | !(0 <= q$a@525@01) | live]
; [else-branch: 264 | 0 <= q$a@525@01 | live]
(push) ; 17
; [then-branch: 264 | !(0 <= q$a@525@01)]
(assert (not (<= 0 q$a@525@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 264 | 0 <= q$a@525@01]
(assert (<= 0 q$a@525@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@525@01) (not (<= 0 q$a@525@01))))
(push) ; 16
; [then-branch: 265 | 0 <= q$a@525@01 && q$a@525@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 265 | !(0 <= q$a@525@01 && q$a@525@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 17
; [then-branch: 265 | 0 <= q$a@525@01 && q$a@525@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@525@01)
  (<= q$a@525@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 17
(push) ; 17
; [else-branch: 265 | !(0 <= q$a@525@01 && q$a@525@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@525@01)
    (<= q$a@525@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@525@01)
      (<= q$a@525@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@525@01)
    (<= q$a@525@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@525@01 Int)) (!
  (and
    (or (<= 0 q$a@525@01) (not (<= 0 q$a@525@01)))
    (or
      (not
        (and
          (<= 0 q$a@525@01)
          (<= q$a@525@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@525@01)
        (<= q$a@525@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@524@01 7)) q$a@525@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 14
(push) ; 14
; [else-branch: 263 | !($struct_get[Bool]($struct_loc[Int](self@524@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@524@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@524@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@524@01 3))
    (forall ((q$a@525@01 Int)) (!
      (and
        (or (<= 0 q$a@525@01) (not (<= 0 q$a@525@01)))
        (or
          (not
            (and
              (<= 0 q$a@525@01)
              (<= q$a@525@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@525@01)
            (<= q$a@525@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@524@01 7)) q$a@525@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@524@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@524@01 3))))
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@524@01 3))
  (forall ((q$a@525@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@524@01 7)) q$a@525@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@524@01 3))
  (forall ((q$a@525@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@524@01 7)) q$a@525@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 12
; [then-branch: 266 | False | dead]
; [else-branch: 266 | True | live]
(push) ; 12
; [else-branch: 266 | True]
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 260 | !($out_of_gas@343@01)]
(assert (not $out_of_gas@343@01))
(pop) ; 11
; [eval] !$out_of_gas
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@343@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@343@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 267 | !($out_of_gas@343@01) | live]
; [else-branch: 267 | $out_of_gas@343@01 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 267 | !($out_of_gas@343@01)]
(assert (not $out_of_gas@343@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 268 | False | dead]
; [else-branch: 268 | True | live]
(push) ; 12
; [else-branch: 268 | True]
(pop) ; 12
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 269 | True | live]
; [else-branch: 269 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 269 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@526@01 $Snap)
(assert (= $t@526@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@527@01 $Struct)
(assert (=
  self@527@01
  ($struct_set<$Struct> l$havoc$8@326@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@527@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 0)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@527@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@527@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@527@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 270 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)) | live]
; [else-branch: 270 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 270 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 14
(push) ; 14
; [else-branch: 270 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@527@01 3)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@527@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@527@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@527@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 271 | $struct_get[Bool]($struct_loc[Int](self@527@01, 3)) | live]
; [else-branch: 271 | !($struct_get[Bool]($struct_loc[Int](self@527@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 271 | $struct_get[Bool]($struct_loc[Int](self@527@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@527@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@528@01 Int)
(push) ; 15
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 16
; [then-branch: 272 | !(0 <= q$a@528@01) | live]
; [else-branch: 272 | 0 <= q$a@528@01 | live]
(push) ; 17
; [then-branch: 272 | !(0 <= q$a@528@01)]
(assert (not (<= 0 q$a@528@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 272 | 0 <= q$a@528@01]
(assert (<= 0 q$a@528@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@528@01) (not (<= 0 q$a@528@01))))
(push) ; 16
; [then-branch: 273 | 0 <= q$a@528@01 && q$a@528@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 273 | !(0 <= q$a@528@01 && q$a@528@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 17
; [then-branch: 273 | 0 <= q$a@528@01 && q$a@528@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@528@01)
  (<= q$a@528@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 17
(push) ; 17
; [else-branch: 273 | !(0 <= q$a@528@01 && q$a@528@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@528@01)
    (<= q$a@528@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@528@01)
      (<= q$a@528@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@528@01)
    (<= q$a@528@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@528@01 Int)) (!
  (and
    (or (<= 0 q$a@528@01) (not (<= 0 q$a@528@01)))
    (or
      (not
        (and
          (<= 0 q$a@528@01)
          (<= q$a@528@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@528@01)
        (<= q$a@528@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 7)) q$a@528@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 14
(push) ; 14
; [else-branch: 271 | !($struct_get[Bool]($struct_loc[Int](self@527@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@527@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@527@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@527@01 3))
    (forall ((q$a@528@01 Int)) (!
      (and
        (or (<= 0 q$a@528@01) (not (<= 0 q$a@528@01)))
        (or
          (not
            (and
              (<= 0 q$a@528@01)
              (<= q$a@528@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@528@01)
            (<= q$a@528@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 7)) q$a@528@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@527@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@527@01 3))))
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@527@01 3))
  (forall ((q$a@528@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 7)) q$a@528@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@527@01 3))
  (forall ((q$a@528@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 7)) q$a@528@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 267 | $out_of_gas@343@01]
(assert $out_of_gas@343@01)
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 259 | l$raw_ret@342@01 != 4]
(assert (not (= l$raw_ret@342@01 4)))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 251 | l$send_fail$3@341@01]
(assert l$send_fail$3@341@01)
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 239 | !(l$no_reentrant_call$2@338@01)]
(assert (not l$no_reentrant_call$2@338@01))
(pop) ; 8
; [eval] !l$no_reentrant_call$2
(push) ; 8
(set-option :timeout 10)
(assert (not l$no_reentrant_call$2@338@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call$2@338@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 274 | !(l$no_reentrant_call$2@338@01) | live]
; [else-branch: 274 | l$no_reentrant_call$2@338@01 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 274 | !(l$no_reentrant_call$2@338@01)]
(assert (not l$no_reentrant_call$2@338@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$16
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$17
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 275 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)) | live]
; [else-branch: 275 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 275 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(push) ; 10
; [else-branch: 275 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 276 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)) | live]
; [else-branch: 276 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 276 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@529@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 277 | !(0 <= q$a@529@01) | live]
; [else-branch: 277 | 0 <= q$a@529@01 | live]
(push) ; 13
; [then-branch: 277 | !(0 <= q$a@529@01)]
(assert (not (<= 0 q$a@529@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 277 | 0 <= q$a@529@01]
(assert (<= 0 q$a@529@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@529@01) (not (<= 0 q$a@529@01))))
(push) ; 12
; [then-branch: 278 | 0 <= q$a@529@01 && q$a@529@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 278 | !(0 <= q$a@529@01 && q$a@529@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 278 | 0 <= q$a@529@01 && q$a@529@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@529@01)
  (<= q$a@529@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 13
(push) ; 13
; [else-branch: 278 | !(0 <= q$a@529@01 && q$a@529@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@529@01)
    (<= q$a@529@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@529@01)
      (<= q$a@529@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@529@01)
    (<= q$a@529@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@529@01 Int)) (!
  (and
    (or (<= 0 q$a@529@01) (not (<= 0 q$a@529@01)))
    (or
      (not
        (and
          (<= 0 q$a@529@01)
          (<= q$a@529@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@529@01)
        (<= q$a@529@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@529@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387-aux|)))
(pop) ; 10
(push) ; 10
; [else-branch: 276 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
    (forall ((q$a@529@01 Int)) (!
      (and
        (or (<= 0 q$a@529@01) (not (<= 0 q$a@529@01)))
        (or
          (not
            (and
              (<= 0 q$a@529@01)
              (<= q$a@529@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@529@01)
            (<= q$a@529@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@529@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387-aux|)))))
; Joined path conditions
(push) ; 9
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  (forall ((q$a@529@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@529@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387|)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  (forall ((q$a@529@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@529@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387|))))
; [exec]
; inhale -170141183460469231731687303715884105728 <= l$raw_ret &&
;   l$raw_ret <= 170141183460469231731687303715884105727
(declare-const $t@530@01 $Snap)
(assert (= $t@530@01 ($Snap.combine ($Snap.first $t@530@01) ($Snap.second $t@530@01))))
(assert (= ($Snap.first $t@530@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= l$raw_ret
; [eval] -170141183460469231731687303715884105728
(assert (<= (- 0 170141183460469231731687303715884105728) l$raw_ret@342@01))
(assert (= ($Snap.second $t@530@01) $Snap.unit))
; [eval] l$raw_ret <= 170141183460469231731687303715884105727
(assert (<= l$raw_ret@342@01 170141183460469231731687303715884105727))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not l$send_fail$3@341@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not l$send_fail$3@341@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 279 | l$send_fail$3@341@01 | live]
; [else-branch: 279 | !(l$send_fail$3@341@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 279 | l$send_fail$3@341@01]
(assert l$send_fail$3@341@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@531@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 280 | True | live]
; [else-branch: 280 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 280 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@532@01 $Snap)
(assert (= $t@532@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@533@01 $Struct)
(assert (=
  self@533@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@533@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@533@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@533@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@533@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 281 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 281 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 281 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(push) ; 12
; [else-branch: 281 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@533@01 3)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@533@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@533@01 3)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@533@01 3))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 282 | $struct_get[Bool]($struct_loc[Int](self@533@01, 3)) | live]
; [else-branch: 282 | !($struct_get[Bool]($struct_loc[Int](self@533@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 282 | $struct_get[Bool]($struct_loc[Int](self@533@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@533@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@534@01 Int)
(push) ; 13
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 14
; [then-branch: 283 | !(0 <= q$a@534@01) | live]
; [else-branch: 283 | 0 <= q$a@534@01 | live]
(push) ; 15
; [then-branch: 283 | !(0 <= q$a@534@01)]
(assert (not (<= 0 q$a@534@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 283 | 0 <= q$a@534@01]
(assert (<= 0 q$a@534@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@534@01) (not (<= 0 q$a@534@01))))
(push) ; 14
; [then-branch: 284 | 0 <= q$a@534@01 && q$a@534@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 284 | !(0 <= q$a@534@01 && q$a@534@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 15
; [then-branch: 284 | 0 <= q$a@534@01 && q$a@534@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@534@01)
  (<= q$a@534@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 15
(push) ; 15
; [else-branch: 284 | !(0 <= q$a@534@01 && q$a@534@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@534@01)
    (<= q$a@534@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@534@01)
      (<= q$a@534@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@534@01)
    (<= q$a@534@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@534@01 Int)) (!
  (and
    (or (<= 0 q$a@534@01) (not (<= 0 q$a@534@01)))
    (or
      (not
        (and
          (<= 0 q$a@534@01)
          (<= q$a@534@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@534@01)
        (<= q$a@534@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@533@01 7)) q$a@534@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 12
(push) ; 12
; [else-branch: 282 | !($struct_get[Bool]($struct_loc[Int](self@533@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@533@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@533@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@533@01 3))
    (forall ((q$a@534@01 Int)) (!
      (and
        (or (<= 0 q$a@534@01) (not (<= 0 q$a@534@01)))
        (or
          (not
            (and
              (<= 0 q$a@534@01)
              (<= q$a@534@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@534@01)
            (<= q$a@534@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@533@01 7)) q$a@534@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@533@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@533@01 3))))
(push) ; 11
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@533@01 3))
  (forall ((q$a@534@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@533@01 7)) q$a@534@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@533@01 3))
  (forall ((q$a@534@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@533@01 7)) q$a@534@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 10
; [then-branch: 285 | False | dead]
; [else-branch: 285 | True | live]
(push) ; 10
; [else-branch: 285 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 279 | !(l$send_fail$3@341@01)]
(assert (not l$send_fail$3@341@01))
(pop) ; 9
; [eval] !l$send_fail$3
(push) ; 9
(set-option :timeout 10)
(assert (not l$send_fail$3@341@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not l$send_fail$3@341@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 286 | !(l$send_fail$3@341@01) | live]
; [else-branch: 286 | l$send_fail$3@341@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 286 | !(l$send_fail$3@341@01)]
(assert (not l$send_fail$3@341@01))
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [eval] !(l$raw_ret == 4)
; [eval] l$raw_ret == 4
(push) ; 10
(set-option :timeout 10)
(assert (not (= l$raw_ret@342@01 4)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= l$raw_ret@342@01 4))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 287 | l$raw_ret@342@01 != 4 | live]
; [else-branch: 287 | l$raw_ret@342@01 == 4 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 287 | l$raw_ret@342@01 != 4]
(assert (not (= l$raw_ret@342@01 4)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 288 | True | live]
; [else-branch: 288 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 288 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@535@01 $Snap)
(assert (= $t@535@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@536@01 $Struct)
(assert (=
  self@536@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 12
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@536@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@536@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 12
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@536@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@536@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 289 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 289 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 289 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 13
(push) ; 13
; [else-branch: 289 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@536@01 3)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@536@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@536@01 3)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@536@01 3))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 290 | $struct_get[Bool]($struct_loc[Int](self@536@01, 3)) | live]
; [else-branch: 290 | !($struct_get[Bool]($struct_loc[Int](self@536@01, 3))) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 290 | $struct_get[Bool]($struct_loc[Int](self@536@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@536@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@537@01 Int)
(push) ; 14
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 15
; [then-branch: 291 | !(0 <= q$a@537@01) | live]
; [else-branch: 291 | 0 <= q$a@537@01 | live]
(push) ; 16
; [then-branch: 291 | !(0 <= q$a@537@01)]
(assert (not (<= 0 q$a@537@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 291 | 0 <= q$a@537@01]
(assert (<= 0 q$a@537@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@537@01) (not (<= 0 q$a@537@01))))
(push) ; 15
; [then-branch: 292 | 0 <= q$a@537@01 && q$a@537@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 292 | !(0 <= q$a@537@01 && q$a@537@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 16
; [then-branch: 292 | 0 <= q$a@537@01 && q$a@537@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@537@01)
  (<= q$a@537@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 16
(push) ; 16
; [else-branch: 292 | !(0 <= q$a@537@01 && q$a@537@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@537@01)
    (<= q$a@537@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@537@01)
      (<= q$a@537@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@537@01)
    (<= q$a@537@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@537@01 Int)) (!
  (and
    (or (<= 0 q$a@537@01) (not (<= 0 q$a@537@01)))
    (or
      (not
        (and
          (<= 0 q$a@537@01)
          (<= q$a@537@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@537@01)
        (<= q$a@537@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@536@01 7)) q$a@537@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 13
(push) ; 13
; [else-branch: 290 | !($struct_get[Bool]($struct_loc[Int](self@536@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@536@01 3))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@536@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@536@01 3))
    (forall ((q$a@537@01 Int)) (!
      (and
        (or (<= 0 q$a@537@01) (not (<= 0 q$a@537@01)))
        (or
          (not
            (and
              (<= 0 q$a@537@01)
              (<= q$a@537@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@537@01)
            (<= q$a@537@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@536@01 7)) q$a@537@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@536@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@536@01 3))))
(push) ; 12
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@536@01 3))
  (forall ((q$a@537@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@536@01 7)) q$a@537@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@536@01 3))
  (forall ((q$a@537@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@536@01 7)) q$a@537@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 11
; [then-branch: 293 | False | dead]
; [else-branch: 293 | True | live]
(push) ; 11
; [else-branch: 293 | True]
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 287 | l$raw_ret@342@01 == 4]
(assert (= l$raw_ret@342@01 4))
(pop) ; 10
; [eval] !!(l$raw_ret == 4)
; [eval] !(l$raw_ret == 4)
; [eval] l$raw_ret == 4
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= l$raw_ret@342@01 4))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= l$raw_ret@342@01 4)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 294 | l$raw_ret@342@01 == 4 | live]
; [else-branch: 294 | l$raw_ret@342@01 != 4 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 294 | l$raw_ret@342@01 == 4]
(assert (= l$raw_ret@342@01 4))
; [exec]
; label return
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@343@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@343@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 295 | $out_of_gas@343@01 | live]
; [else-branch: 295 | !($out_of_gas@343@01) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 295 | $out_of_gas@343@01]
(assert $out_of_gas@343@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 296 | True | live]
; [else-branch: 296 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 296 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@538@01 $Snap)
(assert (= $t@538@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@539@01 $Struct)
(assert (=
  self@539@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@539@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@539@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@539@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@539@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 297 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 297 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 297 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 14
(push) ; 14
; [else-branch: 297 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@539@01 3)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@539@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@539@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@539@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 298 | $struct_get[Bool]($struct_loc[Int](self@539@01, 3)) | live]
; [else-branch: 298 | !($struct_get[Bool]($struct_loc[Int](self@539@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 298 | $struct_get[Bool]($struct_loc[Int](self@539@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@539@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@540@01 Int)
(push) ; 15
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 16
; [then-branch: 299 | !(0 <= q$a@540@01) | live]
; [else-branch: 299 | 0 <= q$a@540@01 | live]
(push) ; 17
; [then-branch: 299 | !(0 <= q$a@540@01)]
(assert (not (<= 0 q$a@540@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 299 | 0 <= q$a@540@01]
(assert (<= 0 q$a@540@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@540@01) (not (<= 0 q$a@540@01))))
(push) ; 16
; [then-branch: 300 | 0 <= q$a@540@01 && q$a@540@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 300 | !(0 <= q$a@540@01 && q$a@540@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 17
; [then-branch: 300 | 0 <= q$a@540@01 && q$a@540@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@540@01)
  (<= q$a@540@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 17
(push) ; 17
; [else-branch: 300 | !(0 <= q$a@540@01 && q$a@540@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@540@01)
    (<= q$a@540@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@540@01)
      (<= q$a@540@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@540@01)
    (<= q$a@540@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@540@01 Int)) (!
  (and
    (or (<= 0 q$a@540@01) (not (<= 0 q$a@540@01)))
    (or
      (not
        (and
          (<= 0 q$a@540@01)
          (<= q$a@540@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@540@01)
        (<= q$a@540@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 7)) q$a@540@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 14
(push) ; 14
; [else-branch: 298 | !($struct_get[Bool]($struct_loc[Int](self@539@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@539@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@539@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@539@01 3))
    (forall ((q$a@540@01 Int)) (!
      (and
        (or (<= 0 q$a@540@01) (not (<= 0 q$a@540@01)))
        (or
          (not
            (and
              (<= 0 q$a@540@01)
              (<= q$a@540@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@540@01)
            (<= q$a@540@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 7)) q$a@540@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@539@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@539@01 3))))
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@539@01 3))
  (forall ((q$a@540@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 7)) q$a@540@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@539@01 3))
  (forall ((q$a@540@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 7)) q$a@540@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 12
; [then-branch: 301 | False | dead]
; [else-branch: 301 | True | live]
(push) ; 12
; [else-branch: 301 | True]
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 295 | !($out_of_gas@343@01)]
(assert (not $out_of_gas@343@01))
(pop) ; 11
; [eval] !$out_of_gas
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@343@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@343@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 302 | !($out_of_gas@343@01) | live]
; [else-branch: 302 | $out_of_gas@343@01 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 302 | !($out_of_gas@343@01)]
(assert (not $out_of_gas@343@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 303 | False | dead]
; [else-branch: 303 | True | live]
(push) ; 12
; [else-branch: 303 | True]
(pop) ; 12
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 304 | True | live]
; [else-branch: 304 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 304 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@541@01 $Snap)
(assert (= $t@541@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@542@01 $Struct)
(assert (=
  self@542@01
  ($struct_set<$Struct> l$havoc$14@336@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@542@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 0)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@542@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@542@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@542@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 305 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)) | live]
; [else-branch: 305 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 305 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 14
(push) ; 14
; [else-branch: 305 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@542@01 3)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@542@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@542@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@542@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 306 | $struct_get[Bool]($struct_loc[Int](self@542@01, 3)) | live]
; [else-branch: 306 | !($struct_get[Bool]($struct_loc[Int](self@542@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 306 | $struct_get[Bool]($struct_loc[Int](self@542@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@542@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@543@01 Int)
(push) ; 15
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 16
; [then-branch: 307 | !(0 <= q$a@543@01) | live]
; [else-branch: 307 | 0 <= q$a@543@01 | live]
(push) ; 17
; [then-branch: 307 | !(0 <= q$a@543@01)]
(assert (not (<= 0 q$a@543@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 307 | 0 <= q$a@543@01]
(assert (<= 0 q$a@543@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@543@01) (not (<= 0 q$a@543@01))))
(push) ; 16
; [then-branch: 308 | 0 <= q$a@543@01 && q$a@543@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 308 | !(0 <= q$a@543@01 && q$a@543@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 17
; [then-branch: 308 | 0 <= q$a@543@01 && q$a@543@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@543@01)
  (<= q$a@543@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 17
(push) ; 17
; [else-branch: 308 | !(0 <= q$a@543@01 && q$a@543@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@543@01)
    (<= q$a@543@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@543@01)
      (<= q$a@543@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@543@01)
    (<= q$a@543@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@543@01 Int)) (!
  (and
    (or (<= 0 q$a@543@01) (not (<= 0 q$a@543@01)))
    (or
      (not
        (and
          (<= 0 q$a@543@01)
          (<= q$a@543@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@543@01)
        (<= q$a@543@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@542@01 7)) q$a@543@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 14
(push) ; 14
; [else-branch: 306 | !($struct_get[Bool]($struct_loc[Int](self@542@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@542@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@542@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@542@01 3))
    (forall ((q$a@543@01 Int)) (!
      (and
        (or (<= 0 q$a@543@01) (not (<= 0 q$a@543@01)))
        (or
          (not
            (and
              (<= 0 q$a@543@01)
              (<= q$a@543@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@543@01)
            (<= q$a@543@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@542@01 7)) q$a@543@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@542@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@542@01 3))))
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@542@01 3))
  (forall ((q$a@543@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@542@01 7)) q$a@543@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@542@01 3))
  (forall ((q$a@543@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@542@01 7)) q$a@543@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 302 | $out_of_gas@343@01]
(assert $out_of_gas@343@01)
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 294 | l$raw_ret@342@01 != 4]
(assert (not (= l$raw_ret@342@01 4)))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 286 | l$send_fail$3@341@01]
(assert l$send_fail$3@341@01)
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 274 | l$no_reentrant_call$2@338@01]
(assert l$no_reentrant_call$2@338@01)
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 232 | l$send_fail$2@332@01]
(assert l$send_fail$2@332@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 220 | l$no_reentrant_call$1@328@01]
(assert l$no_reentrant_call$1@328@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 124 | l$send_fail$1@322@01]
(assert l$send_fail$1@322@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 112 | !(l$no_reentrant_call@318@01)]
(assert (not l$no_reentrant_call@318@01))
(pop) ; 4
; [eval] !l$no_reentrant_call
(push) ; 4
(set-option :timeout 10)
(assert (not l$no_reentrant_call@318@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@318@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 309 | !(l$no_reentrant_call@318@01) | live]
; [else-branch: 309 | l$no_reentrant_call@318@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 309 | !(l$no_reentrant_call@318@01)]
(assert (not l$no_reentrant_call@318@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$6
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 310 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3)) | live]
; [else-branch: 310 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 310 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(push) ; 6
; [else-branch: 310 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 311 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3)) | live]
; [else-branch: 311 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 311 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@544@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 312 | !(0 <= q$a@544@01) | live]
; [else-branch: 312 | 0 <= q$a@544@01 | live]
(push) ; 9
; [then-branch: 312 | !(0 <= q$a@544@01)]
(assert (not (<= 0 q$a@544@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 312 | 0 <= q$a@544@01]
(assert (<= 0 q$a@544@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@544@01) (not (<= 0 q$a@544@01))))
(push) ; 8
; [then-branch: 313 | 0 <= q$a@544@01 && q$a@544@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 313 | !(0 <= q$a@544@01 && q$a@544@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 313 | 0 <= q$a@544@01 && q$a@544@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@544@01)
  (<= q$a@544@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 9
(push) ; 9
; [else-branch: 313 | !(0 <= q$a@544@01 && q$a@544@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@544@01)
    (<= q$a@544@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@544@01)
      (<= q$a@544@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@544@01)
    (<= q$a@544@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@544@01 Int)) (!
  (and
    (or (<= 0 q$a@544@01) (not (<= 0 q$a@544@01)))
    (or
      (not
        (and
          (<= 0 q$a@544@01)
          (<= q$a@544@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@544@01)
        (<= q$a@544@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) q$a@544@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1129@57@1129@387-aux|)))
(pop) ; 6
(push) ; 6
; [else-branch: 311 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))
    (forall ((q$a@544@01 Int)) (!
      (and
        (or (<= 0 q$a@544@01) (not (<= 0 q$a@544@01)))
        (or
          (not
            (and
              (<= 0 q$a@544@01)
              (<= q$a@544@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@544@01)
            (<= q$a@544@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) q$a@544@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1129@57@1129@387-aux|)))))
; Joined path conditions
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))
  (forall ((q$a@544@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) q$a@544@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1129@57@1129@387|)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))
  (forall ((q$a@544@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) q$a@544@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1129@57@1129@387|))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not l$send_fail$1@322@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not l$send_fail$1@322@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 314 | l$send_fail$1@322@01 | live]
; [else-branch: 314 | !(l$send_fail$1@322@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 314 | l$send_fail$1@322@01]
(assert l$send_fail$1@322@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@545@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 315 | True | live]
; [else-branch: 315 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 315 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@546@01 $Snap)
(assert (= $t@546@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@547@01 $Struct)
(assert (=
  self@547@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@547@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@547@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@547@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@547@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 316 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 316 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 316 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(push) ; 8
; [else-branch: 316 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@547@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@547@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@547@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@547@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 317 | $struct_get[Bool]($struct_loc[Int](self@547@01, 3)) | live]
; [else-branch: 317 | !($struct_get[Bool]($struct_loc[Int](self@547@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 317 | $struct_get[Bool]($struct_loc[Int](self@547@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@547@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@548@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 318 | !(0 <= q$a@548@01) | live]
; [else-branch: 318 | 0 <= q$a@548@01 | live]
(push) ; 11
; [then-branch: 318 | !(0 <= q$a@548@01)]
(assert (not (<= 0 q$a@548@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 318 | 0 <= q$a@548@01]
(assert (<= 0 q$a@548@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@548@01) (not (<= 0 q$a@548@01))))
(push) ; 10
; [then-branch: 319 | 0 <= q$a@548@01 && q$a@548@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 319 | !(0 <= q$a@548@01 && q$a@548@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 319 | 0 <= q$a@548@01 && q$a@548@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@548@01)
  (<= q$a@548@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 11
(push) ; 11
; [else-branch: 319 | !(0 <= q$a@548@01 && q$a@548@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@548@01)
    (<= q$a@548@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@548@01)
      (<= q$a@548@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@548@01)
    (<= q$a@548@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@548@01 Int)) (!
  (and
    (or (<= 0 q$a@548@01) (not (<= 0 q$a@548@01)))
    (or
      (not
        (and
          (<= 0 q$a@548@01)
          (<= q$a@548@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@548@01)
        (<= q$a@548@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@547@01 7)) q$a@548@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 317 | !($struct_get[Bool]($struct_loc[Int](self@547@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@547@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@547@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@547@01 3))
    (forall ((q$a@548@01 Int)) (!
      (and
        (or (<= 0 q$a@548@01) (not (<= 0 q$a@548@01)))
        (or
          (not
            (and
              (<= 0 q$a@548@01)
              (<= q$a@548@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@548@01)
            (<= q$a@548@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@547@01 7)) q$a@548@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@547@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@547@01 3))))
(push) ; 7
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@547@01 3))
  (forall ((q$a@548@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@547@01 7)) q$a@548@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@547@01 3))
  (forall ((q$a@548@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@547@01 7)) q$a@548@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 6
; [then-branch: 320 | False | dead]
; [else-branch: 320 | True | live]
(push) ; 6
; [else-branch: 320 | True]
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 314 | !(l$send_fail$1@322@01)]
(assert (not l$send_fail$1@322@01))
(pop) ; 5
; [eval] !l$send_fail$1
(push) ; 5
(set-option :timeout 10)
(assert (not l$send_fail$1@322@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not l$send_fail$1@322@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 321 | !(l$send_fail$1@322@01) | live]
; [else-branch: 321 | l$send_fail$1@322@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 321 | !(l$send_fail$1@322@01)]
(assert (not l$send_fail$1@322@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i1$$pre_self := self
; [exec]
; i1$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$7
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$8
; [exec]
; $contracts := l$havoc$9
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@549@01 $Snap)
(assert (= $t@549@01 ($Snap.combine ($Snap.first $t@549@01) ($Snap.second $t@549@01))))
(assert (= ($Snap.first $t@549@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 0))))
(assert (= ($Snap.second $t@549@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@550@01 $Snap)
(assert (= $t@550@01 ($Snap.combine ($Snap.first $t@550@01) ($Snap.second $t@550@01))))
(assert (= ($Snap.first $t@550@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 1))))
(assert (= ($Snap.second $t@550@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@551@01 $Snap)
(assert (= $t@551@01 ($Snap.combine ($Snap.first $t@551@01) ($Snap.second $t@551@01))))
(assert (= ($Snap.first $t@551@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 2))))
(assert (= ($Snap.second $t@551@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@552@01 $Snap)
(assert (= $t@552@01 ($Snap.combine ($Snap.first $t@552@01) ($Snap.second $t@552@01))))
(assert (= ($Snap.first $t@552@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 4))))
(assert (= ($Snap.second $t@552@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@553@01 $Snap)
(assert (= $t@553@01 ($Snap.combine ($Snap.first $t@553@01) ($Snap.second $t@553@01))))
(assert (= ($Snap.first $t@553@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 5))))
(assert (= ($Snap.second $t@553@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@554@01 $Snap)
(assert (= $t@554@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@555@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 7
; [then-branch: 322 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$8@326@01, 7)), $q0@555@01)) | live]
; [else-branch: 322 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$8@326@01, 7)), $q0@555@01) | live]
(push) ; 8
; [then-branch: 322 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$8@326@01, 7)), $q0@555@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@555@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 322 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$8@326@01, 7)), $q0@555@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@555@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@555@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@555@01)))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@555@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@555@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@555@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@555@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1155@11@1155@345-aux|)))
(assert (forall (($q0@555@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@555@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@555@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@555@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1155@11@1155@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@556@01 $Snap)
(assert (= $t@556@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q0@557@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@557@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@557@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $q0@557@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1156@11@1156@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@558@01 $Snap)
(assert (= $t@558@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@559@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 7
; [then-branch: 323 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$8@326@01, 8)), $q1@559@01)) | live]
; [else-branch: 323 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$8@326@01, 8)), $q1@559@01) | live]
(push) ; 8
; [then-branch: 323 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$8@326@01, 8)), $q1@559@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@559@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 323 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$8@326@01, 8)), $q1@559@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@559@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@559@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@559@01)))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@559@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@559@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@559@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@559@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1157@11@1157@345-aux|)))
(assert (forall (($q1@559@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@559@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@559@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@559@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1157@11@1157@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@560@01 $Snap)
(assert (= $t@560@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q1@561@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@561@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@561@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 8)) $q1@561@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1158@11@1158@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@562@01 $Snap)
(assert (= $t@562@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@563@01 $Snap)
(assert (= $t@563@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@564@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@564@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $a@564@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) $a@564@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $a@564@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1161@11@1161@259|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
(declare-const $t@565@01 $Snap)
(assert (= $t@565@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 0))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
(declare-const $t@566@01 $Snap)
(assert (= $t@566@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
(declare-const $t@567@01 $Snap)
(assert (= $t@567@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 324 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3)) | live]
; [else-branch: 324 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 324 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 7
(push) ; 7
; [else-branch: 324 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@568@01 $Snap)
(assert (= $t@568@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 325 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)) | live]
; [else-branch: 325 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 325 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@569@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 326 | !(0 <= q$a@569@01) | live]
; [else-branch: 326 | 0 <= q$a@569@01 | live]
(push) ; 10
; [then-branch: 326 | !(0 <= q$a@569@01)]
(assert (not (<= 0 q$a@569@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 326 | 0 <= q$a@569@01]
(assert (<= 0 q$a@569@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@569@01) (not (<= 0 q$a@569@01))))
(push) ; 9
; [then-branch: 327 | 0 <= q$a@569@01 && q$a@569@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 327 | !(0 <= q$a@569@01 && q$a@569@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 327 | 0 <= q$a@569@01 && q$a@569@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@569@01)
  (<= q$a@569@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 10
(push) ; 10
; [else-branch: 327 | !(0 <= q$a@569@01 && q$a@569@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@569@01)
    (<= q$a@569@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@569@01)
      (<= q$a@569@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@569@01)
    (<= q$a@569@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@569@01 Int)) (!
  (and
    (or (<= 0 q$a@569@01) (not (<= 0 q$a@569@01)))
    (or
      (not
        (and
          (<= 0 q$a@569@01)
          (<= q$a@569@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@569@01)
        (<= q$a@569@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@569@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1165@57@1165@387-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 325 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
    (forall ((q$a@569@01 Int)) (!
      (and
        (or (<= 0 q$a@569@01) (not (<= 0 q$a@569@01)))
        (or
          (not
            (and
              (<= 0 q$a@569@01)
              (<= q$a@569@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@569@01)
            (<= q$a@569@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@569@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1165@57@1165@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  (forall ((q$a@569@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@569@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1165@57@1165@387|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call$1@328@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not l$no_reentrant_call$1@328@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 328 | l$no_reentrant_call$1@328@01 | live]
; [else-branch: 328 | !(l$no_reentrant_call$1@328@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 328 | l$no_reentrant_call$1@328@01]
(assert l$no_reentrant_call$1@328@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$10
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$11
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$12
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 329 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3)) | live]
; [else-branch: 329 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 329 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(push) ; 8
; [else-branch: 329 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 330 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3)) | live]
; [else-branch: 330 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 330 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@570@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 331 | !(0 <= q$a@570@01) | live]
; [else-branch: 331 | 0 <= q$a@570@01 | live]
(push) ; 11
; [then-branch: 331 | !(0 <= q$a@570@01)]
(assert (not (<= 0 q$a@570@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 331 | 0 <= q$a@570@01]
(assert (<= 0 q$a@570@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@570@01) (not (<= 0 q$a@570@01))))
(push) ; 10
; [then-branch: 332 | 0 <= q$a@570@01 && q$a@570@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 332 | !(0 <= q$a@570@01 && q$a@570@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 332 | 0 <= q$a@570@01 && q$a@570@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@570@01)
  (<= q$a@570@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 11
(push) ; 11
; [else-branch: 332 | !(0 <= q$a@570@01 && q$a@570@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@570@01)
    (<= q$a@570@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@570@01)
      (<= q$a@570@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@570@01)
    (<= q$a@570@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@570@01 Int)) (!
  (and
    (or (<= 0 q$a@570@01) (not (<= 0 q$a@570@01)))
    (or
      (not
        (and
          (<= 0 q$a@570@01)
          (<= q$a@570@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@570@01)
        (<= q$a@570@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) q$a@570@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1194@57@1194@387-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 330 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))
    (forall ((q$a@570@01 Int)) (!
      (and
        (or (<= 0 q$a@570@01) (not (<= 0 q$a@570@01)))
        (or
          (not
            (and
              (<= 0 q$a@570@01)
              (<= q$a@570@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@570@01)
            (<= q$a@570@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) q$a@570@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1194@57@1194@387-aux|)))))
; Joined path conditions
(push) ; 7
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))
  (forall ((q$a@570@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) q$a@570@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1194@57@1194@387|)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))
  (forall ((q$a@570@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) q$a@570@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1194@57@1194@387|))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not l$send_fail$2@332@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not l$send_fail$2@332@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 333 | l$send_fail$2@332@01 | live]
; [else-branch: 333 | !(l$send_fail$2@332@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 333 | l$send_fail$2@332@01]
(assert l$send_fail$2@332@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@571@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 334 | True | live]
; [else-branch: 334 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 334 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@572@01 $Snap)
(assert (= $t@572@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@573@01 $Struct)
(assert (=
  self@573@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@573@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@573@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@573@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@573@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 335 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 335 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 335 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(push) ; 10
; [else-branch: 335 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@573@01 3)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@573@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@573@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@573@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 336 | $struct_get[Bool]($struct_loc[Int](self@573@01, 3)) | live]
; [else-branch: 336 | !($struct_get[Bool]($struct_loc[Int](self@573@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 336 | $struct_get[Bool]($struct_loc[Int](self@573@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@573@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@574@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 337 | !(0 <= q$a@574@01) | live]
; [else-branch: 337 | 0 <= q$a@574@01 | live]
(push) ; 13
; [then-branch: 337 | !(0 <= q$a@574@01)]
(assert (not (<= 0 q$a@574@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 337 | 0 <= q$a@574@01]
(assert (<= 0 q$a@574@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@574@01) (not (<= 0 q$a@574@01))))
(push) ; 12
; [then-branch: 338 | 0 <= q$a@574@01 && q$a@574@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 338 | !(0 <= q$a@574@01 && q$a@574@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 338 | 0 <= q$a@574@01 && q$a@574@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@574@01)
  (<= q$a@574@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 13
(push) ; 13
; [else-branch: 338 | !(0 <= q$a@574@01 && q$a@574@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@574@01)
    (<= q$a@574@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@574@01)
      (<= q$a@574@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@574@01)
    (<= q$a@574@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@574@01 Int)) (!
  (and
    (or (<= 0 q$a@574@01) (not (<= 0 q$a@574@01)))
    (or
      (not
        (and
          (<= 0 q$a@574@01)
          (<= q$a@574@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@574@01)
        (<= q$a@574@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@573@01 7)) q$a@574@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 10
(push) ; 10
; [else-branch: 336 | !($struct_get[Bool]($struct_loc[Int](self@573@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@573@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@573@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@573@01 3))
    (forall ((q$a@574@01 Int)) (!
      (and
        (or (<= 0 q$a@574@01) (not (<= 0 q$a@574@01)))
        (or
          (not
            (and
              (<= 0 q$a@574@01)
              (<= q$a@574@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@574@01)
            (<= q$a@574@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@573@01 7)) q$a@574@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@573@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@573@01 3))))
(push) ; 9
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@573@01 3))
  (forall ((q$a@574@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@573@01 7)) q$a@574@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@573@01 3))
  (forall ((q$a@574@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@573@01 7)) q$a@574@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 8
; [then-branch: 339 | False | dead]
; [else-branch: 339 | True | live]
(push) ; 8
; [else-branch: 339 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 333 | !(l$send_fail$2@332@01)]
(assert (not l$send_fail$2@332@01))
(pop) ; 7
; [eval] !l$send_fail$2
(push) ; 7
(set-option :timeout 10)
(assert (not l$send_fail$2@332@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not l$send_fail$2@332@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 340 | !(l$send_fail$2@332@01) | live]
; [else-branch: 340 | l$send_fail$2@332@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 340 | !(l$send_fail$2@332@01)]
(assert (not l$send_fail$2@332@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i2$$pre_self := self
; [exec]
; i2$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$13
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$14
; [exec]
; $contracts := l$havoc$15
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@575@01 $Snap)
(assert (= $t@575@01 ($Snap.combine ($Snap.first $t@575@01) ($Snap.second $t@575@01))))
(assert (= ($Snap.first $t@575@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 0))))
(assert (= ($Snap.second $t@575@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@576@01 $Snap)
(assert (= $t@576@01 ($Snap.combine ($Snap.first $t@576@01) ($Snap.second $t@576@01))))
(assert (= ($Snap.first $t@576@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 1))))
(assert (= ($Snap.second $t@576@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@577@01 $Snap)
(assert (= $t@577@01 ($Snap.combine ($Snap.first $t@577@01) ($Snap.second $t@577@01))))
(assert (= ($Snap.first $t@577@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 2))))
(assert (= ($Snap.second $t@577@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@578@01 $Snap)
(assert (= $t@578@01 ($Snap.combine ($Snap.first $t@578@01) ($Snap.second $t@578@01))))
(assert (= ($Snap.first $t@578@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 4))))
(assert (= ($Snap.second $t@578@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@579@01 $Snap)
(assert (= $t@579@01 ($Snap.combine ($Snap.first $t@579@01) ($Snap.second $t@579@01))))
(assert (= ($Snap.first $t@579@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 5))))
(assert (= ($Snap.second $t@579@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@580@01 $Snap)
(assert (= $t@580@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@581@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 9
; [then-branch: 341 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 7)), $q0@581@01)) | live]
; [else-branch: 341 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 7)), $q0@581@01) | live]
(push) ; 10
; [then-branch: 341 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 7)), $q0@581@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@581@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 341 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 7)), $q0@581@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@581@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@581@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@581@01)))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@581@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@581@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@581@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@581@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1220@11@1220@345-aux|)))
(assert (forall (($q0@581@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@581@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@581@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@581@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1220@11@1220@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@582@01 $Snap)
(assert (= $t@582@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q0@583@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@583@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@583@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@583@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1221@11@1221@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@584@01 $Snap)
(assert (= $t@584@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@585@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 9
; [then-branch: 342 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 8)), $q1@585@01)) | live]
; [else-branch: 342 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 8)), $q1@585@01) | live]
(push) ; 10
; [then-branch: 342 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 8)), $q1@585@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@585@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 342 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 8)), $q1@585@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@585@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@585@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@585@01)))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@585@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@585@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@585@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@585@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1222@11@1222@345-aux|)))
(assert (forall (($q1@585@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@585@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@585@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@585@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1222@11@1222@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@586@01 $Snap)
(assert (= $t@586@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q1@587@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@587@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@587@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@587@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1223@11@1223@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@588@01 $Snap)
(assert (= $t@588@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@589@01 $Snap)
(assert (= $t@589@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@590@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@590@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $a@590@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) $a@590@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $a@590@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1226@11@1226@259|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
(declare-const $t@591@01 $Snap)
(assert (= $t@591@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 0))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
(declare-const $t@592@01 $Snap)
(assert (= $t@592@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
(declare-const $t@593@01 $Snap)
(assert (= $t@593@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 343 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3)) | live]
; [else-branch: 343 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 343 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(push) ; 9
; [else-branch: 343 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@594@01 $Snap)
(assert (= $t@594@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 344 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)) | live]
; [else-branch: 344 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 344 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@595@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 345 | !(0 <= q$a@595@01) | live]
; [else-branch: 345 | 0 <= q$a@595@01 | live]
(push) ; 12
; [then-branch: 345 | !(0 <= q$a@595@01)]
(assert (not (<= 0 q$a@595@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 345 | 0 <= q$a@595@01]
(assert (<= 0 q$a@595@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@595@01) (not (<= 0 q$a@595@01))))
(push) ; 11
; [then-branch: 346 | 0 <= q$a@595@01 && q$a@595@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 346 | !(0 <= q$a@595@01 && q$a@595@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 346 | 0 <= q$a@595@01 && q$a@595@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@595@01)
  (<= q$a@595@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 12
(push) ; 12
; [else-branch: 346 | !(0 <= q$a@595@01 && q$a@595@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@595@01)
    (<= q$a@595@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@595@01)
      (<= q$a@595@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@595@01)
    (<= q$a@595@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@595@01 Int)) (!
  (and
    (or (<= 0 q$a@595@01) (not (<= 0 q$a@595@01)))
    (or
      (not
        (and
          (<= 0 q$a@595@01)
          (<= q$a@595@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@595@01)
        (<= q$a@595@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@595@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1230@57@1230@387-aux|)))
(pop) ; 9
(push) ; 9
; [else-branch: 344 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
    (forall ((q$a@595@01 Int)) (!
      (and
        (or (<= 0 q$a@595@01) (not (<= 0 q$a@595@01)))
        (or
          (not
            (and
              (<= 0 q$a@595@01)
              (<= q$a@595@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@595@01)
            (<= q$a@595@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@595@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1230@57@1230@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  (forall ((q$a@595@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@595@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1230@57@1230@387|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call$2@338@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not l$no_reentrant_call$2@338@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 347 | l$no_reentrant_call$2@338@01 | live]
; [else-branch: 347 | !(l$no_reentrant_call$2@338@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 347 | l$no_reentrant_call$2@338@01]
(assert l$no_reentrant_call$2@338@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$16
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$17
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 348 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3)) | live]
; [else-branch: 348 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 348 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(push) ; 10
; [else-branch: 348 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 349 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3)) | live]
; [else-branch: 349 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 349 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@596@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 350 | !(0 <= q$a@596@01) | live]
; [else-branch: 350 | 0 <= q$a@596@01 | live]
(push) ; 13
; [then-branch: 350 | !(0 <= q$a@596@01)]
(assert (not (<= 0 q$a@596@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 350 | 0 <= q$a@596@01]
(assert (<= 0 q$a@596@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@596@01) (not (<= 0 q$a@596@01))))
(push) ; 12
; [then-branch: 351 | 0 <= q$a@596@01 && q$a@596@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 351 | !(0 <= q$a@596@01 && q$a@596@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 351 | 0 <= q$a@596@01 && q$a@596@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@596@01)
  (<= q$a@596@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 13
(push) ; 13
; [else-branch: 351 | !(0 <= q$a@596@01 && q$a@596@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@596@01)
    (<= q$a@596@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@596@01)
      (<= q$a@596@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@596@01)
    (<= q$a@596@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@596@01 Int)) (!
  (and
    (or (<= 0 q$a@596@01) (not (<= 0 q$a@596@01)))
    (or
      (not
        (and
          (<= 0 q$a@596@01)
          (<= q$a@596@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@596@01)
        (<= q$a@596@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) q$a@596@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387-aux|)))
(pop) ; 10
(push) ; 10
; [else-branch: 349 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))
    (forall ((q$a@596@01 Int)) (!
      (and
        (or (<= 0 q$a@596@01) (not (<= 0 q$a@596@01)))
        (or
          (not
            (and
              (<= 0 q$a@596@01)
              (<= q$a@596@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@596@01)
            (<= q$a@596@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) q$a@596@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387-aux|)))))
; Joined path conditions
(push) ; 9
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))
  (forall ((q$a@596@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) q$a@596@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387|)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))
  (forall ((q$a@596@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@316@01 7)) q$a@596@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387|))))
; [exec]
; inhale -170141183460469231731687303715884105728 <= l$raw_ret &&
;   l$raw_ret <= 170141183460469231731687303715884105727
(declare-const $t@597@01 $Snap)
(assert (= $t@597@01 ($Snap.combine ($Snap.first $t@597@01) ($Snap.second $t@597@01))))
(assert (= ($Snap.first $t@597@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= l$raw_ret
; [eval] -170141183460469231731687303715884105728
(assert (<= (- 0 170141183460469231731687303715884105728) l$raw_ret@342@01))
(assert (= ($Snap.second $t@597@01) $Snap.unit))
; [eval] l$raw_ret <= 170141183460469231731687303715884105727
(assert (<= l$raw_ret@342@01 170141183460469231731687303715884105727))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not l$send_fail$3@341@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not l$send_fail$3@341@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 352 | l$send_fail$3@341@01 | live]
; [else-branch: 352 | !(l$send_fail$3@341@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 352 | l$send_fail$3@341@01]
(assert l$send_fail$3@341@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@598@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 353 | True | live]
; [else-branch: 353 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 353 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@599@01 $Snap)
(assert (= $t@599@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@600@01 $Struct)
(assert (=
  self@600@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@600@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@600@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@600@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@600@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 354 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 354 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 354 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(push) ; 12
; [else-branch: 354 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@600@01 3)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@600@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@600@01 3)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@600@01 3))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 355 | $struct_get[Bool]($struct_loc[Int](self@600@01, 3)) | live]
; [else-branch: 355 | !($struct_get[Bool]($struct_loc[Int](self@600@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 355 | $struct_get[Bool]($struct_loc[Int](self@600@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@600@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@601@01 Int)
(push) ; 13
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 14
; [then-branch: 356 | !(0 <= q$a@601@01) | live]
; [else-branch: 356 | 0 <= q$a@601@01 | live]
(push) ; 15
; [then-branch: 356 | !(0 <= q$a@601@01)]
(assert (not (<= 0 q$a@601@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 356 | 0 <= q$a@601@01]
(assert (<= 0 q$a@601@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@601@01) (not (<= 0 q$a@601@01))))
(push) ; 14
; [then-branch: 357 | 0 <= q$a@601@01 && q$a@601@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 357 | !(0 <= q$a@601@01 && q$a@601@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 15
; [then-branch: 357 | 0 <= q$a@601@01 && q$a@601@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@601@01)
  (<= q$a@601@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 15
(push) ; 15
; [else-branch: 357 | !(0 <= q$a@601@01 && q$a@601@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@601@01)
    (<= q$a@601@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@601@01)
      (<= q$a@601@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@601@01)
    (<= q$a@601@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@601@01 Int)) (!
  (and
    (or (<= 0 q$a@601@01) (not (<= 0 q$a@601@01)))
    (or
      (not
        (and
          (<= 0 q$a@601@01)
          (<= q$a@601@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@601@01)
        (<= q$a@601@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@600@01 7)) q$a@601@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 12
(push) ; 12
; [else-branch: 355 | !($struct_get[Bool]($struct_loc[Int](self@600@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@600@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@600@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@600@01 3))
    (forall ((q$a@601@01 Int)) (!
      (and
        (or (<= 0 q$a@601@01) (not (<= 0 q$a@601@01)))
        (or
          (not
            (and
              (<= 0 q$a@601@01)
              (<= q$a@601@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@601@01)
            (<= q$a@601@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@600@01 7)) q$a@601@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@600@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@600@01 3))))
(push) ; 11
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@600@01 3))
  (forall ((q$a@601@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@600@01 7)) q$a@601@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@600@01 3))
  (forall ((q$a@601@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@600@01 7)) q$a@601@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 10
; [then-branch: 358 | False | dead]
; [else-branch: 358 | True | live]
(push) ; 10
; [else-branch: 358 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 352 | !(l$send_fail$3@341@01)]
(assert (not l$send_fail$3@341@01))
(pop) ; 9
; [eval] !l$send_fail$3
(push) ; 9
(set-option :timeout 10)
(assert (not l$send_fail$3@341@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not l$send_fail$3@341@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 359 | !(l$send_fail$3@341@01) | live]
; [else-branch: 359 | l$send_fail$3@341@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 359 | !(l$send_fail$3@341@01)]
(assert (not l$send_fail$3@341@01))
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [eval] !(l$raw_ret == 4)
; [eval] l$raw_ret == 4
(push) ; 10
(set-option :timeout 10)
(assert (not (= l$raw_ret@342@01 4)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= l$raw_ret@342@01 4))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 360 | l$raw_ret@342@01 != 4 | live]
; [else-branch: 360 | l$raw_ret@342@01 == 4 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 360 | l$raw_ret@342@01 != 4]
(assert (not (= l$raw_ret@342@01 4)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 361 | True | live]
; [else-branch: 361 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 361 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@602@01 $Snap)
(assert (= $t@602@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@603@01 $Struct)
(assert (=
  self@603@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 12
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@603@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@603@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 12
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@603@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@603@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 362 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 362 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 362 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 13
(push) ; 13
; [else-branch: 362 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@603@01 3)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@603@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@603@01 3)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@603@01 3))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 363 | $struct_get[Bool]($struct_loc[Int](self@603@01, 3)) | live]
; [else-branch: 363 | !($struct_get[Bool]($struct_loc[Int](self@603@01, 3))) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 363 | $struct_get[Bool]($struct_loc[Int](self@603@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@603@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@604@01 Int)
(push) ; 14
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 15
; [then-branch: 364 | !(0 <= q$a@604@01) | live]
; [else-branch: 364 | 0 <= q$a@604@01 | live]
(push) ; 16
; [then-branch: 364 | !(0 <= q$a@604@01)]
(assert (not (<= 0 q$a@604@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 364 | 0 <= q$a@604@01]
(assert (<= 0 q$a@604@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@604@01) (not (<= 0 q$a@604@01))))
(push) ; 15
; [then-branch: 365 | 0 <= q$a@604@01 && q$a@604@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 365 | !(0 <= q$a@604@01 && q$a@604@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 16
; [then-branch: 365 | 0 <= q$a@604@01 && q$a@604@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@604@01)
  (<= q$a@604@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 16
(push) ; 16
; [else-branch: 365 | !(0 <= q$a@604@01 && q$a@604@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@604@01)
    (<= q$a@604@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@604@01)
      (<= q$a@604@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@604@01)
    (<= q$a@604@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@604@01 Int)) (!
  (and
    (or (<= 0 q$a@604@01) (not (<= 0 q$a@604@01)))
    (or
      (not
        (and
          (<= 0 q$a@604@01)
          (<= q$a@604@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@604@01)
        (<= q$a@604@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@603@01 7)) q$a@604@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 13
(push) ; 13
; [else-branch: 363 | !($struct_get[Bool]($struct_loc[Int](self@603@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@603@01 3))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@603@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@603@01 3))
    (forall ((q$a@604@01 Int)) (!
      (and
        (or (<= 0 q$a@604@01) (not (<= 0 q$a@604@01)))
        (or
          (not
            (and
              (<= 0 q$a@604@01)
              (<= q$a@604@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@604@01)
            (<= q$a@604@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@603@01 7)) q$a@604@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@603@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@603@01 3))))
(push) ; 12
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@603@01 3))
  (forall ((q$a@604@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@603@01 7)) q$a@604@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@603@01 3))
  (forall ((q$a@604@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@603@01 7)) q$a@604@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 11
; [then-branch: 366 | False | dead]
; [else-branch: 366 | True | live]
(push) ; 11
; [else-branch: 366 | True]
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 360 | l$raw_ret@342@01 == 4]
(assert (= l$raw_ret@342@01 4))
(pop) ; 10
; [eval] !!(l$raw_ret == 4)
; [eval] !(l$raw_ret == 4)
; [eval] l$raw_ret == 4
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= l$raw_ret@342@01 4))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= l$raw_ret@342@01 4)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 367 | l$raw_ret@342@01 == 4 | live]
; [else-branch: 367 | l$raw_ret@342@01 != 4 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 367 | l$raw_ret@342@01 == 4]
(assert (= l$raw_ret@342@01 4))
; [exec]
; label return
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@343@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@343@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 368 | $out_of_gas@343@01 | live]
; [else-branch: 368 | !($out_of_gas@343@01) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 368 | $out_of_gas@343@01]
(assert $out_of_gas@343@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 369 | True | live]
; [else-branch: 369 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 369 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@605@01 $Snap)
(assert (= $t@605@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@606@01 $Struct)
(assert (=
  self@606@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@606@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@606@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@606@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@606@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 370 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 370 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 370 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 14
(push) ; 14
; [else-branch: 370 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@606@01 3)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@606@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@606@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@606@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 371 | $struct_get[Bool]($struct_loc[Int](self@606@01, 3)) | live]
; [else-branch: 371 | !($struct_get[Bool]($struct_loc[Int](self@606@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 371 | $struct_get[Bool]($struct_loc[Int](self@606@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@606@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@607@01 Int)
(push) ; 15
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 16
; [then-branch: 372 | !(0 <= q$a@607@01) | live]
; [else-branch: 372 | 0 <= q$a@607@01 | live]
(push) ; 17
; [then-branch: 372 | !(0 <= q$a@607@01)]
(assert (not (<= 0 q$a@607@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 372 | 0 <= q$a@607@01]
(assert (<= 0 q$a@607@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@607@01) (not (<= 0 q$a@607@01))))
(push) ; 16
; [then-branch: 373 | 0 <= q$a@607@01 && q$a@607@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 373 | !(0 <= q$a@607@01 && q$a@607@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 17
; [then-branch: 373 | 0 <= q$a@607@01 && q$a@607@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@607@01)
  (<= q$a@607@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 17
(push) ; 17
; [else-branch: 373 | !(0 <= q$a@607@01 && q$a@607@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@607@01)
    (<= q$a@607@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@607@01)
      (<= q$a@607@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@607@01)
    (<= q$a@607@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@607@01 Int)) (!
  (and
    (or (<= 0 q$a@607@01) (not (<= 0 q$a@607@01)))
    (or
      (not
        (and
          (<= 0 q$a@607@01)
          (<= q$a@607@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@607@01)
        (<= q$a@607@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@606@01 7)) q$a@607@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 14
(push) ; 14
; [else-branch: 371 | !($struct_get[Bool]($struct_loc[Int](self@606@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@606@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@606@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@606@01 3))
    (forall ((q$a@607@01 Int)) (!
      (and
        (or (<= 0 q$a@607@01) (not (<= 0 q$a@607@01)))
        (or
          (not
            (and
              (<= 0 q$a@607@01)
              (<= q$a@607@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@607@01)
            (<= q$a@607@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@606@01 7)) q$a@607@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@606@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@606@01 3))))
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@606@01 3))
  (forall ((q$a@607@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@606@01 7)) q$a@607@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@606@01 3))
  (forall ((q$a@607@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@606@01 7)) q$a@607@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 12
; [then-branch: 374 | False | dead]
; [else-branch: 374 | True | live]
(push) ; 12
; [else-branch: 374 | True]
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 368 | !($out_of_gas@343@01)]
(assert (not $out_of_gas@343@01))
(pop) ; 11
; [eval] !$out_of_gas
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@343@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@343@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 375 | !($out_of_gas@343@01) | live]
; [else-branch: 375 | $out_of_gas@343@01 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 375 | !($out_of_gas@343@01)]
(assert (not $out_of_gas@343@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 376 | False | dead]
; [else-branch: 376 | True | live]
(push) ; 12
; [else-branch: 376 | True]
(pop) ; 12
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 377 | True | live]
; [else-branch: 377 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 377 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@608@01 $Snap)
(assert (= $t@608@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@609@01 $Struct)
(assert (=
  self@609@01
  ($struct_set<$Struct> l$havoc$2@316@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@609@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 0)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@609@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@609@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@609@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@316@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 378 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3)) | live]
; [else-branch: 378 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 378 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 14
(push) ; 14
; [else-branch: 378 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@316@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@609@01 3)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@316@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@609@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@609@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@609@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 379 | $struct_get[Bool]($struct_loc[Int](self@609@01, 3)) | live]
; [else-branch: 379 | !($struct_get[Bool]($struct_loc[Int](self@609@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 379 | $struct_get[Bool]($struct_loc[Int](self@609@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@609@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@610@01 Int)
(push) ; 15
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 16
; [then-branch: 380 | !(0 <= q$a@610@01) | live]
; [else-branch: 380 | 0 <= q$a@610@01 | live]
(push) ; 17
; [then-branch: 380 | !(0 <= q$a@610@01)]
(assert (not (<= 0 q$a@610@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 380 | 0 <= q$a@610@01]
(assert (<= 0 q$a@610@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@610@01) (not (<= 0 q$a@610@01))))
(push) ; 16
; [then-branch: 381 | 0 <= q$a@610@01 && q$a@610@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 381 | !(0 <= q$a@610@01 && q$a@610@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 17
; [then-branch: 381 | 0 <= q$a@610@01 && q$a@610@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@610@01)
  (<= q$a@610@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 17
(push) ; 17
; [else-branch: 381 | !(0 <= q$a@610@01 && q$a@610@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@610@01)
    (<= q$a@610@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@610@01)
      (<= q$a@610@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@610@01)
    (<= q$a@610@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@610@01 Int)) (!
  (and
    (or (<= 0 q$a@610@01) (not (<= 0 q$a@610@01)))
    (or
      (not
        (and
          (<= 0 q$a@610@01)
          (<= q$a@610@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@610@01)
        (<= q$a@610@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@609@01 7)) q$a@610@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 14
(push) ; 14
; [else-branch: 379 | !($struct_get[Bool]($struct_loc[Int](self@609@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@609@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@609@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@609@01 3))
    (forall ((q$a@610@01 Int)) (!
      (and
        (or (<= 0 q$a@610@01) (not (<= 0 q$a@610@01)))
        (or
          (not
            (and
              (<= 0 q$a@610@01)
              (<= q$a@610@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@610@01)
            (<= q$a@610@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@609@01 7)) q$a@610@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@609@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@609@01 3))))
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@609@01 3))
  (forall ((q$a@610@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@609@01 7)) q$a@610@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@609@01 3))
  (forall ((q$a@610@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@609@01 7)) q$a@610@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 375 | $out_of_gas@343@01]
(assert $out_of_gas@343@01)
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 367 | l$raw_ret@342@01 != 4]
(assert (not (= l$raw_ret@342@01 4)))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 359 | l$send_fail$3@341@01]
(assert l$send_fail$3@341@01)
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 347 | !(l$no_reentrant_call$2@338@01)]
(assert (not l$no_reentrant_call$2@338@01))
(pop) ; 8
; [eval] !l$no_reentrant_call$2
(push) ; 8
(set-option :timeout 10)
(assert (not l$no_reentrant_call$2@338@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call$2@338@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 382 | !(l$no_reentrant_call$2@338@01) | live]
; [else-branch: 382 | l$no_reentrant_call$2@338@01 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 382 | !(l$no_reentrant_call$2@338@01)]
(assert (not l$no_reentrant_call$2@338@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$16
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$17
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 383 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)) | live]
; [else-branch: 383 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 383 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(push) ; 10
; [else-branch: 383 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 384 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)) | live]
; [else-branch: 384 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 384 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@611@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 385 | !(0 <= q$a@611@01) | live]
; [else-branch: 385 | 0 <= q$a@611@01 | live]
(push) ; 13
; [then-branch: 385 | !(0 <= q$a@611@01)]
(assert (not (<= 0 q$a@611@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 385 | 0 <= q$a@611@01]
(assert (<= 0 q$a@611@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@611@01) (not (<= 0 q$a@611@01))))
(push) ; 12
; [then-branch: 386 | 0 <= q$a@611@01 && q$a@611@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 386 | !(0 <= q$a@611@01 && q$a@611@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 386 | 0 <= q$a@611@01 && q$a@611@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@611@01)
  (<= q$a@611@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 13
(push) ; 13
; [else-branch: 386 | !(0 <= q$a@611@01 && q$a@611@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@611@01)
    (<= q$a@611@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@611@01)
      (<= q$a@611@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@611@01)
    (<= q$a@611@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@611@01 Int)) (!
  (and
    (or (<= 0 q$a@611@01) (not (<= 0 q$a@611@01)))
    (or
      (not
        (and
          (<= 0 q$a@611@01)
          (<= q$a@611@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@611@01)
        (<= q$a@611@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@611@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387-aux|)))
(pop) ; 10
(push) ; 10
; [else-branch: 384 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
    (forall ((q$a@611@01 Int)) (!
      (and
        (or (<= 0 q$a@611@01) (not (<= 0 q$a@611@01)))
        (or
          (not
            (and
              (<= 0 q$a@611@01)
              (<= q$a@611@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@611@01)
            (<= q$a@611@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@611@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387-aux|)))))
; Joined path conditions
(push) ; 9
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  (forall ((q$a@611@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@611@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387|)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  (forall ((q$a@611@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@611@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387|))))
; [exec]
; inhale -170141183460469231731687303715884105728 <= l$raw_ret &&
;   l$raw_ret <= 170141183460469231731687303715884105727
(declare-const $t@612@01 $Snap)
(assert (= $t@612@01 ($Snap.combine ($Snap.first $t@612@01) ($Snap.second $t@612@01))))
(assert (= ($Snap.first $t@612@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= l$raw_ret
; [eval] -170141183460469231731687303715884105728
(assert (<= (- 0 170141183460469231731687303715884105728) l$raw_ret@342@01))
(assert (= ($Snap.second $t@612@01) $Snap.unit))
; [eval] l$raw_ret <= 170141183460469231731687303715884105727
(assert (<= l$raw_ret@342@01 170141183460469231731687303715884105727))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not l$send_fail$3@341@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not l$send_fail$3@341@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 387 | l$send_fail$3@341@01 | live]
; [else-branch: 387 | !(l$send_fail$3@341@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 387 | l$send_fail$3@341@01]
(assert l$send_fail$3@341@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@613@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 388 | True | live]
; [else-branch: 388 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 388 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@614@01 $Snap)
(assert (= $t@614@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@615@01 $Struct)
(assert (=
  self@615@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@615@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@615@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@615@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@615@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 389 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 389 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 389 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(push) ; 12
; [else-branch: 389 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@615@01 3)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@615@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@615@01 3)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@615@01 3))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 390 | $struct_get[Bool]($struct_loc[Int](self@615@01, 3)) | live]
; [else-branch: 390 | !($struct_get[Bool]($struct_loc[Int](self@615@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 390 | $struct_get[Bool]($struct_loc[Int](self@615@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@615@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@616@01 Int)
(push) ; 13
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 14
; [then-branch: 391 | !(0 <= q$a@616@01) | live]
; [else-branch: 391 | 0 <= q$a@616@01 | live]
(push) ; 15
; [then-branch: 391 | !(0 <= q$a@616@01)]
(assert (not (<= 0 q$a@616@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 391 | 0 <= q$a@616@01]
(assert (<= 0 q$a@616@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@616@01) (not (<= 0 q$a@616@01))))
(push) ; 14
; [then-branch: 392 | 0 <= q$a@616@01 && q$a@616@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 392 | !(0 <= q$a@616@01 && q$a@616@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 15
; [then-branch: 392 | 0 <= q$a@616@01 && q$a@616@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@616@01)
  (<= q$a@616@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 15
(push) ; 15
; [else-branch: 392 | !(0 <= q$a@616@01 && q$a@616@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@616@01)
    (<= q$a@616@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@616@01)
      (<= q$a@616@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@616@01)
    (<= q$a@616@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@616@01 Int)) (!
  (and
    (or (<= 0 q$a@616@01) (not (<= 0 q$a@616@01)))
    (or
      (not
        (and
          (<= 0 q$a@616@01)
          (<= q$a@616@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@616@01)
        (<= q$a@616@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@615@01 7)) q$a@616@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 12
(push) ; 12
; [else-branch: 390 | !($struct_get[Bool]($struct_loc[Int](self@615@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@615@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@615@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@615@01 3))
    (forall ((q$a@616@01 Int)) (!
      (and
        (or (<= 0 q$a@616@01) (not (<= 0 q$a@616@01)))
        (or
          (not
            (and
              (<= 0 q$a@616@01)
              (<= q$a@616@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@616@01)
            (<= q$a@616@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@615@01 7)) q$a@616@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@615@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@615@01 3))))
(push) ; 11
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@615@01 3))
  (forall ((q$a@616@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@615@01 7)) q$a@616@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@615@01 3))
  (forall ((q$a@616@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@615@01 7)) q$a@616@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 10
; [then-branch: 393 | False | dead]
; [else-branch: 393 | True | live]
(push) ; 10
; [else-branch: 393 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 387 | !(l$send_fail$3@341@01)]
(assert (not l$send_fail$3@341@01))
(pop) ; 9
; [eval] !l$send_fail$3
(push) ; 9
(set-option :timeout 10)
(assert (not l$send_fail$3@341@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not l$send_fail$3@341@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 394 | !(l$send_fail$3@341@01) | live]
; [else-branch: 394 | l$send_fail$3@341@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 394 | !(l$send_fail$3@341@01)]
(assert (not l$send_fail$3@341@01))
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [eval] !(l$raw_ret == 4)
; [eval] l$raw_ret == 4
(push) ; 10
(set-option :timeout 10)
(assert (not (= l$raw_ret@342@01 4)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= l$raw_ret@342@01 4))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 395 | l$raw_ret@342@01 != 4 | live]
; [else-branch: 395 | l$raw_ret@342@01 == 4 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 395 | l$raw_ret@342@01 != 4]
(assert (not (= l$raw_ret@342@01 4)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 396 | True | live]
; [else-branch: 396 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 396 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@617@01 $Snap)
(assert (= $t@617@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@618@01 $Struct)
(assert (=
  self@618@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 12
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 12
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@618@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@618@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 397 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 397 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 397 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 13
(push) ; 13
; [else-branch: 397 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@618@01 3)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@618@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@618@01 3)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@618@01 3))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 398 | $struct_get[Bool]($struct_loc[Int](self@618@01, 3)) | live]
; [else-branch: 398 | !($struct_get[Bool]($struct_loc[Int](self@618@01, 3))) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 398 | $struct_get[Bool]($struct_loc[Int](self@618@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@618@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@619@01 Int)
(push) ; 14
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 15
; [then-branch: 399 | !(0 <= q$a@619@01) | live]
; [else-branch: 399 | 0 <= q$a@619@01 | live]
(push) ; 16
; [then-branch: 399 | !(0 <= q$a@619@01)]
(assert (not (<= 0 q$a@619@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 399 | 0 <= q$a@619@01]
(assert (<= 0 q$a@619@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@619@01) (not (<= 0 q$a@619@01))))
(push) ; 15
; [then-branch: 400 | 0 <= q$a@619@01 && q$a@619@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 400 | !(0 <= q$a@619@01 && q$a@619@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 16
; [then-branch: 400 | 0 <= q$a@619@01 && q$a@619@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@619@01)
  (<= q$a@619@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 16
(push) ; 16
; [else-branch: 400 | !(0 <= q$a@619@01 && q$a@619@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@619@01)
    (<= q$a@619@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@619@01)
      (<= q$a@619@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@619@01)
    (<= q$a@619@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@619@01 Int)) (!
  (and
    (or (<= 0 q$a@619@01) (not (<= 0 q$a@619@01)))
    (or
      (not
        (and
          (<= 0 q$a@619@01)
          (<= q$a@619@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@619@01)
        (<= q$a@619@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@618@01 7)) q$a@619@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 13
(push) ; 13
; [else-branch: 398 | !($struct_get[Bool]($struct_loc[Int](self@618@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@618@01 3))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@618@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@618@01 3))
    (forall ((q$a@619@01 Int)) (!
      (and
        (or (<= 0 q$a@619@01) (not (<= 0 q$a@619@01)))
        (or
          (not
            (and
              (<= 0 q$a@619@01)
              (<= q$a@619@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@619@01)
            (<= q$a@619@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@618@01 7)) q$a@619@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@618@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@618@01 3))))
(push) ; 12
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@618@01 3))
  (forall ((q$a@619@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@618@01 7)) q$a@619@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@618@01 3))
  (forall ((q$a@619@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@618@01 7)) q$a@619@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 11
; [then-branch: 401 | False | dead]
; [else-branch: 401 | True | live]
(push) ; 11
; [else-branch: 401 | True]
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 395 | l$raw_ret@342@01 == 4]
(assert (= l$raw_ret@342@01 4))
(pop) ; 10
; [eval] !!(l$raw_ret == 4)
; [eval] !(l$raw_ret == 4)
; [eval] l$raw_ret == 4
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= l$raw_ret@342@01 4))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= l$raw_ret@342@01 4)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 402 | l$raw_ret@342@01 == 4 | live]
; [else-branch: 402 | l$raw_ret@342@01 != 4 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 402 | l$raw_ret@342@01 == 4]
(assert (= l$raw_ret@342@01 4))
; [exec]
; label return
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@343@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@343@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 403 | $out_of_gas@343@01 | live]
; [else-branch: 403 | !($out_of_gas@343@01) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 403 | $out_of_gas@343@01]
(assert $out_of_gas@343@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 404 | True | live]
; [else-branch: 404 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 404 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@620@01 $Snap)
(assert (= $t@620@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@621@01 $Struct)
(assert (=
  self@621@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@621@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@621@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@621@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@621@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 405 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 405 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 405 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 14
(push) ; 14
; [else-branch: 405 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@621@01 3)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@621@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@621@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@621@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 406 | $struct_get[Bool]($struct_loc[Int](self@621@01, 3)) | live]
; [else-branch: 406 | !($struct_get[Bool]($struct_loc[Int](self@621@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 406 | $struct_get[Bool]($struct_loc[Int](self@621@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@621@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@622@01 Int)
(push) ; 15
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 16
; [then-branch: 407 | !(0 <= q$a@622@01) | live]
; [else-branch: 407 | 0 <= q$a@622@01 | live]
(push) ; 17
; [then-branch: 407 | !(0 <= q$a@622@01)]
(assert (not (<= 0 q$a@622@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 407 | 0 <= q$a@622@01]
(assert (<= 0 q$a@622@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@622@01) (not (<= 0 q$a@622@01))))
(push) ; 16
; [then-branch: 408 | 0 <= q$a@622@01 && q$a@622@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 408 | !(0 <= q$a@622@01 && q$a@622@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 17
; [then-branch: 408 | 0 <= q$a@622@01 && q$a@622@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@622@01)
  (<= q$a@622@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 17
(push) ; 17
; [else-branch: 408 | !(0 <= q$a@622@01 && q$a@622@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@622@01)
    (<= q$a@622@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@622@01)
      (<= q$a@622@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@622@01)
    (<= q$a@622@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@622@01 Int)) (!
  (and
    (or (<= 0 q$a@622@01) (not (<= 0 q$a@622@01)))
    (or
      (not
        (and
          (<= 0 q$a@622@01)
          (<= q$a@622@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@622@01)
        (<= q$a@622@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@621@01 7)) q$a@622@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 14
(push) ; 14
; [else-branch: 406 | !($struct_get[Bool]($struct_loc[Int](self@621@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@621@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@621@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@621@01 3))
    (forall ((q$a@622@01 Int)) (!
      (and
        (or (<= 0 q$a@622@01) (not (<= 0 q$a@622@01)))
        (or
          (not
            (and
              (<= 0 q$a@622@01)
              (<= q$a@622@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@622@01)
            (<= q$a@622@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@621@01 7)) q$a@622@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@621@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@621@01 3))))
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@621@01 3))
  (forall ((q$a@622@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@621@01 7)) q$a@622@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@621@01 3))
  (forall ((q$a@622@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@621@01 7)) q$a@622@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 12
; [then-branch: 409 | False | dead]
; [else-branch: 409 | True | live]
(push) ; 12
; [else-branch: 409 | True]
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 403 | !($out_of_gas@343@01)]
(assert (not $out_of_gas@343@01))
(pop) ; 11
; [eval] !$out_of_gas
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@343@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@343@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 410 | !($out_of_gas@343@01) | live]
; [else-branch: 410 | $out_of_gas@343@01 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 410 | !($out_of_gas@343@01)]
(assert (not $out_of_gas@343@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 411 | False | dead]
; [else-branch: 411 | True | live]
(push) ; 12
; [else-branch: 411 | True]
(pop) ; 12
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 412 | True | live]
; [else-branch: 412 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 412 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@623@01 $Snap)
(assert (= $t@623@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@624@01 $Struct)
(assert (=
  self@624@01
  ($struct_set<$Struct> l$havoc$14@336@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@624@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 0)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@624@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@624@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@624@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 413 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)) | live]
; [else-branch: 413 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 413 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 14
(push) ; 14
; [else-branch: 413 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@624@01 3)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@624@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@624@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@624@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 414 | $struct_get[Bool]($struct_loc[Int](self@624@01, 3)) | live]
; [else-branch: 414 | !($struct_get[Bool]($struct_loc[Int](self@624@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 414 | $struct_get[Bool]($struct_loc[Int](self@624@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@624@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@625@01 Int)
(push) ; 15
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 16
; [then-branch: 415 | !(0 <= q$a@625@01) | live]
; [else-branch: 415 | 0 <= q$a@625@01 | live]
(push) ; 17
; [then-branch: 415 | !(0 <= q$a@625@01)]
(assert (not (<= 0 q$a@625@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 415 | 0 <= q$a@625@01]
(assert (<= 0 q$a@625@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@625@01) (not (<= 0 q$a@625@01))))
(push) ; 16
; [then-branch: 416 | 0 <= q$a@625@01 && q$a@625@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 416 | !(0 <= q$a@625@01 && q$a@625@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 17
; [then-branch: 416 | 0 <= q$a@625@01 && q$a@625@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@625@01)
  (<= q$a@625@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 17
(push) ; 17
; [else-branch: 416 | !(0 <= q$a@625@01 && q$a@625@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@625@01)
    (<= q$a@625@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@625@01)
      (<= q$a@625@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@625@01)
    (<= q$a@625@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@625@01 Int)) (!
  (and
    (or (<= 0 q$a@625@01) (not (<= 0 q$a@625@01)))
    (or
      (not
        (and
          (<= 0 q$a@625@01)
          (<= q$a@625@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@625@01)
        (<= q$a@625@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@624@01 7)) q$a@625@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 14
(push) ; 14
; [else-branch: 414 | !($struct_get[Bool]($struct_loc[Int](self@624@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@624@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@624@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@624@01 3))
    (forall ((q$a@625@01 Int)) (!
      (and
        (or (<= 0 q$a@625@01) (not (<= 0 q$a@625@01)))
        (or
          (not
            (and
              (<= 0 q$a@625@01)
              (<= q$a@625@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@625@01)
            (<= q$a@625@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@624@01 7)) q$a@625@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@624@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@624@01 3))))
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@624@01 3))
  (forall ((q$a@625@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@624@01 7)) q$a@625@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@624@01 3))
  (forall ((q$a@625@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@624@01 7)) q$a@625@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 410 | $out_of_gas@343@01]
(assert $out_of_gas@343@01)
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 402 | l$raw_ret@342@01 != 4]
(assert (not (= l$raw_ret@342@01 4)))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 394 | l$send_fail$3@341@01]
(assert l$send_fail$3@341@01)
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 382 | l$no_reentrant_call$2@338@01]
(assert l$no_reentrant_call$2@338@01)
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 340 | l$send_fail$2@332@01]
(assert l$send_fail$2@332@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 328 | !(l$no_reentrant_call$1@328@01)]
(assert (not l$no_reentrant_call$1@328@01))
(pop) ; 6
; [eval] !l$no_reentrant_call$1
(push) ; 6
(set-option :timeout 10)
(assert (not l$no_reentrant_call$1@328@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call$1@328@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 417 | !(l$no_reentrant_call$1@328@01) | live]
; [else-branch: 417 | l$no_reentrant_call$1@328@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 417 | !(l$no_reentrant_call$1@328@01)]
(assert (not l$no_reentrant_call$1@328@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$10
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$11
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$12
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 418 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)) | live]
; [else-branch: 418 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 418 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(push) ; 8
; [else-branch: 418 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 419 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)) | live]
; [else-branch: 419 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 419 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@626@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 420 | !(0 <= q$a@626@01) | live]
; [else-branch: 420 | 0 <= q$a@626@01 | live]
(push) ; 11
; [then-branch: 420 | !(0 <= q$a@626@01)]
(assert (not (<= 0 q$a@626@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 420 | 0 <= q$a@626@01]
(assert (<= 0 q$a@626@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@626@01) (not (<= 0 q$a@626@01))))
(push) ; 10
; [then-branch: 421 | 0 <= q$a@626@01 && q$a@626@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 421 | !(0 <= q$a@626@01 && q$a@626@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 421 | 0 <= q$a@626@01 && q$a@626@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@626@01)
  (<= q$a@626@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 11
(push) ; 11
; [else-branch: 421 | !(0 <= q$a@626@01 && q$a@626@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@626@01)
    (<= q$a@626@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@626@01)
      (<= q$a@626@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@626@01)
    (<= q$a@626@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@626@01 Int)) (!
  (and
    (or (<= 0 q$a@626@01) (not (<= 0 q$a@626@01)))
    (or
      (not
        (and
          (<= 0 q$a@626@01)
          (<= q$a@626@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@626@01)
        (<= q$a@626@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@626@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1194@57@1194@387-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 419 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
    (forall ((q$a@626@01 Int)) (!
      (and
        (or (<= 0 q$a@626@01) (not (<= 0 q$a@626@01)))
        (or
          (not
            (and
              (<= 0 q$a@626@01)
              (<= q$a@626@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@626@01)
            (<= q$a@626@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@626@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1194@57@1194@387-aux|)))))
; Joined path conditions
(push) ; 7
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  (forall ((q$a@626@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@626@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1194@57@1194@387|)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  (forall ((q$a@626@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@626@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1194@57@1194@387|))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not l$send_fail$2@332@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not l$send_fail$2@332@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 422 | l$send_fail$2@332@01 | live]
; [else-branch: 422 | !(l$send_fail$2@332@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 422 | l$send_fail$2@332@01]
(assert l$send_fail$2@332@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@627@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 423 | True | live]
; [else-branch: 423 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 423 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@628@01 $Snap)
(assert (= $t@628@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@629@01 $Struct)
(assert (=
  self@629@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@629@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@629@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@629@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@629@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 424 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 424 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 424 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(push) ; 10
; [else-branch: 424 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@629@01 3)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@629@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@629@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@629@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 425 | $struct_get[Bool]($struct_loc[Int](self@629@01, 3)) | live]
; [else-branch: 425 | !($struct_get[Bool]($struct_loc[Int](self@629@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 425 | $struct_get[Bool]($struct_loc[Int](self@629@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@629@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@630@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 426 | !(0 <= q$a@630@01) | live]
; [else-branch: 426 | 0 <= q$a@630@01 | live]
(push) ; 13
; [then-branch: 426 | !(0 <= q$a@630@01)]
(assert (not (<= 0 q$a@630@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 426 | 0 <= q$a@630@01]
(assert (<= 0 q$a@630@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@630@01) (not (<= 0 q$a@630@01))))
(push) ; 12
; [then-branch: 427 | 0 <= q$a@630@01 && q$a@630@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 427 | !(0 <= q$a@630@01 && q$a@630@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 427 | 0 <= q$a@630@01 && q$a@630@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@630@01)
  (<= q$a@630@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 13
(push) ; 13
; [else-branch: 427 | !(0 <= q$a@630@01 && q$a@630@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@630@01)
    (<= q$a@630@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@630@01)
      (<= q$a@630@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@630@01)
    (<= q$a@630@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@630@01 Int)) (!
  (and
    (or (<= 0 q$a@630@01) (not (<= 0 q$a@630@01)))
    (or
      (not
        (and
          (<= 0 q$a@630@01)
          (<= q$a@630@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@630@01)
        (<= q$a@630@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@629@01 7)) q$a@630@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 10
(push) ; 10
; [else-branch: 425 | !($struct_get[Bool]($struct_loc[Int](self@629@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@629@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@629@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@629@01 3))
    (forall ((q$a@630@01 Int)) (!
      (and
        (or (<= 0 q$a@630@01) (not (<= 0 q$a@630@01)))
        (or
          (not
            (and
              (<= 0 q$a@630@01)
              (<= q$a@630@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@630@01)
            (<= q$a@630@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@629@01 7)) q$a@630@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@629@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@629@01 3))))
(push) ; 9
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@629@01 3))
  (forall ((q$a@630@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@629@01 7)) q$a@630@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@629@01 3))
  (forall ((q$a@630@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@629@01 7)) q$a@630@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 8
; [then-branch: 428 | False | dead]
; [else-branch: 428 | True | live]
(push) ; 8
; [else-branch: 428 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 422 | !(l$send_fail$2@332@01)]
(assert (not l$send_fail$2@332@01))
(pop) ; 7
; [eval] !l$send_fail$2
(push) ; 7
(set-option :timeout 10)
(assert (not l$send_fail$2@332@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not l$send_fail$2@332@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 429 | !(l$send_fail$2@332@01) | live]
; [else-branch: 429 | l$send_fail$2@332@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 429 | !(l$send_fail$2@332@01)]
(assert (not l$send_fail$2@332@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i2$$pre_self := self
; [exec]
; i2$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$13
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$14
; [exec]
; $contracts := l$havoc$15
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@631@01 $Snap)
(assert (= $t@631@01 ($Snap.combine ($Snap.first $t@631@01) ($Snap.second $t@631@01))))
(assert (= ($Snap.first $t@631@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 0))))
(assert (= ($Snap.second $t@631@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@632@01 $Snap)
(assert (= $t@632@01 ($Snap.combine ($Snap.first $t@632@01) ($Snap.second $t@632@01))))
(assert (= ($Snap.first $t@632@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 1))))
(assert (= ($Snap.second $t@632@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@633@01 $Snap)
(assert (= $t@633@01 ($Snap.combine ($Snap.first $t@633@01) ($Snap.second $t@633@01))))
(assert (= ($Snap.first $t@633@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 2))))
(assert (= ($Snap.second $t@633@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@634@01 $Snap)
(assert (= $t@634@01 ($Snap.combine ($Snap.first $t@634@01) ($Snap.second $t@634@01))))
(assert (= ($Snap.first $t@634@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 4))))
(assert (= ($Snap.second $t@634@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@635@01 $Snap)
(assert (= $t@635@01 ($Snap.combine ($Snap.first $t@635@01) ($Snap.second $t@635@01))))
(assert (= ($Snap.first $t@635@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 5))))
(assert (= ($Snap.second $t@635@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@636@01 $Snap)
(assert (= $t@636@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@637@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 9
; [then-branch: 430 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 7)), $q0@637@01)) | live]
; [else-branch: 430 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 7)), $q0@637@01) | live]
(push) ; 10
; [then-branch: 430 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 7)), $q0@637@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@637@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 430 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 7)), $q0@637@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@637@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@637@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@637@01)))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@637@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@637@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@637@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@637@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1220@11@1220@345-aux|)))
(assert (forall (($q0@637@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@637@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@637@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@637@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1220@11@1220@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@638@01 $Snap)
(assert (= $t@638@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q0@639@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@639@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@639@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $q0@639@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1221@11@1221@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@640@01 $Snap)
(assert (= $t@640@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@641@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 9
; [then-branch: 431 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 8)), $q1@641@01)) | live]
; [else-branch: 431 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 8)), $q1@641@01) | live]
(push) ; 10
; [then-branch: 431 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 8)), $q1@641@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@641@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 431 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$14@336@01, 8)), $q1@641@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@641@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@641@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@641@01)))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@641@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@641@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@641@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@641@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1222@11@1222@345-aux|)))
(assert (forall (($q1@641@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@641@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@641@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@641@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1222@11@1222@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@642@01 $Snap)
(assert (= $t@642@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q1@643@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@643@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@643@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 8)) $q1@643@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1223@11@1223@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@644@01 $Snap)
(assert (= $t@644@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@645@01 $Snap)
(assert (= $t@645@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@646@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@646@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $a@646@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) $a@646@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) $a@646@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1226@11@1226@259|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
(declare-const $t@647@01 $Snap)
(assert (= $t@647@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 0))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
(declare-const $t@648@01 $Snap)
(assert (= $t@648@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
(declare-const $t@649@01 $Snap)
(assert (= $t@649@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 432 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)) | live]
; [else-branch: 432 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 432 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(push) ; 9
; [else-branch: 432 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@650@01 $Snap)
(assert (= $t@650@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 433 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)) | live]
; [else-branch: 433 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 433 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@651@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 434 | !(0 <= q$a@651@01) | live]
; [else-branch: 434 | 0 <= q$a@651@01 | live]
(push) ; 12
; [then-branch: 434 | !(0 <= q$a@651@01)]
(assert (not (<= 0 q$a@651@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 434 | 0 <= q$a@651@01]
(assert (<= 0 q$a@651@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@651@01) (not (<= 0 q$a@651@01))))
(push) ; 11
; [then-branch: 435 | 0 <= q$a@651@01 && q$a@651@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 435 | !(0 <= q$a@651@01 && q$a@651@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 435 | 0 <= q$a@651@01 && q$a@651@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@651@01)
  (<= q$a@651@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 12
(push) ; 12
; [else-branch: 435 | !(0 <= q$a@651@01 && q$a@651@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@651@01)
    (<= q$a@651@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@651@01)
      (<= q$a@651@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@651@01)
    (<= q$a@651@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@651@01 Int)) (!
  (and
    (or (<= 0 q$a@651@01) (not (<= 0 q$a@651@01)))
    (or
      (not
        (and
          (<= 0 q$a@651@01)
          (<= q$a@651@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@651@01)
        (<= q$a@651@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@651@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1230@57@1230@387-aux|)))
(pop) ; 9
(push) ; 9
; [else-branch: 433 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
    (forall ((q$a@651@01 Int)) (!
      (and
        (or (<= 0 q$a@651@01) (not (<= 0 q$a@651@01)))
        (or
          (not
            (and
              (<= 0 q$a@651@01)
              (<= q$a@651@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@651@01)
            (<= q$a@651@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@651@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1230@57@1230@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  (forall ((q$a@651@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@651@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1230@57@1230@387|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call$2@338@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not l$no_reentrant_call$2@338@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 436 | l$no_reentrant_call$2@338@01 | live]
; [else-branch: 436 | !(l$no_reentrant_call$2@338@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 436 | l$no_reentrant_call$2@338@01]
(assert l$no_reentrant_call$2@338@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$16
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$17
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 437 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)) | live]
; [else-branch: 437 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 437 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(push) ; 10
; [else-branch: 437 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 438 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)) | live]
; [else-branch: 438 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 438 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@652@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 439 | !(0 <= q$a@652@01) | live]
; [else-branch: 439 | 0 <= q$a@652@01 | live]
(push) ; 13
; [then-branch: 439 | !(0 <= q$a@652@01)]
(assert (not (<= 0 q$a@652@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 439 | 0 <= q$a@652@01]
(assert (<= 0 q$a@652@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@652@01) (not (<= 0 q$a@652@01))))
(push) ; 12
; [then-branch: 440 | 0 <= q$a@652@01 && q$a@652@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 440 | !(0 <= q$a@652@01 && q$a@652@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 440 | 0 <= q$a@652@01 && q$a@652@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@652@01)
  (<= q$a@652@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 13
(push) ; 13
; [else-branch: 440 | !(0 <= q$a@652@01 && q$a@652@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@652@01)
    (<= q$a@652@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@652@01)
      (<= q$a@652@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@652@01)
    (<= q$a@652@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@652@01 Int)) (!
  (and
    (or (<= 0 q$a@652@01) (not (<= 0 q$a@652@01)))
    (or
      (not
        (and
          (<= 0 q$a@652@01)
          (<= q$a@652@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@652@01)
        (<= q$a@652@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@652@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387-aux|)))
(pop) ; 10
(push) ; 10
; [else-branch: 438 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
    (forall ((q$a@652@01 Int)) (!
      (and
        (or (<= 0 q$a@652@01) (not (<= 0 q$a@652@01)))
        (or
          (not
            (and
              (<= 0 q$a@652@01)
              (<= q$a@652@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@652@01)
            (<= q$a@652@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@652@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387-aux|)))))
; Joined path conditions
(push) ; 9
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  (forall ((q$a@652@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@652@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387|)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  (forall ((q$a@652@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$8@326@01 7)) q$a@652@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387|))))
; [exec]
; inhale -170141183460469231731687303715884105728 <= l$raw_ret &&
;   l$raw_ret <= 170141183460469231731687303715884105727
(declare-const $t@653@01 $Snap)
(assert (= $t@653@01 ($Snap.combine ($Snap.first $t@653@01) ($Snap.second $t@653@01))))
(assert (= ($Snap.first $t@653@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= l$raw_ret
; [eval] -170141183460469231731687303715884105728
(assert (<= (- 0 170141183460469231731687303715884105728) l$raw_ret@342@01))
(assert (= ($Snap.second $t@653@01) $Snap.unit))
; [eval] l$raw_ret <= 170141183460469231731687303715884105727
(assert (<= l$raw_ret@342@01 170141183460469231731687303715884105727))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not l$send_fail$3@341@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not l$send_fail$3@341@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 441 | l$send_fail$3@341@01 | live]
; [else-branch: 441 | !(l$send_fail$3@341@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 441 | l$send_fail$3@341@01]
(assert l$send_fail$3@341@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@654@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 442 | True | live]
; [else-branch: 442 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 442 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@655@01 $Snap)
(assert (= $t@655@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@656@01 $Struct)
(assert (=
  self@656@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@656@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@656@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@656@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@656@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 443 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 443 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 443 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(push) ; 12
; [else-branch: 443 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@656@01 3)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@656@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@656@01 3)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@656@01 3))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 444 | $struct_get[Bool]($struct_loc[Int](self@656@01, 3)) | live]
; [else-branch: 444 | !($struct_get[Bool]($struct_loc[Int](self@656@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 444 | $struct_get[Bool]($struct_loc[Int](self@656@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@656@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@657@01 Int)
(push) ; 13
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 14
; [then-branch: 445 | !(0 <= q$a@657@01) | live]
; [else-branch: 445 | 0 <= q$a@657@01 | live]
(push) ; 15
; [then-branch: 445 | !(0 <= q$a@657@01)]
(assert (not (<= 0 q$a@657@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 445 | 0 <= q$a@657@01]
(assert (<= 0 q$a@657@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@657@01) (not (<= 0 q$a@657@01))))
(push) ; 14
; [then-branch: 446 | 0 <= q$a@657@01 && q$a@657@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 446 | !(0 <= q$a@657@01 && q$a@657@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 15
; [then-branch: 446 | 0 <= q$a@657@01 && q$a@657@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@657@01)
  (<= q$a@657@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 15
(push) ; 15
; [else-branch: 446 | !(0 <= q$a@657@01 && q$a@657@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@657@01)
    (<= q$a@657@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@657@01)
      (<= q$a@657@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@657@01)
    (<= q$a@657@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@657@01 Int)) (!
  (and
    (or (<= 0 q$a@657@01) (not (<= 0 q$a@657@01)))
    (or
      (not
        (and
          (<= 0 q$a@657@01)
          (<= q$a@657@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@657@01)
        (<= q$a@657@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@656@01 7)) q$a@657@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 12
(push) ; 12
; [else-branch: 444 | !($struct_get[Bool]($struct_loc[Int](self@656@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@656@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@656@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@656@01 3))
    (forall ((q$a@657@01 Int)) (!
      (and
        (or (<= 0 q$a@657@01) (not (<= 0 q$a@657@01)))
        (or
          (not
            (and
              (<= 0 q$a@657@01)
              (<= q$a@657@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@657@01)
            (<= q$a@657@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@656@01 7)) q$a@657@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@656@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@656@01 3))))
(push) ; 11
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@656@01 3))
  (forall ((q$a@657@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@656@01 7)) q$a@657@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@656@01 3))
  (forall ((q$a@657@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@656@01 7)) q$a@657@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 10
; [then-branch: 447 | False | dead]
; [else-branch: 447 | True | live]
(push) ; 10
; [else-branch: 447 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 441 | !(l$send_fail$3@341@01)]
(assert (not l$send_fail$3@341@01))
(pop) ; 9
; [eval] !l$send_fail$3
(push) ; 9
(set-option :timeout 10)
(assert (not l$send_fail$3@341@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not l$send_fail$3@341@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 448 | !(l$send_fail$3@341@01) | live]
; [else-branch: 448 | l$send_fail$3@341@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 448 | !(l$send_fail$3@341@01)]
(assert (not l$send_fail$3@341@01))
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [eval] !(l$raw_ret == 4)
; [eval] l$raw_ret == 4
(push) ; 10
(set-option :timeout 10)
(assert (not (= l$raw_ret@342@01 4)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= l$raw_ret@342@01 4))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 449 | l$raw_ret@342@01 != 4 | live]
; [else-branch: 449 | l$raw_ret@342@01 == 4 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 449 | l$raw_ret@342@01 != 4]
(assert (not (= l$raw_ret@342@01 4)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 450 | True | live]
; [else-branch: 450 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 450 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@658@01 $Snap)
(assert (= $t@658@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@659@01 $Struct)
(assert (=
  self@659@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 12
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@659@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@659@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 12
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@659@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@659@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 451 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 451 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 451 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 13
(push) ; 13
; [else-branch: 451 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@659@01 3)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@659@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@659@01 3)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@659@01 3))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 452 | $struct_get[Bool]($struct_loc[Int](self@659@01, 3)) | live]
; [else-branch: 452 | !($struct_get[Bool]($struct_loc[Int](self@659@01, 3))) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 452 | $struct_get[Bool]($struct_loc[Int](self@659@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@659@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@660@01 Int)
(push) ; 14
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 15
; [then-branch: 453 | !(0 <= q$a@660@01) | live]
; [else-branch: 453 | 0 <= q$a@660@01 | live]
(push) ; 16
; [then-branch: 453 | !(0 <= q$a@660@01)]
(assert (not (<= 0 q$a@660@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 453 | 0 <= q$a@660@01]
(assert (<= 0 q$a@660@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@660@01) (not (<= 0 q$a@660@01))))
(push) ; 15
; [then-branch: 454 | 0 <= q$a@660@01 && q$a@660@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 454 | !(0 <= q$a@660@01 && q$a@660@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 16
; [then-branch: 454 | 0 <= q$a@660@01 && q$a@660@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@660@01)
  (<= q$a@660@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 16
(push) ; 16
; [else-branch: 454 | !(0 <= q$a@660@01 && q$a@660@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@660@01)
    (<= q$a@660@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@660@01)
      (<= q$a@660@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@660@01)
    (<= q$a@660@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@660@01 Int)) (!
  (and
    (or (<= 0 q$a@660@01) (not (<= 0 q$a@660@01)))
    (or
      (not
        (and
          (<= 0 q$a@660@01)
          (<= q$a@660@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@660@01)
        (<= q$a@660@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@659@01 7)) q$a@660@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 13
(push) ; 13
; [else-branch: 452 | !($struct_get[Bool]($struct_loc[Int](self@659@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@659@01 3))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@659@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@659@01 3))
    (forall ((q$a@660@01 Int)) (!
      (and
        (or (<= 0 q$a@660@01) (not (<= 0 q$a@660@01)))
        (or
          (not
            (and
              (<= 0 q$a@660@01)
              (<= q$a@660@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@660@01)
            (<= q$a@660@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@659@01 7)) q$a@660@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@659@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@659@01 3))))
(push) ; 12
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@659@01 3))
  (forall ((q$a@660@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@659@01 7)) q$a@660@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@659@01 3))
  (forall ((q$a@660@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@659@01 7)) q$a@660@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 11
; [then-branch: 455 | False | dead]
; [else-branch: 455 | True | live]
(push) ; 11
; [else-branch: 455 | True]
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 449 | l$raw_ret@342@01 == 4]
(assert (= l$raw_ret@342@01 4))
(pop) ; 10
; [eval] !!(l$raw_ret == 4)
; [eval] !(l$raw_ret == 4)
; [eval] l$raw_ret == 4
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= l$raw_ret@342@01 4))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= l$raw_ret@342@01 4)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 456 | l$raw_ret@342@01 == 4 | live]
; [else-branch: 456 | l$raw_ret@342@01 != 4 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 456 | l$raw_ret@342@01 == 4]
(assert (= l$raw_ret@342@01 4))
; [exec]
; label return
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@343@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@343@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 457 | $out_of_gas@343@01 | live]
; [else-branch: 457 | !($out_of_gas@343@01) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 457 | $out_of_gas@343@01]
(assert $out_of_gas@343@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 458 | True | live]
; [else-branch: 458 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 458 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@661@01 $Snap)
(assert (= $t@661@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@662@01 $Struct)
(assert (=
  self@662@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@662@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@662@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@662@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@662@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 459 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 459 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 459 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 14
(push) ; 14
; [else-branch: 459 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@662@01 3)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@662@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@662@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@662@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 460 | $struct_get[Bool]($struct_loc[Int](self@662@01, 3)) | live]
; [else-branch: 460 | !($struct_get[Bool]($struct_loc[Int](self@662@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 460 | $struct_get[Bool]($struct_loc[Int](self@662@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@662@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@663@01 Int)
(push) ; 15
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 16
; [then-branch: 461 | !(0 <= q$a@663@01) | live]
; [else-branch: 461 | 0 <= q$a@663@01 | live]
(push) ; 17
; [then-branch: 461 | !(0 <= q$a@663@01)]
(assert (not (<= 0 q$a@663@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 461 | 0 <= q$a@663@01]
(assert (<= 0 q$a@663@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@663@01) (not (<= 0 q$a@663@01))))
(push) ; 16
; [then-branch: 462 | 0 <= q$a@663@01 && q$a@663@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 462 | !(0 <= q$a@663@01 && q$a@663@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 17
; [then-branch: 462 | 0 <= q$a@663@01 && q$a@663@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@663@01)
  (<= q$a@663@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 17
(push) ; 17
; [else-branch: 462 | !(0 <= q$a@663@01 && q$a@663@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@663@01)
    (<= q$a@663@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@663@01)
      (<= q$a@663@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@663@01)
    (<= q$a@663@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@663@01 Int)) (!
  (and
    (or (<= 0 q$a@663@01) (not (<= 0 q$a@663@01)))
    (or
      (not
        (and
          (<= 0 q$a@663@01)
          (<= q$a@663@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@663@01)
        (<= q$a@663@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@662@01 7)) q$a@663@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 14
(push) ; 14
; [else-branch: 460 | !($struct_get[Bool]($struct_loc[Int](self@662@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@662@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@662@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@662@01 3))
    (forall ((q$a@663@01 Int)) (!
      (and
        (or (<= 0 q$a@663@01) (not (<= 0 q$a@663@01)))
        (or
          (not
            (and
              (<= 0 q$a@663@01)
              (<= q$a@663@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@663@01)
            (<= q$a@663@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@662@01 7)) q$a@663@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@662@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@662@01 3))))
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@662@01 3))
  (forall ((q$a@663@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@662@01 7)) q$a@663@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@662@01 3))
  (forall ((q$a@663@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@662@01 7)) q$a@663@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 12
; [then-branch: 463 | False | dead]
; [else-branch: 463 | True | live]
(push) ; 12
; [else-branch: 463 | True]
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 457 | !($out_of_gas@343@01)]
(assert (not $out_of_gas@343@01))
(pop) ; 11
; [eval] !$out_of_gas
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@343@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@343@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 464 | !($out_of_gas@343@01) | live]
; [else-branch: 464 | $out_of_gas@343@01 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 464 | !($out_of_gas@343@01)]
(assert (not $out_of_gas@343@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 465 | False | dead]
; [else-branch: 465 | True | live]
(push) ; 12
; [else-branch: 465 | True]
(pop) ; 12
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 466 | True | live]
; [else-branch: 466 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 466 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@664@01 $Snap)
(assert (= $t@664@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@665@01 $Struct)
(assert (=
  self@665@01
  ($struct_set<$Struct> l$havoc$8@326@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@665@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 0)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@665@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@665@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@665@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$8@326@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 467 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)) | live]
; [else-branch: 467 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 467 | $struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 14
(push) ; 14
; [else-branch: 467 | !($struct_get[Bool]($struct_loc[Int](l$havoc$8@326@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@665@01 3)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$8@326@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@665@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@665@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@665@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 468 | $struct_get[Bool]($struct_loc[Int](self@665@01, 3)) | live]
; [else-branch: 468 | !($struct_get[Bool]($struct_loc[Int](self@665@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 468 | $struct_get[Bool]($struct_loc[Int](self@665@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@665@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@666@01 Int)
(push) ; 15
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 16
; [then-branch: 469 | !(0 <= q$a@666@01) | live]
; [else-branch: 469 | 0 <= q$a@666@01 | live]
(push) ; 17
; [then-branch: 469 | !(0 <= q$a@666@01)]
(assert (not (<= 0 q$a@666@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 469 | 0 <= q$a@666@01]
(assert (<= 0 q$a@666@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@666@01) (not (<= 0 q$a@666@01))))
(push) ; 16
; [then-branch: 470 | 0 <= q$a@666@01 && q$a@666@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 470 | !(0 <= q$a@666@01 && q$a@666@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 17
; [then-branch: 470 | 0 <= q$a@666@01 && q$a@666@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@666@01)
  (<= q$a@666@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 17
(push) ; 17
; [else-branch: 470 | !(0 <= q$a@666@01 && q$a@666@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@666@01)
    (<= q$a@666@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@666@01)
      (<= q$a@666@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@666@01)
    (<= q$a@666@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@666@01 Int)) (!
  (and
    (or (<= 0 q$a@666@01) (not (<= 0 q$a@666@01)))
    (or
      (not
        (and
          (<= 0 q$a@666@01)
          (<= q$a@666@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@666@01)
        (<= q$a@666@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@665@01 7)) q$a@666@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 14
(push) ; 14
; [else-branch: 468 | !($struct_get[Bool]($struct_loc[Int](self@665@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@665@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@665@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@665@01 3))
    (forall ((q$a@666@01 Int)) (!
      (and
        (or (<= 0 q$a@666@01) (not (<= 0 q$a@666@01)))
        (or
          (not
            (and
              (<= 0 q$a@666@01)
              (<= q$a@666@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@666@01)
            (<= q$a@666@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@665@01 7)) q$a@666@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@665@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@665@01 3))))
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@665@01 3))
  (forall ((q$a@666@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@665@01 7)) q$a@666@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@665@01 3))
  (forall ((q$a@666@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@665@01 7)) q$a@666@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 464 | $out_of_gas@343@01]
(assert $out_of_gas@343@01)
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 456 | l$raw_ret@342@01 != 4]
(assert (not (= l$raw_ret@342@01 4)))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 448 | l$send_fail$3@341@01]
(assert l$send_fail$3@341@01)
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 436 | !(l$no_reentrant_call$2@338@01)]
(assert (not l$no_reentrant_call$2@338@01))
(pop) ; 8
; [eval] !l$no_reentrant_call$2
(push) ; 8
(set-option :timeout 10)
(assert (not l$no_reentrant_call$2@338@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call$2@338@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 471 | !(l$no_reentrant_call$2@338@01) | live]
; [else-branch: 471 | l$no_reentrant_call$2@338@01 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 471 | !(l$no_reentrant_call$2@338@01)]
(assert (not l$no_reentrant_call$2@338@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$16
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$17
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 472 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)) | live]
; [else-branch: 472 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 472 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(push) ; 10
; [else-branch: 472 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 473 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)) | live]
; [else-branch: 473 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 473 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@667@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 474 | !(0 <= q$a@667@01) | live]
; [else-branch: 474 | 0 <= q$a@667@01 | live]
(push) ; 13
; [then-branch: 474 | !(0 <= q$a@667@01)]
(assert (not (<= 0 q$a@667@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 474 | 0 <= q$a@667@01]
(assert (<= 0 q$a@667@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@667@01) (not (<= 0 q$a@667@01))))
(push) ; 12
; [then-branch: 475 | 0 <= q$a@667@01 && q$a@667@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 475 | !(0 <= q$a@667@01 && q$a@667@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 475 | 0 <= q$a@667@01 && q$a@667@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@667@01)
  (<= q$a@667@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 13
(push) ; 13
; [else-branch: 475 | !(0 <= q$a@667@01 && q$a@667@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@667@01)
    (<= q$a@667@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@667@01)
      (<= q$a@667@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@667@01)
    (<= q$a@667@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@667@01 Int)) (!
  (and
    (or (<= 0 q$a@667@01) (not (<= 0 q$a@667@01)))
    (or
      (not
        (and
          (<= 0 q$a@667@01)
          (<= q$a@667@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@667@01)
        (<= q$a@667@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@667@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387-aux|)))
(pop) ; 10
(push) ; 10
; [else-branch: 473 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
    (forall ((q$a@667@01 Int)) (!
      (and
        (or (<= 0 q$a@667@01) (not (<= 0 q$a@667@01)))
        (or
          (not
            (and
              (<= 0 q$a@667@01)
              (<= q$a@667@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@667@01)
            (<= q$a@667@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@667@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387-aux|)))))
; Joined path conditions
(push) ; 9
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  (forall ((q$a@667@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@667@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387|)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  (forall ((q$a@667@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$14@336@01 7)) q$a@667@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1255@57@1255@387|))))
; [exec]
; inhale -170141183460469231731687303715884105728 <= l$raw_ret &&
;   l$raw_ret <= 170141183460469231731687303715884105727
(declare-const $t@668@01 $Snap)
(assert (= $t@668@01 ($Snap.combine ($Snap.first $t@668@01) ($Snap.second $t@668@01))))
(assert (= ($Snap.first $t@668@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= l$raw_ret
; [eval] -170141183460469231731687303715884105728
(assert (<= (- 0 170141183460469231731687303715884105728) l$raw_ret@342@01))
(assert (= ($Snap.second $t@668@01) $Snap.unit))
; [eval] l$raw_ret <= 170141183460469231731687303715884105727
(assert (<= l$raw_ret@342@01 170141183460469231731687303715884105727))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not l$send_fail$3@341@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not l$send_fail$3@341@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 476 | l$send_fail$3@341@01 | live]
; [else-branch: 476 | !(l$send_fail$3@341@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 476 | l$send_fail$3@341@01]
(assert l$send_fail$3@341@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@669@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 477 | True | live]
; [else-branch: 477 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 477 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@670@01 $Snap)
(assert (= $t@670@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@671@01 $Struct)
(assert (=
  self@671@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@671@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@671@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@671@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@671@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 478 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 478 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 478 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(push) ; 12
; [else-branch: 478 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@671@01 3)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@671@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@671@01 3)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@671@01 3))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 479 | $struct_get[Bool]($struct_loc[Int](self@671@01, 3)) | live]
; [else-branch: 479 | !($struct_get[Bool]($struct_loc[Int](self@671@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 479 | $struct_get[Bool]($struct_loc[Int](self@671@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@671@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@672@01 Int)
(push) ; 13
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 14
; [then-branch: 480 | !(0 <= q$a@672@01) | live]
; [else-branch: 480 | 0 <= q$a@672@01 | live]
(push) ; 15
; [then-branch: 480 | !(0 <= q$a@672@01)]
(assert (not (<= 0 q$a@672@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 480 | 0 <= q$a@672@01]
(assert (<= 0 q$a@672@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@672@01) (not (<= 0 q$a@672@01))))
(push) ; 14
; [then-branch: 481 | 0 <= q$a@672@01 && q$a@672@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 481 | !(0 <= q$a@672@01 && q$a@672@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 15
; [then-branch: 481 | 0 <= q$a@672@01 && q$a@672@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@672@01)
  (<= q$a@672@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 15
(push) ; 15
; [else-branch: 481 | !(0 <= q$a@672@01 && q$a@672@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@672@01)
    (<= q$a@672@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@672@01)
      (<= q$a@672@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@672@01)
    (<= q$a@672@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@672@01 Int)) (!
  (and
    (or (<= 0 q$a@672@01) (not (<= 0 q$a@672@01)))
    (or
      (not
        (and
          (<= 0 q$a@672@01)
          (<= q$a@672@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@672@01)
        (<= q$a@672@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@671@01 7)) q$a@672@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 12
(push) ; 12
; [else-branch: 479 | !($struct_get[Bool]($struct_loc[Int](self@671@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@671@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@671@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@671@01 3))
    (forall ((q$a@672@01 Int)) (!
      (and
        (or (<= 0 q$a@672@01) (not (<= 0 q$a@672@01)))
        (or
          (not
            (and
              (<= 0 q$a@672@01)
              (<= q$a@672@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@672@01)
            (<= q$a@672@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@671@01 7)) q$a@672@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@671@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@671@01 3))))
(push) ; 11
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@671@01 3))
  (forall ((q$a@672@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@671@01 7)) q$a@672@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@671@01 3))
  (forall ((q$a@672@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@671@01 7)) q$a@672@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 10
; [then-branch: 482 | False | dead]
; [else-branch: 482 | True | live]
(push) ; 10
; [else-branch: 482 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 476 | !(l$send_fail$3@341@01)]
(assert (not l$send_fail$3@341@01))
(pop) ; 9
; [eval] !l$send_fail$3
(push) ; 9
(set-option :timeout 10)
(assert (not l$send_fail$3@341@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not l$send_fail$3@341@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 483 | !(l$send_fail$3@341@01) | live]
; [else-branch: 483 | l$send_fail$3@341@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 483 | !(l$send_fail$3@341@01)]
(assert (not l$send_fail$3@341@01))
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [eval] !(l$raw_ret == 4)
; [eval] l$raw_ret == 4
(push) ; 10
(set-option :timeout 10)
(assert (not (= l$raw_ret@342@01 4)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= l$raw_ret@342@01 4))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 484 | l$raw_ret@342@01 != 4 | live]
; [else-branch: 484 | l$raw_ret@342@01 == 4 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 484 | l$raw_ret@342@01 != 4]
(assert (not (= l$raw_ret@342@01 4)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 485 | True | live]
; [else-branch: 485 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 485 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@673@01 $Snap)
(assert (= $t@673@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@674@01 $Struct)
(assert (=
  self@674@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 12
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@674@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@674@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 12
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@674@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@674@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 486 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 486 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 486 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 13
(push) ; 13
; [else-branch: 486 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@674@01 3)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@674@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@674@01 3)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@674@01 3))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 487 | $struct_get[Bool]($struct_loc[Int](self@674@01, 3)) | live]
; [else-branch: 487 | !($struct_get[Bool]($struct_loc[Int](self@674@01, 3))) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 487 | $struct_get[Bool]($struct_loc[Int](self@674@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@674@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@675@01 Int)
(push) ; 14
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 15
; [then-branch: 488 | !(0 <= q$a@675@01) | live]
; [else-branch: 488 | 0 <= q$a@675@01 | live]
(push) ; 16
; [then-branch: 488 | !(0 <= q$a@675@01)]
(assert (not (<= 0 q$a@675@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 488 | 0 <= q$a@675@01]
(assert (<= 0 q$a@675@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@675@01) (not (<= 0 q$a@675@01))))
(push) ; 15
; [then-branch: 489 | 0 <= q$a@675@01 && q$a@675@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 489 | !(0 <= q$a@675@01 && q$a@675@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 16
; [then-branch: 489 | 0 <= q$a@675@01 && q$a@675@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@675@01)
  (<= q$a@675@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 16
(push) ; 16
; [else-branch: 489 | !(0 <= q$a@675@01 && q$a@675@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@675@01)
    (<= q$a@675@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@675@01)
      (<= q$a@675@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@675@01)
    (<= q$a@675@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@675@01 Int)) (!
  (and
    (or (<= 0 q$a@675@01) (not (<= 0 q$a@675@01)))
    (or
      (not
        (and
          (<= 0 q$a@675@01)
          (<= q$a@675@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@675@01)
        (<= q$a@675@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@674@01 7)) q$a@675@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 13
(push) ; 13
; [else-branch: 487 | !($struct_get[Bool]($struct_loc[Int](self@674@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@674@01 3))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@674@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@674@01 3))
    (forall ((q$a@675@01 Int)) (!
      (and
        (or (<= 0 q$a@675@01) (not (<= 0 q$a@675@01)))
        (or
          (not
            (and
              (<= 0 q$a@675@01)
              (<= q$a@675@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@675@01)
            (<= q$a@675@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@674@01 7)) q$a@675@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@674@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@674@01 3))))
(push) ; 12
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@674@01 3))
  (forall ((q$a@675@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@674@01 7)) q$a@675@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@674@01 3))
  (forall ((q$a@675@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@674@01 7)) q$a@675@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 11
; [then-branch: 490 | False | dead]
; [else-branch: 490 | True | live]
(push) ; 11
; [else-branch: 490 | True]
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 484 | l$raw_ret@342@01 == 4]
(assert (= l$raw_ret@342@01 4))
(pop) ; 10
; [eval] !!(l$raw_ret == 4)
; [eval] !(l$raw_ret == 4)
; [eval] l$raw_ret == 4
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= l$raw_ret@342@01 4))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= l$raw_ret@342@01 4)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 491 | l$raw_ret@342@01 == 4 | live]
; [else-branch: 491 | l$raw_ret@342@01 != 4 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 491 | l$raw_ret@342@01 == 4]
(assert (= l$raw_ret@342@01 4))
; [exec]
; label return
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@343@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@343@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 492 | $out_of_gas@343@01 | live]
; [else-branch: 492 | !($out_of_gas@343@01) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 492 | $out_of_gas@343@01]
(assert $out_of_gas@343@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 493 | True | live]
; [else-branch: 493 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 493 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@676@01 $Snap)
(assert (= $t@676@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@677@01 $Struct)
(assert (=
  self@677@01
  ($struct_set<$Struct> self@302@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@677@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@677@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@677@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@677@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 494 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3)) | live]
; [else-branch: 494 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 494 | $struct_get[Bool]($struct_loc[Int](self@302@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 14
(push) ; 14
; [else-branch: 494 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@677@01 3)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@677@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@677@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@677@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 495 | $struct_get[Bool]($struct_loc[Int](self@677@01, 3)) | live]
; [else-branch: 495 | !($struct_get[Bool]($struct_loc[Int](self@677@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 495 | $struct_get[Bool]($struct_loc[Int](self@677@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@677@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@678@01 Int)
(push) ; 15
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 16
; [then-branch: 496 | !(0 <= q$a@678@01) | live]
; [else-branch: 496 | 0 <= q$a@678@01 | live]
(push) ; 17
; [then-branch: 496 | !(0 <= q$a@678@01)]
(assert (not (<= 0 q$a@678@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 496 | 0 <= q$a@678@01]
(assert (<= 0 q$a@678@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@678@01) (not (<= 0 q$a@678@01))))
(push) ; 16
; [then-branch: 497 | 0 <= q$a@678@01 && q$a@678@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 497 | !(0 <= q$a@678@01 && q$a@678@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 17
; [then-branch: 497 | 0 <= q$a@678@01 && q$a@678@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@678@01)
  (<= q$a@678@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 17
(push) ; 17
; [else-branch: 497 | !(0 <= q$a@678@01 && q$a@678@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@678@01)
    (<= q$a@678@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@678@01)
      (<= q$a@678@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@678@01)
    (<= q$a@678@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@678@01 Int)) (!
  (and
    (or (<= 0 q$a@678@01) (not (<= 0 q$a@678@01)))
    (or
      (not
        (and
          (<= 0 q$a@678@01)
          (<= q$a@678@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@678@01)
        (<= q$a@678@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@677@01 7)) q$a@678@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 14
(push) ; 14
; [else-branch: 495 | !($struct_get[Bool]($struct_loc[Int](self@677@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@677@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@677@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@677@01 3))
    (forall ((q$a@678@01 Int)) (!
      (and
        (or (<= 0 q$a@678@01) (not (<= 0 q$a@678@01)))
        (or
          (not
            (and
              (<= 0 q$a@678@01)
              (<= q$a@678@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@678@01)
            (<= q$a@678@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@677@01 7)) q$a@678@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@677@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@677@01 3))))
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@677@01 3))
  (forall ((q$a@678@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@677@01 7)) q$a@678@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@677@01 3))
  (forall ((q$a@678@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@677@01 7)) q$a@678@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 12
; [then-branch: 498 | False | dead]
; [else-branch: 498 | True | live]
(push) ; 12
; [else-branch: 498 | True]
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 492 | !($out_of_gas@343@01)]
(assert (not $out_of_gas@343@01))
(pop) ; 11
; [eval] !$out_of_gas
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@343@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@343@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 499 | !($out_of_gas@343@01) | live]
; [else-branch: 499 | $out_of_gas@343@01 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 499 | !($out_of_gas@343@01)]
(assert (not $out_of_gas@343@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 500 | False | dead]
; [else-branch: 500 | True | live]
(push) ; 12
; [else-branch: 500 | True]
(pop) ; 12
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 501 | True | live]
; [else-branch: 501 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 501 | True]
; [exec]
; inhale l$havoc$18 >= 0
(declare-const $t@679@01 $Snap)
(assert (= $t@679@01 $Snap.unit))
; [eval] l$havoc$18 >= 0
(assert (>= l$havoc$18@344@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$18): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$18
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@680@01 $Struct)
(assert (=
  self@680@01
  ($struct_set<$Struct> l$havoc$14@336@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 4))
    l$havoc$18@344@01))))
; [exec]
; $contracts := l$havoc$19
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@680@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 0)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@680@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@680@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@680@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$14@336@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 502 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)) | live]
; [else-branch: 502 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 502 | $struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 14
(push) ; 14
; [else-branch: 502 | !($struct_get[Bool]($struct_loc[Int](l$havoc$14@336@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@680@01 3)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$14@336@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@680@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@680@01 3)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@680@01 3))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 503 | $struct_get[Bool]($struct_loc[Int](self@680@01, 3)) | live]
; [else-branch: 503 | !($struct_get[Bool]($struct_loc[Int](self@680@01, 3))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 503 | $struct_get[Bool]($struct_loc[Int](self@680@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@680@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@681@01 Int)
(push) ; 15
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 16
; [then-branch: 504 | !(0 <= q$a@681@01) | live]
; [else-branch: 504 | 0 <= q$a@681@01 | live]
(push) ; 17
; [then-branch: 504 | !(0 <= q$a@681@01)]
(assert (not (<= 0 q$a@681@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 504 | 0 <= q$a@681@01]
(assert (<= 0 q$a@681@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@681@01) (not (<= 0 q$a@681@01))))
(push) ; 16
; [then-branch: 505 | 0 <= q$a@681@01 && q$a@681@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 505 | !(0 <= q$a@681@01 && q$a@681@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 17
; [then-branch: 505 | 0 <= q$a@681@01 && q$a@681@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@681@01)
  (<= q$a@681@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 17
(push) ; 17
; [else-branch: 505 | !(0 <= q$a@681@01 && q$a@681@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@681@01)
    (<= q$a@681@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@681@01)
      (<= q$a@681@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@681@01)
    (<= q$a@681@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@681@01 Int)) (!
  (and
    (or (<= 0 q$a@681@01) (not (<= 0 q$a@681@01)))
    (or
      (not
        (and
          (<= 0 q$a@681@01)
          (<= q$a@681@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@681@01)
        (<= q$a@681@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@680@01 7)) q$a@681@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))
(pop) ; 14
(push) ; 14
; [else-branch: 503 | !($struct_get[Bool]($struct_loc[Int](self@680@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@680@01 3))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@680@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@680@01 3))
    (forall ((q$a@681@01 Int)) (!
      (and
        (or (<= 0 q$a@681@01) (not (<= 0 q$a@681@01)))
        (or
          (not
            (and
              (<= 0 q$a@681@01)
              (<= q$a@681@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@681@01)
            (<= q$a@681@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@680@01 7)) q$a@681@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@680@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@680@01 3))))
(push) ; 13
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@680@01 3))
  (forall ((q$a@681@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@680@01 7)) q$a@681@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@680@01 3))
  (forall ((q$a@681@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@680@01 7)) q$a@681@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1296@57@1296@387|))))
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 499 | $out_of_gas@343@01]
(assert $out_of_gas@343@01)
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 491 | l$raw_ret@342@01 != 4]
(assert (not (= l$raw_ret@342@01 4)))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 483 | l$send_fail$3@341@01]
(assert l$send_fail$3@341@01)
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 471 | l$no_reentrant_call$2@338@01]
(assert l$no_reentrant_call$2@338@01)
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 429 | l$send_fail$2@332@01]
(assert l$send_fail$2@332@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 417 | l$no_reentrant_call$1@328@01]
(assert l$no_reentrant_call$1@328@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 321 | l$send_fail$1@322@01]
(assert l$send_fail$1@322@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 309 | l$no_reentrant_call@318@01]
(assert l$no_reentrant_call@318@01)
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 105 | l$send_fail@312@01]
(assert l$send_fail@312@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$list_reentrance ----------
(declare-const $succ@682@01 Bool)
(declare-const $succ@683@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@684@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@685@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@686@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@687@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@688@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@689@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@690@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@691@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@692@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@693@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@694@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@695@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@696@01 Bool)
; [exec]
; var l$havoc: $Map[Int, $Struct]
(declare-const l$havoc@697@01 $Map<Int~_$Struct>)
; [exec]
; var l$send_fail: Bool
(declare-const l$send_fail@698@01 Bool)
; [exec]
; var i0$$pre_self: $Struct
(declare-const i0$$pre_self@699@01 $Struct)
; [exec]
; var i0$$pre_$contracts: $Map[Int, $Struct]
(declare-const i0$$pre_$contracts@700@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@701@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$2: $Struct
(declare-const l$havoc$2@702@01 $Struct)
; [exec]
; var l$havoc$3: $Map[Int, $Struct]
(declare-const l$havoc$3@703@01 $Map<Int~_$Struct>)
; [exec]
; var l$no_reentrant_call: Bool
(declare-const l$no_reentrant_call@704@01 Bool)
; [exec]
; var l$havoc$4: $Map[Int, $Struct]
(declare-const l$havoc$4@705@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$5: $Map[Int, $Struct]
(declare-const l$havoc$5@706@01 $Map<Int~_$Struct>)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@707@01 Bool)
; [exec]
; var l$havoc$6: Int
(declare-const l$havoc$6@708@01 Int)
; [exec]
; var l$havoc$7: $Map[Int, $Struct]
(declare-const l$havoc$7@709@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@710@01 $Snap)
(assert (= $t@710@01 ($Snap.combine ($Snap.first $t@710@01) ($Snap.second $t@710@01))))
(assert (= ($Snap.first $t@710@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@688@01 0))))
(assert (= ($Snap.second $t@710@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@688@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@711@01 $Snap)
(assert (= $t@711@01 ($Snap.combine ($Snap.first $t@711@01) ($Snap.second $t@711@01))))
(assert (= ($Snap.first $t@711@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@688@01 1))))
(assert (= ($Snap.second $t@711@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@688@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@712@01 $Snap)
(assert (= $t@712@01 ($Snap.combine ($Snap.first $t@712@01) ($Snap.second $t@712@01))))
(assert (= ($Snap.first $t@712@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@688@01 2))))
(assert (= ($Snap.second $t@712@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@688@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@713@01 $Snap)
(assert (= $t@713@01 ($Snap.combine ($Snap.first $t@713@01) ($Snap.second $t@713@01))))
(assert (= ($Snap.first $t@713@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@688@01 4))))
(assert (= ($Snap.second $t@713@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@688@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@714@01 $Snap)
(assert (= $t@714@01 ($Snap.combine ($Snap.first $t@714@01) ($Snap.second $t@714@01))))
(assert (= ($Snap.first $t@714@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@688@01 5))))
(assert (= ($Snap.second $t@714@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@688@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@715@01 $Snap)
(assert (= $t@715@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@716@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 506 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@688@01, 7)), $q0@716@01)) | live]
; [else-branch: 506 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@688@01, 7)), $q0@716@01) | live]
(push) ; 5
; [then-branch: 506 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@688@01, 7)), $q0@716@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7)) $q0@716@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 506 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@688@01, 7)), $q0@716@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7)) $q0@716@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7)) $q0@716@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7)) $q0@716@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@716@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7)) $q0@716@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7)) $q0@716@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7)) $q0@716@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1333@11@1333@345-aux|)))
(assert (forall (($q0@716@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7)) $q0@716@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7)) $q0@716@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7)) $q0@716@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1333@11@1333@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@717@01 $Snap)
(assert (= $t@717@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q0@718@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@718@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7)) $q0@718@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7)) $q0@718@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1334@11@1334@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@719@01 $Snap)
(assert (= $t@719@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@720@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 507 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@688@01, 8)), $q1@720@01)) | live]
; [else-branch: 507 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@688@01, 8)), $q1@720@01) | live]
(push) ; 5
; [then-branch: 507 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@688@01, 8)), $q1@720@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 8)) $q1@720@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 507 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@688@01, 8)), $q1@720@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 8)) $q1@720@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 8)) $q1@720@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 8)) $q1@720@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@720@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 8)) $q1@720@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 8)) $q1@720@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 8)) $q1@720@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1335@11@1335@345-aux|)))
(assert (forall (($q1@720@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 8)) $q1@720@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 8)) $q1@720@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 8)) $q1@720@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1335@11@1335@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@721@01 $Snap)
(assert (= $t@721@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q1@722@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@722@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 8)) $q1@722@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 8)) $q1@722@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1336@11@1336@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@723@01 $Snap)
(assert (= $t@723@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@688@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@724@01 $Snap)
(assert (= $t@724@01 ($Snap.combine ($Snap.first $t@724@01) ($Snap.second $t@724@01))))
(assert (= ($Snap.first $t@724@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@724@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@725@01 $Snap)
(assert (= $t@725@01 ($Snap.combine ($Snap.first $t@725@01) ($Snap.second $t@725@01))))
(assert (= ($Snap.first $t@725@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@685@01 0))))
(assert (= ($Snap.second $t@725@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@685@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@726@01 $Snap)
(assert (= $t@726@01 ($Snap.combine ($Snap.first $t@726@01) ($Snap.second $t@726@01))))
(assert (= ($Snap.first $t@726@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@685@01 1))))
(assert (= ($Snap.second $t@726@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@685@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@727@01 $Snap)
(assert (= $t@727@01 ($Snap.combine ($Snap.first $t@727@01) ($Snap.second $t@727@01))))
(assert (= ($Snap.first $t@727@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@685@01 2))))
(assert (= ($Snap.second $t@727@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@685@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@728@01 $Snap)
(assert (= $t@728@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@685@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@729@01 $Snap)
(assert (= $t@729@01 ($Snap.combine ($Snap.first $t@729@01) ($Snap.second $t@729@01))))
(assert (= ($Snap.first $t@729@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@685@01 4))))
(assert (= ($Snap.second $t@729@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@685@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@730@01 $Snap)
(assert (= $t@730@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@685@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@731@01 $Snap)
(assert (= $t@731@01 ($Snap.combine ($Snap.first $t@731@01) ($Snap.second $t@731@01))))
(assert (= ($Snap.first $t@731@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@684@01 0))))
(assert (= ($Snap.second $t@731@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@684@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@732@01 $Snap)
(assert (= $t@732@01 ($Snap.combine ($Snap.first $t@732@01) ($Snap.second $t@732@01))))
(assert (= ($Snap.first $t@732@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@684@01 1))))
(assert (= ($Snap.second $t@732@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@684@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@733@01 $Snap)
(assert (= $t@733@01 ($Snap.combine ($Snap.first $t@733@01) ($Snap.second $t@733@01))))
(assert (= ($Snap.first $t@733@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@684@01 2))))
(assert (= ($Snap.second $t@733@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@684@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@734@01 $Snap)
(assert (= $t@734@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@684@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@735@01 $Snap)
(assert (= $t@735@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@684@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@736@01 $Snap)
(assert (= $t@736@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@737@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc(self, 0)): Int)
(declare-const $t@738@01 $Snap)
(assert (= $t@738@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@739@01 $Snap)
(assert (= $t@739@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
(declare-const $t@740@01 $Snap)
(assert (= $t@740@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 508 | $struct_get[Bool]($struct_loc[Int](self@688@01, 3)) | live]
; [else-branch: 508 | !($struct_get[Bool]($struct_loc[Int](self@688@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 508 | $struct_get[Bool]($struct_loc[Int](self@688@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@688@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(push) ; 4
; [else-branch: 508 | !($struct_get[Bool]($struct_loc[Int](self@688@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@741@01 $Snap)
(assert (= $t@741@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 509 | $struct_get[Bool]($struct_loc[Int](self@688@01, 3)) | live]
; [else-branch: 509 | !($struct_get[Bool]($struct_loc[Int](self@688@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 509 | $struct_get[Bool]($struct_loc[Int](self@688@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@688@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@742@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 510 | !(0 <= q$a@742@01) | live]
; [else-branch: 510 | 0 <= q$a@742@01 | live]
(push) ; 7
; [then-branch: 510 | !(0 <= q$a@742@01)]
(assert (not (<= 0 q$a@742@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 510 | 0 <= q$a@742@01]
(assert (<= 0 q$a@742@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@742@01) (not (<= 0 q$a@742@01))))
(push) ; 6
; [then-branch: 511 | 0 <= q$a@742@01 && q$a@742@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 511 | !(0 <= q$a@742@01 && q$a@742@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 511 | 0 <= q$a@742@01 && q$a@742@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@742@01)
  (<= q$a@742@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 7
(push) ; 7
; [else-branch: 511 | !(0 <= q$a@742@01 && q$a@742@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@742@01)
    (<= q$a@742@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@742@01)
      (<= q$a@742@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@742@01)
    (<= q$a@742@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@742@01 Int)) (!
  (and
    (or (<= 0 q$a@742@01) (not (<= 0 q$a@742@01)))
    (or
      (not
        (and
          (<= 0 q$a@742@01)
          (<= q$a@742@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@742@01)
        (<= q$a@742@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7)) q$a@742@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1358@57@1358@377-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 509 | !($struct_get[Bool]($struct_loc[Int](self@688@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))
    (forall ((q$a@742@01 Int)) (!
      (and
        (or (<= 0 q$a@742@01) (not (<= 0 q$a@742@01)))
        (or
          (not
            (and
              (<= 0 q$a@742@01)
              (<= q$a@742@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@742@01)
            (<= q$a@742@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7)) q$a@742@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1358@57@1358@377-aux|)))))
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))
  (forall ((q$a@742@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7)) q$a@742@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1358@57@1358@377|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@743@01 $Snap)
(assert (= $t@743@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@684@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 512 | $struct_get[Bool]($struct_loc[Int](self@688@01, 3)) | live]
; [else-branch: 512 | !($struct_get[Bool]($struct_loc[Int](self@688@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 512 | $struct_get[Bool]($struct_loc[Int](self@688@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@688@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(push) ; 4
; [else-branch: 512 | !($struct_get[Bool]($struct_loc[Int](self@688@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 513 | $struct_get[Bool]($struct_loc[Int](self@688@01, 3)) | live]
; [else-branch: 513 | !($struct_get[Bool]($struct_loc[Int](self@688@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 513 | $struct_get[Bool]($struct_loc[Int](self@688@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@688@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@744@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 514 | !(0 <= q$a@744@01) | live]
; [else-branch: 514 | 0 <= q$a@744@01 | live]
(push) ; 7
; [then-branch: 514 | !(0 <= q$a@744@01)]
(assert (not (<= 0 q$a@744@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 514 | 0 <= q$a@744@01]
(assert (<= 0 q$a@744@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@744@01) (not (<= 0 q$a@744@01))))
(push) ; 6
; [then-branch: 515 | 0 <= q$a@744@01 && q$a@744@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 515 | !(0 <= q$a@744@01 && q$a@744@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 515 | 0 <= q$a@744@01 && q$a@744@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@744@01)
  (<= q$a@744@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 7
(push) ; 7
; [else-branch: 515 | !(0 <= q$a@744@01 && q$a@744@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@744@01)
    (<= q$a@744@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@744@01)
      (<= q$a@744@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@744@01)
    (<= q$a@744@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@744@01 Int)) (!
  (and
    (or (<= 0 q$a@744@01) (not (<= 0 q$a@744@01)))
    (or
      (not
        (and
          (<= 0 q$a@744@01)
          (<= q$a@744@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@744@01)
        (<= q$a@744@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7)) q$a@744@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1378@57@1378@387-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 513 | !($struct_get[Bool]($struct_loc[Int](self@688@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))
    (forall ((q$a@744@01 Int)) (!
      (and
        (or (<= 0 q$a@744@01) (not (<= 0 q$a@744@01)))
        (or
          (not
            (and
              (<= 0 q$a@744@01)
              (<= q$a@744@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@744@01)
            (<= q$a@744@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7)) q$a@744@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1378@57@1378@387-aux|)))))
; Joined path conditions
(push) ; 3
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))
  (forall ((q$a@744@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7)) q$a@744@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1378@57@1378@387|)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))
  (forall ((q$a@744@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7)) q$a@744@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1378@57@1378@387|))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not l$send_fail@698@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not l$send_fail@698@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 516 | l$send_fail@698@01 | live]
; [else-branch: 516 | !(l$send_fail@698@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 516 | l$send_fail@698@01]
(assert l$send_fail@698@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@745@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
; [exec]
; exhale ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] $struct_loc($pre_self, 2)
; [eval] !$succ
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 517 | True | live]
; [else-branch: 517 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 517 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@746@01 $Snap)
(assert (= $t@746@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@708@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@747@01 $Struct)
(assert (=
  self@747@01
  ($struct_set<$Struct> self@688@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@688@01 4))
    l$havoc$6@708@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@747@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 0)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@747@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@747@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@747@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 518 | $struct_get[Bool]($struct_loc[Int](self@688@01, 3)) | live]
; [else-branch: 518 | !($struct_get[Bool]($struct_loc[Int](self@688@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 518 | $struct_get[Bool]($struct_loc[Int](self@688@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@688@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(push) ; 6
; [else-branch: 518 | !($struct_get[Bool]($struct_loc[Int](self@688@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@747@01 3)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@747@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@747@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@747@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 519 | $struct_get[Bool]($struct_loc[Int](self@747@01, 3)) | live]
; [else-branch: 519 | !($struct_get[Bool]($struct_loc[Int](self@747@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 519 | $struct_get[Bool]($struct_loc[Int](self@747@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@747@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@748@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 520 | !(0 <= q$a@748@01) | live]
; [else-branch: 520 | 0 <= q$a@748@01 | live]
(push) ; 9
; [then-branch: 520 | !(0 <= q$a@748@01)]
(assert (not (<= 0 q$a@748@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 520 | 0 <= q$a@748@01]
(assert (<= 0 q$a@748@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@748@01) (not (<= 0 q$a@748@01))))
(push) ; 8
; [then-branch: 521 | 0 <= q$a@748@01 && q$a@748@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 521 | !(0 <= q$a@748@01 && q$a@748@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 521 | 0 <= q$a@748@01 && q$a@748@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@748@01)
  (<= q$a@748@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 9
(push) ; 9
; [else-branch: 521 | !(0 <= q$a@748@01 && q$a@748@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@748@01)
    (<= q$a@748@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@748@01)
      (<= q$a@748@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@748@01)
    (<= q$a@748@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@748@01 Int)) (!
  (and
    (or (<= 0 q$a@748@01) (not (<= 0 q$a@748@01)))
    (or
      (not
        (and
          (<= 0 q$a@748@01)
          (<= q$a@748@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@748@01)
        (<= q$a@748@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@747@01 7)) q$a@748@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1464@57@1464@387-aux|)))
(pop) ; 6
(push) ; 6
; [else-branch: 519 | !($struct_get[Bool]($struct_loc[Int](self@747@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@747@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@747@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@747@01 3))
    (forall ((q$a@748@01 Int)) (!
      (and
        (or (<= 0 q$a@748@01) (not (<= 0 q$a@748@01)))
        (or
          (not
            (and
              (<= 0 q$a@748@01)
              (<= q$a@748@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@748@01)
            (<= q$a@748@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@747@01 7)) q$a@748@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1464@57@1464@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@747@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@747@01 3))))
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@747@01 3))
  (forall ((q$a@748@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@747@01 7)) q$a@748@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1464@57@1464@387|)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@747@01 3))
  (forall ((q$a@748@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@747@01 7)) q$a@748@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1464@57@1464@387|))))
(pop) ; 4
; [then-branch: 522 | False | dead]
; [else-branch: 522 | True | live]
(push) ; 4
; [else-branch: 522 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 516 | !(l$send_fail@698@01)]
(assert (not l$send_fail@698@01))
(pop) ; 3
; [eval] !l$send_fail
(push) ; 3
(set-option :timeout 10)
(assert (not l$send_fail@698@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not l$send_fail@698@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 523 | !(l$send_fail@698@01) | live]
; [else-branch: 523 | l$send_fail@698@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 523 | !(l$send_fail@698@01)]
(assert (not l$send_fail@698@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i0$$pre_self := self
; [exec]
; i0$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$1
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$2
; [exec]
; $contracts := l$havoc$3
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@749@01 $Snap)
(assert (= $t@749@01 ($Snap.combine ($Snap.first $t@749@01) ($Snap.second $t@749@01))))
(assert (= ($Snap.first $t@749@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@702@01 0))))
(assert (= ($Snap.second $t@749@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@702@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@750@01 $Snap)
(assert (= $t@750@01 ($Snap.combine ($Snap.first $t@750@01) ($Snap.second $t@750@01))))
(assert (= ($Snap.first $t@750@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@702@01 1))))
(assert (= ($Snap.second $t@750@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@702@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@751@01 $Snap)
(assert (= $t@751@01 ($Snap.combine ($Snap.first $t@751@01) ($Snap.second $t@751@01))))
(assert (= ($Snap.first $t@751@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@702@01 2))))
(assert (= ($Snap.second $t@751@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@702@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@752@01 $Snap)
(assert (= $t@752@01 ($Snap.combine ($Snap.first $t@752@01) ($Snap.second $t@752@01))))
(assert (= ($Snap.first $t@752@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@702@01 4))))
(assert (= ($Snap.second $t@752@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@702@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@753@01 $Snap)
(assert (= $t@753@01 ($Snap.combine ($Snap.first $t@753@01) ($Snap.second $t@753@01))))
(assert (= ($Snap.first $t@753@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@702@01 5))))
(assert (= ($Snap.second $t@753@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@702@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@754@01 $Snap)
(assert (= $t@754@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@755@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 5
; [then-branch: 524 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@702@01, 7)), $q0@755@01)) | live]
; [else-branch: 524 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@702@01, 7)), $q0@755@01) | live]
(push) ; 6
; [then-branch: 524 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@702@01, 7)), $q0@755@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 7)) $q0@755@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 524 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@702@01, 7)), $q0@755@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 7)) $q0@755@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 7)) $q0@755@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 7)) $q0@755@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@755@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 7)) $q0@755@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 7)) $q0@755@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 7)) $q0@755@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1404@11@1404@345-aux|)))
(assert (forall (($q0@755@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 7)) $q0@755@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 7)) $q0@755@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 7)) $q0@755@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1404@11@1404@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@756@01 $Snap)
(assert (= $t@756@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q0@757@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@757@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 7)) $q0@757@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 7)) $q0@757@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1405@11@1405@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@758@01 $Snap)
(assert (= $t@758@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@759@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 5
; [then-branch: 525 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@702@01, 8)), $q1@759@01)) | live]
; [else-branch: 525 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@702@01, 8)), $q1@759@01) | live]
(push) ; 6
; [then-branch: 525 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@702@01, 8)), $q1@759@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 8)) $q1@759@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 525 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@702@01, 8)), $q1@759@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 8)) $q1@759@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 8)) $q1@759@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 8)) $q1@759@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@759@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 8)) $q1@759@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 8)) $q1@759@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 8)) $q1@759@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1406@11@1406@345-aux|)))
(assert (forall (($q1@759@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 8)) $q1@759@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 8)) $q1@759@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 8)) $q1@759@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1406@11@1406@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@760@01 $Snap)
(assert (= $t@760@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q1@761@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@761@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 8)) $q1@761@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 8)) $q1@761@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1407@11@1407@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@762@01 $Snap)
(assert (= $t@762@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@702@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@763@01 $Snap)
(assert (= $t@763@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@764@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@764@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 7)) $a@764@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 7)) $a@764@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 7)) $a@764@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1410@11@1410@259|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
(declare-const $t@765@01 $Snap)
(assert (= $t@765@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@702@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 0))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
(declare-const $t@766@01 $Snap)
(assert (= $t@766@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@702@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
(declare-const $t@767@01 $Snap)
(assert (= $t@767@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 526 | $struct_get[Bool]($struct_loc[Int](self@688@01, 3)) | live]
; [else-branch: 526 | !($struct_get[Bool]($struct_loc[Int](self@688@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 526 | $struct_get[Bool]($struct_loc[Int](self@688@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@688@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 5
(push) ; 5
; [else-branch: 526 | !($struct_get[Bool]($struct_loc[Int](self@688@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@702@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@768@01 $Snap)
(assert (= $t@768@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@702@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@702@01 3))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 527 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@702@01, 3)) | live]
; [else-branch: 527 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@702@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 527 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@702@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@702@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@769@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 528 | !(0 <= q$a@769@01) | live]
; [else-branch: 528 | 0 <= q$a@769@01 | live]
(push) ; 8
; [then-branch: 528 | !(0 <= q$a@769@01)]
(assert (not (<= 0 q$a@769@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 528 | 0 <= q$a@769@01]
(assert (<= 0 q$a@769@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@769@01) (not (<= 0 q$a@769@01))))
(push) ; 7
; [then-branch: 529 | 0 <= q$a@769@01 && q$a@769@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 529 | !(0 <= q$a@769@01 && q$a@769@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 529 | 0 <= q$a@769@01 && q$a@769@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@769@01)
  (<= q$a@769@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 8
(push) ; 8
; [else-branch: 529 | !(0 <= q$a@769@01 && q$a@769@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@769@01)
    (<= q$a@769@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@769@01)
      (<= q$a@769@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@769@01)
    (<= q$a@769@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@769@01 Int)) (!
  (and
    (or (<= 0 q$a@769@01) (not (<= 0 q$a@769@01)))
    (or
      (not
        (and
          (<= 0 q$a@769@01)
          (<= q$a@769@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@769@01)
        (<= q$a@769@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 7)) q$a@769@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1414@57@1414@387-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 527 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@702@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@702@01 3))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@702@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@702@01 3))
    (forall ((q$a@769@01 Int)) (!
      (and
        (or (<= 0 q$a@769@01) (not (<= 0 q$a@769@01)))
        (or
          (not
            (and
              (<= 0 q$a@769@01)
              (<= q$a@769@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@769@01)
            (<= q$a@769@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 7)) q$a@769@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1414@57@1414@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@702@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@702@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@702@01 3))
  (forall ((q$a@769@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@702@01 7)) q$a@769@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1414@57@1414@387|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@704@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not l$no_reentrant_call@704@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 530 | l$no_reentrant_call@704@01 | live]
; [else-branch: 530 | !(l$no_reentrant_call@704@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 530 | l$no_reentrant_call@704@01]
(assert l$no_reentrant_call@704@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 5
(set-option :timeout 10)
(assert (not (not $out_of_gas@707@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not $out_of_gas@707@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 531 | $out_of_gas@707@01 | live]
; [else-branch: 531 | !($out_of_gas@707@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 531 | $out_of_gas@707@01]
(assert $out_of_gas@707@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
; [exec]
; exhale ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] $struct_loc($pre_self, 2)
; [eval] !$succ
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 532 | True | live]
; [else-branch: 532 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 532 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@770@01 $Snap)
(assert (= $t@770@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@708@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@771@01 $Struct)
(assert (=
  self@771@01
  ($struct_set<$Struct> self@688@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@688@01 4))
    l$havoc$6@708@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@771@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@771@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@771@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@771@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 533 | $struct_get[Bool]($struct_loc[Int](self@688@01, 3)) | live]
; [else-branch: 533 | !($struct_get[Bool]($struct_loc[Int](self@688@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 533 | $struct_get[Bool]($struct_loc[Int](self@688@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@688@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(push) ; 8
; [else-branch: 533 | !($struct_get[Bool]($struct_loc[Int](self@688@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@771@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@771@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@771@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@771@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 534 | $struct_get[Bool]($struct_loc[Int](self@771@01, 3)) | live]
; [else-branch: 534 | !($struct_get[Bool]($struct_loc[Int](self@771@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 534 | $struct_get[Bool]($struct_loc[Int](self@771@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@771@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@772@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 535 | !(0 <= q$a@772@01) | live]
; [else-branch: 535 | 0 <= q$a@772@01 | live]
(push) ; 11
; [then-branch: 535 | !(0 <= q$a@772@01)]
(assert (not (<= 0 q$a@772@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 535 | 0 <= q$a@772@01]
(assert (<= 0 q$a@772@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@772@01) (not (<= 0 q$a@772@01))))
(push) ; 10
; [then-branch: 536 | 0 <= q$a@772@01 && q$a@772@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 536 | !(0 <= q$a@772@01 && q$a@772@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 536 | 0 <= q$a@772@01 && q$a@772@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@772@01)
  (<= q$a@772@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 11
(push) ; 11
; [else-branch: 536 | !(0 <= q$a@772@01 && q$a@772@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@772@01)
    (<= q$a@772@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@772@01)
      (<= q$a@772@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@772@01)
    (<= q$a@772@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@772@01 Int)) (!
  (and
    (or (<= 0 q$a@772@01) (not (<= 0 q$a@772@01)))
    (or
      (not
        (and
          (<= 0 q$a@772@01)
          (<= q$a@772@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@772@01)
        (<= q$a@772@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@771@01 7)) q$a@772@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1464@57@1464@387-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 534 | !($struct_get[Bool]($struct_loc[Int](self@771@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@771@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@771@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@771@01 3))
    (forall ((q$a@772@01 Int)) (!
      (and
        (or (<= 0 q$a@772@01) (not (<= 0 q$a@772@01)))
        (or
          (not
            (and
              (<= 0 q$a@772@01)
              (<= q$a@772@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@772@01)
            (<= q$a@772@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@771@01 7)) q$a@772@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1464@57@1464@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@771@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@771@01 3))))
(push) ; 7
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@771@01 3))
  (forall ((q$a@772@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@771@01 7)) q$a@772@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1464@57@1464@387|)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@771@01 3))
  (forall ((q$a@772@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@771@01 7)) q$a@772@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1464@57@1464@387|))))
(pop) ; 6
; [then-branch: 537 | False | dead]
; [else-branch: 537 | True | live]
(push) ; 6
; [else-branch: 537 | True]
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 531 | !($out_of_gas@707@01)]
(assert (not $out_of_gas@707@01))
(pop) ; 5
; [eval] !$out_of_gas
(push) ; 5
(set-option :timeout 10)
(assert (not $out_of_gas@707@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not $out_of_gas@707@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 538 | !($out_of_gas@707@01) | live]
; [else-branch: 538 | $out_of_gas@707@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 538 | !($out_of_gas@707@01)]
(assert (not $out_of_gas@707@01))
; [exec]
; label end
; [exec]
; exhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
; [exec]
; exhale ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] $struct_loc($pre_self, 2)
; [eval] !$succ
; [then-branch: 539 | False | dead]
; [else-branch: 539 | True | live]
(push) ; 6
; [else-branch: 539 | True]
(pop) ; 6
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 540 | True | live]
; [else-branch: 540 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 540 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@773@01 $Snap)
(assert (= $t@773@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@708@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@774@01 $Struct)
(assert (=
  self@774@01
  ($struct_set<$Struct> self@688@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@688@01 4))
    l$havoc$6@708@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@774@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@774@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@774@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@774@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 541 | $struct_get[Bool]($struct_loc[Int](self@688@01, 3)) | live]
; [else-branch: 541 | !($struct_get[Bool]($struct_loc[Int](self@688@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 541 | $struct_get[Bool]($struct_loc[Int](self@688@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@688@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(push) ; 8
; [else-branch: 541 | !($struct_get[Bool]($struct_loc[Int](self@688@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@774@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@774@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@774@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@774@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 542 | $struct_get[Bool]($struct_loc[Int](self@774@01, 3)) | live]
; [else-branch: 542 | !($struct_get[Bool]($struct_loc[Int](self@774@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 542 | $struct_get[Bool]($struct_loc[Int](self@774@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@774@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@775@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 543 | !(0 <= q$a@775@01) | live]
; [else-branch: 543 | 0 <= q$a@775@01 | live]
(push) ; 11
; [then-branch: 543 | !(0 <= q$a@775@01)]
(assert (not (<= 0 q$a@775@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 543 | 0 <= q$a@775@01]
(assert (<= 0 q$a@775@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@775@01) (not (<= 0 q$a@775@01))))
(push) ; 10
; [then-branch: 544 | 0 <= q$a@775@01 && q$a@775@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 544 | !(0 <= q$a@775@01 && q$a@775@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 544 | 0 <= q$a@775@01 && q$a@775@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@775@01)
  (<= q$a@775@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 11
(push) ; 11
; [else-branch: 544 | !(0 <= q$a@775@01 && q$a@775@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@775@01)
    (<= q$a@775@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@775@01)
      (<= q$a@775@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@775@01)
    (<= q$a@775@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@775@01 Int)) (!
  (and
    (or (<= 0 q$a@775@01) (not (<= 0 q$a@775@01)))
    (or
      (not
        (and
          (<= 0 q$a@775@01)
          (<= q$a@775@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@775@01)
        (<= q$a@775@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@774@01 7)) q$a@775@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1464@57@1464@387-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 542 | !($struct_get[Bool]($struct_loc[Int](self@774@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@774@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@774@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@774@01 3))
    (forall ((q$a@775@01 Int)) (!
      (and
        (or (<= 0 q$a@775@01) (not (<= 0 q$a@775@01)))
        (or
          (not
            (and
              (<= 0 q$a@775@01)
              (<= q$a@775@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@775@01)
            (<= q$a@775@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@774@01 7)) q$a@775@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1464@57@1464@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@774@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@774@01 3))))
(push) ; 7
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@774@01 3))
  (forall ((q$a@775@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@774@01 7)) q$a@775@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1464@57@1464@387|)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@774@01 3))
  (forall ((q$a@775@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@774@01 7)) q$a@775@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1464@57@1464@387|))))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 538 | $out_of_gas@707@01]
(assert $out_of_gas@707@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 530 | !(l$no_reentrant_call@704@01)]
(assert (not l$no_reentrant_call@704@01))
(pop) ; 4
; [eval] !l$no_reentrant_call
(push) ; 4
(set-option :timeout 10)
(assert (not l$no_reentrant_call@704@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@704@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 545 | !(l$no_reentrant_call@704@01) | live]
; [else-branch: 545 | l$no_reentrant_call@704@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 545 | !(l$no_reentrant_call@704@01)]
(assert (not l$no_reentrant_call@704@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 5
(set-option :timeout 10)
(assert (not (not $out_of_gas@707@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not $out_of_gas@707@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 546 | $out_of_gas@707@01 | live]
; [else-branch: 546 | !($out_of_gas@707@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 546 | $out_of_gas@707@01]
(assert $out_of_gas@707@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
; [exec]
; exhale ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] $struct_loc($pre_self, 2)
; [eval] !$succ
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 547 | True | live]
; [else-branch: 547 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 547 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@776@01 $Snap)
(assert (= $t@776@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@708@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@777@01 $Struct)
(assert (=
  self@777@01
  ($struct_set<$Struct> self@688@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@688@01 4))
    l$havoc$6@708@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@777@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@777@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@777@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@777@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 548 | $struct_get[Bool]($struct_loc[Int](self@688@01, 3)) | live]
; [else-branch: 548 | !($struct_get[Bool]($struct_loc[Int](self@688@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 548 | $struct_get[Bool]($struct_loc[Int](self@688@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@688@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(push) ; 8
; [else-branch: 548 | !($struct_get[Bool]($struct_loc[Int](self@688@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@777@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@688@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@777@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@777@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@777@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 549 | $struct_get[Bool]($struct_loc[Int](self@777@01, 3)) | live]
; [else-branch: 549 | !($struct_get[Bool]($struct_loc[Int](self@777@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 549 | $struct_get[Bool]($struct_loc[Int](self@777@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@777@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@778@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 550 | !(0 <= q$a@778@01) | live]
; [else-branch: 550 | 0 <= q$a@778@01 | live]
(push) ; 11
; [then-branch: 550 | !(0 <= q$a@778@01)]
(assert (not (<= 0 q$a@778@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 550 | 0 <= q$a@778@01]
(assert (<= 0 q$a@778@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@778@01) (not (<= 0 q$a@778@01))))
(push) ; 10
; [then-branch: 551 | 0 <= q$a@778@01 && q$a@778@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 551 | !(0 <= q$a@778@01 && q$a@778@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 551 | 0 <= q$a@778@01 && q$a@778@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@778@01)
  (<= q$a@778@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 11
(push) ; 11
; [else-branch: 551 | !(0 <= q$a@778@01 && q$a@778@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@778@01)
    (<= q$a@778@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@778@01)
      (<= q$a@778@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@778@01)
    (<= q$a@778@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@778@01 Int)) (!
  (and
    (or (<= 0 q$a@778@01) (not (<= 0 q$a@778@01)))
    (or
      (not
        (and
          (<= 0 q$a@778@01)
          (<= q$a@778@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@778@01)
        (<= q$a@778@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@777@01 7)) q$a@778@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1464@57@1464@387-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 549 | !($struct_get[Bool]($struct_loc[Int](self@777@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@777@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@777@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@777@01 3))
    (forall ((q$a@778@01 Int)) (!
      (and
        (or (<= 0 q$a@778@01) (not (<= 0 q$a@778@01)))
        (or
          (not
            (and
              (<= 0 q$a@778@01)
              (<= q$a@778@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@778@01)
            (<= q$a@778@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@777@01 7)) q$a@778@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1464@57@1464@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@777@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@777@01 3))))
(push) ; 7
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@777@01 3))
  (forall ((q$a@778@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@777@01 7)) q$a@778@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1464@57@1464@387|)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@777@01 3))
  (forall ((q$a@778@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@777@01 7)) q$a@778@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1464@57@1464@387|))))
(pop) ; 6
; [then-branch: 552 | False | dead]
; [else-branch: 552 | True | live]
(push) ; 6
; [else-branch: 552 | True]
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 546 | !($out_of_gas@707@01)]
(assert (not $out_of_gas@707@01))
(pop) ; 5
; [eval] !$out_of_gas
(push) ; 5
(set-option :timeout 10)
(assert (not $out_of_gas@707@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not $out_of_gas@707@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 553 | !($out_of_gas@707@01) | live]
; [else-branch: 553 | $out_of_gas@707@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 553 | !($out_of_gas@707@01)]
(assert (not $out_of_gas@707@01))
; [exec]
; label end
; [exec]
; exhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
; [exec]
; exhale ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] $struct_loc($pre_self, 2)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@702@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 2)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] $struct_loc($pre_self, 2)
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@702@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 2)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] $struct_loc($pre_self, 2)
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@702@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 2)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] $struct_loc($pre_self, 2)
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@702@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@688@01 2)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$send_call ----------
(declare-const $succ@779@01 Bool)
(declare-const $succ@780@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@781@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@782@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@783@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@784@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@785@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@786@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@787@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@788@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@789@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@790@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@791@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@792@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@793@01 Bool)
; [exec]
; var l$havoc: $Map[Int, $Struct]
(declare-const l$havoc@794@01 $Map<Int~_$Struct>)
; [exec]
; var l$send_fail: Bool
(declare-const l$send_fail@795@01 Bool)
; [exec]
; var i0$$pre_self: $Struct
(declare-const i0$$pre_self@796@01 $Struct)
; [exec]
; var i0$$pre_$contracts: $Map[Int, $Struct]
(declare-const i0$$pre_$contracts@797@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@798@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$2: $Struct
(declare-const l$havoc$2@799@01 $Struct)
; [exec]
; var l$havoc$3: $Map[Int, $Struct]
(declare-const l$havoc$3@800@01 $Map<Int~_$Struct>)
; [exec]
; var l$no_reentrant_call: Bool
(declare-const l$no_reentrant_call@801@01 Bool)
; [exec]
; var l$havoc$4: $Map[Int, $Struct]
(declare-const l$havoc$4@802@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$5: $Map[Int, $Struct]
(declare-const l$havoc$5@803@01 $Map<Int~_$Struct>)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@804@01 Bool)
; [exec]
; var l$havoc$6: Int
(declare-const l$havoc$6@805@01 Int)
; [exec]
; var l$havoc$7: $Map[Int, $Struct]
(declare-const l$havoc$7@806@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@807@01 $Snap)
(assert (= $t@807@01 ($Snap.combine ($Snap.first $t@807@01) ($Snap.second $t@807@01))))
(assert (= ($Snap.first $t@807@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@785@01 0))))
(assert (= ($Snap.second $t@807@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@785@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@808@01 $Snap)
(assert (= $t@808@01 ($Snap.combine ($Snap.first $t@808@01) ($Snap.second $t@808@01))))
(assert (= ($Snap.first $t@808@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@785@01 1))))
(assert (= ($Snap.second $t@808@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@785@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@809@01 $Snap)
(assert (= $t@809@01 ($Snap.combine ($Snap.first $t@809@01) ($Snap.second $t@809@01))))
(assert (= ($Snap.first $t@809@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@785@01 2))))
(assert (= ($Snap.second $t@809@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@785@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@810@01 $Snap)
(assert (= $t@810@01 ($Snap.combine ($Snap.first $t@810@01) ($Snap.second $t@810@01))))
(assert (= ($Snap.first $t@810@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@785@01 4))))
(assert (= ($Snap.second $t@810@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@785@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@811@01 $Snap)
(assert (= $t@811@01 ($Snap.combine ($Snap.first $t@811@01) ($Snap.second $t@811@01))))
(assert (= ($Snap.first $t@811@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@785@01 5))))
(assert (= ($Snap.second $t@811@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@785@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@812@01 $Snap)
(assert (= $t@812@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@813@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 554 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@785@01, 7)), $q0@813@01)) | live]
; [else-branch: 554 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@785@01, 7)), $q0@813@01) | live]
(push) ; 5
; [then-branch: 554 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@785@01, 7)), $q0@813@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) $q0@813@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 554 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@785@01, 7)), $q0@813@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) $q0@813@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) $q0@813@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) $q0@813@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@813@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) $q0@813@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) $q0@813@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) $q0@813@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1501@11@1501@345-aux|)))
(assert (forall (($q0@813@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) $q0@813@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) $q0@813@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) $q0@813@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1501@11@1501@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@814@01 $Snap)
(assert (= $t@814@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q0@815@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@815@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) $q0@815@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) $q0@815@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1502@11@1502@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@816@01 $Snap)
(assert (= $t@816@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@817@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 555 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@785@01, 8)), $q1@817@01)) | live]
; [else-branch: 555 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@785@01, 8)), $q1@817@01) | live]
(push) ; 5
; [then-branch: 555 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@785@01, 8)), $q1@817@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 8)) $q1@817@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 555 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@785@01, 8)), $q1@817@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 8)) $q1@817@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 8)) $q1@817@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 8)) $q1@817@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@817@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 8)) $q1@817@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 8)) $q1@817@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 8)) $q1@817@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1503@11@1503@345-aux|)))
(assert (forall (($q1@817@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 8)) $q1@817@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 8)) $q1@817@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 8)) $q1@817@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1503@11@1503@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@818@01 $Snap)
(assert (= $t@818@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q1@819@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@819@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 8)) $q1@819@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 8)) $q1@819@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1504@11@1504@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@820@01 $Snap)
(assert (= $t@820@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@785@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@821@01 $Snap)
(assert (= $t@821@01 ($Snap.combine ($Snap.first $t@821@01) ($Snap.second $t@821@01))))
(assert (= ($Snap.first $t@821@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@821@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@822@01 $Snap)
(assert (= $t@822@01 ($Snap.combine ($Snap.first $t@822@01) ($Snap.second $t@822@01))))
(assert (= ($Snap.first $t@822@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@782@01 0))))
(assert (= ($Snap.second $t@822@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@782@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@823@01 $Snap)
(assert (= $t@823@01 ($Snap.combine ($Snap.first $t@823@01) ($Snap.second $t@823@01))))
(assert (= ($Snap.first $t@823@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@782@01 1))))
(assert (= ($Snap.second $t@823@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@782@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@824@01 $Snap)
(assert (= $t@824@01 ($Snap.combine ($Snap.first $t@824@01) ($Snap.second $t@824@01))))
(assert (= ($Snap.first $t@824@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@782@01 2))))
(assert (= ($Snap.second $t@824@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@782@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@825@01 $Snap)
(assert (= $t@825@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@782@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@826@01 $Snap)
(assert (= $t@826@01 ($Snap.combine ($Snap.first $t@826@01) ($Snap.second $t@826@01))))
(assert (= ($Snap.first $t@826@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@782@01 4))))
(assert (= ($Snap.second $t@826@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@782@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@827@01 $Snap)
(assert (= $t@827@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@782@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@828@01 $Snap)
(assert (= $t@828@01 ($Snap.combine ($Snap.first $t@828@01) ($Snap.second $t@828@01))))
(assert (= ($Snap.first $t@828@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@781@01 0))))
(assert (= ($Snap.second $t@828@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@781@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@829@01 $Snap)
(assert (= $t@829@01 ($Snap.combine ($Snap.first $t@829@01) ($Snap.second $t@829@01))))
(assert (= ($Snap.first $t@829@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@781@01 1))))
(assert (= ($Snap.second $t@829@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@781@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@830@01 $Snap)
(assert (= $t@830@01 ($Snap.combine ($Snap.first $t@830@01) ($Snap.second $t@830@01))))
(assert (= ($Snap.first $t@830@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@781@01 2))))
(assert (= ($Snap.second $t@830@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@781@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@831@01 $Snap)
(assert (= $t@831@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@781@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@832@01 $Snap)
(assert (= $t@832@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@781@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@833@01 $Snap)
(assert (= $t@833@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@834@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc(self, 0)): Int)
(declare-const $t@835@01 $Snap)
(assert (= $t@835@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@836@01 $Snap)
(assert (= $t@836@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
(declare-const $t@837@01 $Snap)
(assert (= $t@837@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@785@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@785@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 556 | $struct_get[Bool]($struct_loc[Int](self@785@01, 3)) | live]
; [else-branch: 556 | !($struct_get[Bool]($struct_loc[Int](self@785@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 556 | $struct_get[Bool]($struct_loc[Int](self@785@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@785@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(push) ; 4
; [else-branch: 556 | !($struct_get[Bool]($struct_loc[Int](self@785@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@785@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@785@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@785@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@838@01 $Snap)
(assert (= $t@838@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@785@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@785@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 557 | $struct_get[Bool]($struct_loc[Int](self@785@01, 3)) | live]
; [else-branch: 557 | !($struct_get[Bool]($struct_loc[Int](self@785@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 557 | $struct_get[Bool]($struct_loc[Int](self@785@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@785@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@839@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 558 | !(0 <= q$a@839@01) | live]
; [else-branch: 558 | 0 <= q$a@839@01 | live]
(push) ; 7
; [then-branch: 558 | !(0 <= q$a@839@01)]
(assert (not (<= 0 q$a@839@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 558 | 0 <= q$a@839@01]
(assert (<= 0 q$a@839@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@839@01) (not (<= 0 q$a@839@01))))
(push) ; 6
; [then-branch: 559 | 0 <= q$a@839@01 && q$a@839@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 559 | !(0 <= q$a@839@01 && q$a@839@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 559 | 0 <= q$a@839@01 && q$a@839@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@839@01)
  (<= q$a@839@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 7
(push) ; 7
; [else-branch: 559 | !(0 <= q$a@839@01 && q$a@839@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@839@01)
    (<= q$a@839@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@839@01)
      (<= q$a@839@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@839@01)
    (<= q$a@839@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@839@01 Int)) (!
  (and
    (or (<= 0 q$a@839@01) (not (<= 0 q$a@839@01)))
    (or
      (not
        (and
          (<= 0 q$a@839@01)
          (<= q$a@839@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@839@01)
        (<= q$a@839@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) q$a@839@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1526@57@1526@377-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 557 | !($struct_get[Bool]($struct_loc[Int](self@785@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@785@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@785@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@785@01 3))
    (forall ((q$a@839@01 Int)) (!
      (and
        (or (<= 0 q$a@839@01) (not (<= 0 q$a@839@01)))
        (or
          (not
            (and
              (<= 0 q$a@839@01)
              (<= q$a@839@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@839@01)
            (<= q$a@839@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) q$a@839@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1526@57@1526@377-aux|)))))
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@785@01 3))
  (forall ((q$a@839@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) q$a@839@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1526@57@1526@377|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   ($struct_get($struct_loc(msg, 1)): Int)): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(declare-const self@840@01 $Struct)
(assert (=
  self@840@01
  ($struct_set<$Struct> self@785@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@785@01 4))
    ($struct_get<Int> ($struct_loc<Int> msg@781@01 1))))))
; [exec]
; self := ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self,
;   8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) +
;   ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(declare-const self@841@01 $Struct)
(assert (=
  self@841@01
  ($struct_set<$Struct> self@840@01 8 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@840@01 8)) ($struct_get<Int> ($struct_loc<Int> msg@781@01 0)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@840@01 8)) ($struct_get<Int> ($struct_loc<Int> msg@781@01 0)))
    ($struct_get<Int> ($struct_loc<Int> msg@781@01 1)))))))
; [eval] !!($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@841@01 3)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@841@01 3))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 560 | $struct_get[Bool]($struct_loc[Int](self@841@01, 3)) | live]
; [else-branch: 560 | !($struct_get[Bool]($struct_loc[Int](self@841@01, 3))) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 560 | $struct_get[Bool]($struct_loc[Int](self@841@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@841@01 3)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) >=
;   ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self,
;   0)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) >= ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
; [exec]
; exhale $succ ==>
;   ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) -
;   ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self,
;   0)): Int)): Int) >=
;   ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int) >= ($struct_get($struct_loc(msg, 1)): Int)
(push) ; 4
; [then-branch: 561 | False | dead]
; [else-branch: 561 | True | live]
(push) ; 5
; [else-branch: 561 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 562 | True | live]
; [else-branch: 562 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 562 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@842@01 $Snap)
(assert (= $t@842@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@805@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@843@01 $Struct)
(assert (=
  self@843@01
  ($struct_set<$Struct> self@785@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@785@01 4))
    l$havoc$6@805@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@843@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@785@01 0)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@843@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@785@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@843@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@785@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@843@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@785@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@785@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@785@01 3))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 563 | $struct_get[Bool]($struct_loc[Int](self@785@01, 3)) | live]
; [else-branch: 563 | !($struct_get[Bool]($struct_loc[Int](self@785@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 563 | $struct_get[Bool]($struct_loc[Int](self@785@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@785@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert ($struct_get<Bool> ($struct_loc<Int> self@785@01 3)))
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@785@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@843@01 3)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@785@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@843@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@843@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@843@01 3))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 564 | $struct_get[Bool]($struct_loc[Int](self@843@01, 3)) | live]
; [else-branch: 564 | !($struct_get[Bool]($struct_loc[Int](self@843@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 564 | $struct_get[Bool]($struct_loc[Int](self@843@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@843@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@844@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 565 | !(0 <= q$a@844@01) | live]
; [else-branch: 565 | 0 <= q$a@844@01 | live]
(push) ; 9
; [then-branch: 565 | !(0 <= q$a@844@01)]
(assert (not (<= 0 q$a@844@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 565 | 0 <= q$a@844@01]
(assert (<= 0 q$a@844@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@844@01) (not (<= 0 q$a@844@01))))
(push) ; 8
; [then-branch: 566 | 0 <= q$a@844@01 && q$a@844@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 566 | !(0 <= q$a@844@01 && q$a@844@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 566 | 0 <= q$a@844@01 && q$a@844@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@844@01)
  (<= q$a@844@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 9
(push) ; 9
; [else-branch: 566 | !(0 <= q$a@844@01 && q$a@844@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@844@01)
    (<= q$a@844@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@844@01)
      (<= q$a@844@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@844@01)
    (<= q$a@844@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@844@01 Int)) (!
  (and
    (or (<= 0 q$a@844@01) (not (<= 0 q$a@844@01)))
    (or
      (not
        (and
          (<= 0 q$a@844@01)
          (<= q$a@844@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@844@01)
        (<= q$a@844@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@843@01 7)) q$a@844@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1641@57@1641@387-aux|)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@843@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@843@01 3))
    (forall ((q$a@844@01 Int)) (!
      (and
        (or (<= 0 q$a@844@01) (not (<= 0 q$a@844@01)))
        (or
          (not
            (and
              (<= 0 q$a@844@01)
              (<= q$a@844@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@844@01)
            (<= q$a@844@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@843@01 7)) q$a@844@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1641@57@1641@387-aux|)))))
(assert ($struct_get<Bool> ($struct_loc<Int> self@843@01 3)))
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@843@01 3))
  (forall ((q$a@844@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@843@01 7)) q$a@844@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1641@57@1641@387|)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@843@01 3))
  (forall ((q$a@844@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@843@01 7)) q$a@844@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1641@57@1641@387|))))
(pop) ; 4
; [then-branch: 567 | False | dead]
; [else-branch: 567 | True | live]
(push) ; 4
; [else-branch: 567 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 560 | !($struct_get[Bool]($struct_loc[Int](self@841@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@841@01 3))))
(pop) ; 3
; [eval] !!!($struct_get($struct_loc(self, 3)): Bool)
; [eval] !!($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 3
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@841@01 3))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@841@01 3)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 568 | !($struct_get[Bool]($struct_loc[Int](self@841@01, 3))) | live]
; [else-branch: 568 | $struct_get[Bool]($struct_loc[Int](self@841@01, 3)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 568 | !($struct_get[Bool]($struct_loc[Int](self@841@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@841@01 3))))
; [eval] ($struct_get($struct_loc(self, 4)): Int) < ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@841@01 4))
    ($struct_get<Int> ($struct_loc<Int> msg@781@01 1))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 569 | $struct_get[Int]($struct_loc[Int](self@841@01, 4)) < $struct_get[Int]($struct_loc[Int](msg@781@01, 1)) | dead]
; [else-branch: 569 | !($struct_get[Int]($struct_loc[Int](self@841@01, 4)) < $struct_get[Int]($struct_loc[Int](msg@781@01, 1))) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 569 | !($struct_get[Int]($struct_loc[Int](self@841@01, 4)) < $struct_get[Int]($struct_loc[Int](msg@781@01, 1)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@841@01 4))
    ($struct_get<Int> ($struct_loc<Int> msg@781@01 1)))))
(pop) ; 4
; [eval] !(($struct_get($struct_loc(self, 4)): Int) < ($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 4)): Int) < ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(push) ; 4
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> self@841@01 4))
  ($struct_get<Int> ($struct_loc<Int> msg@781@01 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@841@01 4))
    ($struct_get<Int> ($struct_loc<Int> msg@781@01 1))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 570 | !($struct_get[Int]($struct_loc[Int](self@841@01, 4)) < $struct_get[Int]($struct_loc[Int](msg@781@01, 1))) | live]
; [else-branch: 570 | $struct_get[Int]($struct_loc[Int](self@841@01, 4)) < $struct_get[Int]($struct_loc[Int](msg@781@01, 1)) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 570 | !($struct_get[Int]($struct_loc[Int](self@841@01, 4)) < $struct_get[Int]($struct_loc[Int](msg@781@01, 1)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@841@01 4))
    ($struct_get<Int> ($struct_loc<Int> msg@781@01 1)))))
; [exec]
; self := ($struct_set(self, 7, ($map_set(($struct_get($struct_loc(self, 7)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self,
;   7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) +
;   ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 7, ($map_set(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(declare-const self@845@01 $Struct)
(assert (=
  self@845@01
  ($struct_set<$Struct> self@841@01 7 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@841@01 7)) ($struct_get<Int> ($struct_loc<Int> self@841@01 0)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@841@01 7)) ($struct_get<Int> ($struct_loc<Int> self@841@01 0)))
    ($struct_get<Int> ($struct_loc<Int> msg@781@01 1)))))))
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) -
;   ($struct_get($struct_loc(msg, 1)): Int)): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) - ($struct_get($struct_loc(msg, 1)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) - ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(declare-const self@846@01 $Struct)
(assert (=
  self@846@01
  ($struct_set<$Struct> self@845@01 4 (-
    ($struct_get<Int> ($struct_loc<Int> self@845@01 4))
    ($struct_get<Int> ($struct_loc<Int> msg@781@01 1))))))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@846@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@785@01 0)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@846@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@785@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@846@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@785@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@846@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@785@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@785@01 3)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 571 | $struct_get[Bool]($struct_loc[Int](self@785@01, 3)) | dead]
; [else-branch: 571 | !($struct_get[Bool]($struct_loc[Int](self@785@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 571 | !($struct_get[Bool]($struct_loc[Int](self@785@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@785@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@785@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@846@01 3)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 572 | $struct_get[Bool]($struct_loc[Int](self@846@01, 3)) | dead]
; [else-branch: 572 | !($struct_get[Bool]($struct_loc[Int](self@846@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 572 | !($struct_get[Bool]($struct_loc[Int](self@846@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@846@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@846@01 3))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not l$send_fail@795@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not l$send_fail@795@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 573 | l$send_fail@795@01 | live]
; [else-branch: 573 | !(l$send_fail@795@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 573 | l$send_fail@795@01]
(assert l$send_fail@795@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@847@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) >=
;   ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self,
;   0)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) >= ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
; [exec]
; exhale $succ ==>
;   ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) -
;   ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self,
;   0)): Int)): Int) >=
;   ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int) >= ($struct_get($struct_loc(msg, 1)): Int)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 574 | False | dead]
; [else-branch: 574 | True | live]
(push) ; 7
; [else-branch: 574 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] !$succ
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 575 | True | live]
; [else-branch: 575 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 575 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@848@01 $Snap)
(assert (= $t@848@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@805@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@849@01 $Struct)
(assert (=
  self@849@01
  ($struct_set<$Struct> self@785@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@785@01 4))
    l$havoc$6@805@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@849@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@785@01 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@849@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@785@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@849@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@785@01 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@849@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@785@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 7
; [then-branch: 576 | $struct_get[Bool]($struct_loc[Int](self@785@01, 3)) | dead]
; [else-branch: 576 | !($struct_get[Bool]($struct_loc[Int](self@785@01, 3))) | live]
(push) ; 8
; [else-branch: 576 | !($struct_get[Bool]($struct_loc[Int](self@785@01, 3)))]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@849@01 3)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 577 | $struct_get[Bool]($struct_loc[Int](self@849@01, 3)) | dead]
; [else-branch: 577 | !($struct_get[Bool]($struct_loc[Int](self@849@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 577 | !($struct_get[Bool]($struct_loc[Int](self@849@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@849@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@849@01 3))))
(pop) ; 6
; [then-branch: 578 | False | dead]
; [else-branch: 578 | True | live]
(push) ; 6
; [else-branch: 578 | True]
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 573 | !(l$send_fail@795@01)]
(assert (not l$send_fail@795@01))
(pop) ; 5
; [eval] !l$send_fail
(push) ; 5
(set-option :timeout 10)
(assert (not l$send_fail@795@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not l$send_fail@795@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 579 | !(l$send_fail@795@01) | live]
; [else-branch: 579 | l$send_fail@795@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 579 | !(l$send_fail@795@01)]
(assert (not l$send_fail@795@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i0$$pre_self := self
; [exec]
; i0$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$1
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$2
; [exec]
; $contracts := l$havoc$3
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@850@01 $Snap)
(assert (= $t@850@01 ($Snap.combine ($Snap.first $t@850@01) ($Snap.second $t@850@01))))
(assert (= ($Snap.first $t@850@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 0))))
(assert (= ($Snap.second $t@850@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@851@01 $Snap)
(assert (= $t@851@01 ($Snap.combine ($Snap.first $t@851@01) ($Snap.second $t@851@01))))
(assert (= ($Snap.first $t@851@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 1))))
(assert (= ($Snap.second $t@851@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@852@01 $Snap)
(assert (= $t@852@01 ($Snap.combine ($Snap.first $t@852@01) ($Snap.second $t@852@01))))
(assert (= ($Snap.first $t@852@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 2))))
(assert (= ($Snap.second $t@852@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@853@01 $Snap)
(assert (= $t@853@01 ($Snap.combine ($Snap.first $t@853@01) ($Snap.second $t@853@01))))
(assert (= ($Snap.first $t@853@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 4))))
(assert (= ($Snap.second $t@853@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@854@01 $Snap)
(assert (= $t@854@01 ($Snap.combine ($Snap.first $t@854@01) ($Snap.second $t@854@01))))
(assert (= ($Snap.first $t@854@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 5))))
(assert (= ($Snap.second $t@854@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@855@01 $Snap)
(assert (= $t@855@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@856@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 7
; [then-branch: 580 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@799@01, 7)), $q0@856@01)) | live]
; [else-branch: 580 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@799@01, 7)), $q0@856@01) | live]
(push) ; 8
; [then-branch: 580 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@799@01, 7)), $q0@856@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) $q0@856@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 580 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@799@01, 7)), $q0@856@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) $q0@856@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) $q0@856@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) $q0@856@01)))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@856@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) $q0@856@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) $q0@856@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) $q0@856@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1581@11@1581@345-aux|)))
(assert (forall (($q0@856@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) $q0@856@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) $q0@856@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) $q0@856@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1581@11@1581@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@857@01 $Snap)
(assert (= $t@857@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q0@858@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@858@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) $q0@858@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) $q0@858@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1582@11@1582@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@859@01 $Snap)
(assert (= $t@859@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@860@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 7
; [then-branch: 581 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@799@01, 8)), $q1@860@01)) | live]
; [else-branch: 581 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@799@01, 8)), $q1@860@01) | live]
(push) ; 8
; [then-branch: 581 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@799@01, 8)), $q1@860@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 8)) $q1@860@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 581 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@799@01, 8)), $q1@860@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 8)) $q1@860@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 8)) $q1@860@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 8)) $q1@860@01)))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@860@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 8)) $q1@860@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 8)) $q1@860@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 8)) $q1@860@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1583@11@1583@345-aux|)))
(assert (forall (($q1@860@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 8)) $q1@860@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 8)) $q1@860@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 8)) $q1@860@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1583@11@1583@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@861@01 $Snap)
(assert (= $t@861@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q1@862@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@862@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 8)) $q1@862@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 8)) $q1@862@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1584@11@1584@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@863@01 $Snap)
(assert (= $t@863@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@864@01 $Snap)
(assert (= $t@864@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@865@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@865@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) $a@865@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@846@01 7)) $a@865@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) $a@865@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1587@11@1587@259|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
(declare-const $t@866@01 $Snap)
(assert (= $t@866@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@846@01 0))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
(declare-const $t@867@01 $Snap)
(assert (= $t@867@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@846@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
(declare-const $t@868@01 $Snap)
(assert (= $t@868@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 582 | $struct_get[Bool]($struct_loc[Int](self@846@01, 3)) | dead]
; [else-branch: 582 | !($struct_get[Bool]($struct_loc[Int](self@846@01, 3))) | live]
(push) ; 7
; [else-branch: 582 | !($struct_get[Bool]($struct_loc[Int](self@846@01, 3)))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@869@01 $Snap)
(assert (= $t@869@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@799@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@799@01 3))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 583 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@799@01, 3)) | live]
; [else-branch: 583 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@799@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 583 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@799@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@799@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@870@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 584 | !(0 <= q$a@870@01) | live]
; [else-branch: 584 | 0 <= q$a@870@01 | live]
(push) ; 10
; [then-branch: 584 | !(0 <= q$a@870@01)]
(assert (not (<= 0 q$a@870@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 584 | 0 <= q$a@870@01]
(assert (<= 0 q$a@870@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@870@01) (not (<= 0 q$a@870@01))))
(push) ; 9
; [then-branch: 585 | 0 <= q$a@870@01 && q$a@870@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 585 | !(0 <= q$a@870@01 && q$a@870@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 585 | 0 <= q$a@870@01 && q$a@870@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@870@01)
  (<= q$a@870@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 10
(push) ; 10
; [else-branch: 585 | !(0 <= q$a@870@01 && q$a@870@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@870@01)
    (<= q$a@870@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@870@01)
      (<= q$a@870@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@870@01)
    (<= q$a@870@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@870@01 Int)) (!
  (and
    (or (<= 0 q$a@870@01) (not (<= 0 q$a@870@01)))
    (or
      (not
        (and
          (<= 0 q$a@870@01)
          (<= q$a@870@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@870@01)
        (<= q$a@870@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) q$a@870@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1591@57@1591@387-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 583 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@799@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@799@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@799@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@799@01 3))
    (forall ((q$a@870@01 Int)) (!
      (and
        (or (<= 0 q$a@870@01) (not (<= 0 q$a@870@01)))
        (or
          (not
            (and
              (<= 0 q$a@870@01)
              (<= q$a@870@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@870@01)
            (<= q$a@870@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) q$a@870@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1591@57@1591@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@799@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@799@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@799@01 3))
  (forall ((q$a@870@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) q$a@870@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1591@57@1591@387|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@801@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not l$no_reentrant_call@801@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 586 | l$no_reentrant_call@801@01 | live]
; [else-branch: 586 | !(l$no_reentrant_call@801@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 586 | l$no_reentrant_call@801@01]
(assert l$no_reentrant_call@801@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 7
(set-option :timeout 10)
(assert (not (not $out_of_gas@804@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not $out_of_gas@804@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 587 | $out_of_gas@804@01 | live]
; [else-branch: 587 | !($out_of_gas@804@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 587 | $out_of_gas@804@01]
(assert $out_of_gas@804@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) >=
;   ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self,
;   0)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) >= ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
; [exec]
; exhale $succ ==>
;   ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) -
;   ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self,
;   0)): Int)): Int) >=
;   ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int) >= ($struct_get($struct_loc(msg, 1)): Int)
(push) ; 8
; [then-branch: 588 | False | dead]
; [else-branch: 588 | True | live]
(push) ; 9
; [else-branch: 588 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] !$succ
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 589 | True | live]
; [else-branch: 589 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 589 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@871@01 $Snap)
(assert (= $t@871@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@805@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@872@01 $Struct)
(assert (=
  self@872@01
  ($struct_set<$Struct> self@785@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@785@01 4))
    l$havoc$6@805@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@872@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@785@01 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@872@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@785@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@872@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@785@01 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@872@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@785@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
; [then-branch: 590 | $struct_get[Bool]($struct_loc[Int](self@785@01, 3)) | dead]
; [else-branch: 590 | !($struct_get[Bool]($struct_loc[Int](self@785@01, 3))) | live]
(push) ; 10
; [else-branch: 590 | !($struct_get[Bool]($struct_loc[Int](self@785@01, 3)))]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@872@01 3)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 591 | $struct_get[Bool]($struct_loc[Int](self@872@01, 3)) | dead]
; [else-branch: 591 | !($struct_get[Bool]($struct_loc[Int](self@872@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 591 | !($struct_get[Bool]($struct_loc[Int](self@872@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@872@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@872@01 3))))
(pop) ; 8
; [then-branch: 592 | False | dead]
; [else-branch: 592 | True | live]
(push) ; 8
; [else-branch: 592 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 587 | !($out_of_gas@804@01)]
(assert (not $out_of_gas@804@01))
(pop) ; 7
; [eval] !$out_of_gas
(push) ; 7
(set-option :timeout 10)
(assert (not $out_of_gas@804@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not $out_of_gas@804@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 593 | !($out_of_gas@804@01) | live]
; [else-branch: 593 | $out_of_gas@804@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 593 | !($out_of_gas@804@01)]
(assert (not $out_of_gas@804@01))
; [exec]
; label end
; [exec]
; exhale ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) >=
;   ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self,
;   0)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) >= ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
(push) ; 8
(assert (not (>=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@846@01 7)) ($struct_get<Int> ($struct_loc<Int> self@846@01 0)))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) ($struct_get<Int> ($struct_loc<Int> self@785@01 0))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@846@01 7)) ($struct_get<Int> ($struct_loc<Int> self@846@01 0)))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) ($struct_get<Int> ($struct_loc<Int> self@785@01 0)))))
; [exec]
; exhale $succ ==>
;   ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) -
;   ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self,
;   0)): Int)): Int) >=
;   ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int) >= ($struct_get($struct_loc(msg, 1)): Int)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 594 | True | live]
; [else-branch: 594 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 594 | True]
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int) >= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (>=
  (-
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@846@01 7)) ($struct_get<Int> ($struct_loc<Int> self@846@01 0)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) ($struct_get<Int> ($struct_loc<Int> self@785@01 0))))
  ($struct_get<Int> ($struct_loc<Int> msg@781@01 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  (-
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@846@01 7)) ($struct_get<Int> ($struct_loc<Int> self@846@01 0)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) ($struct_get<Int> ($struct_loc<Int> self@785@01 0))))
  ($struct_get<Int> ($struct_loc<Int> msg@781@01 1))))
; [eval] !$succ
; [then-branch: 595 | False | dead]
; [else-branch: 595 | True | live]
(push) ; 8
; [else-branch: 595 | True]
(pop) ; 8
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 596 | True | live]
; [else-branch: 596 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 596 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@873@01 $Snap)
(assert (= $t@873@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@805@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@874@01 $Struct)
(assert (=
  self@874@01
  ($struct_set<$Struct> self@846@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@846@01 4))
    l$havoc$6@805@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@874@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@846@01 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@874@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@846@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@874@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@846@01 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@874@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@846@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
; [then-branch: 597 | $struct_get[Bool]($struct_loc[Int](self@846@01, 3)) | dead]
; [else-branch: 597 | !($struct_get[Bool]($struct_loc[Int](self@846@01, 3))) | live]
(push) ; 10
; [else-branch: 597 | !($struct_get[Bool]($struct_loc[Int](self@846@01, 3)))]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@874@01 3)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 598 | $struct_get[Bool]($struct_loc[Int](self@874@01, 3)) | dead]
; [else-branch: 598 | !($struct_get[Bool]($struct_loc[Int](self@874@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 598 | !($struct_get[Bool]($struct_loc[Int](self@874@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@874@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@874@01 3))))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 593 | $out_of_gas@804@01]
(assert $out_of_gas@804@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 586 | !(l$no_reentrant_call@801@01)]
(assert (not l$no_reentrant_call@801@01))
(pop) ; 6
; [eval] !l$no_reentrant_call
(push) ; 6
(set-option :timeout 10)
(assert (not l$no_reentrant_call@801@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@801@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 599 | !(l$no_reentrant_call@801@01) | live]
; [else-branch: 599 | l$no_reentrant_call@801@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 599 | !(l$no_reentrant_call@801@01)]
(assert (not l$no_reentrant_call@801@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 7
(set-option :timeout 10)
(assert (not (not $out_of_gas@804@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not $out_of_gas@804@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 600 | $out_of_gas@804@01 | live]
; [else-branch: 600 | !($out_of_gas@804@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 600 | $out_of_gas@804@01]
(assert $out_of_gas@804@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) >=
;   ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self,
;   0)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) >= ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
; [exec]
; exhale $succ ==>
;   ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) -
;   ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self,
;   0)): Int)): Int) >=
;   ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int) >= ($struct_get($struct_loc(msg, 1)): Int)
(push) ; 8
; [then-branch: 601 | False | dead]
; [else-branch: 601 | True | live]
(push) ; 9
; [else-branch: 601 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] !$succ
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 602 | True | live]
; [else-branch: 602 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 602 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@875@01 $Snap)
(assert (= $t@875@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@805@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@876@01 $Struct)
(assert (=
  self@876@01
  ($struct_set<$Struct> self@785@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@785@01 4))
    l$havoc$6@805@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@876@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@785@01 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@876@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@785@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@876@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@785@01 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@876@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@785@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
; [then-branch: 603 | $struct_get[Bool]($struct_loc[Int](self@785@01, 3)) | dead]
; [else-branch: 603 | !($struct_get[Bool]($struct_loc[Int](self@785@01, 3))) | live]
(push) ; 10
; [else-branch: 603 | !($struct_get[Bool]($struct_loc[Int](self@785@01, 3)))]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@876@01 3)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 604 | $struct_get[Bool]($struct_loc[Int](self@876@01, 3)) | dead]
; [else-branch: 604 | !($struct_get[Bool]($struct_loc[Int](self@876@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 604 | !($struct_get[Bool]($struct_loc[Int](self@876@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@876@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@876@01 3))))
(pop) ; 8
; [then-branch: 605 | False | dead]
; [else-branch: 605 | True | live]
(push) ; 8
; [else-branch: 605 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 600 | !($out_of_gas@804@01)]
(assert (not $out_of_gas@804@01))
(pop) ; 7
; [eval] !$out_of_gas
(push) ; 7
(set-option :timeout 10)
(assert (not $out_of_gas@804@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not $out_of_gas@804@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 606 | !($out_of_gas@804@01) | live]
; [else-branch: 606 | $out_of_gas@804@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 606 | !($out_of_gas@804@01)]
(assert (not $out_of_gas@804@01))
; [exec]
; label end
; [exec]
; exhale ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) >=
;   ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self,
;   0)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) >= ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
(push) ; 8
(assert (not (>=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 0)))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) ($struct_get<Int> ($struct_loc<Int> self@785@01 0))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 0)))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) ($struct_get<Int> ($struct_loc<Int> self@785@01 0)))))
; [exec]
; exhale $succ ==>
;   ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) -
;   ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self,
;   0)): Int)): Int) >=
;   ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int) >= ($struct_get($struct_loc(msg, 1)): Int)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 607 | True | live]
; [else-branch: 607 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 607 | True]
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int) >= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc($pre_self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (>=
  (-
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 0)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) ($struct_get<Int> ($struct_loc<Int> self@785@01 0))))
  ($struct_get<Int> ($struct_loc<Int> msg@781@01 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  (-
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@799@01 7)) ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 0)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@785@01 7)) ($struct_get<Int> ($struct_loc<Int> self@785@01 0))))
  ($struct_get<Int> ($struct_loc<Int> msg@781@01 1))))
; [eval] !$succ
; [then-branch: 608 | False | dead]
; [else-branch: 608 | True | live]
(push) ; 8
; [else-branch: 608 | True]
(pop) ; 8
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 609 | True | live]
; [else-branch: 609 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 609 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@877@01 $Snap)
(assert (= $t@877@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@805@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@878@01 $Struct)
(assert (=
  self@878@01
  ($struct_set<$Struct> l$havoc$2@799@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 4))
    l$havoc$6@805@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@878@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@878@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@878@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@878@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@799@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@799@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@799@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 610 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@799@01, 3)) | live]
; [else-branch: 610 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@799@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 610 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@799@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@799@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(push) ; 10
; [else-branch: 610 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@799@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@799@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@799@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@878@01 3)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@799@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@878@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@878@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@878@01 3))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 611 | $struct_get[Bool]($struct_loc[Int](self@878@01, 3)) | live]
; [else-branch: 611 | !($struct_get[Bool]($struct_loc[Int](self@878@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 611 | $struct_get[Bool]($struct_loc[Int](self@878@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@878@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@879@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 612 | !(0 <= q$a@879@01) | live]
; [else-branch: 612 | 0 <= q$a@879@01 | live]
(push) ; 13
; [then-branch: 612 | !(0 <= q$a@879@01)]
(assert (not (<= 0 q$a@879@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 612 | 0 <= q$a@879@01]
(assert (<= 0 q$a@879@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@879@01) (not (<= 0 q$a@879@01))))
(push) ; 12
; [then-branch: 613 | 0 <= q$a@879@01 && q$a@879@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 613 | !(0 <= q$a@879@01 && q$a@879@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 613 | 0 <= q$a@879@01 && q$a@879@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@879@01)
  (<= q$a@879@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 13
(push) ; 13
; [else-branch: 613 | !(0 <= q$a@879@01 && q$a@879@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@879@01)
    (<= q$a@879@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@879@01)
      (<= q$a@879@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@879@01)
    (<= q$a@879@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@879@01 Int)) (!
  (and
    (or (<= 0 q$a@879@01) (not (<= 0 q$a@879@01)))
    (or
      (not
        (and
          (<= 0 q$a@879@01)
          (<= q$a@879@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@879@01)
        (<= q$a@879@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@878@01 7)) q$a@879@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1641@57@1641@387-aux|)))
(pop) ; 10
(push) ; 10
; [else-branch: 611 | !($struct_get[Bool]($struct_loc[Int](self@878@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@878@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@878@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@878@01 3))
    (forall ((q$a@879@01 Int)) (!
      (and
        (or (<= 0 q$a@879@01) (not (<= 0 q$a@879@01)))
        (or
          (not
            (and
              (<= 0 q$a@879@01)
              (<= q$a@879@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@879@01)
            (<= q$a@879@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@878@01 7)) q$a@879@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1641@57@1641@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@878@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@878@01 3))))
(push) ; 9
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@878@01 3))
  (forall ((q$a@879@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@878@01 7)) q$a@879@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1641@57@1641@387|)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@878@01 3))
  (forall ((q$a@879@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@878@01 7)) q$a@879@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1641@57@1641@387|))))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 606 | $out_of_gas@804@01]
(assert $out_of_gas@804@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 599 | l$no_reentrant_call@801@01]
(assert l$no_reentrant_call@801@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 579 | l$send_fail@795@01]
(assert l$send_fail@795@01)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 568 | $struct_get[Bool]($struct_loc[Int](self@841@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@841@01 3)))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$update_list ----------
(declare-const l$i@880@01 $Int)
(declare-const l$v@881@01 $Int)
(declare-const $succ@882@01 Bool)
(declare-const l$i@883@01 $Int)
(declare-const l$v@884@01 $Int)
(declare-const $succ@885@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@886@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@887@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@888@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@889@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@890@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@891@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@892@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@893@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@894@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@895@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@896@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@897@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@898@01 Bool)
; [exec]
; var l$havoc: $Map[Int, $Struct]
(declare-const l$havoc@899@01 $Map<Int~_$Struct>)
; [exec]
; var l$send_fail: Bool
(declare-const l$send_fail@900@01 Bool)
; [exec]
; var i0$$pre_self: $Struct
(declare-const i0$$pre_self@901@01 $Struct)
; [exec]
; var i0$$pre_$contracts: $Map[Int, $Struct]
(declare-const i0$$pre_$contracts@902@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@903@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$2: $Struct
(declare-const l$havoc$2@904@01 $Struct)
; [exec]
; var l$havoc$3: $Map[Int, $Struct]
(declare-const l$havoc$3@905@01 $Map<Int~_$Struct>)
; [exec]
; var l$no_reentrant_call: Bool
(declare-const l$no_reentrant_call@906@01 Bool)
; [exec]
; var l$havoc$4: $Map[Int, $Struct]
(declare-const l$havoc$4@907@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$5: $Map[Int, $Struct]
(declare-const l$havoc$5@908@01 $Map<Int~_$Struct>)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@909@01 Bool)
; [exec]
; var l$havoc$6: Int
(declare-const l$havoc$6@910@01 Int)
; [exec]
; var l$havoc$7: $Map[Int, $Struct]
(declare-const l$havoc$7@911@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@912@01 $Snap)
(assert (= $t@912@01 ($Snap.combine ($Snap.first $t@912@01) ($Snap.second $t@912@01))))
(assert (= ($Snap.first $t@912@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@890@01 0))))
(assert (= ($Snap.second $t@912@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@890@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@913@01 $Snap)
(assert (= $t@913@01 ($Snap.combine ($Snap.first $t@913@01) ($Snap.second $t@913@01))))
(assert (= ($Snap.first $t@913@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@890@01 1))))
(assert (= ($Snap.second $t@913@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@890@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@914@01 $Snap)
(assert (= $t@914@01 ($Snap.combine ($Snap.first $t@914@01) ($Snap.second $t@914@01))))
(assert (= ($Snap.first $t@914@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@890@01 2))))
(assert (= ($Snap.second $t@914@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@890@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@915@01 $Snap)
(assert (= $t@915@01 ($Snap.combine ($Snap.first $t@915@01) ($Snap.second $t@915@01))))
(assert (= ($Snap.first $t@915@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@890@01 4))))
(assert (= ($Snap.second $t@915@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@890@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@916@01 $Snap)
(assert (= $t@916@01 ($Snap.combine ($Snap.first $t@916@01) ($Snap.second $t@916@01))))
(assert (= ($Snap.first $t@916@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@890@01 5))))
(assert (= ($Snap.second $t@916@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@890@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@917@01 $Snap)
(assert (= $t@917@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@918@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 614 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@890@01, 7)), $q0@918@01)) | live]
; [else-branch: 614 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@890@01, 7)), $q0@918@01) | live]
(push) ; 5
; [then-branch: 614 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@890@01, 7)), $q0@918@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 7)) $q0@918@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 614 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@890@01, 7)), $q0@918@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 7)) $q0@918@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 7)) $q0@918@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 7)) $q0@918@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@918@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 7)) $q0@918@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 7)) $q0@918@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 7)) $q0@918@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1678@11@1678@345-aux|)))
(assert (forall (($q0@918@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 7)) $q0@918@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 7)) $q0@918@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 7)) $q0@918@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1678@11@1678@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@919@01 $Snap)
(assert (= $t@919@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q0@920@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@920@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 7)) $q0@920@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 7)) $q0@920@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1679@11@1679@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@921@01 $Snap)
(assert (= $t@921@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@922@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 615 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@890@01, 8)), $q1@922@01)) | live]
; [else-branch: 615 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@890@01, 8)), $q1@922@01) | live]
(push) ; 5
; [then-branch: 615 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@890@01, 8)), $q1@922@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 8)) $q1@922@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 615 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@890@01, 8)), $q1@922@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 8)) $q1@922@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 8)) $q1@922@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 8)) $q1@922@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@922@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 8)) $q1@922@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 8)) $q1@922@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 8)) $q1@922@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1680@11@1680@345-aux|)))
(assert (forall (($q1@922@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 8)) $q1@922@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 8)) $q1@922@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 8)) $q1@922@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1680@11@1680@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@923@01 $Snap)
(assert (= $t@923@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q1@924@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@924@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 8)) $q1@924@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 8)) $q1@924@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1681@11@1681@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@925@01 $Snap)
(assert (= $t@925@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@890@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@926@01 $Snap)
(assert (= $t@926@01 ($Snap.combine ($Snap.first $t@926@01) ($Snap.second $t@926@01))))
(assert (= ($Snap.first $t@926@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@926@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $unwrap(l$i) &&
;   $unwrap(l$i) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@927@01 $Snap)
(assert (= $t@927@01 ($Snap.combine ($Snap.first $t@927@01) ($Snap.second $t@927@01))))
(assert (= ($Snap.first $t@927@01) $Snap.unit))
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(assert (<= 0 ($unwrap<Int> l$i@883@01)))
(assert (= ($Snap.second $t@927@01) $Snap.unit))
; [eval] $unwrap(l$i) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$i)
(assert (<=
  ($unwrap<Int> l$i@883@01)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <= $unwrap(l$v) &&
;   $unwrap(l$v) <= 170141183460469231731687303715884105727
(declare-const $t@928@01 $Snap)
(assert (= $t@928@01 ($Snap.combine ($Snap.first $t@928@01) ($Snap.second $t@928@01))))
(assert (= ($Snap.first $t@928@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= $unwrap(l$v)
; [eval] -170141183460469231731687303715884105728
; [eval] $unwrap(l$v)
(assert (<= (- 0 170141183460469231731687303715884105728) ($unwrap<Int> l$v@884@01)))
(assert (= ($Snap.second $t@928@01) $Snap.unit))
; [eval] $unwrap(l$v) <= 170141183460469231731687303715884105727
; [eval] $unwrap(l$v)
(assert (<= ($unwrap<Int> l$v@884@01) 170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@929@01 $Snap)
(assert (= $t@929@01 ($Snap.combine ($Snap.first $t@929@01) ($Snap.second $t@929@01))))
(assert (= ($Snap.first $t@929@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@887@01 0))))
(assert (= ($Snap.second $t@929@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@887@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@930@01 $Snap)
(assert (= $t@930@01 ($Snap.combine ($Snap.first $t@930@01) ($Snap.second $t@930@01))))
(assert (= ($Snap.first $t@930@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@887@01 1))))
(assert (= ($Snap.second $t@930@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@887@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@931@01 $Snap)
(assert (= $t@931@01 ($Snap.combine ($Snap.first $t@931@01) ($Snap.second $t@931@01))))
(assert (= ($Snap.first $t@931@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@887@01 2))))
(assert (= ($Snap.second $t@931@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@887@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@932@01 $Snap)
(assert (= $t@932@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@887@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@933@01 $Snap)
(assert (= $t@933@01 ($Snap.combine ($Snap.first $t@933@01) ($Snap.second $t@933@01))))
(assert (= ($Snap.first $t@933@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@887@01 4))))
(assert (= ($Snap.second $t@933@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@887@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@934@01 $Snap)
(assert (= $t@934@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@887@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@935@01 $Snap)
(assert (= $t@935@01 ($Snap.combine ($Snap.first $t@935@01) ($Snap.second $t@935@01))))
(assert (= ($Snap.first $t@935@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@886@01 0))))
(assert (= ($Snap.second $t@935@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@886@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@936@01 $Snap)
(assert (= $t@936@01 ($Snap.combine ($Snap.first $t@936@01) ($Snap.second $t@936@01))))
(assert (= ($Snap.first $t@936@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@886@01 1))))
(assert (= ($Snap.second $t@936@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@886@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@937@01 $Snap)
(assert (= $t@937@01 ($Snap.combine ($Snap.first $t@937@01) ($Snap.second $t@937@01))))
(assert (= ($Snap.first $t@937@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@886@01 2))))
(assert (= ($Snap.second $t@937@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@886@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@938@01 $Snap)
(assert (= $t@938@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@886@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@939@01 $Snap)
(assert (= $t@939@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@886@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@940@01 $Snap)
(assert (= $t@940@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@941@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc(self, 0)): Int)
(declare-const $t@942@01 $Snap)
(assert (= $t@942@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@943@01 $Snap)
(assert (= $t@943@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
(declare-const $t@944@01 $Snap)
(assert (= $t@944@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@890@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@890@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 616 | $struct_get[Bool]($struct_loc[Int](self@890@01, 3)) | live]
; [else-branch: 616 | !($struct_get[Bool]($struct_loc[Int](self@890@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 616 | $struct_get[Bool]($struct_loc[Int](self@890@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@890@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(push) ; 4
; [else-branch: 616 | !($struct_get[Bool]($struct_loc[Int](self@890@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@890@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@890@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@890@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@945@01 $Snap)
(assert (= $t@945@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@890@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@890@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 617 | $struct_get[Bool]($struct_loc[Int](self@890@01, 3)) | live]
; [else-branch: 617 | !($struct_get[Bool]($struct_loc[Int](self@890@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 617 | $struct_get[Bool]($struct_loc[Int](self@890@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@890@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@946@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 618 | !(0 <= q$a@946@01) | live]
; [else-branch: 618 | 0 <= q$a@946@01 | live]
(push) ; 7
; [then-branch: 618 | !(0 <= q$a@946@01)]
(assert (not (<= 0 q$a@946@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 618 | 0 <= q$a@946@01]
(assert (<= 0 q$a@946@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@946@01) (not (<= 0 q$a@946@01))))
(push) ; 6
; [then-branch: 619 | 0 <= q$a@946@01 && q$a@946@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 619 | !(0 <= q$a@946@01 && q$a@946@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 619 | 0 <= q$a@946@01 && q$a@946@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@946@01)
  (<= q$a@946@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 7
(push) ; 7
; [else-branch: 619 | !(0 <= q$a@946@01 && q$a@946@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@946@01)
    (<= q$a@946@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@946@01)
      (<= q$a@946@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@946@01)
    (<= q$a@946@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@946@01 Int)) (!
  (and
    (or (<= 0 q$a@946@01) (not (<= 0 q$a@946@01)))
    (or
      (not
        (and
          (<= 0 q$a@946@01)
          (<= q$a@946@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@946@01)
        (<= q$a@946@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 7)) q$a@946@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1706@57@1706@377-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 617 | !($struct_get[Bool]($struct_loc[Int](self@890@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@890@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@890@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@890@01 3))
    (forall ((q$a@946@01 Int)) (!
      (and
        (or (<= 0 q$a@946@01) (not (<= 0 q$a@946@01)))
        (or
          (not
            (and
              (<= 0 q$a@946@01)
              (<= q$a@946@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@946@01)
            (<= q$a@946@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 7)) q$a@946@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1706@57@1706@377-aux|)))))
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@890@01 3))
  (forall ((q$a@946@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 7)) q$a@946@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1706@57@1706@377|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@947@01 $Snap)
(assert (= $t@947@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@886@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] -1 > 170141183460469231731687303715884105727
; [eval] -1
; [then-branch: 620 | False | dead]
; [else-branch: 620 | True | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 620 | True]
(pop) ; 3
; [eval] !(-1 > 170141183460469231731687303715884105727)
; [eval] -1 > 170141183460469231731687303715884105727
; [eval] -1
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 621 | True | live]
; [else-branch: 621 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 621 | True]
; [exec]
; self := ($struct_set(self, 1, -1): $Struct)
; [eval] ($struct_set(self, 1, -1): $Struct)
; [eval] -1
(declare-const self@948@01 $Struct)
(assert (= self@948@01 ($struct_set<$Struct> self@890@01 1 (- 0 1))))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 4
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@948@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@890@01 0)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@948@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@890@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 4
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@948@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@890@01 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 4
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@948@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@890@01 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 4
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@948@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@890@01 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 4
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@948@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@890@01 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$use_ret ----------
(declare-const l$i@949@01 $Int)
(declare-const $succ@950@01 Bool)
(declare-const $res@951@01 Int)
(declare-const l$i@952@01 $Int)
(declare-const $succ@953@01 Bool)
(declare-const $res@954@01 Int)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@955@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@956@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@957@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@958@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@959@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@960@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@961@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@962@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@963@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@964@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@965@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@966@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@967@01 Bool)
; [exec]
; var l$havoc: $Map[Int, $Struct]
(declare-const l$havoc@968@01 $Map<Int~_$Struct>)
; [exec]
; var l$send_fail: Bool
(declare-const l$send_fail@969@01 Bool)
; [exec]
; var i0$$pre_self: $Struct
(declare-const i0$$pre_self@970@01 $Struct)
; [exec]
; var i0$$pre_$contracts: $Map[Int, $Struct]
(declare-const i0$$pre_$contracts@971@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@972@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$2: $Struct
(declare-const l$havoc$2@973@01 $Struct)
; [exec]
; var l$havoc$3: $Map[Int, $Struct]
(declare-const l$havoc$3@974@01 $Map<Int~_$Struct>)
; [exec]
; var l$no_reentrant_call: Bool
(declare-const l$no_reentrant_call@975@01 Bool)
; [exec]
; var l$havoc$4: $Map[Int, $Struct]
(declare-const l$havoc$4@976@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$5: $Map[Int, $Struct]
(declare-const l$havoc$5@977@01 $Map<Int~_$Struct>)
; [exec]
; var l$send_fail$1: Bool
(declare-const l$send_fail$1@978@01 Bool)
; [exec]
; var l$raw_ret: Int
(declare-const l$raw_ret@979@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@980@01 Bool)
; [exec]
; var l$havoc$6: Int
(declare-const l$havoc$6@981@01 Int)
; [exec]
; var l$havoc$7: Int
(declare-const l$havoc$7@982@01 Int)
; [exec]
; var l$havoc$8: $Map[Int, $Struct]
(declare-const l$havoc$8@983@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@984@01 $Snap)
(assert (= $t@984@01 ($Snap.combine ($Snap.first $t@984@01) ($Snap.second $t@984@01))))
(assert (= ($Snap.first $t@984@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
(assert (= ($Snap.second $t@984@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@959@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@985@01 $Snap)
(assert (= $t@985@01 ($Snap.combine ($Snap.first $t@985@01) ($Snap.second $t@985@01))))
(assert (= ($Snap.first $t@985@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@959@01 1))))
(assert (= ($Snap.second $t@985@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@959@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@986@01 $Snap)
(assert (= $t@986@01 ($Snap.combine ($Snap.first $t@986@01) ($Snap.second $t@986@01))))
(assert (= ($Snap.first $t@986@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@959@01 2))))
(assert (= ($Snap.second $t@986@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@959@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@987@01 $Snap)
(assert (= $t@987@01 ($Snap.combine ($Snap.first $t@987@01) ($Snap.second $t@987@01))))
(assert (= ($Snap.first $t@987@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@959@01 4))))
(assert (= ($Snap.second $t@987@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@959@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@988@01 $Snap)
(assert (= $t@988@01 ($Snap.combine ($Snap.first $t@988@01) ($Snap.second $t@988@01))))
(assert (= ($Snap.first $t@988@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@959@01 5))))
(assert (= ($Snap.second $t@988@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@959@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@989@01 $Snap)
(assert (= $t@989@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@990@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 622 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@959@01, 7)), $q0@990@01)) | live]
; [else-branch: 622 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@959@01, 7)), $q0@990@01) | live]
(push) ; 5
; [then-branch: 622 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@959@01, 7)), $q0@990@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) $q0@990@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 622 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@959@01, 7)), $q0@990@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) $q0@990@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) $q0@990@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) $q0@990@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@990@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) $q0@990@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) $q0@990@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) $q0@990@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1854@11@1854@345-aux|)))
(assert (forall (($q0@990@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) $q0@990@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) $q0@990@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) $q0@990@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1854@11@1854@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@991@01 $Snap)
(assert (= $t@991@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q0@992@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@992@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) $q0@992@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) $q0@992@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1855@11@1855@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@993@01 $Snap)
(assert (= $t@993@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@994@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 623 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@959@01, 8)), $q1@994@01)) | live]
; [else-branch: 623 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@959@01, 8)), $q1@994@01) | live]
(push) ; 5
; [then-branch: 623 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@959@01, 8)), $q1@994@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 8)) $q1@994@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 623 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@959@01, 8)), $q1@994@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 8)) $q1@994@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 8)) $q1@994@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 8)) $q1@994@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@994@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 8)) $q1@994@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 8)) $q1@994@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 8)) $q1@994@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1856@11@1856@345-aux|)))
(assert (forall (($q1@994@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 8)) $q1@994@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 8)) $q1@994@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 8)) $q1@994@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1856@11@1856@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@995@01 $Snap)
(assert (= $t@995@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q1@996@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@996@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 8)) $q1@996@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 8)) $q1@996@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1857@11@1857@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@997@01 $Snap)
(assert (= $t@997@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@959@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@998@01 $Snap)
(assert (= $t@998@01 ($Snap.combine ($Snap.first $t@998@01) ($Snap.second $t@998@01))))
(assert (= ($Snap.first $t@998@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@998@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $unwrap(l$i) &&
;   $unwrap(l$i) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@999@01 $Snap)
(assert (= $t@999@01 ($Snap.combine ($Snap.first $t@999@01) ($Snap.second $t@999@01))))
(assert (= ($Snap.first $t@999@01) $Snap.unit))
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(assert (<= 0 ($unwrap<Int> l$i@952@01)))
(assert (= ($Snap.second $t@999@01) $Snap.unit))
; [eval] $unwrap(l$i) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$i)
(assert (<=
  ($unwrap<Int> l$i@952@01)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1000@01 $Snap)
(assert (= $t@1000@01 ($Snap.combine ($Snap.first $t@1000@01) ($Snap.second $t@1000@01))))
(assert (= ($Snap.first $t@1000@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@956@01 0))))
(assert (= ($Snap.second $t@1000@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@956@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1001@01 $Snap)
(assert (= $t@1001@01 ($Snap.combine ($Snap.first $t@1001@01) ($Snap.second $t@1001@01))))
(assert (= ($Snap.first $t@1001@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@956@01 1))))
(assert (= ($Snap.second $t@1001@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@956@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1002@01 $Snap)
(assert (= $t@1002@01 ($Snap.combine ($Snap.first $t@1002@01) ($Snap.second $t@1002@01))))
(assert (= ($Snap.first $t@1002@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@956@01 2))))
(assert (= ($Snap.second $t@1002@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@956@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@1003@01 $Snap)
(assert (= $t@1003@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@956@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1004@01 $Snap)
(assert (= $t@1004@01 ($Snap.combine ($Snap.first $t@1004@01) ($Snap.second $t@1004@01))))
(assert (= ($Snap.first $t@1004@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@956@01 4))))
(assert (= ($Snap.second $t@1004@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@956@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@1005@01 $Snap)
(assert (= $t@1005@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@956@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1006@01 $Snap)
(assert (= $t@1006@01 ($Snap.combine ($Snap.first $t@1006@01) ($Snap.second $t@1006@01))))
(assert (= ($Snap.first $t@1006@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@955@01 0))))
(assert (= ($Snap.second $t@1006@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@955@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1007@01 $Snap)
(assert (= $t@1007@01 ($Snap.combine ($Snap.first $t@1007@01) ($Snap.second $t@1007@01))))
(assert (= ($Snap.first $t@1007@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@955@01 1))))
(assert (= ($Snap.second $t@1007@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@955@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1008@01 $Snap)
(assert (= $t@1008@01 ($Snap.combine ($Snap.first $t@1008@01) ($Snap.second $t@1008@01))))
(assert (= ($Snap.first $t@1008@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@955@01 2))))
(assert (= ($Snap.second $t@1008@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@955@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@1009@01 $Snap)
(assert (= $t@1009@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@955@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@1010@01 $Snap)
(assert (= $t@1010@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@955@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@1011@01 $Snap)
(assert (= $t@1011@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@1012@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc(self, 0)): Int)
(declare-const $t@1013@01 $Snap)
(assert (= $t@1013@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@1014@01 $Snap)
(assert (= $t@1014@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
(declare-const $t@1015@01 $Snap)
(assert (= $t@1015@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 624 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3)) | live]
; [else-branch: 624 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 624 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(push) ; 4
; [else-branch: 624 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@1016@01 $Snap)
(assert (= $t@1016@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 625 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3)) | live]
; [else-branch: 625 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 625 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@1017@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 626 | !(0 <= q$a@1017@01) | live]
; [else-branch: 626 | 0 <= q$a@1017@01 | live]
(push) ; 7
; [then-branch: 626 | !(0 <= q$a@1017@01)]
(assert (not (<= 0 q$a@1017@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 626 | 0 <= q$a@1017@01]
(assert (<= 0 q$a@1017@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1017@01) (not (<= 0 q$a@1017@01))))
(push) ; 6
; [then-branch: 627 | 0 <= q$a@1017@01 && q$a@1017@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 627 | !(0 <= q$a@1017@01 && q$a@1017@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 627 | 0 <= q$a@1017@01 && q$a@1017@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1017@01)
  (<= q$a@1017@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 7
(push) ; 7
; [else-branch: 627 | !(0 <= q$a@1017@01 && q$a@1017@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1017@01)
    (<= q$a@1017@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1017@01)
      (<= q$a@1017@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1017@01)
    (<= q$a@1017@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1017@01 Int)) (!
  (and
    (or (<= 0 q$a@1017@01) (not (<= 0 q$a@1017@01)))
    (or
      (not
        (and
          (<= 0 q$a@1017@01)
          (<= q$a@1017@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1017@01)
        (<= q$a@1017@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) q$a@1017@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1881@57@1881@377-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 625 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
    (forall ((q$a@1017@01 Int)) (!
      (and
        (or (<= 0 q$a@1017@01) (not (<= 0 q$a@1017@01)))
        (or
          (not
            (and
              (<= 0 q$a@1017@01)
              (<= q$a@1017@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@1017@01)
            (<= q$a@1017@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) q$a@1017@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1881@57@1881@377-aux|)))))
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  (forall ((q$a@1017@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) q$a@1017@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1881@57@1881@377|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@1018@01 $Snap)
(assert (= $t@1018@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@955@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 628 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3)) | live]
; [else-branch: 628 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 628 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(push) ; 4
; [else-branch: 628 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 629 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3)) | live]
; [else-branch: 629 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 629 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@1019@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 630 | !(0 <= q$a@1019@01) | live]
; [else-branch: 630 | 0 <= q$a@1019@01 | live]
(push) ; 7
; [then-branch: 630 | !(0 <= q$a@1019@01)]
(assert (not (<= 0 q$a@1019@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 630 | 0 <= q$a@1019@01]
(assert (<= 0 q$a@1019@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1019@01) (not (<= 0 q$a@1019@01))))
(push) ; 6
; [then-branch: 631 | 0 <= q$a@1019@01 && q$a@1019@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 631 | !(0 <= q$a@1019@01 && q$a@1019@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 631 | 0 <= q$a@1019@01 && q$a@1019@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1019@01)
  (<= q$a@1019@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 7
(push) ; 7
; [else-branch: 631 | !(0 <= q$a@1019@01 && q$a@1019@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1019@01)
    (<= q$a@1019@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1019@01)
      (<= q$a@1019@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1019@01)
    (<= q$a@1019@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1019@01 Int)) (!
  (and
    (or (<= 0 q$a@1019@01) (not (<= 0 q$a@1019@01)))
    (or
      (not
        (and
          (<= 0 q$a@1019@01)
          (<= q$a@1019@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1019@01)
        (<= q$a@1019@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) q$a@1019@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1901@57@1901@387-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 629 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
    (forall ((q$a@1019@01 Int)) (!
      (and
        (or (<= 0 q$a@1019@01) (not (<= 0 q$a@1019@01)))
        (or
          (not
            (and
              (<= 0 q$a@1019@01)
              (<= q$a@1019@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@1019@01)
            (<= q$a@1019@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) q$a@1019@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1901@57@1901@387-aux|)))))
; Joined path conditions
(push) ; 3
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  (forall ((q$a@1019@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) q$a@1019@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1901@57@1901@387|)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  (forall ((q$a@1019@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) q$a@1019@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1901@57@1901@387|))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not l$send_fail@969@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not l$send_fail@969@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 632 | l$send_fail@969@01 | live]
; [else-branch: 632 | !(l$send_fail@969@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 632 | l$send_fail@969@01]
(assert l$send_fail@969@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@1020@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc$6
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 633 | True | live]
; [else-branch: 633 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 633 | True]
; [exec]
; inhale l$havoc$7 >= 0
(declare-const $t@1021@01 $Snap)
(assert (= $t@1021@01 $Snap.unit))
; [eval] l$havoc$7 >= 0
(assert (>= l$havoc$7@982@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$7): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$7): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$7
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@1022@01 $Struct)
(assert (=
  self@1022@01
  ($struct_set<$Struct> self@959@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@959@01 4))
    l$havoc$7@982@01))))
; [exec]
; $contracts := l$havoc$8
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1022@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 0)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1022@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1022@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1022@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 634 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3)) | live]
; [else-branch: 634 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 634 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(push) ; 6
; [else-branch: 634 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@1022@01 3)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@1022@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@1022@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@1022@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 635 | $struct_get[Bool]($struct_loc[Int](self@1022@01, 3)) | live]
; [else-branch: 635 | !($struct_get[Bool]($struct_loc[Int](self@1022@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 635 | $struct_get[Bool]($struct_loc[Int](self@1022@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@1022@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@1023@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 636 | !(0 <= q$a@1023@01) | live]
; [else-branch: 636 | 0 <= q$a@1023@01 | live]
(push) ; 9
; [then-branch: 636 | !(0 <= q$a@1023@01)]
(assert (not (<= 0 q$a@1023@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 636 | 0 <= q$a@1023@01]
(assert (<= 0 q$a@1023@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1023@01) (not (<= 0 q$a@1023@01))))
(push) ; 8
; [then-branch: 637 | 0 <= q$a@1023@01 && q$a@1023@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 637 | !(0 <= q$a@1023@01 && q$a@1023@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 637 | 0 <= q$a@1023@01 && q$a@1023@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1023@01)
  (<= q$a@1023@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 9
(push) ; 9
; [else-branch: 637 | !(0 <= q$a@1023@01 && q$a@1023@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1023@01)
    (<= q$a@1023@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1023@01)
      (<= q$a@1023@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1023@01)
    (<= q$a@1023@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1023@01 Int)) (!
  (and
    (or (<= 0 q$a@1023@01) (not (<= 0 q$a@1023@01)))
    (or
      (not
        (and
          (<= 0 q$a@1023@01)
          (<= q$a@1023@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1023@01)
        (<= q$a@1023@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1022@01 7)) q$a@1023@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387-aux|)))
(pop) ; 6
(push) ; 6
; [else-branch: 635 | !($struct_get[Bool]($struct_loc[Int](self@1022@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@1022@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1022@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@1022@01 3))
    (forall ((q$a@1023@01 Int)) (!
      (and
        (or (<= 0 q$a@1023@01) (not (<= 0 q$a@1023@01)))
        (or
          (not
            (and
              (<= 0 q$a@1023@01)
              (<= q$a@1023@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@1023@01)
            (<= q$a@1023@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1022@01 7)) q$a@1023@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@1022@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@1022@01 3))))
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1022@01 3))
  (forall ((q$a@1023@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1022@01 7)) q$a@1023@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387|)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1022@01 3))
  (forall ((q$a@1023@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1022@01 7)) q$a@1023@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387|))))
(pop) ; 4
; [then-branch: 638 | False | dead]
; [else-branch: 638 | True | live]
(push) ; 4
; [else-branch: 638 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 632 | !(l$send_fail@969@01)]
(assert (not l$send_fail@969@01))
(pop) ; 3
; [eval] !l$send_fail
(push) ; 3
(set-option :timeout 10)
(assert (not l$send_fail@969@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not l$send_fail@969@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 639 | !(l$send_fail@969@01) | live]
; [else-branch: 639 | l$send_fail@969@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 639 | !(l$send_fail@969@01)]
(assert (not l$send_fail@969@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i0$$pre_self := self
; [exec]
; i0$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$1
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$2
; [exec]
; $contracts := l$havoc$3
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1024@01 $Snap)
(assert (= $t@1024@01 ($Snap.combine ($Snap.first $t@1024@01) ($Snap.second $t@1024@01))))
(assert (= ($Snap.first $t@1024@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@973@01 0))))
(assert (= ($Snap.second $t@1024@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@973@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1025@01 $Snap)
(assert (= $t@1025@01 ($Snap.combine ($Snap.first $t@1025@01) ($Snap.second $t@1025@01))))
(assert (= ($Snap.first $t@1025@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@973@01 1))))
(assert (= ($Snap.second $t@1025@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@973@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1026@01 $Snap)
(assert (= $t@1026@01 ($Snap.combine ($Snap.first $t@1026@01) ($Snap.second $t@1026@01))))
(assert (= ($Snap.first $t@1026@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@973@01 2))))
(assert (= ($Snap.second $t@1026@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@973@01 2))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1027@01 $Snap)
(assert (= $t@1027@01 ($Snap.combine ($Snap.first $t@1027@01) ($Snap.second $t@1027@01))))
(assert (= ($Snap.first $t@1027@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@973@01 4))))
(assert (= ($Snap.second $t@1027@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@973@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1028@01 $Snap)
(assert (= $t@1028@01 ($Snap.combine ($Snap.first $t@1028@01) ($Snap.second $t@1028@01))))
(assert (= ($Snap.first $t@1028@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@973@01 5))))
(assert (= ($Snap.second $t@1028@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@973@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1029@01 $Snap)
(assert (= $t@1029@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@1030@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 5
; [then-branch: 640 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@973@01, 7)), $q0@1030@01)) | live]
; [else-branch: 640 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@973@01, 7)), $q0@1030@01) | live]
(push) ; 6
; [then-branch: 640 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@973@01, 7)), $q0@1030@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) $q0@1030@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 640 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@973@01, 7)), $q0@1030@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) $q0@1030@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) $q0@1030@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) $q0@1030@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@1030@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) $q0@1030@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) $q0@1030@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) $q0@1030@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1927@11@1927@345-aux|)))
(assert (forall (($q0@1030@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) $q0@1030@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) $q0@1030@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) $q0@1030@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1927@11@1927@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@1031@01 $Snap)
(assert (= $t@1031@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q0@1032@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@1032@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) $q0@1032@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) $q0@1032@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1928@11@1928@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1033@01 $Snap)
(assert (= $t@1033@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@1034@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 5
; [then-branch: 641 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@973@01, 8)), $q1@1034@01)) | live]
; [else-branch: 641 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@973@01, 8)), $q1@1034@01) | live]
(push) ; 6
; [then-branch: 641 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@973@01, 8)), $q1@1034@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 8)) $q1@1034@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 641 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@973@01, 8)), $q1@1034@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 8)) $q1@1034@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 8)) $q1@1034@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 8)) $q1@1034@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1034@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 8)) $q1@1034@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 8)) $q1@1034@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 8)) $q1@1034@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1929@11@1929@345-aux|)))
(assert (forall (($q1@1034@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 8)) $q1@1034@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 8)) $q1@1034@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 8)) $q1@1034@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1929@11@1929@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@1035@01 $Snap)
(assert (= $t@1035@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q1@1036@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1036@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 8)) $q1@1036@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 8)) $q1@1036@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1930@11@1930@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@1037@01 $Snap)
(assert (= $t@1037@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@973@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@1038@01 $Snap)
(assert (= $t@1038@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@1039@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@1039@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) $a@1039@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) $a@1039@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) $a@1039@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1933@11@1933@259|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
(declare-const $t@1040@01 $Snap)
(assert (= $t@1040@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@973@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
(declare-const $t@1041@01 $Snap)
(assert (= $t@1041@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@973@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
(declare-const $t@1042@01 $Snap)
(assert (= $t@1042@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 642 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3)) | live]
; [else-branch: 642 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 642 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 5
(push) ; 5
; [else-branch: 642 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const $t@1043@01 $Snap)
(assert (= $t@1043@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 643 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@973@01, 3)) | live]
; [else-branch: 643 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@973@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 643 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@973@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@1044@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 644 | !(0 <= q$a@1044@01) | live]
; [else-branch: 644 | 0 <= q$a@1044@01 | live]
(push) ; 8
; [then-branch: 644 | !(0 <= q$a@1044@01)]
(assert (not (<= 0 q$a@1044@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 644 | 0 <= q$a@1044@01]
(assert (<= 0 q$a@1044@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1044@01) (not (<= 0 q$a@1044@01))))
(push) ; 7
; [then-branch: 645 | 0 <= q$a@1044@01 && q$a@1044@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 645 | !(0 <= q$a@1044@01 && q$a@1044@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 645 | 0 <= q$a@1044@01 && q$a@1044@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1044@01)
  (<= q$a@1044@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 8
(push) ; 8
; [else-branch: 645 | !(0 <= q$a@1044@01 && q$a@1044@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1044@01)
    (<= q$a@1044@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1044@01)
      (<= q$a@1044@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1044@01)
    (<= q$a@1044@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1044@01 Int)) (!
  (and
    (or (<= 0 q$a@1044@01) (not (<= 0 q$a@1044@01)))
    (or
      (not
        (and
          (<= 0 q$a@1044@01)
          (<= q$a@1044@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1044@01)
        (<= q$a@1044@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) q$a@1044@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1937@57@1937@387-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 643 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@973@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3))
    (forall ((q$a@1044@01 Int)) (!
      (and
        (or (<= 0 q$a@1044@01) (not (<= 0 q$a@1044@01)))
        (or
          (not
            (and
              (<= 0 q$a@1044@01)
              (<= q$a@1044@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@1044@01)
            (<= q$a@1044@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) q$a@1044@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1937@57@1937@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3))
  (forall ((q$a@1044@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) q$a@1044@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1937@57@1937@387|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@975@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not l$no_reentrant_call@975@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 646 | l$no_reentrant_call@975@01 | live]
; [else-branch: 646 | !(l$no_reentrant_call@975@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 646 | l$no_reentrant_call@975@01]
(assert l$no_reentrant_call@975@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 647 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3)) | live]
; [else-branch: 647 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 647 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(push) ; 6
; [else-branch: 647 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 648 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3)) | live]
; [else-branch: 648 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 648 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@1045@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 649 | !(0 <= q$a@1045@01) | live]
; [else-branch: 649 | 0 <= q$a@1045@01 | live]
(push) ; 9
; [then-branch: 649 | !(0 <= q$a@1045@01)]
(assert (not (<= 0 q$a@1045@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 649 | 0 <= q$a@1045@01]
(assert (<= 0 q$a@1045@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1045@01) (not (<= 0 q$a@1045@01))))
(push) ; 8
; [then-branch: 650 | 0 <= q$a@1045@01 && q$a@1045@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 650 | !(0 <= q$a@1045@01 && q$a@1045@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 650 | 0 <= q$a@1045@01 && q$a@1045@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1045@01)
  (<= q$a@1045@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 9
(push) ; 9
; [else-branch: 650 | !(0 <= q$a@1045@01 && q$a@1045@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1045@01)
    (<= q$a@1045@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1045@01)
      (<= q$a@1045@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1045@01)
    (<= q$a@1045@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1045@01 Int)) (!
  (and
    (or (<= 0 q$a@1045@01) (not (<= 0 q$a@1045@01)))
    (or
      (not
        (and
          (<= 0 q$a@1045@01)
          (<= q$a@1045@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1045@01)
        (<= q$a@1045@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) q$a@1045@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1962@57@1962@387-aux|)))
(pop) ; 6
(push) ; 6
; [else-branch: 648 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
    (forall ((q$a@1045@01 Int)) (!
      (and
        (or (<= 0 q$a@1045@01) (not (<= 0 q$a@1045@01)))
        (or
          (not
            (and
              (<= 0 q$a@1045@01)
              (<= q$a@1045@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@1045@01)
            (<= q$a@1045@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) q$a@1045@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1962@57@1962@387-aux|)))))
; Joined path conditions
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  (forall ((q$a@1045@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) q$a@1045@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1962@57@1962@387|)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  (forall ((q$a@1045@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 7)) q$a@1045@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1962@57@1962@387|))))
; [exec]
; inhale -170141183460469231731687303715884105728 <= l$raw_ret &&
;   l$raw_ret <= 170141183460469231731687303715884105727
(declare-const $t@1046@01 $Snap)
(assert (= $t@1046@01 ($Snap.combine ($Snap.first $t@1046@01) ($Snap.second $t@1046@01))))
(assert (= ($Snap.first $t@1046@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= l$raw_ret
; [eval] -170141183460469231731687303715884105728
(assert (<= (- 0 170141183460469231731687303715884105728) l$raw_ret@979@01))
(assert (= ($Snap.second $t@1046@01) $Snap.unit))
; [eval] l$raw_ret <= 170141183460469231731687303715884105727
(assert (<= l$raw_ret@979@01 170141183460469231731687303715884105727))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not l$send_fail$1@978@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not l$send_fail$1@978@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 651 | l$send_fail$1@978@01 | live]
; [else-branch: 651 | !(l$send_fail$1@978@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 651 | l$send_fail$1@978@01]
(assert l$send_fail$1@978@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@1047@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc$6
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 652 | True | live]
; [else-branch: 652 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 652 | True]
; [exec]
; inhale l$havoc$7 >= 0
(declare-const $t@1048@01 $Snap)
(assert (= $t@1048@01 $Snap.unit))
; [eval] l$havoc$7 >= 0
(assert (>= l$havoc$7@982@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$7): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$7): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$7
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@1049@01 $Struct)
(assert (=
  self@1049@01
  ($struct_set<$Struct> self@959@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@959@01 4))
    l$havoc$7@982@01))))
; [exec]
; $contracts := l$havoc$8
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1049@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1049@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1049@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1049@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 653 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3)) | live]
; [else-branch: 653 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 653 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(push) ; 8
; [else-branch: 653 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@1049@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@1049@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@1049@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@1049@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 654 | $struct_get[Bool]($struct_loc[Int](self@1049@01, 3)) | live]
; [else-branch: 654 | !($struct_get[Bool]($struct_loc[Int](self@1049@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 654 | $struct_get[Bool]($struct_loc[Int](self@1049@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@1049@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@1050@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 655 | !(0 <= q$a@1050@01) | live]
; [else-branch: 655 | 0 <= q$a@1050@01 | live]
(push) ; 11
; [then-branch: 655 | !(0 <= q$a@1050@01)]
(assert (not (<= 0 q$a@1050@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 655 | 0 <= q$a@1050@01]
(assert (<= 0 q$a@1050@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1050@01) (not (<= 0 q$a@1050@01))))
(push) ; 10
; [then-branch: 656 | 0 <= q$a@1050@01 && q$a@1050@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 656 | !(0 <= q$a@1050@01 && q$a@1050@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 656 | 0 <= q$a@1050@01 && q$a@1050@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1050@01)
  (<= q$a@1050@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 11
(push) ; 11
; [else-branch: 656 | !(0 <= q$a@1050@01 && q$a@1050@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1050@01)
    (<= q$a@1050@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1050@01)
      (<= q$a@1050@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1050@01)
    (<= q$a@1050@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1050@01 Int)) (!
  (and
    (or (<= 0 q$a@1050@01) (not (<= 0 q$a@1050@01)))
    (or
      (not
        (and
          (<= 0 q$a@1050@01)
          (<= q$a@1050@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1050@01)
        (<= q$a@1050@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1049@01 7)) q$a@1050@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 654 | !($struct_get[Bool]($struct_loc[Int](self@1049@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@1049@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1049@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@1049@01 3))
    (forall ((q$a@1050@01 Int)) (!
      (and
        (or (<= 0 q$a@1050@01) (not (<= 0 q$a@1050@01)))
        (or
          (not
            (and
              (<= 0 q$a@1050@01)
              (<= q$a@1050@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@1050@01)
            (<= q$a@1050@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1049@01 7)) q$a@1050@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@1049@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@1049@01 3))))
(push) ; 7
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1049@01 3))
  (forall ((q$a@1050@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1049@01 7)) q$a@1050@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387|)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1049@01 3))
  (forall ((q$a@1050@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1049@01 7)) q$a@1050@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387|))))
(pop) ; 6
; [then-branch: 657 | False | dead]
; [else-branch: 657 | True | live]
(push) ; 6
; [else-branch: 657 | True]
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 651 | !(l$send_fail$1@978@01)]
(assert (not l$send_fail$1@978@01))
(pop) ; 5
; [eval] !l$send_fail$1
(push) ; 5
(set-option :timeout 10)
(assert (not l$send_fail$1@978@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not l$send_fail$1@978@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 658 | !(l$send_fail$1@978@01) | live]
; [else-branch: 658 | l$send_fail$1@978@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 658 | !(l$send_fail$1@978@01)]
(assert (not l$send_fail$1@978@01))
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $res := $unwrap($wrap(l$raw_ret))
; [eval] $unwrap($wrap(l$raw_ret))
; [eval] $wrap(l$raw_ret)
(declare-const $res@1051@01 Int)
(assert (= $res@1051@01 ($unwrap<Int> ($wrap<$Int> l$raw_ret@979@01))))
; [exec]
; label return
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@980@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@980@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 659 | $out_of_gas@980@01 | live]
; [else-branch: 659 | !($out_of_gas@980@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 659 | $out_of_gas@980@01]
(assert $out_of_gas@980@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc$6
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 660 | True | live]
; [else-branch: 660 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 660 | True]
; [exec]
; inhale l$havoc$7 >= 0
(declare-const $t@1052@01 $Snap)
(assert (= $t@1052@01 $Snap.unit))
; [eval] l$havoc$7 >= 0
(assert (>= l$havoc$7@982@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$7): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$7): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$7
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@1053@01 $Struct)
(assert (=
  self@1053@01
  ($struct_set<$Struct> self@959@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@959@01 4))
    l$havoc$7@982@01))))
; [exec]
; $contracts := l$havoc$8
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1053@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1053@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1053@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1053@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 661 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3)) | live]
; [else-branch: 661 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 661 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(push) ; 9
; [else-branch: 661 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@1053@01 3)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@1053@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@1053@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@1053@01 3))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 662 | $struct_get[Bool]($struct_loc[Int](self@1053@01, 3)) | live]
; [else-branch: 662 | !($struct_get[Bool]($struct_loc[Int](self@1053@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 662 | $struct_get[Bool]($struct_loc[Int](self@1053@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@1053@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@1054@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 663 | !(0 <= q$a@1054@01) | live]
; [else-branch: 663 | 0 <= q$a@1054@01 | live]
(push) ; 12
; [then-branch: 663 | !(0 <= q$a@1054@01)]
(assert (not (<= 0 q$a@1054@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 663 | 0 <= q$a@1054@01]
(assert (<= 0 q$a@1054@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1054@01) (not (<= 0 q$a@1054@01))))
(push) ; 11
; [then-branch: 664 | 0 <= q$a@1054@01 && q$a@1054@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 664 | !(0 <= q$a@1054@01 && q$a@1054@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 664 | 0 <= q$a@1054@01 && q$a@1054@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1054@01)
  (<= q$a@1054@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 12
(push) ; 12
; [else-branch: 664 | !(0 <= q$a@1054@01 && q$a@1054@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1054@01)
    (<= q$a@1054@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1054@01)
      (<= q$a@1054@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1054@01)
    (<= q$a@1054@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1054@01 Int)) (!
  (and
    (or (<= 0 q$a@1054@01) (not (<= 0 q$a@1054@01)))
    (or
      (not
        (and
          (<= 0 q$a@1054@01)
          (<= q$a@1054@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1054@01)
        (<= q$a@1054@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1053@01 7)) q$a@1054@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387-aux|)))
(pop) ; 9
(push) ; 9
; [else-branch: 662 | !($struct_get[Bool]($struct_loc[Int](self@1053@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@1053@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1053@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@1053@01 3))
    (forall ((q$a@1054@01 Int)) (!
      (and
        (or (<= 0 q$a@1054@01) (not (<= 0 q$a@1054@01)))
        (or
          (not
            (and
              (<= 0 q$a@1054@01)
              (<= q$a@1054@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@1054@01)
            (<= q$a@1054@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1053@01 7)) q$a@1054@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@1053@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@1053@01 3))))
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1053@01 3))
  (forall ((q$a@1054@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1053@01 7)) q$a@1054@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387|)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1053@01 3))
  (forall ((q$a@1054@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1053@01 7)) q$a@1054@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387|))))
(pop) ; 7
; [then-branch: 665 | False | dead]
; [else-branch: 665 | True | live]
(push) ; 7
; [else-branch: 665 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 659 | !($out_of_gas@980@01)]
(assert (not $out_of_gas@980@01))
(pop) ; 6
; [eval] !$out_of_gas
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@980@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@980@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 666 | !($out_of_gas@980@01) | live]
; [else-branch: 666 | $out_of_gas@980@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 666 | !($out_of_gas@980@01)]
(assert (not $out_of_gas@980@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 667 | False | dead]
; [else-branch: 667 | True | live]
(push) ; 7
; [else-branch: 667 | True]
(pop) ; 7
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 668 | True | live]
; [else-branch: 668 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 668 | True]
; [exec]
; inhale l$havoc$7 >= 0
(declare-const $t@1055@01 $Snap)
(assert (= $t@1055@01 $Snap.unit))
; [eval] l$havoc$7 >= 0
(assert (>= l$havoc$7@982@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$7): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$7): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$7
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@1056@01 $Struct)
(assert (=
  self@1056@01
  ($struct_set<$Struct> self@959@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@959@01 4))
    l$havoc$7@982@01))))
; [exec]
; $contracts := l$havoc$8
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1056@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1056@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1056@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1056@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 669 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3)) | live]
; [else-branch: 669 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 669 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(push) ; 9
; [else-branch: 669 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@1056@01 3)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@1056@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@1056@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@1056@01 3))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 670 | $struct_get[Bool]($struct_loc[Int](self@1056@01, 3)) | live]
; [else-branch: 670 | !($struct_get[Bool]($struct_loc[Int](self@1056@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 670 | $struct_get[Bool]($struct_loc[Int](self@1056@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@1056@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@1057@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 671 | !(0 <= q$a@1057@01) | live]
; [else-branch: 671 | 0 <= q$a@1057@01 | live]
(push) ; 12
; [then-branch: 671 | !(0 <= q$a@1057@01)]
(assert (not (<= 0 q$a@1057@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 671 | 0 <= q$a@1057@01]
(assert (<= 0 q$a@1057@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1057@01) (not (<= 0 q$a@1057@01))))
(push) ; 11
; [then-branch: 672 | 0 <= q$a@1057@01 && q$a@1057@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 672 | !(0 <= q$a@1057@01 && q$a@1057@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 672 | 0 <= q$a@1057@01 && q$a@1057@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1057@01)
  (<= q$a@1057@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 12
(push) ; 12
; [else-branch: 672 | !(0 <= q$a@1057@01 && q$a@1057@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1057@01)
    (<= q$a@1057@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1057@01)
      (<= q$a@1057@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1057@01)
    (<= q$a@1057@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1057@01 Int)) (!
  (and
    (or (<= 0 q$a@1057@01) (not (<= 0 q$a@1057@01)))
    (or
      (not
        (and
          (<= 0 q$a@1057@01)
          (<= q$a@1057@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1057@01)
        (<= q$a@1057@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1056@01 7)) q$a@1057@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387-aux|)))
(pop) ; 9
(push) ; 9
; [else-branch: 670 | !($struct_get[Bool]($struct_loc[Int](self@1056@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@1056@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1056@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@1056@01 3))
    (forall ((q$a@1057@01 Int)) (!
      (and
        (or (<= 0 q$a@1057@01) (not (<= 0 q$a@1057@01)))
        (or
          (not
            (and
              (<= 0 q$a@1057@01)
              (<= q$a@1057@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@1057@01)
            (<= q$a@1057@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1056@01 7)) q$a@1057@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@1056@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@1056@01 3))))
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1056@01 3))
  (forall ((q$a@1057@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1056@01 7)) q$a@1057@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387|)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1056@01 3))
  (forall ((q$a@1057@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1056@01 7)) q$a@1057@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387|))))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 666 | $out_of_gas@980@01]
(assert $out_of_gas@980@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 658 | l$send_fail$1@978@01]
(assert l$send_fail$1@978@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 646 | !(l$no_reentrant_call@975@01)]
(assert (not l$no_reentrant_call@975@01))
(pop) ; 4
; [eval] !l$no_reentrant_call
(push) ; 4
(set-option :timeout 10)
(assert (not l$no_reentrant_call@975@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@975@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 673 | !(l$no_reentrant_call@975@01) | live]
; [else-branch: 673 | l$no_reentrant_call@975@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 673 | !(l$no_reentrant_call@975@01)]
(assert (not l$no_reentrant_call@975@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 674 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@973@01, 3)) | live]
; [else-branch: 674 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@973@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 674 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@973@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(push) ; 6
; [else-branch: 674 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@973@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 675 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@973@01, 3)) | live]
; [else-branch: 675 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@973@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 675 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@973@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@1058@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 676 | !(0 <= q$a@1058@01) | live]
; [else-branch: 676 | 0 <= q$a@1058@01 | live]
(push) ; 9
; [then-branch: 676 | !(0 <= q$a@1058@01)]
(assert (not (<= 0 q$a@1058@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 676 | 0 <= q$a@1058@01]
(assert (<= 0 q$a@1058@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1058@01) (not (<= 0 q$a@1058@01))))
(push) ; 8
; [then-branch: 677 | 0 <= q$a@1058@01 && q$a@1058@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 677 | !(0 <= q$a@1058@01 && q$a@1058@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 677 | 0 <= q$a@1058@01 && q$a@1058@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1058@01)
  (<= q$a@1058@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 9
(push) ; 9
; [else-branch: 677 | !(0 <= q$a@1058@01 && q$a@1058@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1058@01)
    (<= q$a@1058@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1058@01)
      (<= q$a@1058@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1058@01)
    (<= q$a@1058@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1058@01 Int)) (!
  (and
    (or (<= 0 q$a@1058@01) (not (<= 0 q$a@1058@01)))
    (or
      (not
        (and
          (<= 0 q$a@1058@01)
          (<= q$a@1058@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1058@01)
        (<= q$a@1058@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) q$a@1058@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1962@57@1962@387-aux|)))
(pop) ; 6
(push) ; 6
; [else-branch: 675 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@973@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3))
    (forall ((q$a@1058@01 Int)) (!
      (and
        (or (<= 0 q$a@1058@01) (not (<= 0 q$a@1058@01)))
        (or
          (not
            (and
              (<= 0 q$a@1058@01)
              (<= q$a@1058@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@1058@01)
            (<= q$a@1058@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) q$a@1058@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1962@57@1962@387-aux|)))))
; Joined path conditions
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3))
  (forall ((q$a@1058@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) q$a@1058@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1962@57@1962@387|)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3))
  (forall ((q$a@1058@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@973@01 7)) q$a@1058@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@1962@57@1962@387|))))
; [exec]
; inhale -170141183460469231731687303715884105728 <= l$raw_ret &&
;   l$raw_ret <= 170141183460469231731687303715884105727
(declare-const $t@1059@01 $Snap)
(assert (= $t@1059@01 ($Snap.combine ($Snap.first $t@1059@01) ($Snap.second $t@1059@01))))
(assert (= ($Snap.first $t@1059@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= l$raw_ret
; [eval] -170141183460469231731687303715884105728
(assert (<= (- 0 170141183460469231731687303715884105728) l$raw_ret@979@01))
(assert (= ($Snap.second $t@1059@01) $Snap.unit))
; [eval] l$raw_ret <= 170141183460469231731687303715884105727
(assert (<= l$raw_ret@979@01 170141183460469231731687303715884105727))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not l$send_fail$1@978@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not l$send_fail$1@978@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 678 | l$send_fail$1@978@01 | live]
; [else-branch: 678 | !(l$send_fail$1@978@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 678 | l$send_fail$1@978@01]
(assert l$send_fail$1@978@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@1060@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc$6
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 679 | True | live]
; [else-branch: 679 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 679 | True]
; [exec]
; inhale l$havoc$7 >= 0
(declare-const $t@1061@01 $Snap)
(assert (= $t@1061@01 $Snap.unit))
; [eval] l$havoc$7 >= 0
(assert (>= l$havoc$7@982@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$7): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$7): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$7
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@1062@01 $Struct)
(assert (=
  self@1062@01
  ($struct_set<$Struct> self@959@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@959@01 4))
    l$havoc$7@982@01))))
; [exec]
; $contracts := l$havoc$8
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1062@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1062@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1062@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1062@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 680 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3)) | live]
; [else-branch: 680 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 680 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(push) ; 8
; [else-branch: 680 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@1062@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@1062@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@1062@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@1062@01 3))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 681 | $struct_get[Bool]($struct_loc[Int](self@1062@01, 3)) | live]
; [else-branch: 681 | !($struct_get[Bool]($struct_loc[Int](self@1062@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 681 | $struct_get[Bool]($struct_loc[Int](self@1062@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@1062@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@1063@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 682 | !(0 <= q$a@1063@01) | live]
; [else-branch: 682 | 0 <= q$a@1063@01 | live]
(push) ; 11
; [then-branch: 682 | !(0 <= q$a@1063@01)]
(assert (not (<= 0 q$a@1063@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 682 | 0 <= q$a@1063@01]
(assert (<= 0 q$a@1063@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1063@01) (not (<= 0 q$a@1063@01))))
(push) ; 10
; [then-branch: 683 | 0 <= q$a@1063@01 && q$a@1063@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 683 | !(0 <= q$a@1063@01 && q$a@1063@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 683 | 0 <= q$a@1063@01 && q$a@1063@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1063@01)
  (<= q$a@1063@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 11
(push) ; 11
; [else-branch: 683 | !(0 <= q$a@1063@01 && q$a@1063@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1063@01)
    (<= q$a@1063@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1063@01)
      (<= q$a@1063@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1063@01)
    (<= q$a@1063@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1063@01 Int)) (!
  (and
    (or (<= 0 q$a@1063@01) (not (<= 0 q$a@1063@01)))
    (or
      (not
        (and
          (<= 0 q$a@1063@01)
          (<= q$a@1063@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1063@01)
        (<= q$a@1063@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1062@01 7)) q$a@1063@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 681 | !($struct_get[Bool]($struct_loc[Int](self@1062@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@1062@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1062@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@1062@01 3))
    (forall ((q$a@1063@01 Int)) (!
      (and
        (or (<= 0 q$a@1063@01) (not (<= 0 q$a@1063@01)))
        (or
          (not
            (and
              (<= 0 q$a@1063@01)
              (<= q$a@1063@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@1063@01)
            (<= q$a@1063@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1062@01 7)) q$a@1063@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@1062@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@1062@01 3))))
(push) ; 7
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1062@01 3))
  (forall ((q$a@1063@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1062@01 7)) q$a@1063@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387|)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1062@01 3))
  (forall ((q$a@1063@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1062@01 7)) q$a@1063@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387|))))
(pop) ; 6
; [then-branch: 684 | False | dead]
; [else-branch: 684 | True | live]
(push) ; 6
; [else-branch: 684 | True]
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 678 | !(l$send_fail$1@978@01)]
(assert (not l$send_fail$1@978@01))
(pop) ; 5
; [eval] !l$send_fail$1
(push) ; 5
(set-option :timeout 10)
(assert (not l$send_fail$1@978@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not l$send_fail$1@978@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 685 | !(l$send_fail$1@978@01) | live]
; [else-branch: 685 | l$send_fail$1@978@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 685 | !(l$send_fail$1@978@01)]
(assert (not l$send_fail$1@978@01))
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $res := $unwrap($wrap(l$raw_ret))
; [eval] $unwrap($wrap(l$raw_ret))
; [eval] $wrap(l$raw_ret)
(declare-const $res@1064@01 Int)
(assert (= $res@1064@01 ($unwrap<Int> ($wrap<$Int> l$raw_ret@979@01))))
; [exec]
; label return
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@980@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@980@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 686 | $out_of_gas@980@01 | live]
; [else-branch: 686 | !($out_of_gas@980@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 686 | $out_of_gas@980@01]
(assert $out_of_gas@980@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc$6
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 687 | True | live]
; [else-branch: 687 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 687 | True]
; [exec]
; inhale l$havoc$7 >= 0
(declare-const $t@1065@01 $Snap)
(assert (= $t@1065@01 $Snap.unit))
; [eval] l$havoc$7 >= 0
(assert (>= l$havoc$7@982@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$7): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$7): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$7
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@1066@01 $Struct)
(assert (=
  self@1066@01
  ($struct_set<$Struct> self@959@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@959@01 4))
    l$havoc$7@982@01))))
; [exec]
; $contracts := l$havoc$8
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1066@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1066@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1066@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1066@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@959@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 688 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3)) | live]
; [else-branch: 688 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 688 | $struct_get[Bool]($struct_loc[Int](self@959@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@959@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(push) ; 9
; [else-branch: 688 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@1066@01 3)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@959@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@1066@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@1066@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@1066@01 3))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 689 | $struct_get[Bool]($struct_loc[Int](self@1066@01, 3)) | live]
; [else-branch: 689 | !($struct_get[Bool]($struct_loc[Int](self@1066@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 689 | $struct_get[Bool]($struct_loc[Int](self@1066@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@1066@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@1067@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 690 | !(0 <= q$a@1067@01) | live]
; [else-branch: 690 | 0 <= q$a@1067@01 | live]
(push) ; 12
; [then-branch: 690 | !(0 <= q$a@1067@01)]
(assert (not (<= 0 q$a@1067@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 690 | 0 <= q$a@1067@01]
(assert (<= 0 q$a@1067@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1067@01) (not (<= 0 q$a@1067@01))))
(push) ; 11
; [then-branch: 691 | 0 <= q$a@1067@01 && q$a@1067@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 691 | !(0 <= q$a@1067@01 && q$a@1067@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 691 | 0 <= q$a@1067@01 && q$a@1067@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1067@01)
  (<= q$a@1067@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 12
(push) ; 12
; [else-branch: 691 | !(0 <= q$a@1067@01 && q$a@1067@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1067@01)
    (<= q$a@1067@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1067@01)
      (<= q$a@1067@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1067@01)
    (<= q$a@1067@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1067@01 Int)) (!
  (and
    (or (<= 0 q$a@1067@01) (not (<= 0 q$a@1067@01)))
    (or
      (not
        (and
          (<= 0 q$a@1067@01)
          (<= q$a@1067@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1067@01)
        (<= q$a@1067@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1066@01 7)) q$a@1067@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387-aux|)))
(pop) ; 9
(push) ; 9
; [else-branch: 689 | !($struct_get[Bool]($struct_loc[Int](self@1066@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@1066@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1066@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@1066@01 3))
    (forall ((q$a@1067@01 Int)) (!
      (and
        (or (<= 0 q$a@1067@01) (not (<= 0 q$a@1067@01)))
        (or
          (not
            (and
              (<= 0 q$a@1067@01)
              (<= q$a@1067@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@1067@01)
            (<= q$a@1067@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1066@01 7)) q$a@1067@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@1066@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@1066@01 3))))
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1066@01 3))
  (forall ((q$a@1067@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1066@01 7)) q$a@1067@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387|)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1066@01 3))
  (forall ((q$a@1067@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1066@01 7)) q$a@1067@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387|))))
(pop) ; 7
; [then-branch: 692 | False | dead]
; [else-branch: 692 | True | live]
(push) ; 7
; [else-branch: 692 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 686 | !($out_of_gas@980@01)]
(assert (not $out_of_gas@980@01))
(pop) ; 6
; [eval] !$out_of_gas
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@980@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@980@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 693 | !($out_of_gas@980@01) | live]
; [else-branch: 693 | $out_of_gas@980@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 693 | !($out_of_gas@980@01)]
(assert (not $out_of_gas@980@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 694 | False | dead]
; [else-branch: 694 | True | live]
(push) ; 7
; [else-branch: 694 | True]
(pop) ; 7
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 695 | True | live]
; [else-branch: 695 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 695 | True]
; [exec]
; inhale l$havoc$7 >= 0
(declare-const $t@1068@01 $Snap)
(assert (= $t@1068@01 $Snap.unit))
; [eval] l$havoc$7 >= 0
(assert (>= l$havoc$7@982@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$7): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$7): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$7
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@1069@01 $Struct)
(assert (=
  self@1069@01
  ($struct_set<$Struct> l$havoc$2@973@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@973@01 4))
    l$havoc$7@982@01))))
; [exec]
; $contracts := l$havoc$8
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(set-option :timeout 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1069@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@973@01 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1069@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@973@01 0))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1069@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@973@01 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1069@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@973@01 1))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool) ==> ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): Bool)
; [eval] $struct_loc($old_self, 3)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 696 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@973@01, 3)) | live]
; [else-branch: 696 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@973@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 696 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@973@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(push) ; 9
; [else-branch: 696 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@973@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@1069@01 3)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@973@01 3))
  ($struct_get<Bool> ($struct_loc<Int> self@1069@01 3))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@1069@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@1069@01 3))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 697 | $struct_get[Bool]($struct_loc[Int](self@1069@01, 3)) | live]
; [else-branch: 697 | !($struct_get[Bool]($struct_loc[Int](self@1069@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 697 | $struct_get[Bool]($struct_loc[Int](self@1069@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@1069@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@1070@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 698 | !(0 <= q$a@1070@01) | live]
; [else-branch: 698 | 0 <= q$a@1070@01 | live]
(push) ; 12
; [then-branch: 698 | !(0 <= q$a@1070@01)]
(assert (not (<= 0 q$a@1070@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 698 | 0 <= q$a@1070@01]
(assert (<= 0 q$a@1070@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1070@01) (not (<= 0 q$a@1070@01))))
(push) ; 11
; [then-branch: 699 | 0 <= q$a@1070@01 && q$a@1070@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 699 | !(0 <= q$a@1070@01 && q$a@1070@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 699 | 0 <= q$a@1070@01 && q$a@1070@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1070@01)
  (<= q$a@1070@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 12
(push) ; 12
; [else-branch: 699 | !(0 <= q$a@1070@01 && q$a@1070@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1070@01)
    (<= q$a@1070@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1070@01)
      (<= q$a@1070@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1070@01)
    (<= q$a@1070@01 1461501637330902918203684832716283019655932542975))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1070@01 Int)) (!
  (and
    (or (<= 0 q$a@1070@01) (not (<= 0 q$a@1070@01)))
    (or
      (not
        (and
          (<= 0 q$a@1070@01)
          (<= q$a@1070@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1070@01)
        (<= q$a@1070@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1069@01 7)) q$a@1070@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387-aux|)))
(pop) ; 9
(push) ; 9
; [else-branch: 697 | !($struct_get[Bool]($struct_loc[Int](self@1069@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@1069@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1069@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@1069@01 3))
    (forall ((q$a@1070@01 Int)) (!
      (and
        (or (<= 0 q$a@1070@01) (not (<= 0 q$a@1070@01)))
        (or
          (not
            (and
              (<= 0 q$a@1070@01)
              (<= q$a@1070@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@1070@01)
            (<= q$a@1070@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1069@01 7)) q$a@1070@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@1069@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@1069@01 3))))
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1069@01 3))
  (forall ((q$a@1070@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1069@01 7)) q$a@1070@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387|)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@1069@01 3))
  (forall ((q$a@1070@01 Int)) (!
    true
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1069@01 7)) q$a@1070@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagecontract.vy.vpr@2003@57@2003@387|))))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 693 | $out_of_gas@980@01]
(assert $out_of_gas@980@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 685 | l$send_fail$1@978@01]
(assert l$send_fail$1@978@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 673 | l$no_reentrant_call@975@01]
(assert l$no_reentrant_call@975@01)
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 639 | l$send_fail@969@01]
(assert l$send_fail@969@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
