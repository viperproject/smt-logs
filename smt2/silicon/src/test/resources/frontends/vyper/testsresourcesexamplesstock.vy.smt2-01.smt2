(get-info :version)
; (:version "4.12.1")
; Started: 2024-12-27 09:56:58
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<$Snap> 0)
(declare-sort s$struct$self 0)
(declare-sort $Struct 0)
(declare-sort s$resource$$creator 0)
(declare-sort $Contract 0)
(declare-sort $Blockchain 0)
(declare-sort $Convert 0)
(declare-sort $StructOps<$Struct> 0)
(declare-sort $StructOps<Seq<Int>> 0)
(declare-sort $Range 0)
(declare-sort $Int 0)
(declare-sort $StructOps<$Map<Int~_Int>> 0)
(declare-sort $Math 0)
(declare-sort $StructOps<Int> 0)
(declare-sort $Map<Int~_$Struct> 0)
(declare-sort $StructOps<Bool> 0)
(declare-sort $MapInt<Int> 0)
(declare-sort $Map<Int~_Int> 0)
(declare-sort $PSF<e$Transfer> 0)
(declare-sort $PSF<e$Buy> 0)
(declare-sort $PSF<e$Sell> 0)
(declare-sort $PSF<e$Pay> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.s$struct$selfTo$Snap (s$struct$self) $Snap)
(declare-fun $SortWrappers.$SnapTos$struct$self ($Snap) s$struct$self)
(assert (forall ((x s$struct$self)) (!
    (= x ($SortWrappers.$SnapTos$struct$self($SortWrappers.s$struct$selfTo$Snap x)))
    :pattern (($SortWrappers.s$struct$selfTo$Snap x))
    :qid |$Snap.$SnapTos$struct$selfTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$struct$selfTo$Snap($SortWrappers.$SnapTos$struct$self x)))
    :pattern (($SortWrappers.$SnapTos$struct$self x))
    :qid |$Snap.s$struct$selfTo$SnapTos$struct$self|
    )))
(declare-fun $SortWrappers.$StructTo$Snap ($Struct) $Snap)
(declare-fun $SortWrappers.$SnapTo$Struct ($Snap) $Struct)
(assert (forall ((x $Struct)) (!
    (= x ($SortWrappers.$SnapTo$Struct($SortWrappers.$StructTo$Snap x)))
    :pattern (($SortWrappers.$StructTo$Snap x))
    :qid |$Snap.$SnapTo$StructTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructTo$Snap($SortWrappers.$SnapTo$Struct x)))
    :pattern (($SortWrappers.$SnapTo$Struct x))
    :qid |$Snap.$StructTo$SnapTo$Struct|
    )))
(declare-fun $SortWrappers.s$resource$$creatorTo$Snap (s$resource$$creator) $Snap)
(declare-fun $SortWrappers.$SnapTos$resource$$creator ($Snap) s$resource$$creator)
(assert (forall ((x s$resource$$creator)) (!
    (= x ($SortWrappers.$SnapTos$resource$$creator($SortWrappers.s$resource$$creatorTo$Snap x)))
    :pattern (($SortWrappers.s$resource$$creatorTo$Snap x))
    :qid |$Snap.$SnapTos$resource$$creatorTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$resource$$creatorTo$Snap($SortWrappers.$SnapTos$resource$$creator x)))
    :pattern (($SortWrappers.$SnapTos$resource$$creator x))
    :qid |$Snap.s$resource$$creatorTo$SnapTos$resource$$creator|
    )))
(declare-fun $SortWrappers.$ContractTo$Snap ($Contract) $Snap)
(declare-fun $SortWrappers.$SnapTo$Contract ($Snap) $Contract)
(assert (forall ((x $Contract)) (!
    (= x ($SortWrappers.$SnapTo$Contract($SortWrappers.$ContractTo$Snap x)))
    :pattern (($SortWrappers.$ContractTo$Snap x))
    :qid |$Snap.$SnapTo$ContractTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$ContractTo$Snap($SortWrappers.$SnapTo$Contract x)))
    :pattern (($SortWrappers.$SnapTo$Contract x))
    :qid |$Snap.$ContractTo$SnapTo$Contract|
    )))
(declare-fun $SortWrappers.$BlockchainTo$Snap ($Blockchain) $Snap)
(declare-fun $SortWrappers.$SnapTo$Blockchain ($Snap) $Blockchain)
(assert (forall ((x $Blockchain)) (!
    (= x ($SortWrappers.$SnapTo$Blockchain($SortWrappers.$BlockchainTo$Snap x)))
    :pattern (($SortWrappers.$BlockchainTo$Snap x))
    :qid |$Snap.$SnapTo$BlockchainTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$BlockchainTo$Snap($SortWrappers.$SnapTo$Blockchain x)))
    :pattern (($SortWrappers.$SnapTo$Blockchain x))
    :qid |$Snap.$BlockchainTo$SnapTo$Blockchain|
    )))
(declare-fun $SortWrappers.$ConvertTo$Snap ($Convert) $Snap)
(declare-fun $SortWrappers.$SnapTo$Convert ($Snap) $Convert)
(assert (forall ((x $Convert)) (!
    (= x ($SortWrappers.$SnapTo$Convert($SortWrappers.$ConvertTo$Snap x)))
    :pattern (($SortWrappers.$ConvertTo$Snap x))
    :qid |$Snap.$SnapTo$ConvertTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$ConvertTo$Snap($SortWrappers.$SnapTo$Convert x)))
    :pattern (($SortWrappers.$SnapTo$Convert x))
    :qid |$Snap.$ConvertTo$SnapTo$Convert|
    )))
(declare-fun $SortWrappers.$StructOps<$Struct>To$Snap ($StructOps<$Struct>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Struct> ($Snap) $StructOps<$Struct>)
(assert (forall ((x $StructOps<$Struct>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Struct>($SortWrappers.$StructOps<$Struct>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Struct>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Struct>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Struct>To$Snap($SortWrappers.$SnapTo$StructOps<$Struct> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Struct> x))
    :qid |$Snap.$StructOps<$Struct>To$SnapTo$StructOps<$Struct>|
    )))
(declare-fun $SortWrappers.$StructOps<Seq<Int>>To$Snap ($StructOps<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Seq<Int>> ($Snap) $StructOps<Seq<Int>>)
(assert (forall ((x $StructOps<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Seq<Int>>($SortWrappers.$StructOps<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Seq<Int>>To$Snap($SortWrappers.$SnapTo$StructOps<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Seq<Int>> x))
    :qid |$Snap.$StructOps<Seq<Int>>To$SnapTo$StructOps<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$RangeTo$Snap ($Range) $Snap)
(declare-fun $SortWrappers.$SnapTo$Range ($Snap) $Range)
(assert (forall ((x $Range)) (!
    (= x ($SortWrappers.$SnapTo$Range($SortWrappers.$RangeTo$Snap x)))
    :pattern (($SortWrappers.$RangeTo$Snap x))
    :qid |$Snap.$SnapTo$RangeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RangeTo$Snap($SortWrappers.$SnapTo$Range x)))
    :pattern (($SortWrappers.$SnapTo$Range x))
    :qid |$Snap.$RangeTo$SnapTo$Range|
    )))
(declare-fun $SortWrappers.$IntTo$Snap ($Int) $Snap)
(declare-fun $SortWrappers.$SnapTo$Int ($Snap) $Int)
(assert (forall ((x $Int)) (!
    (= x ($SortWrappers.$SnapTo$Int($SortWrappers.$IntTo$Snap x)))
    :pattern (($SortWrappers.$IntTo$Snap x))
    :qid |$Snap.$SnapTo$IntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$IntTo$Snap($SortWrappers.$SnapTo$Int x)))
    :pattern (($SortWrappers.$SnapTo$Int x))
    :qid |$Snap.$IntTo$SnapTo$Int|
    )))
(declare-fun $SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap ($StructOps<$Map<Int~_Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> ($Snap) $StructOps<$Map<Int~_Int>>)
(assert (forall ((x $StructOps<$Map<Int~_Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>>($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Map<Int~_Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> x))
    :qid |$Snap.$StructOps<$Map<Int~_Int>>To$SnapTo$StructOps<$Map<Int~_Int>>|
    )))
(declare-fun $SortWrappers.$MathTo$Snap ($Math) $Snap)
(declare-fun $SortWrappers.$SnapTo$Math ($Snap) $Math)
(assert (forall ((x $Math)) (!
    (= x ($SortWrappers.$SnapTo$Math($SortWrappers.$MathTo$Snap x)))
    :pattern (($SortWrappers.$MathTo$Snap x))
    :qid |$Snap.$SnapTo$MathTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MathTo$Snap($SortWrappers.$SnapTo$Math x)))
    :pattern (($SortWrappers.$SnapTo$Math x))
    :qid |$Snap.$MathTo$SnapTo$Math|
    )))
(declare-fun $SortWrappers.$StructOps<Int>To$Snap ($StructOps<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Int> ($Snap) $StructOps<Int>)
(assert (forall ((x $StructOps<Int>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Int>($SortWrappers.$StructOps<Int>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Int>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Int>To$Snap($SortWrappers.$SnapTo$StructOps<Int> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Int> x))
    :qid |$Snap.$StructOps<Int>To$SnapTo$StructOps<Int>|
    )))
(declare-fun $SortWrappers.$Map<Int~_$Struct>To$Snap ($Map<Int~_$Struct>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_$Struct> ($Snap) $Map<Int~_$Struct>)
(assert (forall ((x $Map<Int~_$Struct>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_$Struct>($SortWrappers.$Map<Int~_$Struct>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_$Struct>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_$Struct>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_$Struct>To$Snap($SortWrappers.$SnapTo$Map<Int~_$Struct> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_$Struct> x))
    :qid |$Snap.$Map<Int~_$Struct>To$SnapTo$Map<Int~_$Struct>|
    )))
(declare-fun $SortWrappers.$StructOps<Bool>To$Snap ($StructOps<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Bool> ($Snap) $StructOps<Bool>)
(assert (forall ((x $StructOps<Bool>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Bool>($SortWrappers.$StructOps<Bool>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Bool>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Bool>To$Snap($SortWrappers.$SnapTo$StructOps<Bool> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Bool> x))
    :qid |$Snap.$StructOps<Bool>To$SnapTo$StructOps<Bool>|
    )))
(declare-fun $SortWrappers.$MapInt<Int>To$Snap ($MapInt<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$MapInt<Int> ($Snap) $MapInt<Int>)
(assert (forall ((x $MapInt<Int>)) (!
    (= x ($SortWrappers.$SnapTo$MapInt<Int>($SortWrappers.$MapInt<Int>To$Snap x)))
    :pattern (($SortWrappers.$MapInt<Int>To$Snap x))
    :qid |$Snap.$SnapTo$MapInt<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MapInt<Int>To$Snap($SortWrappers.$SnapTo$MapInt<Int> x)))
    :pattern (($SortWrappers.$SnapTo$MapInt<Int> x))
    :qid |$Snap.$MapInt<Int>To$SnapTo$MapInt<Int>|
    )))
(declare-fun $SortWrappers.$Map<Int~_Int>To$Snap ($Map<Int~_Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_Int> ($Snap) $Map<Int~_Int>)
(assert (forall ((x $Map<Int~_Int>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_Int>($SortWrappers.$Map<Int~_Int>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_Int>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_Int>To$Snap($SortWrappers.$SnapTo$Map<Int~_Int> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_Int> x))
    :qid |$Snap.$Map<Int~_Int>To$SnapTo$Map<Int~_Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$PSF<e$Transfer>To$Snap ($PSF<e$Transfer>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<e$Transfer> ($Snap) $PSF<e$Transfer>)
(assert (forall ((x $PSF<e$Transfer>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<e$Transfer>($SortWrappers.$PSF<e$Transfer>To$Snap x)))
    :pattern (($SortWrappers.$PSF<e$Transfer>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<e$Transfer>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<e$Transfer>To$Snap($SortWrappers.$SnapTo$PSF<e$Transfer> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<e$Transfer> x))
    :qid |$Snap.$PSF<e$Transfer>To$SnapTo$PSF<e$Transfer>|
    )))
(declare-fun $SortWrappers.$PSF<e$Buy>To$Snap ($PSF<e$Buy>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<e$Buy> ($Snap) $PSF<e$Buy>)
(assert (forall ((x $PSF<e$Buy>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<e$Buy>($SortWrappers.$PSF<e$Buy>To$Snap x)))
    :pattern (($SortWrappers.$PSF<e$Buy>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<e$Buy>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<e$Buy>To$Snap($SortWrappers.$SnapTo$PSF<e$Buy> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<e$Buy> x))
    :qid |$Snap.$PSF<e$Buy>To$SnapTo$PSF<e$Buy>|
    )))
(declare-fun $SortWrappers.$PSF<e$Sell>To$Snap ($PSF<e$Sell>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<e$Sell> ($Snap) $PSF<e$Sell>)
(assert (forall ((x $PSF<e$Sell>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<e$Sell>($SortWrappers.$PSF<e$Sell>To$Snap x)))
    :pattern (($SortWrappers.$PSF<e$Sell>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<e$Sell>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<e$Sell>To$Snap($SortWrappers.$SnapTo$PSF<e$Sell> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<e$Sell> x))
    :qid |$Snap.$PSF<e$Sell>To$SnapTo$PSF<e$Sell>|
    )))
(declare-fun $SortWrappers.$PSF<e$Pay>To$Snap ($PSF<e$Pay>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<e$Pay> ($Snap) $PSF<e$Pay>)
(assert (forall ((x $PSF<e$Pay>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<e$Pay>($SortWrappers.$PSF<e$Pay>To$Snap x)))
    :pattern (($SortWrappers.$PSF<e$Pay>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<e$Pay>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<e$Pay>To$Snap($SortWrappers.$SnapTo$PSF<e$Pay> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<e$Pay> x))
    :qid |$Snap.$PSF<e$Pay>To$SnapTo$PSF<e$Pay>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_contains_trigger (Seq<Int> Int) Bool)
(declare-fun Seq_skolem (Seq<Int> Int) Int)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_skolem_diff (Seq<Int> Seq<Int>) Int)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun $map_init<$Map<Int~_$Struct>> ($Struct) $Map<Int~_$Struct>)
(declare-fun $map_eq<Bool> ($Map<Int~_$Struct> $Map<Int~_$Struct>) Bool)
(declare-fun $map_get<$Struct> ($Map<Int~_$Struct> Int) $Struct)
(declare-fun $map_set<$Map<Int~_$Struct>> ($Map<Int~_$Struct> Int $Struct) $Map<Int~_$Struct>)
(declare-fun $bytes32_to_signed_int<Int> (Seq<Int>) Int)
(declare-fun $bytes32_to_unsigned_int<Int> (Seq<Int>) Int)
(declare-fun $signed_int_to_bytes32<Seq<Int>> (Int) Seq<Int>)
(declare-fun $unsigned_int_to_bytes32<Seq<Int>> (Int) Seq<Int>)
(declare-fun $pad32<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $struct_get<Int> (Int) Int)
(declare-fun $struct_set<$Struct> ($Struct Int Int) $Struct)
(declare-fun $struct_get<Bool> (Int) Bool)
(declare-fun $struct_set<$Struct> ($Struct Int Bool) $Struct)
(declare-fun $blockhash<Seq<Int>> (Int) Seq<Int>)
(declare-fun $method_id<Seq<Int>> (Seq<Int> Int) Seq<Int>)
(declare-fun $keccak256<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $sha256<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $ecrecover<Int> (Seq<Int> Int Int Int) Int)
(declare-fun $ecadd<Seq<Int>> (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun $ecmul<Seq<Int>> (Seq<Int> Int) Seq<Int>)
(declare-fun $wrap<$Int> (Int) $Int)
(declare-fun $unwrap<Int> ($Int) Int)
(declare-fun $w_mul<$Int> ($Int $Int) $Int)
(declare-fun $w_mulI<$Int> ($Int $Int) $Int)
(declare-fun $w_mulL<$Int> ($Int $Int) $Int)
(declare-fun $w_abs<Int> ($Int) Int)
(declare-fun $w_mod<$Int> ($Int $Int) $Int)
(declare-fun $w_modL<$Int> ($Int $Int) $Int)
(declare-fun $w_div<$Int> ($Int $Int) $Int)
(declare-fun $w_div_down<$Int> ($Int $Int) $Int)
(declare-fun $w_div_nat<$Int> ($Int $Int) $Int)
(declare-fun $w_div_natL<$Int> ($Int $Int) $Int)
(declare-fun $struct_loc<Int> ($Struct Int) Int)
(declare-fun $map_init<$Map<Int~_Int>> (Int) $Map<Int~_Int>)
(declare-fun $map_eq<Bool> ($Map<Int~_Int> $Map<Int~_Int>) Bool)
(declare-fun $map_get<Int> ($Map<Int~_Int> Int) Int)
(declare-fun $map_set<$Map<Int~_Int>> ($Map<Int~_Int> Int Int) $Map<Int~_Int>)
(declare-fun s$struct$self$init<$Struct> (Int Int Int $Map<Int~_Int> Int Int Bool $Map<Int~_Int> $Map<Int~_Int> Bool) $Struct)
(declare-fun s$struct$self$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $sign<Int> (Int) Int)
(declare-fun $div<Int> (Int Int Int) Int)
(declare-fun $mod<Int> (Int Int Int) Int)
(declare-fun $pow<Int> (Int Int) Int)
(declare-fun $sqrt<Int> (Int) Int)
(declare-fun $floor<Int> (Int Int) Int)
(declare-fun $ceil<Int> (Int Int) Int)
(declare-fun $shift<Int> (Int Int) Int)
(declare-fun $bitwise_not<Int> (Int) Int)
(declare-fun $bitwise_and<Int> (Int Int) Int)
(declare-fun $bitwise_or<Int> (Int Int) Int)
(declare-fun $bitwise_xor<Int> (Int Int) Int)
(declare-const $self_address<Int> Int)
(declare-fun $implements<Bool> (Int Int) Bool)
(declare-fun $struct_get<$Struct> (Int) $Struct)
(declare-fun $struct_set<$Struct> ($Struct Int $Struct) $Struct)
(declare-fun $range<Seq<Int>> (Int Int) Seq<Int>)
(declare-fun $struct_get<$Map<Int~_Int>> (Int) $Map<Int~_Int>)
(declare-fun $struct_set<$Struct> ($Struct Int $Map<Int~_Int>) $Struct)
(declare-fun $struct_get<Seq<Int>> (Int) Seq<Int>)
(declare-fun $struct_set<$Struct> ($Struct Int Seq<Int>) $Struct)
(declare-fun s$resource$$creator$init<$Struct> ($Struct) $Struct)
(declare-fun s$resource$$creator$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $map_sum<Int> ($Map<Int~_Int>) Int)
; /predicate_snap_functions_declarations.smt2 [e$Transfer: Snap]
(declare-fun $PSF.domain_e$Transfer ($PSF<e$Transfer>) Set<$Snap>)
(declare-fun $PSF.lookup_e$Transfer ($PSF<e$Transfer> $Snap) $Snap)
(declare-fun $PSF.after_e$Transfer ($PSF<e$Transfer> $PSF<e$Transfer>) Bool)
(declare-fun $PSF.loc_e$Transfer ($Snap $Snap) Bool)
(declare-fun $PSF.perm_e$Transfer ($PPM $Snap) $Perm)
(declare-const $psfTOP_e$Transfer $PSF<e$Transfer>)
; /predicate_snap_functions_declarations.smt2 [e$Buy: Snap]
(declare-fun $PSF.domain_e$Buy ($PSF<e$Buy>) Set<$Snap>)
(declare-fun $PSF.lookup_e$Buy ($PSF<e$Buy> $Snap) $Snap)
(declare-fun $PSF.after_e$Buy ($PSF<e$Buy> $PSF<e$Buy>) Bool)
(declare-fun $PSF.loc_e$Buy ($Snap $Snap) Bool)
(declare-fun $PSF.perm_e$Buy ($PPM $Snap) $Perm)
(declare-const $psfTOP_e$Buy $PSF<e$Buy>)
; /predicate_snap_functions_declarations.smt2 [e$Sell: Snap]
(declare-fun $PSF.domain_e$Sell ($PSF<e$Sell>) Set<$Snap>)
(declare-fun $PSF.lookup_e$Sell ($PSF<e$Sell> $Snap) $Snap)
(declare-fun $PSF.after_e$Sell ($PSF<e$Sell> $PSF<e$Sell>) Bool)
(declare-fun $PSF.loc_e$Sell ($Snap $Snap) Bool)
(declare-fun $PSF.perm_e$Sell ($PPM $Snap) $Perm)
(declare-const $psfTOP_e$Sell $PSF<e$Sell>)
; /predicate_snap_functions_declarations.smt2 [e$Pay: Snap]
(declare-fun $PSF.domain_e$Pay ($PSF<e$Pay>) Set<$Snap>)
(declare-fun $PSF.lookup_e$Pay ($PSF<e$Pay> $Snap) $Snap)
(declare-fun $PSF.after_e$Pay ($PSF<e$Pay> $PSF<e$Pay>) Bool)
(declare-fun $PSF.loc_e$Pay ($Snap $Snap) Bool)
(declare-fun $PSF.perm_e$Pay ($PPM $Snap) $Perm)
(declare-const $psfTOP_e$Pay $PSF<e$Pay>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun $pure$success_get ($Snap $Struct) Bool)
(declare-fun $pure$success_get%limited ($Snap $Struct) Bool)
(declare-fun $pure$success_get%stateless ($Struct) Bool)
(declare-fun $pure$success_get%precondition ($Snap $Struct) Bool)
(declare-fun $pure$return_get ($Snap $Struct) Int)
(declare-fun $pure$return_get%limited ($Snap $Struct) Int)
(declare-fun $pure$return_get%stateless ($Struct) Bool)
(declare-fun $pure$return_get%precondition ($Snap $Struct) Bool)
(declare-fun $range_sum ($Snap Int Int) Int)
(declare-fun $range_sum%limited ($Snap Int Int) Int)
(declare-fun $range_sum%stateless (Int Int) Bool)
(declare-fun $range_sum%precondition ($Snap Int Int) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun $failed%trigger ($Snap Int) Bool)
(declare-fun $failed_0%trigger ($Snap Int) Bool)
(declare-fun $allocation%trigger ($Snap $Struct Int) Bool)
(declare-fun $allocation_0%trigger ($Snap $Struct Int) Bool)
(declare-fun $offer%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $offer_0%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $trust%trigger ($Snap Int Int) Bool)
(declare-fun $trust_0%trigger ($Snap Int Int) Bool)
(declare-fun $performs$create%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$create_0%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$destroy%trigger ($Snap $Struct Int Int) Bool)
(declare-fun $performs$destroy_0%trigger ($Snap $Struct Int Int) Bool)
(declare-fun $performs$reallocate%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$reallocate_0%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$offer%trigger ($Snap $Struct $Struct Int Int Int Int Int) Bool)
(declare-fun $performs$offer_0%trigger ($Snap $Struct $Struct Int Int Int Int Int) Bool)
(declare-fun $performs$revoke%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $performs$revoke_0%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $performs$trust%trigger ($Snap Int Int Bool) Bool)
(declare-fun $performs$trust_0%trigger ($Snap Int Int Bool) Bool)
(declare-fun e$Transfer%trigger ($Snap Int Int Int) Bool)
(declare-fun e$Transfer_0%trigger ($Snap Int Int Int) Bool)
(declare-fun e$Buy%trigger ($Snap Int Int) Bool)
(declare-fun e$Buy_0%trigger ($Snap Int Int) Bool)
(declare-fun e$Sell%trigger ($Snap Int Int) Bool)
(declare-fun e$Sell_0%trigger ($Snap Int Int) Bool)
(declare-fun e$Pay%trigger ($Snap Int Int) Bool)
(declare-fun e$Pay_0%trigger ($Snap Int Int) Bool)
(declare-fun $accessible$__init__%trigger ($Snap Int Int Int Int Int Int) Bool)
(declare-fun $accessible$__init___0%trigger ($Snap Int Int Int Int Int Int) Bool)
(declare-fun $accessible$_stockAvailable%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$_stockAvailable_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$stockAvailable%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$stockAvailable_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$buyStock%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$buyStock_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$_getHolding%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$_getHolding_0%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$getHolding%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$getHolding_0%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$cash%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$cash_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$sellStock%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$sellStock_0%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$transferStock%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$transferStock_0%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$payBill%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$payBill_0%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$_debt%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$_debt_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$debt%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$debt_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$worth%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$worth_0%trigger ($Snap Int Int Int) Bool)
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (not (= s1 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (x Int)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Int>) (x Int) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Int>) (b Seq<Int>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Int) (y Int)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((min_ Int) (max Int)) (!
  (and
    (=> (< min_ max) (= (Seq_length (Seq_range min_ max)) (- max min_)))
    (=> (<= max min_) (= (Seq_length (Seq_range min_ max)) 0)))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (j Int)) (!
  (=>
    (and (<= 0 j) (< j (- max min_)))
    (= (Seq_index (Seq_range min_ max) j) (+ min_ j)))
  :pattern ((Seq_index (Seq_range min_ max) j))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (v Int)) (!
  (= (Seq_contains (Seq_range min_ max) v) (and (<= min_ v) (< v max)))
  :pattern ((Seq_contains (Seq_range min_ max) v))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall (($v $Struct) ($k Int)) (!
  (= ($map_get<$Struct> ($map_init<$Map<Int~_$Struct>> $v) $k) $v)
  :pattern (($map_get<$Struct> ($map_init<$Map<Int~_$Struct>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_$Struct>) ($n $Map<Int~_$Struct>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<$Struct> $m $k) ($map_get<$Struct> $n $k))
        :pattern (($map_get<$Struct> $m $k) ($map_get<$Struct> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_$Struct>) ($k Int) ($v $Struct) ($kk Int)) (!
  (=
    ($map_get<$Struct> ($map_set<$Map<Int~_$Struct>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<$Struct> $m $kk)))
  :pattern (($map_get<$Struct> ($map_set<$Map<Int~_$Struct>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (=>
    (<= (Seq_length $bb) 32)
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        ($bytes32_to_signed_int<Int> $bb))
      (<=
        ($bytes32_to_signed_int<Int> $bb)
        57896044618658097711785492504343953926634992332820282019728792003956564819967)))
  :pattern (($bytes32_to_signed_int<Int> $bb))
  :qid |prog.$bytes32_to_signed_int_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (=>
    (<= (Seq_length $bb) 32)
    (and
      (<= 0 ($bytes32_to_unsigned_int<Int> $bb))
      (<=
        ($bytes32_to_unsigned_int<Int> $bb)
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  :pattern (($bytes32_to_unsigned_int<Int> $bb))
  :qid |prog.$bytes32_to_unsigned_int_ax|)))
(assert (forall (($i Int)) (!
  (=>
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        $i)
      (<=
        $i
        57896044618658097711785492504343953926634992332820282019728792003956564819967))
    (= (Seq_length ($signed_int_to_bytes32<Seq<Int>> $i)) 32))
  :pattern (($signed_int_to_bytes32<Seq<Int>> $i))
  :qid |prog.$signed_int_to_bytes32_ax|)))
(assert (forall (($i Int)) (!
  (=>
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        $i)
      (<=
        $i
        57896044618658097711785492504343953926634992332820282019728792003956564819967))
    (= (Seq_length ($unsigned_int_to_bytes32<Seq<Int>> $i)) 32))
  :pattern (($unsigned_int_to_bytes32<Seq<Int>> $i))
  :qid |prog.$unsigned_int_to_bytes32_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (= (Seq_length ($pad32<Seq<Int>> $bb)) 32)
  :pattern (($pad32<Seq<Int>> $bb))
  :qid |prog.$pad32_len_ax|)))
(assert (and
  (forall (($bb Seq<Int>) ($i Int)) (!
    (let ((diff (- 32 (Seq_length $bb)))) true)
    :pattern ((Seq_index ($pad32<Seq<Int>> $bb) $i))
    :qid |prog.$pad32_vals_ax|))
  (forall (($bb Seq<Int>) ($i Int)) (!
    (let ((diff (- 32 (Seq_length $bb)))) (=>
      (and (<= 0 $i) (< $i (Seq_length ($pad32<Seq<Int>> $bb))))
      (=
        (Seq_index ($pad32<Seq<Int>> $bb) $i)
        (ite (< $i diff) 0 (Seq_index $bb (- $i diff))))))
    :pattern ((Seq_index ($pad32<Seq<Int>> $bb) $i))
    :qid |prog.$pad32_vals_ax|))))
(assert (forall (($s $Struct) ($m Int) ($t Int)) (!
  (= ($struct_get<Int> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m)) $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Int)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Bool)) (!
  (=
    ($struct_get<Bool> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Bool)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($no Int)) (!
  (= (Seq_length ($blockhash<Seq<Int>> $no)) 32)
  :pattern (($blockhash<Seq<Int>> $no))
  :qid |prog.$blockhash_ax|)))
(assert (forall (($bb Seq<Int>) ($l Int)) (!
  (= (Seq_length ($method_id<Seq<Int>> $bb $l)) $l)
  :pattern (($method_id<Seq<Int>> $bb $l))
  :qid |prog.$method_id_ax|)))
(assert (forall (($s Seq<Int>)) (!
  (= (Seq_length ($keccak256<Seq<Int>> $s)) 32)
  :pattern (($keccak256<Seq<Int>> $s))
  :qid |prog.$keccak256_ax|)))
(assert (forall (($s Seq<Int>)) (!
  (= (Seq_length ($sha256<Seq<Int>> $s)) 32)
  :pattern (($sha256<Seq<Int>> $s))
  :qid |prog.$sha256_ax|)))
(assert (forall (($p Seq<Int>) ($q Seq<Int>)) (!
  (= (Seq_length ($ecadd<Seq<Int>> $p $q)) 2)
  :pattern (($ecadd<Seq<Int>> $p $q))
  :qid |prog.$ecadd_ax|)))
(assert (forall (($p Seq<Int>) ($s Int)) (!
  (= (Seq_length ($ecmul<Seq<Int>> $p $s)) 2)
  :pattern (($ecmul<Seq<Int>> $p $s))
  :qid |prog.$ecmul_ax|)))
(assert (forall ((i Int)) (!
  (= ($unwrap<Int> ($wrap<$Int> i)) i)
  :pattern (($wrap<$Int> i))
  :qid |prog.$wrap_ax|)))
(assert (forall ((i $Int)) (!
  (= ($wrap<$Int> ($unwrap<Int> i)) i)
  :pattern (($wrap<$Int> ($unwrap<Int> i)))
  :qid |prog.$unwrap_ax|)))
(assert (forall ((i $Int)) (!
  (=> (< ($unwrap<Int> i) 0) (= ($w_abs<Int> i) (- 0 ($unwrap<Int> i))))
  :pattern (($w_abs<Int> i))
  :qid |prog.$w_abs_ax_1|)))
(assert (forall ((i $Int)) (!
  (=> (>= ($unwrap<Int> i) 0) (= ($w_abs<Int> i) ($unwrap<Int> i)))
  :pattern (($w_abs<Int> i))
  :qid |prog.$w_abs_ax_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulI<$Int> i j))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_intermediate|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulL<$Int> i j))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mulI<$Int> i j) ($w_mulL<$Int> i j))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_intermediate_to_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulI<$Int> j i))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_commutative|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (= ($w_mulI<$Int> i ($w_mulI<$Int> j k)) ($w_mulL<$Int> ($w_mulL<$Int> i j) k))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j k)))
  :qid |prog.$w_mul_associative|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (= ($unwrap<Int> j) (+ ($unwrap<Int> k) ($unwrap<Int> l)))
    (=
      ($w_mulI<$Int> i j)
      ($wrap<$Int> (+
        ($unwrap<Int> ($w_mulL<$Int> i k))
        ($unwrap<Int> ($w_mulL<$Int> i l))))))
  :pattern (($w_mulI<$Int> i j) ($w_mulI<$Int> i k) ($w_mulI<$Int> i l))
  :qid |prog.$w_mul_distributive|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_mulI<$Int> i j)
    ($w_mulL<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) ($wrap<$Int> (-
      0
      ($unwrap<Int> j)))))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_sign_1|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_mulI<$Int> i j)
    ($wrap<$Int> (-
      0
      ($unwrap<Int> ($w_mulL<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) j)))))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_sign_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> i) 0) (= ($unwrap<Int> j) 0))
    (= ($unwrap<Int> ($w_mulI<$Int> i j)) 0))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_zero_1|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or
      (and (> ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
      (and (< ($unwrap<Int> i) 0) (< ($unwrap<Int> j) 0)))
    (> ($unwrap<Int> ($w_mulI<$Int> i j)) 0))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_zero_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> i) 1) (= ($unwrap<Int> j) 0))
    (= ($w_mulI<$Int> i j) j))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_neutral|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    (>= ($w_abs<Int> ($w_mulI<$Int> i j)) ($w_abs<Int> j))
    (or (>= ($w_abs<Int> i) 1) (= ($unwrap<Int> j) 0)))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_proportional|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (> ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (> ($unwrap<Int> l) 0))
    (>
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))
      ($unwrap<Int> ($w_mulI<$Int> k l))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (>= ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (> ($unwrap<Int> l) 0))
    (>=
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))
      ($unwrap<Int> ($w_mulI<$Int> k l))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_2|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (> ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (< ($unwrap<Int> l) 0))
    (>
      ($unwrap<Int> ($w_mulI<$Int> k l))
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_3|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (>= ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (< ($unwrap<Int> l) 0))
    (>=
      ($unwrap<Int> ($w_mulI<$Int> k l))
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_4|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (<= ($w_abs<Int> i) ($w_abs<Int> j))
      (<= ($w_abs<Int> k) ($w_abs<Int> l)))
    (<= ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (< ($w_abs<Int> i) ($w_abs<Int> j))
      (and (<= ($w_abs<Int> k) ($w_abs<Int> l)) (not (= ($unwrap<Int> l) 0))))
    (< ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_2|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (<= ($w_abs<Int> i) ($w_abs<Int> j))
      (and (< ($w_abs<Int> k) ($w_abs<Int> l)) (not (= ($unwrap<Int> j) 0))))
    (< ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mod<$Int> i j) ($w_modL<$Int> i j))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (not (= j ($wrap<$Int> 0))) (or (= i j) (= i ($wrap<$Int> 0))))
    (= ($w_mod<$Int> i j) ($wrap<$Int> 0)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_identity|)))
(assert (forall ((i $Int) (j $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and
        (= ($unwrap<Int> i) (+ ($unwrap<Int> l) ($w_abs<Int> j)))
        (or (>= ($unwrap<Int> l) 0) (< ($unwrap<Int> i) 0))))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> l j)))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_basic_1|)))
(assert (forall ((i $Int) (j $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and
        (= ($unwrap<Int> i) (- ($unwrap<Int> l) ($w_abs<Int> j)))
        (or (<= ($unwrap<Int> l) 0) (> ($unwrap<Int> i) 0))))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> l j)))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_basic_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and (<= 0 ($w_abs<Int> i)) (< ($w_abs<Int> i) ($w_abs<Int> j))))
    (= ($w_mod<$Int> i j) i))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_basic_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (< ($w_abs<Int> ($w_mod<$Int> i j)) ($w_abs<Int> j)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_basic_4|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (or
      (=
        ($sign<Int> ($unwrap<Int> ($w_mod<$Int> i j)))
        ($sign<Int> ($unwrap<Int> i)))
      (= ($sign<Int> ($unwrap<Int> ($w_mod<$Int> i j))) 0)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_sign_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and (not (= j ($wrap<$Int> 0))) (= ($unwrap<Int> i) (- 0 ($unwrap<Int> k))))
    (= ($w_mod<$Int> i j) ($wrap<$Int> (- 0 ($unwrap<Int> ($w_modL<$Int> k j))))))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> k j))
  :qid |prog.$w_mod_sign_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> i j) ($w_mod<$Int> i ($wrap<$Int> (- 0 ($unwrap<Int> j))))))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_sign_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> ($w_modL<$Int> i j) j)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_mod|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (<= ($w_abs<Int> ($w_mod<$Int> i j)) ($w_abs<Int> i)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_decrease|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (= ($unwrap<Int> i) (+ ($unwrap<Int> k) ($unwrap<Int> l))))
    (and
      (=>
        (or
          (and
            (>= ($unwrap<Int> i) 0)
            (>=
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0))
          (and
            (<= ($unwrap<Int> i) 0)
            (<=
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0)))
        (or
          (and
            (<=
              ($w_abs<Int> j)
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                (* 2 ($w_abs<Int> j)))
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (-
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))
          (or
            (and
              (<
                (- 0 ($w_abs<Int> j))
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j))))
              (and
                (<
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))
                (=
                  ($w_mod<$Int> i j)
                  ($wrap<$Int> (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))))))
            (and
              (<
                (* (- 0 2) ($w_abs<Int> j))
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j))))
              (and
                (<=
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  (- 0 ($w_abs<Int> j)))
                (=
                  ($w_mod<$Int> i j)
                  ($wrap<$Int> (+
                    (+
                      ($unwrap<Int> ($w_modL<$Int> k j))
                      ($unwrap<Int> ($w_modL<$Int> l j)))
                    ($w_abs<Int> j)))))))))
      (=>
        (or
          (and
            (> ($unwrap<Int> i) 0)
            (<
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0))
          (and
            (< ($unwrap<Int> i) 0)
            (>
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0)))
        (or
          (and
            (<
              0
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                ($w_abs<Int> j))
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (-
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))
          (and
            (<
              (- 0 ($w_abs<Int> j))
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                0)
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (+
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))))))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> k j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_add|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> ($w_mul<$Int> i j) j) ($wrap<$Int> 0)))
  :pattern (($w_mod<$Int> ($w_mul<$Int> i j) j))
  :qid |prog.$w_mod_mul_basic|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (and
      (=
        ($w_mod<$Int> ($w_mulI<$Int> i k) j)
        ($w_modL<$Int> ($w_mulL<$Int> ($w_modL<$Int> i j) k) j))
      (and
        (=
          ($w_mod<$Int> ($w_mulI<$Int> i k) j)
          ($w_modL<$Int> ($w_mulL<$Int> i ($w_modL<$Int> k j)) j))
        (=
          ($w_mod<$Int> ($w_mulI<$Int> i k) j)
          ($w_modL<$Int> ($w_mulL<$Int> ($w_modL<$Int> i j) ($w_modL<$Int> k j)) j)))))
  :pattern (($w_mod<$Int> ($w_mulI<$Int> i k) j))
  :qid |prog.$w_mod_mul_mod_noop|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (=
      ($w_mod<$Int> i j)
      ($w_modL<$Int> ($wrap<$Int> (+
        ($unwrap<Int> ($w_mulL<$Int> k j))
        ($unwrap<Int> i))) j)))
  :pattern (($w_mod<$Int> i j) ($w_mulI<$Int> k j))
  :qid |prog.$w_mod_mul_vanish|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (=
      ($w_div<$Int> i j)
      (ite
        (>= ($unwrap<Int> i) 0)
        ($w_div_down<$Int> i j)
        ($wrap<$Int> (-
          0
          ($unwrap<Int> ($w_div_down<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) j)))))))
  :pattern (($w_div<$Int> i j))
  :qid |prog.$w_div_div_down|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_div_down<$Int> i j)
    (ite
      (>= ($unwrap<Int> j) 0)
      ($w_div_nat<$Int> i j)
      ($wrap<$Int> (-
        0
        ($unwrap<Int> ($w_div_nat<$Int> i ($wrap<$Int> (- 0 ($unwrap<Int> j)))))))))
  :pattern (($w_div_down<$Int> i j))
  :qid |prog.$w_div_down_div_nat|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_div_nat<$Int> i j) ($w_div_natL<$Int> i j))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> j) 1) (= ($unwrap<Int> i) 0))
    (= ($w_div_nat<$Int> i j) i))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_neutral|)))
(assert (forall ((i $Int)) (!
  (=> (> ($unwrap<Int> i) 0) (= ($w_div_nat<$Int> i i) ($wrap<$Int> 1)))
  :pattern (($w_div_nat<$Int> i i))
  :qid |prog.$w_div_nat_self|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (>= ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
    (=
      (< ($unwrap<Int> i) ($unwrap<Int> j))
      (= ($w_div_nat<$Int> i j) ($wrap<$Int> 0))))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_small|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and
          (> ($unwrap<Int> j) 0)
          (and (>= ($unwrap<Int> k) 0) (>= ($unwrap<Int> l) 0))))
      (= ($unwrap<Int> i) (+ ($unwrap<Int> k) ($unwrap<Int> l))))
    (or
      (and
        (<=
          0
          (+ ($unwrap<Int> ($w_mod<$Int> k j)) ($unwrap<Int> ($w_mod<$Int> l j))))
        (and
          (<
            (+
              ($unwrap<Int> ($w_mod<$Int> k j))
              ($unwrap<Int> ($w_mod<$Int> l j)))
            ($unwrap<Int> j))
          (=
            ($w_div_nat<$Int> i j)
            ($wrap<$Int> (+
              ($unwrap<Int> ($w_div_natL<$Int> k j))
              ($unwrap<Int> ($w_div_natL<$Int> l j)))))))
      (and
        (<=
          ($unwrap<Int> j)
          (+ ($unwrap<Int> ($w_mod<$Int> k j)) ($unwrap<Int> ($w_mod<$Int> l j))))
        (and
          (<
            (+
              ($unwrap<Int> ($w_mod<$Int> k j))
              ($unwrap<Int> ($w_mod<$Int> l j)))
            (* 2 ($unwrap<Int> j)))
          (=
            ($w_div_nat<$Int> i j)
            ($wrap<$Int> (+
              (+
                ($unwrap<Int> ($w_div_natL<$Int> k j))
                ($unwrap<Int> ($w_div_natL<$Int> l j)))
              1)))))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> k j) ($w_div_nat<$Int> l j))
  :qid |prog.$w_div_nat_dividend_add|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and (> ($unwrap<Int> j) 0) (>= ($unwrap<Int> k) 0)))
      (<= ($unwrap<Int> i) ($unwrap<Int> k)))
    (<=
      ($unwrap<Int> ($w_div_nat<$Int> i j))
      ($unwrap<Int> ($w_div_natL<$Int> k j))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> k j))
  :qid |prog.$w_div_nat_ordered_by_dividend|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and (> ($unwrap<Int> j) 0) (> ($unwrap<Int> k) 0)))
      (<= ($unwrap<Int> j) ($unwrap<Int> k)))
    (>=
      ($unwrap<Int> ($w_div_nat<$Int> i j))
      ($unwrap<Int> ($w_div_natL<$Int> i k))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> i k))
  :qid |prog.$w_div_nat_ordered_by_divisor|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (> ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 1))
    (< ($unwrap<Int> ($w_div_nat<$Int> i j)) ($unwrap<Int> i)))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_decrease|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (>= ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
    (<= ($unwrap<Int> ($w_div_nat<$Int> i j)) ($unwrap<Int> i)))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_nonincrease|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=> (not (= ($unwrap<Int> j) 0)) (= ($w_div<$Int> ($w_mulI<$Int> i j) j) i))
  :pattern (($w_div<$Int> ($w_mulI<$Int> i j) j))
  :qid |prog.$w_div_mul|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (or
      (=
        ($sign<Int> ($unwrap<Int> ($w_div<$Int> i j)))
        (* ($sign<Int> ($unwrap<Int> i)) ($sign<Int> ($unwrap<Int> j))))
      (= ($sign<Int> ($unwrap<Int> ($w_div<$Int> i j))) 0)))
  :pattern (($w_div<$Int> i j))
  :qid |prog.$w_div_sign|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (=
      ($unwrap<Int> i)
      (+
        ($unwrap<Int> ($w_mulI<$Int> j ($w_div<$Int> i j)))
        ($unwrap<Int> ($w_mod<$Int> i j)))))
  :pattern (($w_div<$Int> i j) ($w_mod<$Int> i j))
  :qid |prog.$w_div_mod_mul|)))
(assert (forall (($v Int) ($k Int)) (!
  (= ($map_get<Int> ($map_init<$Map<Int~_Int>> $v) $k) $v)
  :pattern (($map_get<Int> ($map_init<$Map<Int~_Int>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_Int>) ($n $Map<Int~_Int>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<Int> $m $k) ($map_get<Int> $n $k))
        :pattern (($map_get<Int> $m $k) ($map_get<Int> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_Int>) ($k Int) ($v Int) ($kk Int)) (!
  (=
    ($map_get<Int> ($map_set<$Map<Int~_Int>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<Int> $m $kk)))
  :pattern (($map_get<Int> ($map_set<$Map<Int~_Int>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (forall (($arg_0 Int) ($arg_1 Int) ($arg_2 Int) ($arg_3 $Map<Int~_Int>) ($arg_4 Int) ($arg_5 Int) ($arg_6 Bool) ($arg_7 $Map<Int~_Int>) ($arg_8 $Map<Int~_Int>) ($arg_9 Bool)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) (- 0 1)))
      9122519725869122497593506884710)
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 0))
        $arg_0)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 1))
          $arg_1)
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 2))
            $arg_2)
          (and
            (=
              ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 3))
              $arg_3)
            (and
              (=
                ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 4))
                $arg_4)
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 5))
                  $arg_5)
                (and
                  (=
                    ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 6))
                    $arg_6)
                  (and
                    (=
                      ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 7))
                      $arg_7)
                    (and
                      (=
                        ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 8))
                        $arg_8)
                      (=
                        ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 9))
                        $arg_9)))))))))))
  :pattern ((s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9))
  :qid |prog.s$struct$self$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$struct$self$eq<Bool> $l $r) (= $l $r))
    (=
      (s$struct$self$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> $l 0))
            ($struct_get<Int> ($struct_loc<Int> $r 0)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> $l 1))
              ($struct_get<Int> ($struct_loc<Int> $r 1)))
            (and
              (=
                ($struct_get<Int> ($struct_loc<Int> $l 2))
                ($struct_get<Int> ($struct_loc<Int> $r 2)))
              (and
                ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 3)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 3)))
                (and
                  (=
                    ($struct_get<Int> ($struct_loc<Int> $l 4))
                    ($struct_get<Int> ($struct_loc<Int> $r 4)))
                  (and
                    (=
                      ($struct_get<Int> ($struct_loc<Int> $l 5))
                      ($struct_get<Int> ($struct_loc<Int> $r 5)))
                    (and
                      (=
                        ($struct_get<Bool> ($struct_loc<Int> $l 6))
                        ($struct_get<Bool> ($struct_loc<Int> $r 6)))
                      (and
                        ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 7)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 7)))
                        (and
                          ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 8)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 8)))
                          (=
                            ($struct_get<Bool> ($struct_loc<Int> $l 9))
                            ($struct_get<Bool> ($struct_loc<Int> $r 9)))))))))))))))
  :pattern ((s$struct$self$eq<Bool> $l $r))
  :qid |prog.s$struct$self$eq$ax|)))
(assert (and
  (= ($sign<Int> 0) 0)
  (forall (($a Int)) (!
    (and
      (=> (> $a 0) (= ($sign<Int> $a) 1))
      (=> (< $a 0) (= ($sign<Int> $a) (- 0 1))))
    :pattern (($sign<Int> $a))
    ))))
(assert (forall (($a Int) ($b Int) ($r Int)) (!
  (=
    ($div<Int> $a $b $r)
    (+ (div $a $b) (ite (or (>= $a 0) (= (mod $a $b) 0)) 0 ($sign<Int> $b))))
  :pattern (($div<Int> $a $b $r))
  :qid |prog.$div_ax|)))
(assert (forall (($a Int) ($b Int) ($r Int)) (!
  (= ($mod<Int> $a $b $r) (- $a (* ($div<Int> $a $b $r) $b)))
  :pattern (($mod<Int> $a $b $r))
  :qid |prog.$mod_ax|)))
(assert (forall (($a Int)) (!
  (=> (not (= $a 0)) (= ($pow<Int> 0 $a) 0))
  :pattern (($pow<Int> 0 $a))
  :qid |prog.$pow0N_ax|)))
(assert (forall (($a Int)) (!
  (=> (not (= $a 0)) (= ($pow<Int> $a 0) 1))
  :pattern (($pow<Int> $a 0))
  :qid |prog.$powN0_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (=> (>= $a 0) (>= ($pow<Int> $a $b) 0))
  :pattern (($pow<Int> $a $b))
  :qid |prog.$pow_non_negative_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (=> (and (> $a 0) (>= $b 0)) (> ($pow<Int> $a $b) 0))
  :pattern (($pow<Int> $a $b))
  :qid |prog.$pow_non_negative_and_non_null_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (=>
    (> $s 0)
    (= ($floor<Int> $a $s) ($div<Int> (ite (< $a 0) (- $a (- $s 1)) $a) $s 0)))
  :pattern (($floor<Int> $a $s))
  :qid |prog.$floor_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (=>
    (> $s 0)
    (= ($ceil<Int> $a $s) ($div<Int> (ite (< $a 0) $a (- (+ $a $s) 1)) $s 0)))
  :pattern (($ceil<Int> $a $s))
  :qid |prog.$ceil_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (>= ($shift<Int> $a $s) 0)
  :pattern (($shift<Int> $a $s))
  :qid |prog.$shift_ax|)))
(assert (forall (($a Int)) (!
  (>= ($bitwise_not<Int> $a) 0)
  :pattern (($bitwise_not<Int> $a))
  :qid |prog.$bitwise_not_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_and<Int> $a $b) 0)
  :pattern (($bitwise_and<Int> $a $b))
  :qid |prog.$bitwise_and_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_or<Int> $a $b) 0)
  :pattern (($bitwise_or<Int> $a $b))
  :qid |prog.$bitwise_or_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_xor<Int> $a $b) 0)
  :pattern (($bitwise_xor<Int> $a $b))
  :qid |prog.$bitwise_xor_ax|)))
(assert (not (= (as $self_address<Int>  Int) 0)))
(assert (forall (($s $Struct) ($m Int) ($t $Struct)) (!
  (=
    ($struct_get<$Struct> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Struct)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($f Int) ($t Int)) (!
  (= (Seq_length ($range<Seq<Int>> $f $t)) (- $t $f))
  :pattern ((Seq_length ($range<Seq<Int>> $f $t)))
  :qid |prog.$range_len_ax|)))
(assert (forall (($f Int) ($t Int) ($i Int)) (!
  (=>
    (and (<= 0 $i) (< $i (Seq_length ($range<Seq<Int>> $f $t))))
    (= (Seq_index ($range<Seq<Int>> $f $t) $i) (+ $f $i)))
  :pattern ((Seq_index ($range<Seq<Int>> $f $t) $i))
  :qid |prog.$range_lookup_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t $Map<Int~_Int>)) (!
  (=
    ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Map<Int~_Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Seq<Int>)) (!
  (Seq_equal
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Seq<Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($arg_0 $Struct)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$resource$$creator$init<$Struct> $arg_0) (- 0 1)))
      2567760667165796382711201132846784524754120562)
    (=
      ($struct_get<$Struct> ($struct_loc<Int> (s$resource$$creator$init<$Struct> $arg_0) 0))
      $arg_0))
  :pattern ((s$resource$$creator$init<$Struct> $arg_0))
  :qid |prog.s$resource$$creator$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$resource$$creator$eq<Bool> $l $r) (= $l $r))
    (=
      (s$resource$$creator$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (=
          ($struct_get<$Struct> ($struct_loc<Int> $l 0))
          ($struct_get<$Struct> ($struct_loc<Int> $r 0))))))
  :pattern ((s$resource$$creator$eq<Bool> $l $r))
  :qid |prog.s$resource$$creator$eq$ax|)))
(assert (= ($map_sum<Int> ($map_init<$Map<Int~_Int>> 0)) 0))
(assert (forall (($m $Map<Int~_Int>) ($k Int) ($v Int)) (!
  (=
    ($map_sum<Int> ($map_set<$Map<Int~_Int>> $m $k $v))
    (+ (- ($map_sum<Int> $m) ($map_get<Int> $m $k)) $v))
  :pattern (($map_sum<Int> ($map_set<$Map<Int~_Int>> $m $k $v)))
  :qid |prog.$map_sum_set_ax|)))
; /predicate_snap_functions_axioms.smt2 [e$Transfer: Snap]
(assert (forall ((vs $PSF<e$Transfer>) (ws $PSF<e$Transfer>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_e$Transfer vs) ($PSF.domain_e$Transfer ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_e$Transfer vs))
            (= ($PSF.lookup_e$Transfer vs x) ($PSF.lookup_e$Transfer ws x)))
          :pattern (($PSF.lookup_e$Transfer vs x) ($PSF.lookup_e$Transfer ws x))
          :qid |qp.$PSF<e$Transfer>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<e$Transfer>To$Snap vs)
              ($SortWrappers.$PSF<e$Transfer>To$Snap ws)
              )
    :qid |qp.$PSF<e$Transfer>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_e$Transfer pm s))
    :pattern (($PSF.perm_e$Transfer pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_e$Transfer f s) true)
    :pattern (($PSF.loc_e$Transfer f s)))))
; /predicate_snap_functions_axioms.smt2 [e$Buy: Snap]
(assert (forall ((vs $PSF<e$Buy>) (ws $PSF<e$Buy>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_e$Buy vs) ($PSF.domain_e$Buy ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_e$Buy vs))
            (= ($PSF.lookup_e$Buy vs x) ($PSF.lookup_e$Buy ws x)))
          :pattern (($PSF.lookup_e$Buy vs x) ($PSF.lookup_e$Buy ws x))
          :qid |qp.$PSF<e$Buy>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<e$Buy>To$Snap vs)
              ($SortWrappers.$PSF<e$Buy>To$Snap ws)
              )
    :qid |qp.$PSF<e$Buy>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_e$Buy pm s))
    :pattern (($PSF.perm_e$Buy pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_e$Buy f s) true)
    :pattern (($PSF.loc_e$Buy f s)))))
; /predicate_snap_functions_axioms.smt2 [e$Sell: Snap]
(assert (forall ((vs $PSF<e$Sell>) (ws $PSF<e$Sell>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_e$Sell vs) ($PSF.domain_e$Sell ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_e$Sell vs))
            (= ($PSF.lookup_e$Sell vs x) ($PSF.lookup_e$Sell ws x)))
          :pattern (($PSF.lookup_e$Sell vs x) ($PSF.lookup_e$Sell ws x))
          :qid |qp.$PSF<e$Sell>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<e$Sell>To$Snap vs)
              ($SortWrappers.$PSF<e$Sell>To$Snap ws)
              )
    :qid |qp.$PSF<e$Sell>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_e$Sell pm s))
    :pattern (($PSF.perm_e$Sell pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_e$Sell f s) true)
    :pattern (($PSF.loc_e$Sell f s)))))
; /predicate_snap_functions_axioms.smt2 [e$Pay: Snap]
(assert (forall ((vs $PSF<e$Pay>) (ws $PSF<e$Pay>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_e$Pay vs) ($PSF.domain_e$Pay ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_e$Pay vs))
            (= ($PSF.lookup_e$Pay vs x) ($PSF.lookup_e$Pay ws x)))
          :pattern (($PSF.lookup_e$Pay vs x) ($PSF.lookup_e$Pay ws x))
          :qid |qp.$PSF<e$Pay>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<e$Pay>To$Snap vs)
              ($SortWrappers.$PSF<e$Pay>To$Snap ws)
              )
    :qid |qp.$PSF<e$Pay>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_e$Pay pm s))
    :pattern (($PSF.perm_e$Pay pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_e$Pay f s) true)
    :pattern (($PSF.loc_e$Pay f s)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun letvar@7@00 ($Snap Int Int) Bool)
(declare-fun letvar@8@00 ($Snap Int Int) Bool)
(declare-fun letvar@9@00 ($Snap Int Int) Int)
(declare-fun letvar@10@00 ($Snap Int Int) Int)
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  (= ($pure$success_get%limited s@$ x@0@00) ($pure$success_get s@$ x@0@00))
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-2033|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  ($pure$success_get%stateless x@0@00)
  :pattern (($pure$success_get%limited s@$ x@0@00))
  :qid |quant-u-2034|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  (=>
    ($pure$success_get%precondition s@$ x@0@00)
    (=
      ($pure$success_get s@$ x@0@00)
      ($struct_get<Bool> ($struct_loc<Int> x@0@00 0))))
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-2039|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  true
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-2040|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  (= ($pure$return_get%limited s@$ x@2@00) ($pure$return_get s@$ x@2@00))
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-2035|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  ($pure$return_get%stateless x@2@00)
  :pattern (($pure$return_get%limited s@$ x@2@00))
  :qid |quant-u-2036|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  (=>
    ($pure$return_get%precondition s@$ x@2@00)
    (= ($pure$return_get s@$ x@2@00) ($struct_loc<Int> x@2@00 1)))
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-2041|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  true
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-2042|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (= ($range_sum%limited s@$ $x@4@00 $y@5@00) ($range_sum s@$ $x@4@00 $y@5@00))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-2037|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  ($range_sum%stateless $x@4@00 $y@5@00)
  :pattern (($range_sum%limited s@$ $x@4@00 $y@5@00))
  :qid |quant-u-2038|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (=>
    ($range_sum%precondition s@$ $x@4@00 $y@5@00)
    (=
      ($range_sum s@$ $x@4@00 $y@5@00)
      (let (($x_ge_0 (>= $x@4@00 0))) (let (($y_ge_0 (>= $y@5@00 0))) (let (($x_exclusive (ite
        $x_ge_0
        (div (* (- $x@4@00 1) $x@4@00) 2)
        (div (* (- (- 0 $x@4@00) 1) (- 0 $x@4@00)) 2)))) (let (($y_exclusive (ite
        $y_ge_0
        (div (* (- $y@5@00 1) $y@5@00) 2)
        (div (* (- (- 0 $y@5@00) 1) (- 0 $y@5@00)) 2)))) (ite
        (and $x_ge_0 $y_ge_0)
        (- $y_exclusive $x_exclusive)
        (ite
          (and (not $x_ge_0) $y_ge_0)
          (+ (- $y_exclusive $x_exclusive) $x@4@00)
          (+ (- (- $y_exclusive $y@5@00) $x_exclusive) $x@4@00)))))))))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-2043|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (=>
    ($range_sum%precondition s@$ $x@4@00 $y@5@00)
    (let (($x_ge_0 (>= $x@4@00 0))) (let (($y_ge_0 (>= $y@5@00 0))) (let (($x_exclusive (ite
      $x_ge_0
      (div (* (- $x@4@00 1) $x@4@00) 2)
      (div (* (- (- 0 $x@4@00) 1) (- 0 $x@4@00)) 2)))) (let (($y_exclusive (ite
      $y_ge_0
      (div (* (- $y@5@00 1) $y@5@00) 2)
      (div (* (- (- 0 $y@5@00) 1) (- 0 $y@5@00)) 2)))) true)))))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-2044|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- $transitivity_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var $self$0: $Struct
(declare-const $self$0@0@01 $Struct)
; [exec]
; var $$contracts$0: $Map[Int, $Struct]
(declare-const $$contracts$0@1@01 $Map<Int~_$Struct>)
; [exec]
; var $self$1: $Struct
(declare-const $self$1@2@01 $Struct)
; [exec]
; var $$contracts$1: $Map[Int, $Struct]
(declare-const $$contracts$1@3@01 $Map<Int~_$Struct>)
; [exec]
; var $self$2: $Struct
(declare-const $self$2@4@01 $Struct)
; [exec]
; var $$contracts$2: $Map[Int, $Struct]
(declare-const $$contracts$2@5@01 $Map<Int~_$Struct>)
; [exec]
; var block: $Struct
(declare-const block@6@01 $Struct)
; [exec]
; var $post: Bool
(declare-const $post@7@01 Bool)
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 0)): Int) &&
;   ($struct_get($struct_loc($self$0, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@8@01 $Snap)
(assert (= $t@8@01 ($Snap.combine ($Snap.first $t@8@01) ($Snap.second $t@8@01))))
(assert (= ($Snap.first $t@8@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
(assert (= ($Snap.second $t@8@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 1)): Int) &&
;   ($struct_get($struct_loc($self$0, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@9@01 $Snap)
(assert (= $t@9@01 ($Snap.combine ($Snap.first $t@9@01) ($Snap.second $t@9@01))))
(assert (= ($Snap.first $t@9@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
(assert (= ($Snap.second $t@9@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 2)): Int) &&
;   ($struct_get($struct_loc($self$0, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@10@01 $Snap)
(assert (= $t@10@01 ($Snap.combine ($Snap.first $t@10@01) ($Snap.second $t@10@01))))
(assert (= ($Snap.first $t@10@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2))))
(assert (= ($Snap.second $t@10@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@11@01 $Snap)
(assert (= $t@11@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@12@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(push) ; 4
; [then-branch: 0 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 3)), $q0@12@01)) | live]
; [else-branch: 0 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 3)), $q0@12@01) | live]
(push) ; 5
; [then-branch: 0 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 3)), $q0@12@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@12@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 0 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 3)), $q0@12@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@12@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@12@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@12@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@12@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@12@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@12@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@12@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@665@11@665@354-aux|)))
(assert (forall (($q0@12@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@12@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@12@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@12@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@665@11@665@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int))
(declare-const $t@13@01 $Snap)
(assert (= $t@13@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int))
(declare-const $q0@14@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@14@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@14@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@14@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@666@11@666@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 4)): Int) &&
;   ($struct_get($struct_loc($self$0, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@15@01 $Snap)
(assert (= $t@15@01 ($Snap.combine ($Snap.first $t@15@01) ($Snap.second $t@15@01))))
(assert (= ($Snap.first $t@15@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4))))
(assert (= ($Snap.second $t@15@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 5)): Int) &&
;   ($struct_get($struct_loc($self$0, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@16@01 $Snap)
(assert (= $t@16@01 ($Snap.combine ($Snap.first $t@16@01) ($Snap.second $t@16@01))))
(assert (= ($Snap.first $t@16@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 5))))
(assert (= ($Snap.second $t@16@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@17@01 $Snap)
(assert (= $t@17@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@18@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(push) ; 4
; [then-branch: 1 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 7)), $q1@18@01)) | live]
; [else-branch: 1 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 7)), $q1@18@01) | live]
(push) ; 5
; [then-branch: 1 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 7)), $q1@18@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q1@18@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 1 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 7)), $q1@18@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q1@18@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q1@18@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q1@18@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@18@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q1@18@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q1@18@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q1@18@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@669@11@669@354-aux|)))
(assert (forall (($q1@18@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q1@18@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q1@18@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q1@18@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@669@11@669@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int))
(declare-const $t@19@01 $Snap)
(assert (= $t@19@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int))
(declare-const $q1@20@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@20@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q1@20@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q1@20@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@670@11@670@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@21@01 $Snap)
(assert (= $t@21@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@22@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(push) ; 4
; [then-branch: 2 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q2@22@01)) | live]
; [else-branch: 2 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q2@22@01) | live]
(push) ; 5
; [then-branch: 2 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q2@22@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q2@22@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 2 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q2@22@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q2@22@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q2@22@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q2@22@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@22@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q2@22@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q2@22@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q2@22@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@671@11@671@354-aux|)))
(assert (forall (($q2@22@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q2@22@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q2@22@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q2@22@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@671@11@671@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $t@23@01 $Snap)
(assert (= $t@23@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $q2@24@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@24@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q2@24@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q2@24@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@672@11@672@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@25@01 $Snap)
(assert (= $t@25@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$0, -1)): Int)
; [eval] $struct_loc($self$0, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 0)): Int) &&
;   ($struct_get($struct_loc($self$1, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@26@01 $Snap)
(assert (= $t@26@01 ($Snap.combine ($Snap.first $t@26@01) ($Snap.second $t@26@01))))
(assert (= ($Snap.first $t@26@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
(assert (= ($Snap.second $t@26@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 1)): Int) &&
;   ($struct_get($struct_loc($self$1, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@27@01 $Snap)
(assert (= $t@27@01 ($Snap.combine ($Snap.first $t@27@01) ($Snap.second $t@27@01))))
(assert (= ($Snap.first $t@27@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
(assert (= ($Snap.second $t@27@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 2)): Int) &&
;   ($struct_get($struct_loc($self$1, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@28@01 $Snap)
(assert (= $t@28@01 ($Snap.combine ($Snap.first $t@28@01) ($Snap.second $t@28@01))))
(assert (= ($Snap.first $t@28@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2))))
(assert (= ($Snap.second $t@28@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@29@01 $Snap)
(assert (= $t@29@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@30@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(push) ; 4
; [then-branch: 3 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 3)), $q0@30@01)) | live]
; [else-branch: 3 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 3)), $q0@30@01) | live]
(push) ; 5
; [then-branch: 3 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 3)), $q0@30@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@30@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 3 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 3)), $q0@30@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@30@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@30@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@30@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@30@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@30@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@30@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@30@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@677@11@677@354-aux|)))
(assert (forall (($q0@30@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@30@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@30@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@30@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@677@11@677@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int))
(declare-const $t@31@01 $Snap)
(assert (= $t@31@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int))
(declare-const $q0@32@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@32@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@32@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@32@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@678@11@678@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 4)): Int) &&
;   ($struct_get($struct_loc($self$1, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@33@01 $Snap)
(assert (= $t@33@01 ($Snap.combine ($Snap.first $t@33@01) ($Snap.second $t@33@01))))
(assert (= ($Snap.first $t@33@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))))
(assert (= ($Snap.second $t@33@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 5)): Int) &&
;   ($struct_get($struct_loc($self$1, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@34@01 $Snap)
(assert (= $t@34@01 ($Snap.combine ($Snap.first $t@34@01) ($Snap.second $t@34@01))))
(assert (= ($Snap.first $t@34@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 5))))
(assert (= ($Snap.second $t@34@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@35@01 $Snap)
(assert (= $t@35@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@36@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(push) ; 4
; [then-branch: 4 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 7)), $q1@36@01)) | live]
; [else-branch: 4 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 7)), $q1@36@01) | live]
(push) ; 5
; [then-branch: 4 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 7)), $q1@36@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q1@36@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 4 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 7)), $q1@36@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q1@36@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q1@36@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q1@36@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@36@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q1@36@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q1@36@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q1@36@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@681@11@681@354-aux|)))
(assert (forall (($q1@36@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q1@36@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q1@36@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q1@36@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@681@11@681@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int))
(declare-const $t@37@01 $Snap)
(assert (= $t@37@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int))
(declare-const $q1@38@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@38@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q1@38@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q1@38@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@682@11@682@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@39@01 $Snap)
(assert (= $t@39@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@40@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(push) ; 4
; [then-branch: 5 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q2@40@01)) | live]
; [else-branch: 5 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q2@40@01) | live]
(push) ; 5
; [then-branch: 5 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q2@40@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q2@40@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 5 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q2@40@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q2@40@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q2@40@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q2@40@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@40@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q2@40@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q2@40@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q2@40@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@683@11@683@354-aux|)))
(assert (forall (($q2@40@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q2@40@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q2@40@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q2@40@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@683@11@683@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $t@41@01 $Snap)
(assert (= $t@41@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $q2@42@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@42@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q2@42@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q2@42@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@684@11@684@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@43@01 $Snap)
(assert (= $t@43@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$1, -1)): Int)
; [eval] $struct_loc($self$1, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 0)): Int) &&
;   ($struct_get($struct_loc($self$2, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@44@01 $Snap)
(assert (= $t@44@01 ($Snap.combine ($Snap.first $t@44@01) ($Snap.second $t@44@01))))
(assert (= ($Snap.first $t@44@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
(assert (= ($Snap.second $t@44@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 1)): Int) &&
;   ($struct_get($struct_loc($self$2, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@45@01 $Snap)
(assert (= $t@45@01 ($Snap.combine ($Snap.first $t@45@01) ($Snap.second $t@45@01))))
(assert (= ($Snap.first $t@45@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
(assert (= ($Snap.second $t@45@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 2)): Int) &&
;   ($struct_get($struct_loc($self$2, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@46@01 $Snap)
(assert (= $t@46@01 ($Snap.combine ($Snap.first $t@46@01) ($Snap.second $t@46@01))))
(assert (= ($Snap.first $t@46@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2))))
(assert (= ($Snap.second $t@46@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@47@01 $Snap)
(assert (= $t@47@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@48@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 3)
(push) ; 4
; [then-branch: 6 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 3)), $q0@48@01)) | live]
; [else-branch: 6 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 3)), $q0@48@01) | live]
(push) ; 5
; [then-branch: 6 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 3)), $q0@48@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@48@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 6 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 3)), $q0@48@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@48@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@48@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@48@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@48@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@48@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@48@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@48@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@689@11@689@354-aux|)))
(assert (forall (($q0@48@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@48@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@48@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@48@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@689@11@689@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int))
(declare-const $t@49@01 $Snap)
(assert (= $t@49@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int))
(declare-const $q0@50@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 3)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@50@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@50@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@50@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@690@11@690@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 4)): Int) &&
;   ($struct_get($struct_loc($self$2, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@51@01 $Snap)
(assert (= $t@51@01 ($Snap.combine ($Snap.first $t@51@01) ($Snap.second $t@51@01))))
(assert (= ($Snap.first $t@51@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))))
(assert (= ($Snap.second $t@51@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$2, 5)): Int) &&
;   ($struct_get($struct_loc($self$2, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@52@01 $Snap)
(assert (= $t@52@01 ($Snap.combine ($Snap.first $t@52@01) ($Snap.second $t@52@01))))
(assert (= ($Snap.first $t@52@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] $struct_loc($self$2, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 5))))
(assert (= ($Snap.second $t@52@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] $struct_loc($self$2, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@53@01 $Snap)
(assert (= $t@53@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@54@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 7)
(push) ; 4
; [then-branch: 7 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 7)), $q1@54@01)) | live]
; [else-branch: 7 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 7)), $q1@54@01) | live]
(push) ; 5
; [then-branch: 7 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 7)), $q1@54@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q1@54@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 7 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 7)), $q1@54@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q1@54@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q1@54@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q1@54@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@54@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q1@54@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q1@54@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q1@54@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@693@11@693@354-aux|)))
(assert (forall (($q1@54@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q1@54@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q1@54@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q1@54@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@693@11@693@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])): Int))
(declare-const $t@55@01 $Snap)
(assert (= $t@55@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])): Int))
(declare-const $q1@56@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 7)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@56@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q1@56@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q1@56@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@694@11@694@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@57@01 $Snap)
(assert (= $t@57@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@58@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(push) ; 4
; [then-branch: 8 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q2@58@01)) | live]
; [else-branch: 8 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q2@58@01) | live]
(push) ; 5
; [then-branch: 8 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q2@58@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q2@58@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 8 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q2@58@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q2@58@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q2@58@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q2@58@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@58@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q2@58@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q2@58@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q2@58@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@695@11@695@354-aux|)))
(assert (forall (($q2@58@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q2@58@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q2@58@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q2@58@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@695@11@695@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int))
(declare-const $t@59@01 $Snap)
(assert (= $t@59@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int))
(declare-const $q2@60@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@60@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q2@60@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q2@60@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@696@11@696@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@61@01 $Snap)
(assert (= $t@61@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$2, -1)): Int)
; [eval] $struct_loc($self$2, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@62@01 $Snap)
(assert (= $t@62@01 ($Snap.combine ($Snap.first $t@62@01) ($Snap.second $t@62@01))))
(assert (= ($Snap.first $t@62@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 0))))
(assert (= ($Snap.second $t@62@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@63@01 $Snap)
(assert (= $t@63@01 ($Snap.combine ($Snap.first $t@63@01) ($Snap.second $t@63@01))))
(assert (= ($Snap.first $t@63@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 1))))
(assert (= ($Snap.second $t@63@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@64@01 $Snap)
(assert (= $t@64@01 ($Snap.combine ($Snap.first $t@64@01) ($Snap.second $t@64@01))))
(assert (= ($Snap.first $t@64@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 2))))
(assert (= ($Snap.second $t@64@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@65@01 $Snap)
(assert (= $t@65@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@6@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@66@01 $Snap)
(assert (= $t@66@01 ($Snap.combine ($Snap.first $t@66@01) ($Snap.second $t@66@01))))
(assert (= ($Snap.first $t@66@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 4))))
(assert (= ($Snap.second $t@66@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@67@01 $Snap)
(assert (= $t@67@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@68@01 $Snap)
(assert (= $t@68@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@69@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 1)): Int) ==
;   ($struct_get($struct_loc($self$0, 1)): Int)
(declare-const $t@70@01 $Snap)
(assert (= $t@70@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int)
(declare-const $t@71@01 $Snap)
(assert (= $t@71@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) == ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 2)): Int) ==
;   ($struct_get($struct_loc($self$0, 2)): Int)
(declare-const $t@72@01 $Snap)
(assert (= $t@72@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) == ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@73@01 $Snap)
(assert (= $t@73@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@74@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@74@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $a@74@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $a@74@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $a@74@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@708@11@708@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 1)): Int) ==
;   ($struct_get($struct_loc($self$0, 1)): Int)
(declare-const $t@75@01 $Snap)
(assert (= $t@75@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
(declare-const $t@76@01 $Snap)
(assert (= $t@76@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) == ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 2)): Int) ==
;   ($struct_get($struct_loc($self$0, 2)): Int)
(declare-const $t@77@01 $Snap)
(assert (= $t@77@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) == ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@78@01 $Snap)
(assert (= $t@78@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@79@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 7)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@79@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $a@79@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $a@79@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $a@79@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@712@11@712@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 1)): Int) ==
;   ($struct_get($struct_loc($self$1, 1)): Int)
(declare-const $t@80@01 $Snap)
(assert (= $t@80@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) == ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int)
(declare-const $t@81@01 $Snap)
(assert (= $t@81@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) == ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 3)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 2)): Int) ==
;   ($struct_get($struct_loc($self$1, 2)): Int)
(declare-const $t@82@01 $Snap)
(assert (= $t@82@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) == ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2))
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; assert ($struct_get($struct_loc($self$2, 1)): Int) ==
;   ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
; [exec]
; assert ($struct_get($struct_loc($self$2, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) == ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 3)
; [exec]
; assert ($struct_get($struct_loc($self$2, 2)): Int) ==
;   ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) == ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(push) ; 3
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2))))
(pop) ; 2
(pop) ; 1
; ---------- $reflexivity_check ----------
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var $self$0: $Struct
(declare-const $self$0@83@01 $Struct)
; [exec]
; var $$contracts$0: $Map[Int, $Struct]
(declare-const $$contracts$0@84@01 $Map<Int~_$Struct>)
; [exec]
; var $self$1: $Struct
(declare-const $self$1@85@01 $Struct)
; [exec]
; var $$contracts$1: $Map[Int, $Struct]
(declare-const $$contracts$1@86@01 $Map<Int~_$Struct>)
; [exec]
; var block: $Struct
(declare-const block@87@01 $Struct)
; [exec]
; var $post: Bool
(declare-const $post@88@01 Bool)
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 0)): Int) &&
;   ($struct_get($struct_loc($self$0, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@89@01 $Snap)
(assert (= $t@89@01 ($Snap.combine ($Snap.first $t@89@01) ($Snap.second $t@89@01))))
(assert (= ($Snap.first $t@89@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@83@01 0))))
(assert (= ($Snap.second $t@89@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@83@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 1)): Int) &&
;   ($struct_get($struct_loc($self$0, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@90@01 $Snap)
(assert (= $t@90@01 ($Snap.combine ($Snap.first $t@90@01) ($Snap.second $t@90@01))))
(assert (= ($Snap.first $t@90@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@83@01 1))))
(assert (= ($Snap.second $t@90@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@83@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 2)): Int) &&
;   ($struct_get($struct_loc($self$0, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@91@01 $Snap)
(assert (= $t@91@01 ($Snap.combine ($Snap.first $t@91@01) ($Snap.second $t@91@01))))
(assert (= ($Snap.first $t@91@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@83@01 2))))
(assert (= ($Snap.second $t@91@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@83@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@92@01 $Snap)
(assert (= $t@92@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@93@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(push) ; 4
; [then-branch: 9 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@83@01, 3)), $q0@93@01)) | live]
; [else-branch: 9 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@83@01, 3)), $q0@93@01) | live]
(push) ; 5
; [then-branch: 9 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@83@01, 3)), $q0@93@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 3)) $q0@93@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 9 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@83@01, 3)), $q0@93@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 3)) $q0@93@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 3)) $q0@93@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 3)) $q0@93@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@93@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 3)) $q0@93@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 3)) $q0@93@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 3)) $q0@93@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@732@11@732@354-aux|)))
(assert (forall (($q0@93@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 3)) $q0@93@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 3)) $q0@93@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 3)) $q0@93@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@732@11@732@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int))
(declare-const $t@94@01 $Snap)
(assert (= $t@94@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int))
(declare-const $q0@95@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@95@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 3)) $q0@95@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 3)) $q0@95@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@733@11@733@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 4)): Int) &&
;   ($struct_get($struct_loc($self$0, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@96@01 $Snap)
(assert (= $t@96@01 ($Snap.combine ($Snap.first $t@96@01) ($Snap.second $t@96@01))))
(assert (= ($Snap.first $t@96@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@83@01 4))))
(assert (= ($Snap.second $t@96@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@83@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 5)): Int) &&
;   ($struct_get($struct_loc($self$0, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@97@01 $Snap)
(assert (= $t@97@01 ($Snap.combine ($Snap.first $t@97@01) ($Snap.second $t@97@01))))
(assert (= ($Snap.first $t@97@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@83@01 5))))
(assert (= ($Snap.second $t@97@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@83@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@98@01 $Snap)
(assert (= $t@98@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@99@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(push) ; 4
; [then-branch: 10 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@83@01, 7)), $q1@99@01)) | live]
; [else-branch: 10 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@83@01, 7)), $q1@99@01) | live]
(push) ; 5
; [then-branch: 10 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@83@01, 7)), $q1@99@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 7)) $q1@99@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 10 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@83@01, 7)), $q1@99@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 7)) $q1@99@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 7)) $q1@99@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 7)) $q1@99@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@99@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 7)) $q1@99@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 7)) $q1@99@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 7)) $q1@99@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@736@11@736@354-aux|)))
(assert (forall (($q1@99@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 7)) $q1@99@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 7)) $q1@99@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 7)) $q1@99@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@736@11@736@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int))
(declare-const $t@100@01 $Snap)
(assert (= $t@100@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int))
(declare-const $q1@101@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@101@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 7)) $q1@101@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 7)) $q1@101@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@737@11@737@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@102@01 $Snap)
(assert (= $t@102@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@103@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(push) ; 4
; [then-branch: 11 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@83@01, 8)), $q2@103@01)) | live]
; [else-branch: 11 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@83@01, 8)), $q2@103@01) | live]
(push) ; 5
; [then-branch: 11 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@83@01, 8)), $q2@103@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 8)) $q2@103@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 11 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@83@01, 8)), $q2@103@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 8)) $q2@103@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 8)) $q2@103@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 8)) $q2@103@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@103@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 8)) $q2@103@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 8)) $q2@103@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 8)) $q2@103@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@738@11@738@354-aux|)))
(assert (forall (($q2@103@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 8)) $q2@103@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 8)) $q2@103@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 8)) $q2@103@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@738@11@738@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $t@104@01 $Snap)
(assert (= $t@104@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $q2@105@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@105@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 8)) $q2@105@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 8)) $q2@105@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@739@11@739@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@106@01 $Snap)
(assert (= $t@106@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$0, -1)): Int)
; [eval] $struct_loc($self$0, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@83@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 0)): Int) &&
;   ($struct_get($struct_loc($self$1, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@107@01 $Snap)
(assert (= $t@107@01 ($Snap.combine ($Snap.first $t@107@01) ($Snap.second $t@107@01))))
(assert (= ($Snap.first $t@107@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@85@01 0))))
(assert (= ($Snap.second $t@107@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@85@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 1)): Int) &&
;   ($struct_get($struct_loc($self$1, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@108@01 $Snap)
(assert (= $t@108@01 ($Snap.combine ($Snap.first $t@108@01) ($Snap.second $t@108@01))))
(assert (= ($Snap.first $t@108@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@85@01 1))))
(assert (= ($Snap.second $t@108@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@85@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 2)): Int) &&
;   ($struct_get($struct_loc($self$1, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@109@01 $Snap)
(assert (= $t@109@01 ($Snap.combine ($Snap.first $t@109@01) ($Snap.second $t@109@01))))
(assert (= ($Snap.first $t@109@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@85@01 2))))
(assert (= ($Snap.second $t@109@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@85@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@110@01 $Snap)
(assert (= $t@110@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@111@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(push) ; 4
; [then-branch: 12 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@85@01, 3)), $q0@111@01)) | live]
; [else-branch: 12 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@85@01, 3)), $q0@111@01) | live]
(push) ; 5
; [then-branch: 12 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@85@01, 3)), $q0@111@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 3)) $q0@111@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 12 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@85@01, 3)), $q0@111@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 3)) $q0@111@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 3)) $q0@111@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 3)) $q0@111@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@111@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 3)) $q0@111@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 3)) $q0@111@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 3)) $q0@111@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@744@11@744@354-aux|)))
(assert (forall (($q0@111@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 3)) $q0@111@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 3)) $q0@111@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 3)) $q0@111@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@744@11@744@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int))
(declare-const $t@112@01 $Snap)
(assert (= $t@112@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int))
(declare-const $q0@113@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@113@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 3)) $q0@113@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 3)) $q0@113@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@745@11@745@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 4)): Int) &&
;   ($struct_get($struct_loc($self$1, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@114@01 $Snap)
(assert (= $t@114@01 ($Snap.combine ($Snap.first $t@114@01) ($Snap.second $t@114@01))))
(assert (= ($Snap.first $t@114@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@85@01 4))))
(assert (= ($Snap.second $t@114@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@85@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 5)): Int) &&
;   ($struct_get($struct_loc($self$1, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@115@01 $Snap)
(assert (= $t@115@01 ($Snap.combine ($Snap.first $t@115@01) ($Snap.second $t@115@01))))
(assert (= ($Snap.first $t@115@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@85@01 5))))
(assert (= ($Snap.second $t@115@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@85@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@116@01 $Snap)
(assert (= $t@116@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@117@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(push) ; 4
; [then-branch: 13 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@85@01, 7)), $q1@117@01)) | live]
; [else-branch: 13 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@85@01, 7)), $q1@117@01) | live]
(push) ; 5
; [then-branch: 13 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@85@01, 7)), $q1@117@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 7)) $q1@117@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 13 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@85@01, 7)), $q1@117@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 7)) $q1@117@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 7)) $q1@117@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 7)) $q1@117@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@117@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 7)) $q1@117@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 7)) $q1@117@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 7)) $q1@117@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@748@11@748@354-aux|)))
(assert (forall (($q1@117@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 7)) $q1@117@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 7)) $q1@117@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 7)) $q1@117@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@748@11@748@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int))
(declare-const $t@118@01 $Snap)
(assert (= $t@118@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int))
(declare-const $q1@119@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@119@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 7)) $q1@119@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 7)) $q1@119@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@749@11@749@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@120@01 $Snap)
(assert (= $t@120@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@121@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(push) ; 4
; [then-branch: 14 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@85@01, 8)), $q2@121@01)) | live]
; [else-branch: 14 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@85@01, 8)), $q2@121@01) | live]
(push) ; 5
; [then-branch: 14 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@85@01, 8)), $q2@121@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 8)) $q2@121@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 14 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@85@01, 8)), $q2@121@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 8)) $q2@121@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 8)) $q2@121@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 8)) $q2@121@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@121@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 8)) $q2@121@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 8)) $q2@121@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 8)) $q2@121@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@750@11@750@354-aux|)))
(assert (forall (($q2@121@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 8)) $q2@121@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 8)) $q2@121@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 8)) $q2@121@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@750@11@750@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $t@122@01 $Snap)
(assert (= $t@122@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $q2@123@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@123@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 8)) $q2@123@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 8)) $q2@123@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@751@11@751@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@124@01 $Snap)
(assert (= $t@124@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$1, -1)): Int)
; [eval] $struct_loc($self$1, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@85@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@125@01 $Snap)
(assert (= $t@125@01 ($Snap.combine ($Snap.first $t@125@01) ($Snap.second $t@125@01))))
(assert (= ($Snap.first $t@125@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@87@01 0))))
(assert (= ($Snap.second $t@125@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@87@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@126@01 $Snap)
(assert (= $t@126@01 ($Snap.combine ($Snap.first $t@126@01) ($Snap.second $t@126@01))))
(assert (= ($Snap.first $t@126@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@87@01 1))))
(assert (= ($Snap.second $t@126@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@87@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@127@01 $Snap)
(assert (= $t@127@01 ($Snap.combine ($Snap.first $t@127@01) ($Snap.second $t@127@01))))
(assert (= ($Snap.first $t@127@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@87@01 2))))
(assert (= ($Snap.second $t@127@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@87@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@128@01 $Snap)
(assert (= $t@128@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@87@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@129@01 $Snap)
(assert (= $t@129@01 ($Snap.combine ($Snap.first $t@129@01) ($Snap.second $t@129@01))))
(assert (= ($Snap.first $t@129@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@87@01 4))))
(assert (= ($Snap.second $t@129@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@87@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@130@01 $Snap)
(assert (= $t@130@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@87@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@131@01 $Snap)
(assert (= $t@131@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@132@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@132@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 7)) $a@132@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@83@01 7)) $a@132@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 7)) $a@132@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@759@11@759@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 1)): Int) ==
;   ($struct_get($struct_loc($self$0, 1)): Int)
(declare-const $t@133@01 $Snap)
(assert (= $t@133@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@85@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@83@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
(declare-const $t@134@01 $Snap)
(assert (= $t@134@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) == ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@85@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@85@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 2)): Int) ==
;   ($struct_get($struct_loc($self$0, 2)): Int)
(declare-const $t@135@01 $Snap)
(assert (= $t@135@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) == ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@85@01 2))
  ($struct_get<Int> ($struct_loc<Int> $self$0@83@01 2))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; assert ($struct_get($struct_loc($self$1, 1)): Int) ==
;   ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) == ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [exec]
; assert ($struct_get($struct_loc($self$1, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) == ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
; [exec]
; assert ($struct_get($struct_loc($self$1, 2)): Int) ==
;   ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) == ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(pop) ; 2
(pop) ; 1
; ---------- $forced_ether_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var self: $Struct
(declare-const self@136@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@137@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@138@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@139@01 $Map<Int~_$Struct>)
; [exec]
; var $post: Bool
(declare-const $post@140@01 Bool)
; [exec]
; var $havoc: Int
(declare-const $havoc@141@01 Int)
; [exec]
; var block: $Struct
(declare-const block@142@01 $Struct)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@143@01 $Snap)
(assert (= $t@143@01 ($Snap.combine ($Snap.first $t@143@01) ($Snap.second $t@143@01))))
(assert (= ($Snap.first $t@143@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@136@01 0))))
(assert (= ($Snap.second $t@143@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@136@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@144@01 $Snap)
(assert (= $t@144@01 ($Snap.combine ($Snap.first $t@144@01) ($Snap.second $t@144@01))))
(assert (= ($Snap.first $t@144@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@136@01 1))))
(assert (= ($Snap.second $t@144@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@136@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@145@01 $Snap)
(assert (= $t@145@01 ($Snap.combine ($Snap.first $t@145@01) ($Snap.second $t@145@01))))
(assert (= ($Snap.first $t@145@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@136@01 2))))
(assert (= ($Snap.second $t@145@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@136@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@146@01 $Snap)
(assert (= $t@146@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@147@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 15 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@136@01, 3)), $q0@147@01)) | live]
; [else-branch: 15 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@136@01, 3)), $q0@147@01) | live]
(push) ; 5
; [then-branch: 15 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@136@01, 3)), $q0@147@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 3)) $q0@147@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 15 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@136@01, 3)), $q0@147@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 3)) $q0@147@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 3)) $q0@147@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 3)) $q0@147@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@147@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 3)) $q0@147@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 3)) $q0@147@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 3)) $q0@147@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@780@11@780@345-aux|)))
(assert (forall (($q0@147@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 3)) $q0@147@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 3)) $q0@147@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 3)) $q0@147@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@780@11@780@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@148@01 $Snap)
(assert (= $t@148@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@149@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@149@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 3)) $q0@149@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 3)) $q0@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@781@11@781@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@150@01 $Snap)
(assert (= $t@150@01 ($Snap.combine ($Snap.first $t@150@01) ($Snap.second $t@150@01))))
(assert (= ($Snap.first $t@150@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@136@01 4))))
(assert (= ($Snap.second $t@150@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@136@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@151@01 $Snap)
(assert (= $t@151@01 ($Snap.combine ($Snap.first $t@151@01) ($Snap.second $t@151@01))))
(assert (= ($Snap.first $t@151@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@136@01 5))))
(assert (= ($Snap.second $t@151@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@136@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@152@01 $Snap)
(assert (= $t@152@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@153@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 16 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@136@01, 7)), $q1@153@01)) | live]
; [else-branch: 16 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@136@01, 7)), $q1@153@01) | live]
(push) ; 5
; [then-branch: 16 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@136@01, 7)), $q1@153@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 7)) $q1@153@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 16 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@136@01, 7)), $q1@153@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 7)) $q1@153@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 7)) $q1@153@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 7)) $q1@153@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@153@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 7)) $q1@153@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 7)) $q1@153@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 7)) $q1@153@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@784@11@784@345-aux|)))
(assert (forall (($q1@153@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 7)) $q1@153@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 7)) $q1@153@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 7)) $q1@153@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@784@11@784@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@154@01 $Snap)
(assert (= $t@154@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q1@155@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@155@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 7)) $q1@155@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 7)) $q1@155@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@785@11@785@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@156@01 $Snap)
(assert (= $t@156@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@157@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 17 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@136@01, 8)), $q2@157@01)) | live]
; [else-branch: 17 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@136@01, 8)), $q2@157@01) | live]
(push) ; 5
; [then-branch: 17 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@136@01, 8)), $q2@157@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 8)) $q2@157@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 17 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@136@01, 8)), $q2@157@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 8)) $q2@157@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 8)) $q2@157@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 8)) $q2@157@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@157@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 8)) $q2@157@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 8)) $q2@157@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 8)) $q2@157@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@786@11@786@345-aux|)))
(assert (forall (($q2@157@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 8)) $q2@157@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 8)) $q2@157@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 8)) $q2@157@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@786@11@786@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@158@01 $Snap)
(assert (= $t@158@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q2@159@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@159@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 8)) $q2@159@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 8)) $q2@159@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@787@11@787@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@160@01 $Snap)
(assert (= $t@160@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@136@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 0)): Int) &&
;   ($struct_get($struct_loc($pre_self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@161@01 $Snap)
(assert (= $t@161@01 ($Snap.combine ($Snap.first $t@161@01) ($Snap.second $t@161@01))))
(assert (= ($Snap.first $t@161@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@138@01 0))))
(assert (= ($Snap.second $t@161@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@138@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 1)): Int) &&
;   ($struct_get($struct_loc($pre_self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@162@01 $Snap)
(assert (= $t@162@01 ($Snap.combine ($Snap.first $t@162@01) ($Snap.second $t@162@01))))
(assert (= ($Snap.first $t@162@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@138@01 1))))
(assert (= ($Snap.second $t@162@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@138@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 2)): Int) &&
;   ($struct_get($struct_loc($pre_self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@163@01 $Snap)
(assert (= $t@163@01 ($Snap.combine ($Snap.first $t@163@01) ($Snap.second $t@163@01))))
(assert (= ($Snap.first $t@163@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] $struct_loc($pre_self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@138@01 2))))
(assert (= ($Snap.second $t@163@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] $struct_loc($pre_self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@138@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@164@01 $Snap)
(assert (= $t@164@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@165@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 3)
(push) ; 4
; [then-branch: 18 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@138@01, 3)), $q0@165@01)) | live]
; [else-branch: 18 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@138@01, 3)), $q0@165@01) | live]
(push) ; 5
; [then-branch: 18 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@138@01, 3)), $q0@165@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 3)) $q0@165@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 18 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@138@01, 3)), $q0@165@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 3)) $q0@165@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 3)) $q0@165@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 3)) $q0@165@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@165@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 3)) $q0@165@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 3)) $q0@165@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 3)) $q0@165@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@792@11@792@360-aux|)))
(assert (forall (($q0@165@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 3)) $q0@165@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 3)) $q0@165@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 3)) $q0@165@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@792@11@792@360|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])): Int))
(declare-const $t@166@01 $Snap)
(assert (= $t@166@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@167@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 3)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@167@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 3)) $q0@167@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 3)) $q0@167@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@793@11@793@268|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc($pre_self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@168@01 $Snap)
(assert (= $t@168@01 ($Snap.combine ($Snap.first $t@168@01) ($Snap.second $t@168@01))))
(assert (= ($Snap.first $t@168@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] $struct_loc($pre_self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@138@01 4))))
(assert (= ($Snap.second $t@168@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] $struct_loc($pre_self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@138@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($pre_self, 5)): Int) &&
;   ($struct_get($struct_loc($pre_self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@169@01 $Snap)
(assert (= $t@169@01 ($Snap.combine ($Snap.first $t@169@01) ($Snap.second $t@169@01))))
(assert (= ($Snap.first $t@169@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($pre_self, 5)): Int)
; [eval] $struct_loc($pre_self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $pre_self@138@01 5))))
(assert (= ($Snap.second $t@169@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($pre_self, 5)): Int)
; [eval] $struct_loc($pre_self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@138@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@170@01 $Snap)
(assert (= $t@170@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@171@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
(push) ; 4
; [then-branch: 19 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@138@01, 7)), $q1@171@01)) | live]
; [else-branch: 19 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@138@01, 7)), $q1@171@01) | live]
(push) ; 5
; [then-branch: 19 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@138@01, 7)), $q1@171@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 7)) $q1@171@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 19 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@138@01, 7)), $q1@171@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 7)) $q1@171@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 7)) $q1@171@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 7)) $q1@171@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@171@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 7)) $q1@171@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 7)) $q1@171@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 7)) $q1@171@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@796@11@796@360-aux|)))
(assert (forall (($q1@171@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 7)) $q1@171@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 7)) $q1@171@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 7)) $q1@171@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@796@11@796@360|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])): Int))
(declare-const $t@172@01 $Snap)
(assert (= $t@172@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])): Int))
(declare-const $q1@173@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@173@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 7)) $q1@173@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 7)) $q1@173@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@797@11@797@268|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@174@01 $Snap)
(assert (= $t@174@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@175@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(push) ; 4
; [then-branch: 20 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@138@01, 8)), $q2@175@01)) | live]
; [else-branch: 20 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@138@01, 8)), $q2@175@01) | live]
(push) ; 5
; [then-branch: 20 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@138@01, 8)), $q2@175@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 8)) $q2@175@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 20 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@138@01, 8)), $q2@175@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 8)) $q2@175@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 8)) $q2@175@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 8)) $q2@175@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@175@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 8)) $q2@175@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 8)) $q2@175@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 8)) $q2@175@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@798@11@798@360-aux|)))
(assert (forall (($q2@175@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 8)) $q2@175@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 8)) $q2@175@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 8)) $q2@175@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@798@11@798@360|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int))
(declare-const $t@176@01 $Snap)
(assert (= $t@176@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int))
(declare-const $q2@177@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@177@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 8)) $q2@177@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@138@01 8)) $q2@177@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@799@11@799@268|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($pre_self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@178@01 $Snap)
(assert (= $t@178@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($pre_self, -1)): Int)
; [eval] $struct_loc($pre_self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@138@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@179@01 $Snap)
(assert (= $t@179@01 ($Snap.combine ($Snap.first $t@179@01) ($Snap.second $t@179@01))))
(assert (= ($Snap.first $t@179@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@142@01 0))))
(assert (= ($Snap.second $t@179@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@142@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@180@01 $Snap)
(assert (= $t@180@01 ($Snap.combine ($Snap.first $t@180@01) ($Snap.second $t@180@01))))
(assert (= ($Snap.first $t@180@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@142@01 1))))
(assert (= ($Snap.second $t@180@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@142@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@181@01 $Snap)
(assert (= $t@181@01 ($Snap.combine ($Snap.first $t@181@01) ($Snap.second $t@181@01))))
(assert (= ($Snap.first $t@181@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@142@01 2))))
(assert (= ($Snap.second $t@181@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@142@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@182@01 $Snap)
(assert (= $t@182@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@142@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@183@01 $Snap)
(assert (= $t@183@01 ($Snap.combine ($Snap.first $t@183@01) ($Snap.second $t@183@01))))
(assert (= ($Snap.first $t@183@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@142@01 4))))
(assert (= ($Snap.second $t@183@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@142@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@184@01 $Snap)
(assert (= $t@184@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@142@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale $havoc >= 0
(declare-const $t@185@01 $Snap)
(assert (= $t@185@01 $Snap.unit))
; [eval] $havoc >= 0
(assert (>= $havoc@141@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@186@01 $Snap)
(assert (= $t@186@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@187@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@188@01 $Snap)
(assert (= $t@188@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(declare-const $t@189@01 $Snap)
(assert (= $t@189@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@136@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@136@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc(self, 2)): Int)
(declare-const $t@190@01 $Snap)
(assert (= $t@190@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   $havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + $havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + $havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@191@01 $Struct)
(assert (=
  self@191@01
  ($struct_set<$Struct> self@136@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@136@01 4))
    $havoc@141@01))))
(pop) ; 2
(pop) ; 1
; ---------- f$__init__ ----------
(declare-const l$_company@192@01 Int)
(declare-const l$_total_shares@193@01 $Int)
(declare-const l$initial_price@194@01 $Int)
(declare-const $succ@195@01 Bool)
(declare-const l$_company@196@01 Int)
(declare-const l$_total_shares@197@01 $Int)
(declare-const l$initial_price@198@01 $Int)
(declare-const $succ@199@01 Bool)
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@200@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@201@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@202@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@203@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@204@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@205@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@206@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@207@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@208@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@209@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@210@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@211@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@212@01 Bool)
; [exec]
; var $first_public_state: Bool
(declare-const $first_public_state@213@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@214@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@215@01 Bool)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@216@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@217@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@218@01 $Snap)
(assert (= $t@218@01 ($Snap.combine ($Snap.first $t@218@01) ($Snap.second $t@218@01))))
(assert (= ($Snap.first $t@218@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@204@01 0))))
(assert (= ($Snap.second $t@218@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@204@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@219@01 $Snap)
(assert (= $t@219@01 ($Snap.combine ($Snap.first $t@219@01) ($Snap.second $t@219@01))))
(assert (= ($Snap.first $t@219@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@204@01 1))))
(assert (= ($Snap.second $t@219@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@204@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@220@01 $Snap)
(assert (= $t@220@01 ($Snap.combine ($Snap.first $t@220@01) ($Snap.second $t@220@01))))
(assert (= ($Snap.first $t@220@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@204@01 2))))
(assert (= ($Snap.second $t@220@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@204@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@221@01 $Snap)
(assert (= $t@221@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@222@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 21 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 3)), $q0@222@01)) | live]
; [else-branch: 21 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 3)), $q0@222@01) | live]
(push) ; 5
; [then-branch: 21 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 3)), $q0@222@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q0@222@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 21 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 3)), $q0@222@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q0@222@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q0@222@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q0@222@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@222@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q0@222@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q0@222@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q0@222@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@842@11@842@345-aux|)))
(assert (forall (($q0@222@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q0@222@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q0@222@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q0@222@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@842@11@842@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@223@01 $Snap)
(assert (= $t@223@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@224@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@224@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q0@224@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q0@224@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@843@11@843@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@225@01 $Snap)
(assert (= $t@225@01 ($Snap.combine ($Snap.first $t@225@01) ($Snap.second $t@225@01))))
(assert (= ($Snap.first $t@225@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@204@01 4))))
(assert (= ($Snap.second $t@225@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@204@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@226@01 $Snap)
(assert (= $t@226@01 ($Snap.combine ($Snap.first $t@226@01) ($Snap.second $t@226@01))))
(assert (= ($Snap.first $t@226@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@204@01 5))))
(assert (= ($Snap.second $t@226@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@204@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@227@01 $Snap)
(assert (= $t@227@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@228@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 22 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 7)), $q1@228@01)) | live]
; [else-branch: 22 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 7)), $q1@228@01) | live]
(push) ; 5
; [then-branch: 22 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 7)), $q1@228@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q1@228@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 22 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 7)), $q1@228@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q1@228@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q1@228@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q1@228@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@228@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q1@228@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q1@228@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q1@228@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@846@11@846@345-aux|)))
(assert (forall (($q1@228@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q1@228@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q1@228@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q1@228@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@846@11@846@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@229@01 $Snap)
(assert (= $t@229@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q1@230@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@230@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q1@230@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q1@230@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@847@11@847@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@231@01 $Snap)
(assert (= $t@231@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@232@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 23 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 8)), $q2@232@01)) | live]
; [else-branch: 23 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 8)), $q2@232@01) | live]
(push) ; 5
; [then-branch: 23 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 8)), $q2@232@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q2@232@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 23 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 8)), $q2@232@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q2@232@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q2@232@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q2@232@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@232@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q2@232@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q2@232@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q2@232@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@848@11@848@345-aux|)))
(assert (forall (($q2@232@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q2@232@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q2@232@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q2@232@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@848@11@848@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@233@01 $Snap)
(assert (= $t@233@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q2@234@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@234@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q2@234@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q2@234@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@849@11@849@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@235@01 $Snap)
(assert (= $t@235@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@204@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@236@01 $Snap)
(assert (= $t@236@01 ($Snap.combine ($Snap.first $t@236@01) ($Snap.second $t@236@01))))
(assert (= ($Snap.first $t@236@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@236@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$_company &&
;   l$_company <= 1461501637330902918203684832716283019655932542975
(declare-const $t@237@01 $Snap)
(assert (= $t@237@01 ($Snap.combine ($Snap.first $t@237@01) ($Snap.second $t@237@01))))
(assert (= ($Snap.first $t@237@01) $Snap.unit))
; [eval] 0 <= l$_company
(assert (<= 0 l$_company@196@01))
(assert (= ($Snap.second $t@237@01) $Snap.unit))
; [eval] l$_company <= 1461501637330902918203684832716283019655932542975
(assert (<= l$_company@196@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $unwrap(l$_total_shares) &&
;   $unwrap(l$_total_shares) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@238@01 $Snap)
(assert (= $t@238@01 ($Snap.combine ($Snap.first $t@238@01) ($Snap.second $t@238@01))))
(assert (= ($Snap.first $t@238@01) $Snap.unit))
; [eval] 0 <= $unwrap(l$_total_shares)
; [eval] $unwrap(l$_total_shares)
(assert (<= 0 ($unwrap<Int> l$_total_shares@197@01)))
(assert (= ($Snap.second $t@238@01) $Snap.unit))
; [eval] $unwrap(l$_total_shares) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$_total_shares)
(assert (<=
  ($unwrap<Int> l$_total_shares@197@01)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $unwrap(l$initial_price) &&
;   $unwrap(l$initial_price) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@239@01 $Snap)
(assert (= $t@239@01 ($Snap.combine ($Snap.first $t@239@01) ($Snap.second $t@239@01))))
(assert (= ($Snap.first $t@239@01) $Snap.unit))
; [eval] 0 <= $unwrap(l$initial_price)
; [eval] $unwrap(l$initial_price)
(assert (<= 0 ($unwrap<Int> l$initial_price@198@01)))
(assert (= ($Snap.second $t@239@01) $Snap.unit))
; [eval] $unwrap(l$initial_price) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$initial_price)
(assert (<=
  ($unwrap<Int> l$initial_price@198@01)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@240@01 $Snap)
(assert (= $t@240@01 ($Snap.combine ($Snap.first $t@240@01) ($Snap.second $t@240@01))))
(assert (= ($Snap.first $t@240@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@201@01 0))))
(assert (= ($Snap.second $t@240@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@201@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@241@01 $Snap)
(assert (= $t@241@01 ($Snap.combine ($Snap.first $t@241@01) ($Snap.second $t@241@01))))
(assert (= ($Snap.first $t@241@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@201@01 1))))
(assert (= ($Snap.second $t@241@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@201@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@242@01 $Snap)
(assert (= $t@242@01 ($Snap.combine ($Snap.first $t@242@01) ($Snap.second $t@242@01))))
(assert (= ($Snap.first $t@242@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@201@01 2))))
(assert (= ($Snap.second $t@242@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@201@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@243@01 $Snap)
(assert (= $t@243@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@201@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@244@01 $Snap)
(assert (= $t@244@01 ($Snap.combine ($Snap.first $t@244@01) ($Snap.second $t@244@01))))
(assert (= ($Snap.first $t@244@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@201@01 4))))
(assert (= ($Snap.second $t@244@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@201@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@245@01 $Snap)
(assert (= $t@245@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@201@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@246@01 $Snap)
(assert (= $t@246@01 ($Snap.combine ($Snap.first $t@246@01) ($Snap.second $t@246@01))))
(assert (= ($Snap.first $t@246@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@200@01 0))))
(assert (= ($Snap.second $t@246@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@200@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@247@01 $Snap)
(assert (= $t@247@01 ($Snap.combine ($Snap.first $t@247@01) ($Snap.second $t@247@01))))
(assert (= ($Snap.first $t@247@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@200@01 1))))
(assert (= ($Snap.second $t@247@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@200@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@248@01 $Snap)
(assert (= $t@248@01 ($Snap.combine ($Snap.first $t@248@01) ($Snap.second $t@248@01))))
(assert (= ($Snap.first $t@248@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@200@01 2))))
(assert (= ($Snap.second $t@248@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@200@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@249@01 $Snap)
(assert (= $t@249@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@200@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@250@01 $Snap)
(assert (= $t@250@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@200@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; $first_public_state := true
; [exec]
; self := s$struct$self$init(0, 0, 0, ($map_init(0): $Map[Int, Int]), 0, 0, false,
;   ($map_init(0): $Map[Int, Int]), ($map_init(0): $Map[Int, Int]), false)
; [eval] s$struct$self$init(0, 0, 0, ($map_init(0): $Map[Int, Int]), 0, 0, false, ($map_init(0): $Map[Int, Int]), ($map_init(0): $Map[Int, Int]), false)
; [eval] ($map_init(0): $Map[Int, Int])
; [eval] ($map_init(0): $Map[Int, Int])
; [eval] ($map_init(0): $Map[Int, Int])
(declare-const self@251@01 $Struct)
(assert (=
  self@251@01
  (s$struct$self$init<$Struct> 0 0 0 ($map_init<$Map<Int~_Int>> 0) 0 0 false ($map_init<$Map<Int~_Int>> 0) ($map_init<$Map<Int~_Int>> 0) false)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@252@01 $Snap)
(assert (= $t@252@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@214@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@253@01 $Struct)
(assert (=
  self@253@01
  ($struct_set<$Struct> self@251@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@251@01 4))
    l$havoc@214@01))))
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@254@01 $Snap)
(assert (= $t@254@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@200@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !($unwrap(l$_total_shares) > 0)
; [eval] $unwrap(l$_total_shares) > 0
; [eval] $unwrap(l$_total_shares)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (> ($unwrap<Int> l$_total_shares@197@01) 0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (> ($unwrap<Int> l$_total_shares@197@01) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 24 | !($unwrap[Int](l$_total_shares@197@01) > 0) | live]
; [else-branch: 24 | $unwrap[Int](l$_total_shares@197@01) > 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 24 | !($unwrap[Int](l$_total_shares@197@01) > 0)]
(assert (not (> ($unwrap<Int> l$_total_shares@197@01) 0)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 25 | True | live]
; [else-branch: 25 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 25 | True]
; [exec]
; $old_self := self
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 26 | True | live]
; [else-branch: 26 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 26 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@255@01 $Snap)
(assert (= $t@255@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@216@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@256@01 $Struct)
(assert (=
  self@256@01
  ($struct_set<$Struct> self@204@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@204@01 4))
    l$havoc$1@216@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 27 | True | live]
; [else-branch: 27 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 27 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
(push) ; 7
; [then-branch: 28 | False | dead]
; [else-branch: 28 | True | live]
(push) ; 8
; [else-branch: 28 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(push) ; 7
; [then-branch: 29 | False | dead]
; [else-branch: 29 | True | live]
(push) ; 8
; [else-branch: 29 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
(push) ; 7
; [then-branch: 30 | False | dead]
; [else-branch: 30 | True | live]
(push) ; 8
; [else-branch: 30 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
; [eval] !$first_public_state
; [then-branch: 31 | False | dead]
; [else-branch: 31 | True | live]
(push) ; 6
; [else-branch: 31 | True]
(pop) ; 6
(pop) ; 5
; [then-branch: 32 | False | dead]
; [else-branch: 32 | True | live]
(push) ; 5
; [else-branch: 32 | True]
(pop) ; 5
(pop) ; 4
; [eval] !$first_public_state
; [then-branch: 33 | False | dead]
; [else-branch: 33 | True | live]
(push) ; 4
; [else-branch: 33 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 24 | $unwrap[Int](l$_total_shares@197@01) > 0]
(assert (> ($unwrap<Int> l$_total_shares@197@01) 0))
(pop) ; 3
; [eval] !!($unwrap(l$_total_shares) > 0)
; [eval] !($unwrap(l$_total_shares) > 0)
; [eval] $unwrap(l$_total_shares) > 0
; [eval] $unwrap(l$_total_shares)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (> ($unwrap<Int> l$_total_shares@197@01) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (> ($unwrap<Int> l$_total_shares@197@01) 0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 34 | $unwrap[Int](l$_total_shares@197@01) > 0 | live]
; [else-branch: 34 | !($unwrap[Int](l$_total_shares@197@01) > 0) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 34 | $unwrap[Int](l$_total_shares@197@01) > 0]
(assert (> ($unwrap<Int> l$_total_shares@197@01) 0))
; [eval] !($unwrap(l$initial_price) > 0)
; [eval] $unwrap(l$initial_price) > 0
; [eval] $unwrap(l$initial_price)
(push) ; 4
(set-option :timeout 10)
(assert (not (> ($unwrap<Int> l$initial_price@198@01) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (> ($unwrap<Int> l$initial_price@198@01) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 35 | !($unwrap[Int](l$initial_price@198@01) > 0) | live]
; [else-branch: 35 | $unwrap[Int](l$initial_price@198@01) > 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 35 | !($unwrap[Int](l$initial_price@198@01) > 0)]
(assert (not (> ($unwrap<Int> l$initial_price@198@01) 0)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 36 | True | live]
; [else-branch: 36 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 36 | True]
; [exec]
; $old_self := self
; [eval] !$succ
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 37 | True | live]
; [else-branch: 37 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 37 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@257@01 $Snap)
(assert (= $t@257@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@216@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@258@01 $Struct)
(assert (=
  self@258@01
  ($struct_set<$Struct> self@204@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@204@01 4))
    l$havoc$1@216@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 38 | True | live]
; [else-branch: 38 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 38 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
(push) ; 8
; [then-branch: 39 | False | dead]
; [else-branch: 39 | True | live]
(push) ; 9
; [else-branch: 39 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(push) ; 8
; [then-branch: 40 | False | dead]
; [else-branch: 40 | True | live]
(push) ; 9
; [else-branch: 40 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
(push) ; 8
; [then-branch: 41 | False | dead]
; [else-branch: 41 | True | live]
(push) ; 9
; [else-branch: 41 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(pop) ; 7
; [eval] !$first_public_state
; [then-branch: 42 | False | dead]
; [else-branch: 42 | True | live]
(push) ; 7
; [else-branch: 42 | True]
(pop) ; 7
(pop) ; 6
; [then-branch: 43 | False | dead]
; [else-branch: 43 | True | live]
(push) ; 6
; [else-branch: 43 | True]
(pop) ; 6
(pop) ; 5
; [eval] !$first_public_state
; [then-branch: 44 | False | dead]
; [else-branch: 44 | True | live]
(push) ; 5
; [else-branch: 44 | True]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 35 | $unwrap[Int](l$initial_price@198@01) > 0]
(assert (> ($unwrap<Int> l$initial_price@198@01) 0))
(pop) ; 4
; [eval] !!($unwrap(l$initial_price) > 0)
; [eval] !($unwrap(l$initial_price) > 0)
; [eval] $unwrap(l$initial_price) > 0
; [eval] $unwrap(l$initial_price)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (> ($unwrap<Int> l$initial_price@198@01) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (> ($unwrap<Int> l$initial_price@198@01) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 45 | $unwrap[Int](l$initial_price@198@01) > 0 | live]
; [else-branch: 45 | !($unwrap[Int](l$initial_price@198@01) > 0) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 45 | $unwrap[Int](l$initial_price@198@01) > 0]
(assert (> ($unwrap<Int> l$initial_price@198@01) 0))
; [exec]
; self := ($struct_set(self, 0, l$_company): $Struct)
; [eval] ($struct_set(self, 0, l$_company): $Struct)
(declare-const self@259@01 $Struct)
(assert (= self@259@01 ($struct_set<$Struct> self@253@01 0 l$_company@196@01)))
; [exec]
; self := ($struct_set(self, 1, $unwrap(l$_total_shares)): $Struct)
; [eval] ($struct_set(self, 1, $unwrap(l$_total_shares)): $Struct)
; [eval] $unwrap(l$_total_shares)
(declare-const self@260@01 $Struct)
(assert (=
  self@260@01
  ($struct_set<$Struct> self@259@01 1 ($unwrap<Int> l$_total_shares@197@01))))
; [exec]
; self := ($struct_set(self, 2, $unwrap(l$initial_price)): $Struct)
; [eval] ($struct_set(self, 2, $unwrap(l$initial_price)): $Struct)
; [eval] $unwrap(l$initial_price)
(declare-const self@261@01 $Struct)
(assert (=
  self@261@01
  ($struct_set<$Struct> self@260@01 2 ($unwrap<Int> l$initial_price@198@01))))
; [exec]
; self := ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 0)): Int), $unwrap(l$_total_shares)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), $unwrap(l$_total_shares)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), $unwrap(l$_total_shares)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$_total_shares)
(declare-const self@262@01 $Struct)
(assert (=
  self@262@01
  ($struct_set<$Struct> self@261@01 3 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@261@01 3)) ($struct_get<Int> ($struct_loc<Int> self@261@01 0)) ($unwrap<Int> l$_total_shares@197@01)))))
; [exec]
; label return
(push) ; 5
(set-option :timeout 10)
(assert (not (not $out_of_gas@215@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not $out_of_gas@215@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 46 | $out_of_gas@215@01 | live]
; [else-branch: 46 | !($out_of_gas@215@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 46 | $out_of_gas@215@01]
(assert $out_of_gas@215@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 47 | True | live]
; [else-branch: 47 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 47 | True]
; [exec]
; $old_self := self
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 48 | True | live]
; [else-branch: 48 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 48 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@263@01 $Snap)
(assert (= $t@263@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@216@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@264@01 $Struct)
(assert (=
  self@264@01
  ($struct_set<$Struct> self@204@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@204@01 4))
    l$havoc$1@216@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 49 | True | live]
; [else-branch: 49 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 49 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
(push) ; 9
; [then-branch: 50 | False | dead]
; [else-branch: 50 | True | live]
(push) ; 10
; [else-branch: 50 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(push) ; 9
; [then-branch: 51 | False | dead]
; [else-branch: 51 | True | live]
(push) ; 10
; [else-branch: 51 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
(push) ; 9
; [then-branch: 52 | False | dead]
; [else-branch: 52 | True | live]
(push) ; 10
; [else-branch: 52 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
; [eval] !$first_public_state
; [then-branch: 53 | False | dead]
; [else-branch: 53 | True | live]
(push) ; 8
; [else-branch: 53 | True]
(pop) ; 8
(pop) ; 7
; [then-branch: 54 | False | dead]
; [else-branch: 54 | True | live]
(push) ; 7
; [else-branch: 54 | True]
(pop) ; 7
(pop) ; 6
; [eval] !$first_public_state
; [then-branch: 55 | False | dead]
; [else-branch: 55 | True | live]
(push) ; 6
; [else-branch: 55 | True]
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 46 | !($out_of_gas@215@01)]
(assert (not $out_of_gas@215@01))
(pop) ; 5
; [eval] !$out_of_gas
(push) ; 5
(set-option :timeout 10)
(assert (not $out_of_gas@215@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not $out_of_gas@215@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 56 | !($out_of_gas@215@01) | live]
; [else-branch: 56 | $out_of_gas@215@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 56 | !($out_of_gas@215@01)]
(assert (not $out_of_gas@215@01))
; [exec]
; label end
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 57 | True | live]
; [else-branch: 57 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 57 | True]
; [exec]
; $old_self := self
; [eval] !$succ
; [then-branch: 58 | False | dead]
; [else-branch: 58 | True | live]
(push) ; 7
; [else-branch: 58 | True]
(pop) ; 7
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 59 | True | live]
; [else-branch: 59 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 59 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@265@01 $Snap)
(assert (= $t@265@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@216@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@266@01 $Struct)
(assert (=
  self@266@01
  ($struct_set<$Struct> self@262@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@262@01 4))
    l$havoc$1@216@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 60 | True | live]
; [else-branch: 60 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 60 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 61 | True | live]
; [else-branch: 61 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 61 | True]
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 62 | True | live]
; [else-branch: 62 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 62 | True]
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@266@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@266@01 3))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@266@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@266@01 3)))))
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 63 | True | live]
; [else-branch: 63 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 63 | True]
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
; [eval] !$first_public_state
; [then-branch: 64 | False | dead]
; [else-branch: 64 | True | live]
(push) ; 8
; [else-branch: 64 | True]
(pop) ; 8
(pop) ; 7
(pop) ; 6
; [eval] !$first_public_state
; [then-branch: 65 | False | dead]
; [else-branch: 65 | True | live]
(push) ; 6
; [else-branch: 65 | True]
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 56 | $out_of_gas@215@01]
(assert $out_of_gas@215@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 45 | !($unwrap[Int](l$initial_price@198@01) > 0)]
(assert (not (> ($unwrap<Int> l$initial_price@198@01) 0)))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 34 | !($unwrap[Int](l$_total_shares@197@01) > 0)]
(assert (not (> ($unwrap<Int> l$_total_shares@197@01) 0)))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$stockAvailable ----------
(declare-const $succ@267@01 Bool)
(declare-const $res@268@01 Int)
(declare-const $succ@269@01 Bool)
(declare-const $res@270@01 Int)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@271@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@272@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@273@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@274@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@275@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@276@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@277@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@278@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@279@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@280@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@281@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@282@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@283@01 Bool)
; [exec]
; var i0$$res: Int
(declare-const i0$$res@284@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@285@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@286@01 Int)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@287@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@288@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@289@01 $Snap)
(assert (= $t@289@01 ($Snap.combine ($Snap.first $t@289@01) ($Snap.second $t@289@01))))
(assert (= ($Snap.first $t@289@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@275@01 0))))
(assert (= ($Snap.second $t@289@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@275@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@290@01 $Snap)
(assert (= $t@290@01 ($Snap.combine ($Snap.first $t@290@01) ($Snap.second $t@290@01))))
(assert (= ($Snap.first $t@290@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@275@01 1))))
(assert (= ($Snap.second $t@290@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@275@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@291@01 $Snap)
(assert (= $t@291@01 ($Snap.combine ($Snap.first $t@291@01) ($Snap.second $t@291@01))))
(assert (= ($Snap.first $t@291@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@275@01 2))))
(assert (= ($Snap.second $t@291@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@275@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@292@01 $Snap)
(assert (= $t@292@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@293@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 66 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@275@01, 3)), $q0@293@01)) | live]
; [else-branch: 66 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@275@01, 3)), $q0@293@01) | live]
(push) ; 5
; [then-branch: 66 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@275@01, 3)), $q0@293@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 3)) $q0@293@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 66 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@275@01, 3)), $q0@293@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 3)) $q0@293@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 3)) $q0@293@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 3)) $q0@293@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@293@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 3)) $q0@293@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 3)) $q0@293@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 3)) $q0@293@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@953@11@953@345-aux|)))
(assert (forall (($q0@293@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 3)) $q0@293@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 3)) $q0@293@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 3)) $q0@293@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@953@11@953@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@294@01 $Snap)
(assert (= $t@294@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@295@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@295@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 3)) $q0@295@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 3)) $q0@295@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@954@11@954@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@296@01 $Snap)
(assert (= $t@296@01 ($Snap.combine ($Snap.first $t@296@01) ($Snap.second $t@296@01))))
(assert (= ($Snap.first $t@296@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@275@01 4))))
(assert (= ($Snap.second $t@296@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@275@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@297@01 $Snap)
(assert (= $t@297@01 ($Snap.combine ($Snap.first $t@297@01) ($Snap.second $t@297@01))))
(assert (= ($Snap.first $t@297@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@275@01 5))))
(assert (= ($Snap.second $t@297@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@275@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@298@01 $Snap)
(assert (= $t@298@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@299@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 67 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@275@01, 7)), $q1@299@01)) | live]
; [else-branch: 67 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@275@01, 7)), $q1@299@01) | live]
(push) ; 5
; [then-branch: 67 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@275@01, 7)), $q1@299@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 7)) $q1@299@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 67 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@275@01, 7)), $q1@299@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 7)) $q1@299@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 7)) $q1@299@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 7)) $q1@299@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@299@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 7)) $q1@299@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 7)) $q1@299@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 7)) $q1@299@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@957@11@957@345-aux|)))
(assert (forall (($q1@299@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 7)) $q1@299@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 7)) $q1@299@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 7)) $q1@299@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@957@11@957@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@300@01 $Snap)
(assert (= $t@300@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q1@301@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@301@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 7)) $q1@301@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 7)) $q1@301@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@958@11@958@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@302@01 $Snap)
(assert (= $t@302@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@303@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 68 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@275@01, 8)), $q2@303@01)) | live]
; [else-branch: 68 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@275@01, 8)), $q2@303@01) | live]
(push) ; 5
; [then-branch: 68 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@275@01, 8)), $q2@303@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q2@303@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 68 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@275@01, 8)), $q2@303@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q2@303@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q2@303@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q2@303@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@303@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q2@303@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q2@303@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q2@303@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@959@11@959@345-aux|)))
(assert (forall (($q2@303@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q2@303@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q2@303@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q2@303@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@959@11@959@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@304@01 $Snap)
(assert (= $t@304@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q2@305@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@305@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q2@305@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q2@305@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@960@11@960@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@306@01 $Snap)
(assert (= $t@306@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@275@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@307@01 $Snap)
(assert (= $t@307@01 ($Snap.combine ($Snap.first $t@307@01) ($Snap.second $t@307@01))))
(assert (= ($Snap.first $t@307@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@307@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@308@01 $Snap)
(assert (= $t@308@01 ($Snap.combine ($Snap.first $t@308@01) ($Snap.second $t@308@01))))
(assert (= ($Snap.first $t@308@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@272@01 0))))
(assert (= ($Snap.second $t@308@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@272@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@309@01 $Snap)
(assert (= $t@309@01 ($Snap.combine ($Snap.first $t@309@01) ($Snap.second $t@309@01))))
(assert (= ($Snap.first $t@309@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@272@01 1))))
(assert (= ($Snap.second $t@309@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@272@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@310@01 $Snap)
(assert (= $t@310@01 ($Snap.combine ($Snap.first $t@310@01) ($Snap.second $t@310@01))))
(assert (= ($Snap.first $t@310@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@272@01 2))))
(assert (= ($Snap.second $t@310@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@272@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@311@01 $Snap)
(assert (= $t@311@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@272@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@312@01 $Snap)
(assert (= $t@312@01 ($Snap.combine ($Snap.first $t@312@01) ($Snap.second $t@312@01))))
(assert (= ($Snap.first $t@312@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@272@01 4))))
(assert (= ($Snap.second $t@312@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@272@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@313@01 $Snap)
(assert (= $t@313@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@272@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@314@01 $Snap)
(assert (= $t@314@01 ($Snap.combine ($Snap.first $t@314@01) ($Snap.second $t@314@01))))
(assert (= ($Snap.first $t@314@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@271@01 0))))
(assert (= ($Snap.second $t@314@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@271@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@315@01 $Snap)
(assert (= $t@315@01 ($Snap.combine ($Snap.first $t@315@01) ($Snap.second $t@315@01))))
(assert (= ($Snap.first $t@315@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@271@01 1))))
(assert (= ($Snap.second $t@315@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@271@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@316@01 $Snap)
(assert (= $t@316@01 ($Snap.combine ($Snap.first $t@316@01) ($Snap.second $t@316@01))))
(assert (= ($Snap.first $t@316@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@271@01 2))))
(assert (= ($Snap.second $t@316@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@271@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@317@01 $Snap)
(assert (= $t@317@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@271@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@318@01 $Snap)
(assert (= $t@318@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@271@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@319@01 $Snap)
(assert (= $t@319@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@320@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@321@01 $Snap)
(assert (= $t@321@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(declare-const $t@322@01 $Snap)
(assert (= $t@322@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@275@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc(self, 2)): Int)
(declare-const $t@323@01 $Snap)
(assert (= $t@323@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@324@01 $Snap)
(assert (= $t@324@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@271@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; i0$$res := $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const i0$$res@325@01 Int)
(assert (=
  i0$$res@325@01
  ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 3)) ($struct_get<Int> ($struct_loc<Int> self@275@01 0)))))))
; [exec]
; label i0$return
; [exec]
; $res := $unwrap($wrap(i0$$res))
; [eval] $unwrap($wrap(i0$$res))
; [eval] $wrap(i0$$res)
(declare-const $res@326@01 Int)
(assert (= $res@326@01 ($unwrap<Int> ($wrap<$Int> i0$$res@325@01))))
; [exec]
; label return
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@285@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@285@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 69 | $out_of_gas@285@01 | live]
; [else-branch: 69 | !($out_of_gas@285@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 69 | $out_of_gas@285@01]
(assert $out_of_gas@285@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 70 | True | live]
; [else-branch: 70 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 70 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@327@01 $Snap)
(assert (= $t@327@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@287@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@328@01 $Struct)
(assert (=
  self@328@01
  ($struct_set<$Struct> self@275@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@275@01 4))
    l$havoc$1@287@01))))
; [exec]
; $contracts := l$havoc$2
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@328@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@275@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@328@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@275@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@328@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@328@01 3))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@328@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@328@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@328@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@275@01 2)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@328@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@275@01 2))))
(pop) ; 4
; [then-branch: 71 | False | dead]
; [else-branch: 71 | True | live]
(push) ; 4
; [else-branch: 71 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 69 | !($out_of_gas@285@01)]
(assert (not $out_of_gas@285@01))
(pop) ; 3
; [eval] !$out_of_gas
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@285@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@285@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 72 | !($out_of_gas@285@01) | live]
; [else-branch: 72 | $out_of_gas@285@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 72 | !($out_of_gas@285@01)]
(assert (not $out_of_gas@285@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 73 | False | dead]
; [else-branch: 73 | True | live]
(push) ; 4
; [else-branch: 73 | True]
(pop) ; 4
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 74 | True | live]
; [else-branch: 74 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 74 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@329@01 $Snap)
(assert (= $t@329@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@287@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@330@01 $Struct)
(assert (=
  self@330@01
  ($struct_set<$Struct> self@275@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@275@01 4))
    l$havoc$1@287@01))))
; [exec]
; $contracts := l$havoc$2
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@330@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@275@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@330@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@275@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@330@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 3))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@330@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@330@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@275@01 2)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@330@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@275@01 2))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 72 | $out_of_gas@285@01]
(assert $out_of_gas@285@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$buyStock ----------
(declare-const $succ@331@01 Bool)
(declare-const $succ@332@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@333@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@334@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@335@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@336@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@337@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@338@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@339@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@340@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@341@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@342@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@343@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@344@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@345@01 Bool)
; [exec]
; var l$buy_order: $Int
(declare-const l$buy_order@346@01 $Int)
; [exec]
; var i0$$res: Int
(declare-const i0$$res@347@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@348@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@349@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@350@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@351@01 $Snap)
(assert (= $t@351@01 ($Snap.combine ($Snap.first $t@351@01) ($Snap.second $t@351@01))))
(assert (= ($Snap.first $t@351@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@337@01 0))))
(assert (= ($Snap.second $t@351@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@337@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@352@01 $Snap)
(assert (= $t@352@01 ($Snap.combine ($Snap.first $t@352@01) ($Snap.second $t@352@01))))
(assert (= ($Snap.first $t@352@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@337@01 1))))
(assert (= ($Snap.second $t@352@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@337@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@353@01 $Snap)
(assert (= $t@353@01 ($Snap.combine ($Snap.first $t@353@01) ($Snap.second $t@353@01))))
(assert (= ($Snap.first $t@353@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@337@01 2))))
(assert (= ($Snap.second $t@353@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@337@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@354@01 $Snap)
(assert (= $t@354@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@355@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 75 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@337@01, 3)), $q0@355@01)) | live]
; [else-branch: 75 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@337@01, 3)), $q0@355@01) | live]
(push) ; 5
; [then-branch: 75 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@337@01, 3)), $q0@355@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 3)) $q0@355@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 75 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@337@01, 3)), $q0@355@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 3)) $q0@355@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 3)) $q0@355@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 3)) $q0@355@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@355@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 3)) $q0@355@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 3)) $q0@355@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 3)) $q0@355@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1052@11@1052@345-aux|)))
(assert (forall (($q0@355@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 3)) $q0@355@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 3)) $q0@355@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 3)) $q0@355@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1052@11@1052@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@356@01 $Snap)
(assert (= $t@356@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@357@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@357@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 3)) $q0@357@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 3)) $q0@357@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1053@11@1053@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@358@01 $Snap)
(assert (= $t@358@01 ($Snap.combine ($Snap.first $t@358@01) ($Snap.second $t@358@01))))
(assert (= ($Snap.first $t@358@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@337@01 4))))
(assert (= ($Snap.second $t@358@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@337@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@359@01 $Snap)
(assert (= $t@359@01 ($Snap.combine ($Snap.first $t@359@01) ($Snap.second $t@359@01))))
(assert (= ($Snap.first $t@359@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@337@01 5))))
(assert (= ($Snap.second $t@359@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@337@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@360@01 $Snap)
(assert (= $t@360@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@361@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 76 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@337@01, 7)), $q1@361@01)) | live]
; [else-branch: 76 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@337@01, 7)), $q1@361@01) | live]
(push) ; 5
; [then-branch: 76 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@337@01, 7)), $q1@361@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 7)) $q1@361@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 76 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@337@01, 7)), $q1@361@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 7)) $q1@361@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 7)) $q1@361@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 7)) $q1@361@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@361@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 7)) $q1@361@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 7)) $q1@361@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 7)) $q1@361@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1056@11@1056@345-aux|)))
(assert (forall (($q1@361@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 7)) $q1@361@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 7)) $q1@361@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 7)) $q1@361@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1056@11@1056@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@362@01 $Snap)
(assert (= $t@362@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q1@363@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@363@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 7)) $q1@363@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 7)) $q1@363@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1057@11@1057@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@364@01 $Snap)
(assert (= $t@364@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@365@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 77 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@337@01, 8)), $q2@365@01)) | live]
; [else-branch: 77 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@337@01, 8)), $q2@365@01) | live]
(push) ; 5
; [then-branch: 77 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@337@01, 8)), $q2@365@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 8)) $q2@365@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 77 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@337@01, 8)), $q2@365@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 8)) $q2@365@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 8)) $q2@365@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 8)) $q2@365@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@365@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 8)) $q2@365@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 8)) $q2@365@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 8)) $q2@365@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1058@11@1058@345-aux|)))
(assert (forall (($q2@365@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 8)) $q2@365@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 8)) $q2@365@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 8)) $q2@365@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1058@11@1058@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@366@01 $Snap)
(assert (= $t@366@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q2@367@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@367@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 8)) $q2@367@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 8)) $q2@367@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1059@11@1059@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@368@01 $Snap)
(assert (= $t@368@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@337@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@369@01 $Snap)
(assert (= $t@369@01 ($Snap.combine ($Snap.first $t@369@01) ($Snap.second $t@369@01))))
(assert (= ($Snap.first $t@369@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@369@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@370@01 $Snap)
(assert (= $t@370@01 ($Snap.combine ($Snap.first $t@370@01) ($Snap.second $t@370@01))))
(assert (= ($Snap.first $t@370@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@334@01 0))))
(assert (= ($Snap.second $t@370@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@334@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@371@01 $Snap)
(assert (= $t@371@01 ($Snap.combine ($Snap.first $t@371@01) ($Snap.second $t@371@01))))
(assert (= ($Snap.first $t@371@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@334@01 1))))
(assert (= ($Snap.second $t@371@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@334@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@372@01 $Snap)
(assert (= $t@372@01 ($Snap.combine ($Snap.first $t@372@01) ($Snap.second $t@372@01))))
(assert (= ($Snap.first $t@372@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@334@01 2))))
(assert (= ($Snap.second $t@372@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@334@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@373@01 $Snap)
(assert (= $t@373@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@334@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@374@01 $Snap)
(assert (= $t@374@01 ($Snap.combine ($Snap.first $t@374@01) ($Snap.second $t@374@01))))
(assert (= ($Snap.first $t@374@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@334@01 4))))
(assert (= ($Snap.second $t@374@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@334@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@375@01 $Snap)
(assert (= $t@375@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@334@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@376@01 $Snap)
(assert (= $t@376@01 ($Snap.combine ($Snap.first $t@376@01) ($Snap.second $t@376@01))))
(assert (= ($Snap.first $t@376@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@333@01 0))))
(assert (= ($Snap.second $t@376@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@333@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@377@01 $Snap)
(assert (= $t@377@01 ($Snap.combine ($Snap.first $t@377@01) ($Snap.second $t@377@01))))
(assert (= ($Snap.first $t@377@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@333@01 1))))
(assert (= ($Snap.second $t@377@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@333@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@378@01 $Snap)
(assert (= $t@378@01 ($Snap.combine ($Snap.first $t@378@01) ($Snap.second $t@378@01))))
(assert (= ($Snap.first $t@378@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@333@01 2))))
(assert (= ($Snap.second $t@378@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@333@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@379@01 $Snap)
(assert (= $t@379@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@333@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@380@01 $Snap)
(assert (= $t@380@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@333@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@381@01 $Snap)
(assert (= $t@381@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@382@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@383@01 $Snap)
(assert (= $t@383@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(declare-const $t@384@01 $Snap)
(assert (= $t@384@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@337@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@337@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc(self, 2)): Int)
(declare-const $t@385@01 $Snap)
(assert (= $t@385@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   ($struct_get($struct_loc(msg, 1)): Int)): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(declare-const self@386@01 $Struct)
(assert (=
  self@386@01
  ($struct_set<$Struct> self@337@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@337@01 4))
    ($struct_get<Int> ($struct_loc<Int> msg@333@01 1))))))
; [exec]
; self := ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self,
;   8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) +
;   ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(declare-const self@387@01 $Struct)
(assert (=
  self@387@01
  ($struct_set<$Struct> self@386@01 8 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@386@01 8)) ($struct_get<Int> ($struct_loc<Int> msg@333@01 0)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@386@01 8)) ($struct_get<Int> ($struct_loc<Int> msg@333@01 0)))
    ($struct_get<Int> ($struct_loc<Int> msg@333@01 1)))))))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int))) == 0
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2))))
    0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2))))
  0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 78 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2)))) == 0 | live]
; [else-branch: 78 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2)))) != 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 78 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2)))) == 0]
(assert (=
  ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2))))
  0))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 79 | True | live]
; [else-branch: 79 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 79 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@388@01 $Snap)
(assert (= $t@388@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@349@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@389@01 $Struct)
(assert (=
  self@389@01
  ($struct_set<$Struct> self@337@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@337@01 4))
    l$havoc@349@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@389@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@337@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@389@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@337@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@389@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@389@01 3))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@389@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@389@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@389@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@337@01 2)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@389@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@337@01 2))))
(pop) ; 4
; [then-branch: 80 | False | dead]
; [else-branch: 80 | True | live]
(push) ; 4
; [else-branch: 80 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 78 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2)))) != 0]
(assert (not
  (=
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2))))
    0)))
(pop) ; 3
; [eval] !($unwrap($wrap(($struct_get($struct_loc(self, 2)): Int))) == 0)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int))) == 0
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2))))
  0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2))))
    0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 81 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2)))) != 0 | live]
; [else-branch: 81 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2)))) == 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 81 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2)))) != 0]
(assert (not
  (=
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2))))
    0)))
; [eval] $unwrap((0 == $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int))) ? $wrap($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))) : $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self, 2)): Int))))) < 0
; [eval] $unwrap((0 == $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int))) ? $wrap($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))) : $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self, 2)): Int)))))
; [eval] (0 == $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int))) ? $wrap($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))) : $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] 0 == $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    0
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 82 | 0 == $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2)))) | dead]
; [else-branch: 82 | 0 != $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2)))) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 82 | 0 != $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2))))]
(assert (not
  (=
    0
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2)))))))
; [eval] $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not
  (=
    0
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2)))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (<
    ($unwrap<Int> ($w_div<$Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@333@01 1))) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2)))))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 83 | $unwrap[Int]($w_div[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@333@01, 1))), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2))))) < 0 | dead]
; [else-branch: 83 | !($unwrap[Int]($w_div[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@333@01, 1))), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2))))) < 0) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 83 | !($unwrap[Int]($w_div[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@333@01, 1))), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2))))) < 0)]
(assert (not
  (<
    ($unwrap<Int> ($w_div<$Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@333@01 1))) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2)))))
    0)))
(pop) ; 4
; [eval] !($unwrap((0 == $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int))) ? $wrap($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))) : $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self, 2)): Int))))) < 0)
; [eval] $unwrap((0 == $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int))) ? $wrap($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))) : $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self, 2)): Int))))) < 0
; [eval] $unwrap((0 == $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int))) ? $wrap($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))) : $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self, 2)): Int)))))
; [eval] (0 == $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int))) ? $wrap($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))) : $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] 0 == $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 4
; [then-branch: 84 | 0 == $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2)))) | dead]
; [else-branch: 84 | 0 != $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2)))) | live]
(push) ; 5
; [else-branch: 84 | 0 != $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2))))]
; [eval] $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (<
  ($unwrap<Int> ($w_div<$Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@333@01 1))) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2)))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (<
    ($unwrap<Int> ($w_div<$Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@333@01 1))) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2)))))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 85 | !($unwrap[Int]($w_div[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@333@01, 1))), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2))))) < 0) | live]
; [else-branch: 85 | $unwrap[Int]($w_div[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@333@01, 1))), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2))))) < 0 | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 85 | !($unwrap[Int]($w_div[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@333@01, 1))), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2))))) < 0)]
(assert (not
  (<
    ($unwrap<Int> ($w_div<$Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@333@01 1))) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2)))))
    0)))
; [eval] $unwrap((0 == $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int))) ? $wrap($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))) : $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self, 2)): Int))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap((0 == $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int))) ? $wrap($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))) : $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self, 2)): Int)))))
; [eval] (0 == $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int))) ? $wrap($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))) : $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] 0 == $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 5
; [then-branch: 86 | 0 == $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2)))) | dead]
; [else-branch: 86 | 0 != $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2)))) | live]
(push) ; 6
; [else-branch: 86 | 0 != $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2))))]
; [eval] $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (>
    ($unwrap<Int> ($w_div<$Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@333@01 1))) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 87 | $unwrap[Int]($w_div[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@333@01, 1))), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 87 | !($unwrap[Int]($w_div[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@333@01, 1))), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 87 | !($unwrap[Int]($w_div[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@333@01, 1))), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($unwrap<Int> ($w_div<$Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@333@01 1))) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 5
; [eval] !($unwrap((0 == $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int))) ? $wrap($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))) : $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self, 2)): Int))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap((0 == $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int))) ? $wrap($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))) : $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self, 2)): Int))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap((0 == $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int))) ? $wrap($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))) : $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self, 2)): Int)))))
; [eval] (0 == $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int))) ? $wrap($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))) : $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] 0 == $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 5
; [then-branch: 88 | 0 == $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2)))) | dead]
; [else-branch: 88 | 0 != $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2)))) | live]
(push) ; 6
; [else-branch: 88 | 0 != $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2))))]
; [eval] $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (>
  ($unwrap<Int> ($w_div<$Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@333@01 1))) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (>
    ($unwrap<Int> ($w_div<$Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@333@01 1))) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 89 | !($unwrap[Int]($w_div[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@333@01, 1))), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 89 | $unwrap[Int]($w_div[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@333@01, 1))), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 89 | !($unwrap[Int]($w_div[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@333@01, 1))), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($unwrap<Int> ($w_div<$Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@333@01 1))) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; l$buy_order := (0 ==
;   $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int))) ?
;     $wrap($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \
;     $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))) :
;     $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self,
;     2)): Int))))
; [eval] (0 == $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int))) ? $wrap($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))) : $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] 0 == $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 6
; [then-branch: 90 | 0 == $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2)))) | dead]
; [else-branch: 90 | 0 != $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2)))) | live]
(push) ; 7
; [else-branch: 90 | 0 != $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2))))]
; [eval] $w_div($wrap(($struct_get($struct_loc(msg, 1)): Int)), $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(declare-const l$buy_order@390@01 $Int)
(assert (=
  l$buy_order@390@01
  ($w_div<$Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@333@01 1))) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2))))))
; [exec]
; i0$$res := $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const i0$$res@391@01 Int)
(assert (=
  i0$$res@391@01
  ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@387@01 3)) ($struct_get<Int> ($struct_loc<Int> self@387@01 0)))))))
; [exec]
; label i0$return
; [eval] !(i0$$res >= $unwrap(l$buy_order))
; [eval] i0$$res >= $unwrap(l$buy_order)
; [eval] $unwrap(l$buy_order)
(push) ; 6
(set-option :timeout 10)
(assert (not (>= i0$$res@391@01 ($unwrap<Int> l$buy_order@390@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (>= i0$$res@391@01 ($unwrap<Int> l$buy_order@390@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 91 | !(i0$$res@391@01 >= $unwrap[Int](l$buy_order@390@01)) | live]
; [else-branch: 91 | i0$$res@391@01 >= $unwrap[Int](l$buy_order@390@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 91 | !(i0$$res@391@01 >= $unwrap[Int](l$buy_order@390@01))]
(assert (not (>= i0$$res@391@01 ($unwrap<Int> l$buy_order@390@01))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 92 | True | live]
; [else-branch: 92 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 92 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@392@01 $Snap)
(assert (= $t@392@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@349@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@393@01 $Struct)
(assert (=
  self@393@01
  ($struct_set<$Struct> self@337@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@337@01 4))
    l$havoc@349@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@393@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@337@01 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@393@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@337@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@393@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@393@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@393@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@393@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@393@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@337@01 2)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@393@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@337@01 2))))
(pop) ; 7
; [then-branch: 93 | False | dead]
; [else-branch: 93 | True | live]
(push) ; 7
; [else-branch: 93 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 91 | i0$$res@391@01 >= $unwrap[Int](l$buy_order@390@01)]
(assert (>= i0$$res@391@01 ($unwrap<Int> l$buy_order@390@01)))
(pop) ; 6
; [eval] !!(i0$$res >= $unwrap(l$buy_order))
; [eval] !(i0$$res >= $unwrap(l$buy_order))
; [eval] i0$$res >= $unwrap(l$buy_order)
; [eval] $unwrap(l$buy_order)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (>= i0$$res@391@01 ($unwrap<Int> l$buy_order@390@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (>= i0$$res@391@01 ($unwrap<Int> l$buy_order@390@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 94 | i0$$res@391@01 >= $unwrap[Int](l$buy_order@390@01) | live]
; [else-branch: 94 | !(i0$$res@391@01 >= $unwrap[Int](l$buy_order@390@01)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 94 | i0$$res@391@01 >= $unwrap[Int](l$buy_order@390@01)]
(assert (>= i0$$res@391@01 ($unwrap<Int> l$buy_order@390@01)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) - $unwrap(l$buy_order) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) - $unwrap(l$buy_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$buy_order)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@387@01 3)) ($struct_get<Int> ($struct_loc<Int> self@387@01 0)))))
      ($unwrap<Int> l$buy_order@390@01))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 95 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@387@01, 3)), $struct_get[Int]($struct_loc[Int](self@387@01, 0))))) - $unwrap[Int](l$buy_order@390@01) < 0 | dead]
; [else-branch: 95 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@387@01, 3)), $struct_get[Int]($struct_loc[Int](self@387@01, 0))))) - $unwrap[Int](l$buy_order@390@01) < 0) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 95 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@387@01, 3)), $struct_get[Int]($struct_loc[Int](self@387@01, 0))))) - $unwrap[Int](l$buy_order@390@01) < 0)]
(assert (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@387@01 3)) ($struct_get<Int> ($struct_loc<Int> self@387@01 0)))))
      ($unwrap<Int> l$buy_order@390@01))
    0)))
(pop) ; 7
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) - $unwrap(l$buy_order) < 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) - $unwrap(l$buy_order) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) - $unwrap(l$buy_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$buy_order)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@387@01 3)) ($struct_get<Int> ($struct_loc<Int> self@387@01 0)))))
    ($unwrap<Int> l$buy_order@390@01))
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@387@01 3)) ($struct_get<Int> ($struct_loc<Int> self@387@01 0)))))
      ($unwrap<Int> l$buy_order@390@01))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 96 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@387@01, 3)), $struct_get[Int]($struct_loc[Int](self@387@01, 0))))) - $unwrap[Int](l$buy_order@390@01) < 0) | live]
; [else-branch: 96 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@387@01, 3)), $struct_get[Int]($struct_loc[Int](self@387@01, 0))))) - $unwrap[Int](l$buy_order@390@01) < 0 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 96 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@387@01, 3)), $struct_get[Int]($struct_loc[Int](self@387@01, 0))))) - $unwrap[Int](l$buy_order@390@01) < 0)]
(assert (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@387@01 3)) ($struct_get<Int> ($struct_loc<Int> self@387@01 0)))))
      ($unwrap<Int> l$buy_order@390@01))
    0)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) - $unwrap(l$buy_order) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) - $unwrap(l$buy_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$buy_order)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@387@01 3)) ($struct_get<Int> ($struct_loc<Int> self@387@01 0)))))
      ($unwrap<Int> l$buy_order@390@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 97 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@387@01, 3)), $struct_get[Int]($struct_loc[Int](self@387@01, 0))))) - $unwrap[Int](l$buy_order@390@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 97 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@387@01, 3)), $struct_get[Int]($struct_loc[Int](self@387@01, 0))))) - $unwrap[Int](l$buy_order@390@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 97 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@387@01, 3)), $struct_get[Int]($struct_loc[Int](self@387@01, 0))))) - $unwrap[Int](l$buy_order@390@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@387@01 3)) ($struct_get<Int> ($struct_loc<Int> self@387@01 0)))))
      ($unwrap<Int> l$buy_order@390@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 8
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) - $unwrap(l$buy_order) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) - $unwrap(l$buy_order) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) - $unwrap(l$buy_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$buy_order)
(push) ; 8
(set-option :timeout 10)
(assert (not (>
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@387@01 3)) ($struct_get<Int> ($struct_loc<Int> self@387@01 0)))))
    ($unwrap<Int> l$buy_order@390@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@387@01 3)) ($struct_get<Int> ($struct_loc<Int> self@387@01 0)))))
      ($unwrap<Int> l$buy_order@390@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 98 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@387@01, 3)), $struct_get[Int]($struct_loc[Int](self@387@01, 0))))) - $unwrap[Int](l$buy_order@390@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 98 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@387@01, 3)), $struct_get[Int]($struct_loc[Int](self@387@01, 0))))) - $unwrap[Int](l$buy_order@390@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 98 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@387@01, 3)), $struct_get[Int]($struct_loc[Int](self@387@01, 0))))) - $unwrap[Int](l$buy_order@390@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@387@01 3)) ($struct_get<Int> ($struct_loc<Int> self@387@01 0)))))
      ($unwrap<Int> l$buy_order@390@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 0)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self,
;   3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) -
;   $unwrap(l$buy_order)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) - $unwrap(l$buy_order)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) - $unwrap(l$buy_order)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) - $unwrap(l$buy_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$buy_order)
(declare-const self@394@01 $Struct)
(assert (=
  self@394@01
  ($struct_set<$Struct> self@387@01 3 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@387@01 3)) ($struct_get<Int> ($struct_loc<Int> self@387@01 0)) (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@387@01 3)) ($struct_get<Int> ($struct_loc<Int> self@387@01 0)))))
    ($unwrap<Int> l$buy_order@390@01))))))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) + $unwrap(l$buy_order) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) + $unwrap(l$buy_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$buy_order)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@333@01 0)))))
      ($unwrap<Int> l$buy_order@390@01))
    0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 99 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 3)), $struct_get[Int]($struct_loc[Int](msg@333@01, 0))))) + $unwrap[Int](l$buy_order@390@01) < 0 | dead]
; [else-branch: 99 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 3)), $struct_get[Int]($struct_loc[Int](msg@333@01, 0))))) + $unwrap[Int](l$buy_order@390@01) < 0) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 99 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 3)), $struct_get[Int]($struct_loc[Int](msg@333@01, 0))))) + $unwrap[Int](l$buy_order@390@01) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@333@01 0)))))
      ($unwrap<Int> l$buy_order@390@01))
    0)))
(pop) ; 9
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) + $unwrap(l$buy_order) < 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) + $unwrap(l$buy_order) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) + $unwrap(l$buy_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$buy_order)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@333@01 0)))))
    ($unwrap<Int> l$buy_order@390@01))
  0)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@333@01 0)))))
      ($unwrap<Int> l$buy_order@390@01))
    0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 100 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 3)), $struct_get[Int]($struct_loc[Int](msg@333@01, 0))))) + $unwrap[Int](l$buy_order@390@01) < 0) | live]
; [else-branch: 100 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 3)), $struct_get[Int]($struct_loc[Int](msg@333@01, 0))))) + $unwrap[Int](l$buy_order@390@01) < 0 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 100 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 3)), $struct_get[Int]($struct_loc[Int](msg@333@01, 0))))) + $unwrap[Int](l$buy_order@390@01) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@333@01 0)))))
      ($unwrap<Int> l$buy_order@390@01))
    0)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) + $unwrap(l$buy_order) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) + $unwrap(l$buy_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$buy_order)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@333@01 0)))))
      ($unwrap<Int> l$buy_order@390@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@333@01 0)))))
    ($unwrap<Int> l$buy_order@390@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 101 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 3)), $struct_get[Int]($struct_loc[Int](msg@333@01, 0))))) + $unwrap[Int](l$buy_order@390@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 101 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 3)), $struct_get[Int]($struct_loc[Int](msg@333@01, 0))))) + $unwrap[Int](l$buy_order@390@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 101 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 3)), $struct_get[Int]($struct_loc[Int](msg@333@01, 0))))) + $unwrap[Int](l$buy_order@390@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@333@01 0)))))
    ($unwrap<Int> l$buy_order@390@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 102 | True | live]
; [else-branch: 102 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 102 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@395@01 $Snap)
(assert (= $t@395@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@349@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@396@01 $Struct)
(assert (=
  self@396@01
  ($struct_set<$Struct> self@337@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@337@01 4))
    l$havoc@349@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 12
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@396@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@337@01 1)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@396@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@337@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 12
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@396@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@396@01 3))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@396@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@396@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 12
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@396@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@337@01 2)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@396@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@337@01 2))))
(pop) ; 11
; [then-branch: 103 | False | dead]
; [else-branch: 103 | True | live]
(push) ; 11
; [else-branch: 103 | True]
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 101 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 3)), $struct_get[Int]($struct_loc[Int](msg@333@01, 0))))) + $unwrap[Int](l$buy_order@390@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@333@01 0)))))
      ($unwrap<Int> l$buy_order@390@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 10
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) + $unwrap(l$buy_order) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) + $unwrap(l$buy_order) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) + $unwrap(l$buy_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$buy_order)
(push) ; 10
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@333@01 0)))))
    ($unwrap<Int> l$buy_order@390@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@333@01 0)))))
      ($unwrap<Int> l$buy_order@390@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 104 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 3)), $struct_get[Int]($struct_loc[Int](msg@333@01, 0))))) + $unwrap[Int](l$buy_order@390@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 104 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 3)), $struct_get[Int]($struct_loc[Int](msg@333@01, 0))))) + $unwrap[Int](l$buy_order@390@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 104 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 3)), $struct_get[Int]($struct_loc[Int](msg@333@01, 0))))) + $unwrap[Int](l$buy_order@390@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@333@01 0)))))
      ($unwrap<Int> l$buy_order@390@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]),
;   ($struct_get($struct_loc(msg, 0)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self,
;   3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) +
;   $unwrap(l$buy_order)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) + $unwrap(l$buy_order)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) + $unwrap(l$buy_order)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) + $unwrap(l$buy_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$buy_order)
(declare-const self@397@01 $Struct)
(assert (=
  self@397@01
  ($struct_set<$Struct> self@394@01 3 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@333@01 0)) (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@333@01 0)))))
    ($unwrap<Int> l$buy_order@390@01))))))
; [exec]
; inhale acc(e$Buy(($struct_get($struct_loc(msg, 0)): Int), $unwrap(l$buy_order)), write)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$buy_order)
(declare-const $t@398@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label return
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@348@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@348@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 105 | $out_of_gas@348@01 | live]
; [else-branch: 105 | !($out_of_gas@348@01) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 105 | $out_of_gas@348@01]
(assert $out_of_gas@348@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 106 | True | live]
; [else-branch: 106 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 106 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@399@01 $Snap)
(assert (= $t@399@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@349@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@400@01 $Struct)
(assert (=
  self@400@01
  ($struct_set<$Struct> self@337@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@337@01 4))
    l$havoc@349@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@400@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@337@01 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@400@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@337@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@400@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@400@01 3))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@400@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@400@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@400@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@337@01 2)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@400@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@337@01 2))))
(pop) ; 12
; [then-branch: 107 | False | dead]
; [else-branch: 107 | True | live]
(push) ; 12
; [else-branch: 107 | True]
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 105 | !($out_of_gas@348@01)]
(assert (not $out_of_gas@348@01))
(pop) ; 11
; [eval] !$out_of_gas
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@348@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@348@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 108 | !($out_of_gas@348@01) | live]
; [else-branch: 108 | $out_of_gas@348@01 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 108 | !($out_of_gas@348@01)]
(assert (not $out_of_gas@348@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 109 | False | dead]
; [else-branch: 109 | True | live]
(push) ; 12
; [else-branch: 109 | True]
(pop) ; 12
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 110 | True | live]
; [else-branch: 110 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 110 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@401@01 $Snap)
(assert (= $t@401@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@349@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@402@01 $Struct)
(assert (=
  self@402@01
  ($struct_set<$Struct> self@397@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@397@01 4))
    l$havoc@349@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@402@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@337@01 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@402@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@337@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@402@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@402@01 3))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@402@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@402@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@402@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@337@01 2)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@402@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@337@01 2))))
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 108 | $out_of_gas@348@01]
(assert $out_of_gas@348@01)
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 104 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 3)), $struct_get[Int]($struct_loc[Int](msg@333@01, 0))))) + $unwrap[Int](l$buy_order@390@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@333@01 0)))))
    ($unwrap<Int> l$buy_order@390@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 94 | !(i0$$res@391@01 >= $unwrap[Int](l$buy_order@390@01))]
(assert (not (>= i0$$res@391@01 ($unwrap<Int> l$buy_order@390@01))))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 81 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@387@01, 2)))) == 0]
(assert (=
  ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@387@01 2))))
  0))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$getHolding ----------
(declare-const l$_stockholder@403@01 Int)
(declare-const $succ@404@01 Bool)
(declare-const $res@405@01 Int)
(declare-const l$_stockholder@406@01 Int)
(declare-const $succ@407@01 Bool)
(declare-const $res@408@01 Int)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@409@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@410@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@411@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@412@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@413@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@414@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@415@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@416@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@417@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@418@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@419@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@420@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@421@01 Bool)
; [exec]
; var l$i0$_stockholder: Int
(declare-const l$i0$_stockholder@422@01 Int)
; [exec]
; var i0$$res: Int
(declare-const i0$$res@423@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@424@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@425@01 Int)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@426@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@427@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@428@01 $Snap)
(assert (= $t@428@01 ($Snap.combine ($Snap.first $t@428@01) ($Snap.second $t@428@01))))
(assert (= ($Snap.first $t@428@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@413@01 0))))
(assert (= ($Snap.second $t@428@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@413@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@429@01 $Snap)
(assert (= $t@429@01 ($Snap.combine ($Snap.first $t@429@01) ($Snap.second $t@429@01))))
(assert (= ($Snap.first $t@429@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@413@01 1))))
(assert (= ($Snap.second $t@429@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@413@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@430@01 $Snap)
(assert (= $t@430@01 ($Snap.combine ($Snap.first $t@430@01) ($Snap.second $t@430@01))))
(assert (= ($Snap.first $t@430@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@413@01 2))))
(assert (= ($Snap.second $t@430@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@413@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@431@01 $Snap)
(assert (= $t@431@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@432@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 111 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@413@01, 3)), $q0@432@01)) | live]
; [else-branch: 111 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@413@01, 3)), $q0@432@01) | live]
(push) ; 5
; [then-branch: 111 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@413@01, 3)), $q0@432@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 3)) $q0@432@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 111 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@413@01, 3)), $q0@432@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 3)) $q0@432@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 3)) $q0@432@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 3)) $q0@432@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@432@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 3)) $q0@432@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 3)) $q0@432@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 3)) $q0@432@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1182@11@1182@345-aux|)))
(assert (forall (($q0@432@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 3)) $q0@432@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 3)) $q0@432@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 3)) $q0@432@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1182@11@1182@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@433@01 $Snap)
(assert (= $t@433@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@434@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@434@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 3)) $q0@434@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 3)) $q0@434@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1183@11@1183@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@435@01 $Snap)
(assert (= $t@435@01 ($Snap.combine ($Snap.first $t@435@01) ($Snap.second $t@435@01))))
(assert (= ($Snap.first $t@435@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@413@01 4))))
(assert (= ($Snap.second $t@435@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@413@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@436@01 $Snap)
(assert (= $t@436@01 ($Snap.combine ($Snap.first $t@436@01) ($Snap.second $t@436@01))))
(assert (= ($Snap.first $t@436@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@413@01 5))))
(assert (= ($Snap.second $t@436@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@413@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@437@01 $Snap)
(assert (= $t@437@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@438@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 112 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@413@01, 7)), $q1@438@01)) | live]
; [else-branch: 112 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@413@01, 7)), $q1@438@01) | live]
(push) ; 5
; [then-branch: 112 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@413@01, 7)), $q1@438@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 7)) $q1@438@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 112 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@413@01, 7)), $q1@438@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 7)) $q1@438@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 7)) $q1@438@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 7)) $q1@438@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@438@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 7)) $q1@438@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 7)) $q1@438@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 7)) $q1@438@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1186@11@1186@345-aux|)))
(assert (forall (($q1@438@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 7)) $q1@438@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 7)) $q1@438@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 7)) $q1@438@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1186@11@1186@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@439@01 $Snap)
(assert (= $t@439@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q1@440@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@440@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 7)) $q1@440@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 7)) $q1@440@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1187@11@1187@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@441@01 $Snap)
(assert (= $t@441@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@442@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 113 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@413@01, 8)), $q2@442@01)) | live]
; [else-branch: 113 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@413@01, 8)), $q2@442@01) | live]
(push) ; 5
; [then-branch: 113 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@413@01, 8)), $q2@442@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 8)) $q2@442@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 113 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@413@01, 8)), $q2@442@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 8)) $q2@442@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 8)) $q2@442@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 8)) $q2@442@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@442@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 8)) $q2@442@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 8)) $q2@442@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 8)) $q2@442@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1188@11@1188@345-aux|)))
(assert (forall (($q2@442@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 8)) $q2@442@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 8)) $q2@442@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 8)) $q2@442@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1188@11@1188@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@443@01 $Snap)
(assert (= $t@443@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q2@444@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@444@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 8)) $q2@444@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 8)) $q2@444@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1189@11@1189@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@445@01 $Snap)
(assert (= $t@445@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@413@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@446@01 $Snap)
(assert (= $t@446@01 ($Snap.combine ($Snap.first $t@446@01) ($Snap.second $t@446@01))))
(assert (= ($Snap.first $t@446@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@446@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$_stockholder &&
;   l$_stockholder <= 1461501637330902918203684832716283019655932542975
(declare-const $t@447@01 $Snap)
(assert (= $t@447@01 ($Snap.combine ($Snap.first $t@447@01) ($Snap.second $t@447@01))))
(assert (= ($Snap.first $t@447@01) $Snap.unit))
; [eval] 0 <= l$_stockholder
(assert (<= 0 l$_stockholder@406@01))
(assert (= ($Snap.second $t@447@01) $Snap.unit))
; [eval] l$_stockholder <= 1461501637330902918203684832716283019655932542975
(assert (<= l$_stockholder@406@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@448@01 $Snap)
(assert (= $t@448@01 ($Snap.combine ($Snap.first $t@448@01) ($Snap.second $t@448@01))))
(assert (= ($Snap.first $t@448@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@410@01 0))))
(assert (= ($Snap.second $t@448@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@410@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@449@01 $Snap)
(assert (= $t@449@01 ($Snap.combine ($Snap.first $t@449@01) ($Snap.second $t@449@01))))
(assert (= ($Snap.first $t@449@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@410@01 1))))
(assert (= ($Snap.second $t@449@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@410@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@450@01 $Snap)
(assert (= $t@450@01 ($Snap.combine ($Snap.first $t@450@01) ($Snap.second $t@450@01))))
(assert (= ($Snap.first $t@450@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@410@01 2))))
(assert (= ($Snap.second $t@450@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@410@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@451@01 $Snap)
(assert (= $t@451@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@410@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@452@01 $Snap)
(assert (= $t@452@01 ($Snap.combine ($Snap.first $t@452@01) ($Snap.second $t@452@01))))
(assert (= ($Snap.first $t@452@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@410@01 4))))
(assert (= ($Snap.second $t@452@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@410@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@453@01 $Snap)
(assert (= $t@453@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@410@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@454@01 $Snap)
(assert (= $t@454@01 ($Snap.combine ($Snap.first $t@454@01) ($Snap.second $t@454@01))))
(assert (= ($Snap.first $t@454@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@409@01 0))))
(assert (= ($Snap.second $t@454@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@409@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@455@01 $Snap)
(assert (= $t@455@01 ($Snap.combine ($Snap.first $t@455@01) ($Snap.second $t@455@01))))
(assert (= ($Snap.first $t@455@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@409@01 1))))
(assert (= ($Snap.second $t@455@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@409@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@456@01 $Snap)
(assert (= $t@456@01 ($Snap.combine ($Snap.first $t@456@01) ($Snap.second $t@456@01))))
(assert (= ($Snap.first $t@456@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@409@01 2))))
(assert (= ($Snap.second $t@456@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@409@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@457@01 $Snap)
(assert (= $t@457@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@409@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@458@01 $Snap)
(assert (= $t@458@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@409@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@459@01 $Snap)
(assert (= $t@459@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@460@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@461@01 $Snap)
(assert (= $t@461@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(declare-const $t@462@01 $Snap)
(assert (= $t@462@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@413@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc(self, 2)): Int)
(declare-const $t@463@01 $Snap)
(assert (= $t@463@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@464@01 $Snap)
(assert (= $t@464@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@409@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; l$i0$_stockholder := l$_stockholder
; [exec]
; i0$$res := $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]),
;   l$i0$_stockholder): Int)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$i0$_stockholder): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$i0$_stockholder): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$i0$_stockholder): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(declare-const i0$$res@465@01 Int)
(assert (=
  i0$$res@465@01
  ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@413@01 3)) l$_stockholder@406@01)))))
; [exec]
; label i0$return
; [exec]
; $res := $unwrap($wrap(i0$$res))
; [eval] $unwrap($wrap(i0$$res))
; [eval] $wrap(i0$$res)
(declare-const $res@466@01 Int)
(assert (= $res@466@01 ($unwrap<Int> ($wrap<$Int> i0$$res@465@01))))
; [exec]
; label return
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@424@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@424@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 114 | $out_of_gas@424@01 | live]
; [else-branch: 114 | !($out_of_gas@424@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 114 | $out_of_gas@424@01]
(assert $out_of_gas@424@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 115 | True | live]
; [else-branch: 115 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 115 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@467@01 $Snap)
(assert (= $t@467@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@426@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@468@01 $Struct)
(assert (=
  self@468@01
  ($struct_set<$Struct> self@413@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@413@01 4))
    l$havoc$1@426@01))))
; [exec]
; $contracts := l$havoc$2
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@468@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@413@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@468@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@413@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@468@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@468@01 3))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@468@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@468@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@468@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@413@01 2)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@468@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@413@01 2))))
(pop) ; 4
; [then-branch: 116 | False | dead]
; [else-branch: 116 | True | live]
(push) ; 4
; [else-branch: 116 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 114 | !($out_of_gas@424@01)]
(assert (not $out_of_gas@424@01))
(pop) ; 3
; [eval] !$out_of_gas
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@424@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@424@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 117 | !($out_of_gas@424@01) | live]
; [else-branch: 117 | $out_of_gas@424@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 117 | !($out_of_gas@424@01)]
(assert (not $out_of_gas@424@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 118 | False | dead]
; [else-branch: 118 | True | live]
(push) ; 4
; [else-branch: 118 | True]
(pop) ; 4
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 119 | True | live]
; [else-branch: 119 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 119 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@469@01 $Snap)
(assert (= $t@469@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@426@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@470@01 $Struct)
(assert (=
  self@470@01
  ($struct_set<$Struct> self@413@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@413@01 4))
    l$havoc$1@426@01))))
; [exec]
; $contracts := l$havoc$2
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@470@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@413@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@470@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@413@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@470@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@470@01 3))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@470@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@470@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@470@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@413@01 2)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@470@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@413@01 2))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 117 | $out_of_gas@424@01]
(assert $out_of_gas@424@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$cash ----------
(declare-const $succ@471@01 Bool)
(declare-const $res@472@01 Int)
(declare-const $succ@473@01 Bool)
(declare-const $res@474@01 Int)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@475@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@476@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@477@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@478@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@479@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@480@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@481@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@482@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@483@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@484@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@485@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@486@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@487@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@488@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@489@01 Int)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@490@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@491@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@492@01 $Snap)
(assert (= $t@492@01 ($Snap.combine ($Snap.first $t@492@01) ($Snap.second $t@492@01))))
(assert (= ($Snap.first $t@492@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@479@01 0))))
(assert (= ($Snap.second $t@492@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@479@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@493@01 $Snap)
(assert (= $t@493@01 ($Snap.combine ($Snap.first $t@493@01) ($Snap.second $t@493@01))))
(assert (= ($Snap.first $t@493@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@479@01 1))))
(assert (= ($Snap.second $t@493@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@479@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@494@01 $Snap)
(assert (= $t@494@01 ($Snap.combine ($Snap.first $t@494@01) ($Snap.second $t@494@01))))
(assert (= ($Snap.first $t@494@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@479@01 2))))
(assert (= ($Snap.second $t@494@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@479@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@495@01 $Snap)
(assert (= $t@495@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@496@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 120 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@479@01, 3)), $q0@496@01)) | live]
; [else-branch: 120 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@479@01, 3)), $q0@496@01) | live]
(push) ; 5
; [then-branch: 120 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@479@01, 3)), $q0@496@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 3)) $q0@496@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 120 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@479@01, 3)), $q0@496@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 3)) $q0@496@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 3)) $q0@496@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 3)) $q0@496@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@496@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 3)) $q0@496@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 3)) $q0@496@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 3)) $q0@496@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1283@11@1283@345-aux|)))
(assert (forall (($q0@496@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 3)) $q0@496@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 3)) $q0@496@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 3)) $q0@496@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1283@11@1283@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@497@01 $Snap)
(assert (= $t@497@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@498@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@498@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 3)) $q0@498@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 3)) $q0@498@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1284@11@1284@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@499@01 $Snap)
(assert (= $t@499@01 ($Snap.combine ($Snap.first $t@499@01) ($Snap.second $t@499@01))))
(assert (= ($Snap.first $t@499@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@479@01 4))))
(assert (= ($Snap.second $t@499@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@479@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@500@01 $Snap)
(assert (= $t@500@01 ($Snap.combine ($Snap.first $t@500@01) ($Snap.second $t@500@01))))
(assert (= ($Snap.first $t@500@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@479@01 5))))
(assert (= ($Snap.second $t@500@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@479@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@501@01 $Snap)
(assert (= $t@501@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@502@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 121 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@479@01, 7)), $q1@502@01)) | live]
; [else-branch: 121 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@479@01, 7)), $q1@502@01) | live]
(push) ; 5
; [then-branch: 121 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@479@01, 7)), $q1@502@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 7)) $q1@502@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 121 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@479@01, 7)), $q1@502@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 7)) $q1@502@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 7)) $q1@502@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 7)) $q1@502@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@502@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 7)) $q1@502@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 7)) $q1@502@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 7)) $q1@502@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1287@11@1287@345-aux|)))
(assert (forall (($q1@502@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 7)) $q1@502@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 7)) $q1@502@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 7)) $q1@502@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1287@11@1287@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@503@01 $Snap)
(assert (= $t@503@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q1@504@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@504@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 7)) $q1@504@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 7)) $q1@504@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1288@11@1288@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@505@01 $Snap)
(assert (= $t@505@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@506@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 122 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@479@01, 8)), $q2@506@01)) | live]
; [else-branch: 122 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@479@01, 8)), $q2@506@01) | live]
(push) ; 5
; [then-branch: 122 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@479@01, 8)), $q2@506@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 8)) $q2@506@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 122 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@479@01, 8)), $q2@506@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 8)) $q2@506@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 8)) $q2@506@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 8)) $q2@506@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@506@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 8)) $q2@506@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 8)) $q2@506@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 8)) $q2@506@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1289@11@1289@345-aux|)))
(assert (forall (($q2@506@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 8)) $q2@506@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 8)) $q2@506@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 8)) $q2@506@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1289@11@1289@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@507@01 $Snap)
(assert (= $t@507@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q2@508@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@508@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 8)) $q2@508@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 8)) $q2@508@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1290@11@1290@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@509@01 $Snap)
(assert (= $t@509@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@479@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@510@01 $Snap)
(assert (= $t@510@01 ($Snap.combine ($Snap.first $t@510@01) ($Snap.second $t@510@01))))
(assert (= ($Snap.first $t@510@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@510@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@511@01 $Snap)
(assert (= $t@511@01 ($Snap.combine ($Snap.first $t@511@01) ($Snap.second $t@511@01))))
(assert (= ($Snap.first $t@511@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@476@01 0))))
(assert (= ($Snap.second $t@511@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@476@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@512@01 $Snap)
(assert (= $t@512@01 ($Snap.combine ($Snap.first $t@512@01) ($Snap.second $t@512@01))))
(assert (= ($Snap.first $t@512@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@476@01 1))))
(assert (= ($Snap.second $t@512@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@476@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@513@01 $Snap)
(assert (= $t@513@01 ($Snap.combine ($Snap.first $t@513@01) ($Snap.second $t@513@01))))
(assert (= ($Snap.first $t@513@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@476@01 2))))
(assert (= ($Snap.second $t@513@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@476@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@514@01 $Snap)
(assert (= $t@514@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@476@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@515@01 $Snap)
(assert (= $t@515@01 ($Snap.combine ($Snap.first $t@515@01) ($Snap.second $t@515@01))))
(assert (= ($Snap.first $t@515@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@476@01 4))))
(assert (= ($Snap.second $t@515@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@476@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@516@01 $Snap)
(assert (= $t@516@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@476@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@517@01 $Snap)
(assert (= $t@517@01 ($Snap.combine ($Snap.first $t@517@01) ($Snap.second $t@517@01))))
(assert (= ($Snap.first $t@517@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@475@01 0))))
(assert (= ($Snap.second $t@517@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@475@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@518@01 $Snap)
(assert (= $t@518@01 ($Snap.combine ($Snap.first $t@518@01) ($Snap.second $t@518@01))))
(assert (= ($Snap.first $t@518@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@475@01 1))))
(assert (= ($Snap.second $t@518@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@475@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@519@01 $Snap)
(assert (= $t@519@01 ($Snap.combine ($Snap.first $t@519@01) ($Snap.second $t@519@01))))
(assert (= ($Snap.first $t@519@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@475@01 2))))
(assert (= ($Snap.second $t@519@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@475@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@520@01 $Snap)
(assert (= $t@520@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@475@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@521@01 $Snap)
(assert (= $t@521@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@475@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@522@01 $Snap)
(assert (= $t@522@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@523@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@524@01 $Snap)
(assert (= $t@524@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(declare-const $t@525@01 $Snap)
(assert (= $t@525@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@479@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc(self, 2)): Int)
(declare-const $t@526@01 $Snap)
(assert (= $t@526@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@527@01 $Snap)
(assert (= $t@527@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@475@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $res := $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 4)): Int))
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const $res@528@01 Int)
(assert (=
  $res@528@01
  ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@479@01 4))))))
; [exec]
; label return
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@488@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@488@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 123 | $out_of_gas@488@01 | live]
; [else-branch: 123 | !($out_of_gas@488@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 123 | $out_of_gas@488@01]
(assert $out_of_gas@488@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 124 | True | live]
; [else-branch: 124 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 124 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@529@01 $Snap)
(assert (= $t@529@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@490@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@530@01 $Struct)
(assert (=
  self@530@01
  ($struct_set<$Struct> self@479@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@479@01 4))
    l$havoc$1@490@01))))
; [exec]
; $contracts := l$havoc$2
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@530@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@479@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@530@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@479@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@530@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 3))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@530@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@530@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@479@01 2)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@530@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@479@01 2))))
(pop) ; 4
; [then-branch: 125 | False | dead]
; [else-branch: 125 | True | live]
(push) ; 4
; [else-branch: 125 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 123 | !($out_of_gas@488@01)]
(assert (not $out_of_gas@488@01))
(pop) ; 3
; [eval] !$out_of_gas
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@488@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@488@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 126 | !($out_of_gas@488@01) | live]
; [else-branch: 126 | $out_of_gas@488@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 126 | !($out_of_gas@488@01)]
(assert (not $out_of_gas@488@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 127 | False | dead]
; [else-branch: 127 | True | live]
(push) ; 4
; [else-branch: 127 | True]
(pop) ; 4
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 128 | True | live]
; [else-branch: 128 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 128 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@531@01 $Snap)
(assert (= $t@531@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@490@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@532@01 $Struct)
(assert (=
  self@532@01
  ($struct_set<$Struct> self@479@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@479@01 4))
    l$havoc$1@490@01))))
; [exec]
; $contracts := l$havoc$2
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@532@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@479@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@532@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@479@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@532@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@532@01 3))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@532@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@532@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@532@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@479@01 2)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@532@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@479@01 2))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 126 | $out_of_gas@488@01]
(assert $out_of_gas@488@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$sellStock ----------
(declare-const l$sell_order@533@01 $Int)
(declare-const $succ@534@01 Bool)
(declare-const l$sell_order@535@01 $Int)
(declare-const $succ@536@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@537@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@538@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@539@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@540@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@541@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@542@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@543@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@544@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@545@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@546@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@547@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@548@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@549@01 Bool)
; [exec]
; var l$i0$_stockholder: Int
(declare-const l$i0$_stockholder@550@01 Int)
; [exec]
; var i0$$res: Int
(declare-const i0$$res@551@01 Int)
; [exec]
; var l$havoc: $Map[Int, $Struct]
(declare-const l$havoc@552@01 $Map<Int~_$Struct>)
; [exec]
; var l$send_fail: Bool
(declare-const l$send_fail@553@01 Bool)
; [exec]
; var i1$$pre_self: $Struct
(declare-const i1$$pre_self@554@01 $Struct)
; [exec]
; var i1$$pre_$contracts: $Map[Int, $Struct]
(declare-const i1$$pre_$contracts@555@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@556@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$2: $Struct
(declare-const l$havoc$2@557@01 $Struct)
; [exec]
; var l$havoc$3: $Map[Int, $Struct]
(declare-const l$havoc$3@558@01 $Map<Int~_$Struct>)
; [exec]
; var l$no_reentrant_call: Bool
(declare-const l$no_reentrant_call@559@01 Bool)
; [exec]
; var l$havoc$4: $Map[Int, $Struct]
(declare-const l$havoc$4@560@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$5: $Map[Int, $Struct]
(declare-const l$havoc$5@561@01 $Map<Int~_$Struct>)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@562@01 Bool)
; [exec]
; var l$havoc$6: Int
(declare-const l$havoc$6@563@01 Int)
; [exec]
; var l$havoc$7: $Map[Int, $Struct]
(declare-const l$havoc$7@564@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@565@01 $Snap)
(assert (= $t@565@01 ($Snap.combine ($Snap.first $t@565@01) ($Snap.second $t@565@01))))
(assert (= ($Snap.first $t@565@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@541@01 0))))
(assert (= ($Snap.second $t@565@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@541@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@566@01 $Snap)
(assert (= $t@566@01 ($Snap.combine ($Snap.first $t@566@01) ($Snap.second $t@566@01))))
(assert (= ($Snap.first $t@566@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@541@01 1))))
(assert (= ($Snap.second $t@566@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@541@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@567@01 $Snap)
(assert (= $t@567@01 ($Snap.combine ($Snap.first $t@567@01) ($Snap.second $t@567@01))))
(assert (= ($Snap.first $t@567@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@541@01 2))))
(assert (= ($Snap.second $t@567@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@541@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@568@01 $Snap)
(assert (= $t@568@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@569@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 129 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 3)), $q0@569@01)) | live]
; [else-branch: 129 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 3)), $q0@569@01) | live]
(push) ; 5
; [then-branch: 129 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 3)), $q0@569@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) $q0@569@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 129 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 3)), $q0@569@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) $q0@569@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) $q0@569@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) $q0@569@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@569@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) $q0@569@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) $q0@569@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) $q0@569@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1388@11@1388@345-aux|)))
(assert (forall (($q0@569@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) $q0@569@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) $q0@569@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) $q0@569@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1388@11@1388@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@570@01 $Snap)
(assert (= $t@570@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@571@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@571@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) $q0@571@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) $q0@571@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1389@11@1389@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@572@01 $Snap)
(assert (= $t@572@01 ($Snap.combine ($Snap.first $t@572@01) ($Snap.second $t@572@01))))
(assert (= ($Snap.first $t@572@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@541@01 4))))
(assert (= ($Snap.second $t@572@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@541@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@573@01 $Snap)
(assert (= $t@573@01 ($Snap.combine ($Snap.first $t@573@01) ($Snap.second $t@573@01))))
(assert (= ($Snap.first $t@573@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@541@01 5))))
(assert (= ($Snap.second $t@573@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@541@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@574@01 $Snap)
(assert (= $t@574@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@575@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 130 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 7)), $q1@575@01)) | live]
; [else-branch: 130 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 7)), $q1@575@01) | live]
(push) ; 5
; [then-branch: 130 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 7)), $q1@575@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 7)) $q1@575@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 130 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 7)), $q1@575@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 7)) $q1@575@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 7)) $q1@575@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 7)) $q1@575@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@575@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 7)) $q1@575@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 7)) $q1@575@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 7)) $q1@575@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1392@11@1392@345-aux|)))
(assert (forall (($q1@575@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 7)) $q1@575@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 7)) $q1@575@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 7)) $q1@575@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1392@11@1392@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@576@01 $Snap)
(assert (= $t@576@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q1@577@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@577@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 7)) $q1@577@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 7)) $q1@577@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1393@11@1393@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@578@01 $Snap)
(assert (= $t@578@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@579@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 131 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 8)), $q2@579@01)) | live]
; [else-branch: 131 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 8)), $q2@579@01) | live]
(push) ; 5
; [then-branch: 131 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 8)), $q2@579@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 8)) $q2@579@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 131 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 8)), $q2@579@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 8)) $q2@579@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 8)) $q2@579@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 8)) $q2@579@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@579@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 8)) $q2@579@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 8)) $q2@579@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 8)) $q2@579@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1394@11@1394@345-aux|)))
(assert (forall (($q2@579@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 8)) $q2@579@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 8)) $q2@579@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 8)) $q2@579@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1394@11@1394@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@580@01 $Snap)
(assert (= $t@580@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q2@581@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@581@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 8)) $q2@581@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 8)) $q2@581@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1395@11@1395@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@582@01 $Snap)
(assert (= $t@582@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@541@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@583@01 $Snap)
(assert (= $t@583@01 ($Snap.combine ($Snap.first $t@583@01) ($Snap.second $t@583@01))))
(assert (= ($Snap.first $t@583@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@583@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $unwrap(l$sell_order) &&
;   $unwrap(l$sell_order) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@584@01 $Snap)
(assert (= $t@584@01 ($Snap.combine ($Snap.first $t@584@01) ($Snap.second $t@584@01))))
(assert (= ($Snap.first $t@584@01) $Snap.unit))
; [eval] 0 <= $unwrap(l$sell_order)
; [eval] $unwrap(l$sell_order)
(assert (<= 0 ($unwrap<Int> l$sell_order@535@01)))
(assert (= ($Snap.second $t@584@01) $Snap.unit))
; [eval] $unwrap(l$sell_order) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$sell_order)
(assert (<=
  ($unwrap<Int> l$sell_order@535@01)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@585@01 $Snap)
(assert (= $t@585@01 ($Snap.combine ($Snap.first $t@585@01) ($Snap.second $t@585@01))))
(assert (= ($Snap.first $t@585@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@538@01 0))))
(assert (= ($Snap.second $t@585@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@538@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@586@01 $Snap)
(assert (= $t@586@01 ($Snap.combine ($Snap.first $t@586@01) ($Snap.second $t@586@01))))
(assert (= ($Snap.first $t@586@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@538@01 1))))
(assert (= ($Snap.second $t@586@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@538@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@587@01 $Snap)
(assert (= $t@587@01 ($Snap.combine ($Snap.first $t@587@01) ($Snap.second $t@587@01))))
(assert (= ($Snap.first $t@587@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@538@01 2))))
(assert (= ($Snap.second $t@587@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@538@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@588@01 $Snap)
(assert (= $t@588@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@538@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@589@01 $Snap)
(assert (= $t@589@01 ($Snap.combine ($Snap.first $t@589@01) ($Snap.second $t@589@01))))
(assert (= ($Snap.first $t@589@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@538@01 4))))
(assert (= ($Snap.second $t@589@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@538@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@590@01 $Snap)
(assert (= $t@590@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@538@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@591@01 $Snap)
(assert (= $t@591@01 ($Snap.combine ($Snap.first $t@591@01) ($Snap.second $t@591@01))))
(assert (= ($Snap.first $t@591@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@537@01 0))))
(assert (= ($Snap.second $t@591@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@537@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@592@01 $Snap)
(assert (= $t@592@01 ($Snap.combine ($Snap.first $t@592@01) ($Snap.second $t@592@01))))
(assert (= ($Snap.first $t@592@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@537@01 1))))
(assert (= ($Snap.second $t@592@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@537@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@593@01 $Snap)
(assert (= $t@593@01 ($Snap.combine ($Snap.first $t@593@01) ($Snap.second $t@593@01))))
(assert (= ($Snap.first $t@593@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@537@01 2))))
(assert (= ($Snap.second $t@593@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@537@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@594@01 $Snap)
(assert (= $t@594@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@537@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@595@01 $Snap)
(assert (= $t@595@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@596@01 $Snap)
(assert (= $t@596@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@597@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@598@01 $Snap)
(assert (= $t@598@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(declare-const $t@599@01 $Snap)
(assert (= $t@599@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@541@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc(self, 2)): Int)
(declare-const $t@600@01 $Snap)
(assert (= $t@600@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@601@01 $Snap)
(assert (= $t@601@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@537@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !($unwrap(l$sell_order) > 0)
; [eval] $unwrap(l$sell_order) > 0
; [eval] $unwrap(l$sell_order)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (> ($unwrap<Int> l$sell_order@535@01) 0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (> ($unwrap<Int> l$sell_order@535@01) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 132 | !($unwrap[Int](l$sell_order@535@01) > 0) | live]
; [else-branch: 132 | $unwrap[Int](l$sell_order@535@01) > 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 132 | !($unwrap[Int](l$sell_order@535@01) > 0)]
(assert (not (> ($unwrap<Int> l$sell_order@535@01) 0)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 133 | True | live]
; [else-branch: 133 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 133 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@602@01 $Snap)
(assert (= $t@602@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@563@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@603@01 $Struct)
(assert (=
  self@603@01
  ($struct_set<$Struct> self@541@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@541@01 4))
    l$havoc$6@563@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@603@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@603@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@603@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@603@01 3))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@603@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@603@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@603@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@603@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 2))))
(pop) ; 4
; [then-branch: 134 | False | dead]
; [else-branch: 134 | True | live]
(push) ; 4
; [else-branch: 134 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 132 | $unwrap[Int](l$sell_order@535@01) > 0]
(assert (> ($unwrap<Int> l$sell_order@535@01) 0))
(pop) ; 3
; [eval] !!($unwrap(l$sell_order) > 0)
; [eval] !($unwrap(l$sell_order) > 0)
; [eval] $unwrap(l$sell_order) > 0
; [eval] $unwrap(l$sell_order)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (> ($unwrap<Int> l$sell_order@535@01) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (> ($unwrap<Int> l$sell_order@535@01) 0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 135 | $unwrap[Int](l$sell_order@535@01) > 0 | live]
; [else-branch: 135 | !($unwrap[Int](l$sell_order@535@01) > 0) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 135 | $unwrap[Int](l$sell_order@535@01) > 0]
(assert (> ($unwrap<Int> l$sell_order@535@01) 0))
; [exec]
; l$i0$_stockholder := ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const l$i0$_stockholder@604@01 Int)
(assert (= l$i0$_stockholder@604@01 ($struct_get<Int> ($struct_loc<Int> msg@537@01 0))))
; [exec]
; i0$$res := $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]),
;   l$i0$_stockholder): Int)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$i0$_stockholder): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$i0$_stockholder): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$i0$_stockholder): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(declare-const i0$$res@605@01 Int)
(assert (=
  i0$$res@605@01
  ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) l$i0$_stockholder@604@01)))))
; [exec]
; label i0$return
; [eval] !(i0$$res >= $unwrap(l$sell_order))
; [eval] i0$$res >= $unwrap(l$sell_order)
; [eval] $unwrap(l$sell_order)
(push) ; 4
(set-option :timeout 10)
(assert (not (>= i0$$res@605@01 ($unwrap<Int> l$sell_order@535@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (>= i0$$res@605@01 ($unwrap<Int> l$sell_order@535@01)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 136 | !(i0$$res@605@01 >= $unwrap[Int](l$sell_order@535@01)) | live]
; [else-branch: 136 | i0$$res@605@01 >= $unwrap[Int](l$sell_order@535@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 136 | !(i0$$res@605@01 >= $unwrap[Int](l$sell_order@535@01))]
(assert (not (>= i0$$res@605@01 ($unwrap<Int> l$sell_order@535@01))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 137 | True | live]
; [else-branch: 137 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 137 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@606@01 $Snap)
(assert (= $t@606@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@563@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@607@01 $Struct)
(assert (=
  self@607@01
  ($struct_set<$Struct> self@541@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@541@01 4))
    l$havoc$6@563@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@607@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@607@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@607@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@607@01 3))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@607@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@607@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@607@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@607@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 2))))
(pop) ; 5
; [then-branch: 138 | False | dead]
; [else-branch: 138 | True | live]
(push) ; 5
; [else-branch: 138 | True]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 136 | i0$$res@605@01 >= $unwrap[Int](l$sell_order@535@01)]
(assert (>= i0$$res@605@01 ($unwrap<Int> l$sell_order@535@01)))
(pop) ; 4
; [eval] !!(i0$$res >= $unwrap(l$sell_order))
; [eval] !(i0$$res >= $unwrap(l$sell_order))
; [eval] i0$$res >= $unwrap(l$sell_order)
; [eval] $unwrap(l$sell_order)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (>= i0$$res@605@01 ($unwrap<Int> l$sell_order@535@01)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>= i0$$res@605@01 ($unwrap<Int> l$sell_order@535@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 139 | i0$$res@605@01 >= $unwrap[Int](l$sell_order@535@01) | live]
; [else-branch: 139 | !(i0$$res@605@01 >= $unwrap[Int](l$sell_order@535@01)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 139 | i0$$res@605@01 >= $unwrap[Int](l$sell_order@535@01)]
(assert (>= i0$$res@605@01 ($unwrap<Int> l$sell_order@535@01)))
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))) < 0
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 140 | $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2))))) < 0 | dead]
; [else-branch: 140 | !($unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2))))) < 0) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 140 | !($unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2))))) < 0)]
(assert (not
  (<
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
    0)))
(pop) ; 5
; [eval] !($unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))) < 0)
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))) < 0
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
  0)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 141 | !($unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2))))) < 0) | live]
; [else-branch: 141 | $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2))))) < 0 | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 141 | !($unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2))))) < 0)]
(assert (not
  (<
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
    0)))
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 142 | $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 142 | !($unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 142 | $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 143 | True | live]
; [else-branch: 143 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 143 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@608@01 $Snap)
(assert (= $t@608@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@563@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@609@01 $Struct)
(assert (=
  self@609@01
  ($struct_set<$Struct> self@541@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@541@01 4))
    l$havoc$6@563@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@609@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@609@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@609@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@609@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@609@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@609@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@609@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@609@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 2))))
(pop) ; 7
; [then-branch: 144 | False | dead]
; [else-branch: 144 | True | live]
(push) ; 7
; [else-branch: 144 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 142 | !($unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 6
; [eval] !($unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 145 | !($unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 145 | $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 145 | !($unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] !(($struct_get($struct_loc(self, 4)): Int) >= $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))))
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 7
(set-option :timeout 10)
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@541@01 4))
  ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@541@01 4))
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 146 | !($struct_get[Int]($struct_loc[Int](self@541@01, 4)) >= $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2)))))) | live]
; [else-branch: 146 | $struct_get[Int]($struct_loc[Int](self@541@01, 4)) >= $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2))))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 146 | !($struct_get[Int]($struct_loc[Int](self@541@01, 4)) >= $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2))))))]
(assert (not
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@541@01 4))
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2))))))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 147 | True | live]
; [else-branch: 147 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 147 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@610@01 $Snap)
(assert (= $t@610@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@563@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@611@01 $Struct)
(assert (=
  self@611@01
  ($struct_set<$Struct> self@541@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@541@01 4))
    l$havoc$6@563@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@611@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@611@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@611@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@611@01 3))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@611@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@611@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@611@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@611@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 2))))
(pop) ; 8
; [then-branch: 148 | False | dead]
; [else-branch: 148 | True | live]
(push) ; 8
; [else-branch: 148 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 146 | $struct_get[Int]($struct_loc[Int](self@541@01, 4)) >= $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2)))))]
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@541@01 4))
  ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))))
(pop) ; 7
; [eval] !!(($struct_get($struct_loc(self, 4)): Int) >= $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))))
; [eval] !(($struct_get($struct_loc(self, 4)): Int) >= $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))))
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@541@01 4))
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@541@01 4))
  ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 149 | $struct_get[Int]($struct_loc[Int](self@541@01, 4)) >= $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2))))) | live]
; [else-branch: 149 | !($struct_get[Int]($struct_loc[Int](self@541@01, 4)) >= $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2)))))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 149 | $struct_get[Int]($struct_loc[Int](self@541@01, 4)) >= $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2)))))]
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@541@01 4))
  ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$sell_order) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$sell_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$sell_order)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)))))
      ($unwrap<Int> l$sell_order@535@01))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 150 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 3)), $struct_get[Int]($struct_loc[Int](msg@537@01, 0))))) - $unwrap[Int](l$sell_order@535@01) < 0 | dead]
; [else-branch: 150 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 3)), $struct_get[Int]($struct_loc[Int](msg@537@01, 0))))) - $unwrap[Int](l$sell_order@535@01) < 0) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 150 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 3)), $struct_get[Int]($struct_loc[Int](msg@537@01, 0))))) - $unwrap[Int](l$sell_order@535@01) < 0)]
(assert (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)))))
      ($unwrap<Int> l$sell_order@535@01))
    0)))
(pop) ; 8
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$sell_order) < 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$sell_order) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$sell_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$sell_order)
(push) ; 8
(set-option :timeout 10)
(assert (not (<
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)))))
    ($unwrap<Int> l$sell_order@535@01))
  0)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)))))
      ($unwrap<Int> l$sell_order@535@01))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 151 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 3)), $struct_get[Int]($struct_loc[Int](msg@537@01, 0))))) - $unwrap[Int](l$sell_order@535@01) < 0) | live]
; [else-branch: 151 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 3)), $struct_get[Int]($struct_loc[Int](msg@537@01, 0))))) - $unwrap[Int](l$sell_order@535@01) < 0 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 151 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 3)), $struct_get[Int]($struct_loc[Int](msg@537@01, 0))))) - $unwrap[Int](l$sell_order@535@01) < 0)]
(assert (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)))))
      ($unwrap<Int> l$sell_order@535@01))
    0)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$sell_order) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$sell_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$sell_order)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)))))
      ($unwrap<Int> l$sell_order@535@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 152 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 3)), $struct_get[Int]($struct_loc[Int](msg@537@01, 0))))) - $unwrap[Int](l$sell_order@535@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 152 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 3)), $struct_get[Int]($struct_loc[Int](msg@537@01, 0))))) - $unwrap[Int](l$sell_order@535@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 152 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 3)), $struct_get[Int]($struct_loc[Int](msg@537@01, 0))))) - $unwrap[Int](l$sell_order@535@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)))))
      ($unwrap<Int> l$sell_order@535@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 9
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$sell_order) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$sell_order) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$sell_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$sell_order)
(push) ; 9
(set-option :timeout 10)
(assert (not (>
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)))))
    ($unwrap<Int> l$sell_order@535@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)))))
      ($unwrap<Int> l$sell_order@535@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 153 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 3)), $struct_get[Int]($struct_loc[Int](msg@537@01, 0))))) - $unwrap[Int](l$sell_order@535@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 153 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 3)), $struct_get[Int]($struct_loc[Int](msg@537@01, 0))))) - $unwrap[Int](l$sell_order@535@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 153 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@541@01, 3)), $struct_get[Int]($struct_loc[Int](msg@537@01, 0))))) - $unwrap[Int](l$sell_order@535@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)))))
      ($unwrap<Int> l$sell_order@535@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]),
;   ($struct_get($struct_loc(msg, 0)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self,
;   3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) -
;   $unwrap(l$sell_order)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$sell_order)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$sell_order)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$sell_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$sell_order)
(declare-const self@612@01 $Struct)
(assert (=
  self@612@01
  ($struct_set<$Struct> self@541@01 3 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)) (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@541@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)))))
    ($unwrap<Int> l$sell_order@535@01))))))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$sell_order) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$sell_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$sell_order)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 3)) ($struct_get<Int> ($struct_loc<Int> self@612@01 0)))))
      ($unwrap<Int> l$sell_order@535@01))
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 154 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 3)), $struct_get[Int]($struct_loc[Int](self@612@01, 0))))) + $unwrap[Int](l$sell_order@535@01) < 0 | dead]
; [else-branch: 154 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 3)), $struct_get[Int]($struct_loc[Int](self@612@01, 0))))) + $unwrap[Int](l$sell_order@535@01) < 0) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 154 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 3)), $struct_get[Int]($struct_loc[Int](self@612@01, 0))))) + $unwrap[Int](l$sell_order@535@01) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 3)) ($struct_get<Int> ($struct_loc<Int> self@612@01 0)))))
      ($unwrap<Int> l$sell_order@535@01))
    0)))
(pop) ; 10
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$sell_order) < 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$sell_order) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$sell_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$sell_order)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 3)) ($struct_get<Int> ($struct_loc<Int> self@612@01 0)))))
    ($unwrap<Int> l$sell_order@535@01))
  0)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 3)) ($struct_get<Int> ($struct_loc<Int> self@612@01 0)))))
      ($unwrap<Int> l$sell_order@535@01))
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 155 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 3)), $struct_get[Int]($struct_loc[Int](self@612@01, 0))))) + $unwrap[Int](l$sell_order@535@01) < 0) | live]
; [else-branch: 155 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 3)), $struct_get[Int]($struct_loc[Int](self@612@01, 0))))) + $unwrap[Int](l$sell_order@535@01) < 0 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 155 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 3)), $struct_get[Int]($struct_loc[Int](self@612@01, 0))))) + $unwrap[Int](l$sell_order@535@01) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 3)) ($struct_get<Int> ($struct_loc<Int> self@612@01 0)))))
      ($unwrap<Int> l$sell_order@535@01))
    0)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$sell_order) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$sell_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$sell_order)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 3)) ($struct_get<Int> ($struct_loc<Int> self@612@01 0)))))
      ($unwrap<Int> l$sell_order@535@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 3)) ($struct_get<Int> ($struct_loc<Int> self@612@01 0)))))
    ($unwrap<Int> l$sell_order@535@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 156 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 3)), $struct_get[Int]($struct_loc[Int](self@612@01, 0))))) + $unwrap[Int](l$sell_order@535@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 156 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 3)), $struct_get[Int]($struct_loc[Int](self@612@01, 0))))) + $unwrap[Int](l$sell_order@535@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 156 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 3)), $struct_get[Int]($struct_loc[Int](self@612@01, 0))))) + $unwrap[Int](l$sell_order@535@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 3)) ($struct_get<Int> ($struct_loc<Int> self@612@01 0)))))
    ($unwrap<Int> l$sell_order@535@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 157 | True | live]
; [else-branch: 157 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 157 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@613@01 $Snap)
(assert (= $t@613@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@563@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@614@01 $Struct)
(assert (=
  self@614@01
  ($struct_set<$Struct> self@541@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@541@01 4))
    l$havoc$6@563@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@614@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 1)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@614@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@614@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@614@01 3))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@614@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@614@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 13
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@614@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@614@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 2))))
(pop) ; 12
; [then-branch: 158 | False | dead]
; [else-branch: 158 | True | live]
(push) ; 12
; [else-branch: 158 | True]
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 156 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 3)), $struct_get[Int]($struct_loc[Int](self@612@01, 0))))) + $unwrap[Int](l$sell_order@535@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 3)) ($struct_get<Int> ($struct_loc<Int> self@612@01 0)))))
      ($unwrap<Int> l$sell_order@535@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 11
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$sell_order) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$sell_order) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$sell_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$sell_order)
(push) ; 11
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 3)) ($struct_get<Int> ($struct_loc<Int> self@612@01 0)))))
    ($unwrap<Int> l$sell_order@535@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 3)) ($struct_get<Int> ($struct_loc<Int> self@612@01 0)))))
      ($unwrap<Int> l$sell_order@535@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 159 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 3)), $struct_get[Int]($struct_loc[Int](self@612@01, 0))))) + $unwrap[Int](l$sell_order@535@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 159 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 3)), $struct_get[Int]($struct_loc[Int](self@612@01, 0))))) + $unwrap[Int](l$sell_order@535@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 159 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 3)), $struct_get[Int]($struct_loc[Int](self@612@01, 0))))) + $unwrap[Int](l$sell_order@535@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 3)) ($struct_get<Int> ($struct_loc<Int> self@612@01 0)))))
      ($unwrap<Int> l$sell_order@535@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 0)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self,
;   3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) +
;   $unwrap(l$sell_order)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$sell_order)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$sell_order)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$sell_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$sell_order)
(declare-const self@615@01 $Struct)
(assert (=
  self@615@01
  ($struct_set<$Struct> self@612@01 3 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 3)) ($struct_get<Int> ($struct_loc<Int> self@612@01 0)) (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 3)) ($struct_get<Int> ($struct_loc<Int> self@612@01 0)))))
    ($unwrap<Int> l$sell_order@535@01))))))
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))) < 0
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (<
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@615@01 2)))))
    0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 160 | $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@615@01, 2))))) < 0 | dead]
; [else-branch: 160 | !($unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@615@01, 2))))) < 0) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 160 | !($unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@615@01, 2))))) < 0)]
(assert (not
  (<
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@615@01 2)))))
    0)))
(pop) ; 12
; [eval] !($unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))) < 0)
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))) < 0
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@615@01 2)))))
  0)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (<
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@615@01 2)))))
    0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 161 | !($unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@615@01, 2))))) < 0) | live]
; [else-branch: 161 | $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@615@01, 2))))) < 0 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 161 | !($unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@615@01, 2))))) < 0)]
(assert (not
  (<
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@615@01 2)))))
    0)))
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (>
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@615@01 2)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 162 | $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@615@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 162 | !($unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@615@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 162 | !($unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@615@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@615@01 2)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 13
; [eval] !($unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 13
(set-option :timeout 10)
(assert (not (>
  ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@615@01 2)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (>
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@615@01 2)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 163 | !($unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@615@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 163 | $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@615@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 163 | !($unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@615@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@615@01 2)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] ($struct_get($struct_loc(self, 4)): Int) < $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@615@01 4))
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@615@01 2)))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 164 | $struct_get[Int]($struct_loc[Int](self@615@01, 4)) < $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@615@01, 2))))) | dead]
; [else-branch: 164 | !($struct_get[Int]($struct_loc[Int](self@615@01, 4)) < $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@615@01, 2)))))) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 164 | !($struct_get[Int]($struct_loc[Int](self@615@01, 4)) < $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@615@01, 2))))))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@615@01 4))
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@615@01 2))))))))
(pop) ; 14
; [eval] !(($struct_get($struct_loc(self, 4)): Int) < $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))))
; [eval] ($struct_get($struct_loc(self, 4)): Int) < $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 14
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> self@615@01 4))
  ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@615@01 2))))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@615@01 4))
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@615@01 2)))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 165 | !($struct_get[Int]($struct_loc[Int](self@615@01, 4)) < $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@615@01, 2)))))) | live]
; [else-branch: 165 | $struct_get[Int]($struct_loc[Int](self@615@01, 4)) < $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@615@01, 2))))) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 165 | !($struct_get[Int]($struct_loc[Int](self@615@01, 4)) < $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@615@01, 2))))))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@615@01 4))
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@615@01 2))))))))
; [exec]
; self := ($struct_set(self, 7, ($map_set(($struct_get($struct_loc(self, 7)): $Map[Int, Int]),
;   ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self,
;   7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) +
;   $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 7, ($map_set(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(declare-const self@616@01 $Struct)
(assert (=
  self@616@01
  ($struct_set<$Struct> self@615@01 7 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@615@01 7)) ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@615@01 7)) ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)))
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@615@01 2))))))))))
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) -
;   $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) - $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) - $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] $unwrap($w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul(l$sell_order, $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(declare-const self@617@01 $Struct)
(assert (=
  self@617@01
  ($struct_set<$Struct> self@616@01 4 (-
    ($struct_get<Int> ($struct_loc<Int> self@616@01 4))
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 2)))))))))
; [exec]
; exhale true &&
;   (forall $arg0: Int, $arg1: Int, $arg2: Int ::
;     { e$Transfer($arg0, $arg1, $arg2) }
;     perm(e$Transfer($arg0, $arg1, $arg2)) > none ==>
;     acc(e$Transfer($arg0, $arg1, $arg2), perm(e$Transfer($arg0, $arg1, $arg2))))
(declare-const $arg0@618@01 Int)
(declare-const $arg1@619@01 Int)
(declare-const $arg2@620@01 Int)
(push) ; 15
; [eval] perm(e$Transfer($arg0, $arg1, $arg2)) > none
; [eval] perm(e$Transfer($arg0, $arg1, $arg2))
(declare-const sm@621@01 $PSF<e$Transfer>)
(declare-const s@622@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@623@01 $PPM)
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef1|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@621@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef2|)))
(assert ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@621@01  $PSF<e$Transfer>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@618@01)
    ($SortWrappers.IntTo$Snap $arg1@619@01))
  ($SortWrappers.IntTo$Snap $arg2@620@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@618@01)
    ($SortWrappers.IntTo$Snap $arg1@619@01))
  ($SortWrappers.IntTo$Snap $arg2@620@01))))
(assert (>
  ($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@618@01)
      ($SortWrappers.IntTo$Snap $arg1@619@01))
    ($SortWrappers.IntTo$Snap $arg2@620@01)))
  $Perm.No))
; [eval] perm(e$Transfer($arg0, $arg1, $arg2))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 15
(declare-fun inv@624@01 (Int Int Int) Int)
(declare-fun img@625@01 (Int Int Int) Bool)
(declare-fun inv@626@01 (Int Int Int) Int)
(declare-fun img@627@01 (Int Int Int) Bool)
(declare-fun inv@628@01 (Int Int Int) Int)
(declare-fun img@629@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef1|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@621@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef2|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@618@01 Int) ($arg1@619@01 Int) ($arg2@620@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@618@01)
          ($SortWrappers.IntTo$Snap $arg1@619@01))
        ($SortWrappers.IntTo$Snap $arg2@620@01)))
      $Perm.No)
    ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@621@01  $PSF<e$Transfer>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@618@01)
        ($SortWrappers.IntTo$Snap $arg1@619@01))
      ($SortWrappers.IntTo$Snap $arg2@620@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@618@01)
        ($SortWrappers.IntTo$Snap $arg1@619@01))
      ($SortWrappers.IntTo$Snap $arg2@620@01))))
  :pattern (($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@621@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@618@01)
      ($SortWrappers.IntTo$Snap $arg1@619@01))
    ($SortWrappers.IntTo$Snap $arg2@620@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@618@01)
      ($SortWrappers.IntTo$Snap $arg1@619@01))
    ($SortWrappers.IntTo$Snap $arg2@620@01))))
  :qid |e$Transfer-aux|)))
(push) ; 15
(assert (not (forall (($arg0@618@01 Int) ($arg1@619@01 Int) ($arg2@620@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@618@01)
          ($SortWrappers.IntTo$Snap $arg1@619@01))
        ($SortWrappers.IntTo$Snap $arg2@620@01)))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@618@01)
            ($SortWrappers.IntTo$Snap $arg1@619@01))
          ($SortWrappers.IntTo$Snap $arg2@620@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@618@01)
            ($SortWrappers.IntTo$Snap $arg1@619@01))
          ($SortWrappers.IntTo$Snap $arg2@620@01))))))
  
  :qid |quant-u-2045|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 15
(assert (not (forall (($arg01@618@01 Int) ($arg11@619@01 Int) ($arg21@620@01 Int) ($arg02@618@01 Int) ($arg12@619@01 Int) ($arg22@620@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg01@618@01)
                ($SortWrappers.IntTo$Snap $arg11@619@01))
              ($SortWrappers.IntTo$Snap $arg21@620@01)))
            $Perm.No)
          ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@621@01  $PSF<e$Transfer>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@618@01)
              ($SortWrappers.IntTo$Snap $arg11@619@01))
            ($SortWrappers.IntTo$Snap $arg21@620@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@618@01)
              ($SortWrappers.IntTo$Snap $arg11@619@01))
            ($SortWrappers.IntTo$Snap $arg21@620@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@618@01)
              ($SortWrappers.IntTo$Snap $arg11@619@01))
            ($SortWrappers.IntTo$Snap $arg21@620@01)))))
      (and
        (and
          (>
            ($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg02@618@01)
                ($SortWrappers.IntTo$Snap $arg12@619@01))
              ($SortWrappers.IntTo$Snap $arg22@620@01)))
            $Perm.No)
          ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@621@01  $PSF<e$Transfer>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@618@01)
              ($SortWrappers.IntTo$Snap $arg12@619@01))
            ($SortWrappers.IntTo$Snap $arg22@620@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@618@01)
              ($SortWrappers.IntTo$Snap $arg12@619@01))
            ($SortWrappers.IntTo$Snap $arg22@620@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@618@01)
              ($SortWrappers.IntTo$Snap $arg12@619@01))
            ($SortWrappers.IntTo$Snap $arg22@620@01)))))
      (and
        (and (= $arg01@618@01 $arg02@618@01) (= $arg11@619@01 $arg12@619@01))
        (= $arg21@620@01 $arg22@620@01)))
    (and
      (and (= $arg01@618@01 $arg02@618@01) (= $arg11@619@01 $arg12@619@01))
      (= $arg21@620@01 $arg22@620@01)))
  
  :qid |e$Transfer-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@618@01 Int) ($arg1@619@01 Int) ($arg2@620@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@618@01)
            ($SortWrappers.IntTo$Snap $arg1@619@01))
          ($SortWrappers.IntTo$Snap $arg2@620@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@618@01)
            ($SortWrappers.IntTo$Snap $arg1@619@01))
          ($SortWrappers.IntTo$Snap $arg2@620@01)))))
    (and
      (and
        (= (inv@624@01 $arg0@618@01 $arg1@619@01 $arg2@620@01) $arg0@618@01)
        (= (inv@626@01 $arg0@618@01 $arg1@619@01 $arg2@620@01) $arg1@619@01)
        (= (inv@628@01 $arg0@618@01 $arg1@619@01 $arg2@620@01) $arg2@620@01))
      (and
        (img@625@01 $arg0@618@01 $arg1@619@01 $arg2@620@01)
        (img@627@01 $arg0@618@01 $arg1@619@01 $arg2@620@01)
        (img@629@01 $arg0@618@01 $arg1@619@01 $arg2@620@01))))
  :pattern (($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@621@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@618@01)
      ($SortWrappers.IntTo$Snap $arg1@619@01))
    ($SortWrappers.IntTo$Snap $arg2@620@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@618@01)
      ($SortWrappers.IntTo$Snap $arg1@619@01))
    ($SortWrappers.IntTo$Snap $arg2@620@01))))
  :qid |e$Transfer-invOfFct|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (and
      (and
        (img@625@01 $arg0 $arg1 $arg2)
        (img@627@01 $arg0 $arg1 $arg2)
        (img@629@01 $arg0 $arg1 $arg2))
      (and
        (>
          ($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@624@01 $arg0 $arg1 $arg2))
              ($SortWrappers.IntTo$Snap (inv@626@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@628@01 $arg0 $arg1 $arg2))))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@624@01 $arg0 $arg1 $arg2))
              ($SortWrappers.IntTo$Snap (inv@626@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@628@01 $arg0 $arg1 $arg2)))))))
    (and
      (= (inv@624@01 $arg0 $arg1 $arg2) $arg0)
      (= (inv@626@01 $arg0 $arg1 $arg2) $arg1)
      (= (inv@628@01 $arg0 $arg1 $arg2) $arg2)))
  :pattern ((inv@624@01 $arg0 $arg1 $arg2))
  :pattern ((inv@626@01 $arg0 $arg1 $arg2))
  :pattern ((inv@628@01 $arg0 $arg1 $arg2))
  :qid |e$Transfer-fctOfInv|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@624@01 $arg0 $arg1 $arg2))
          ($SortWrappers.IntTo$Snap (inv@626@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@628@01 $arg0 $arg1 $arg2))))
      $Perm.No)
    ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@621@01  $PSF<e$Transfer>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))))
  :pattern ((inv@624@01 $arg0 $arg1 $arg2) (inv@626@01 $arg0 $arg1 $arg2) (inv@628@01 $arg0 $arg1 $arg2))
  :qid |quant-u-2046|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 15
(assert (not (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@624@01 $arg0 $arg1 $arg2))
            ($SortWrappers.IntTo$Snap (inv@626@01 $arg0 $arg1 $arg2)))
          ($SortWrappers.IntTo$Snap (inv@628@01 $arg0 $arg1 $arg2))))
        $Perm.No)
      (and
        (img@625@01 $arg0 $arg1 $arg2)
        (img@627@01 $arg0 $arg1 $arg2)
        (img@629@01 $arg0 $arg1 $arg2))
      (and
        (= $arg0 (inv@624@01 $arg0 $arg1 $arg2))
        (= $arg1 (inv@626@01 $arg0 $arg1 $arg2))
        (= $arg2 (inv@628@01 $arg0 $arg1 $arg2))))
    (=
      ($PSF.perm_e$Transfer (as pm@623@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@624@01 $arg0 $arg1 $arg2))
          ($SortWrappers.IntTo$Snap (inv@626@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@628@01 $arg0 $arg1 $arg2))))
      $Perm.No))
  
  :qid |quant-u-2047|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; exhale true &&
;   (forall $arg0: Int, $arg1: Int ::
;     { e$Buy($arg0, $arg1) }
;     perm(e$Buy($arg0, $arg1)) > none ==>
;     acc(e$Buy($arg0, $arg1), perm(e$Buy($arg0, $arg1))))
(declare-const $arg0@630@01 Int)
(declare-const $arg1@631@01 Int)
(push) ; 15
; [eval] perm(e$Buy($arg0, $arg1)) > none
; [eval] perm(e$Buy($arg0, $arg1))
(declare-const sm@632@01 $PSF<e$Buy>)
(declare-const s@633@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@634@01 $PPM)
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=
    ($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1)))
    $Perm.No)
  :pattern (($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resPrmSumDef4|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  ($PSF.loc_e$Buy ($PSF.lookup_e$Buy (as sm@632@01  $PSF<e$Buy>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1)))
  :pattern (($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resTrgDef5|)))
(assert ($PSF.loc_e$Buy ($PSF.lookup_e$Buy (as sm@632@01  $PSF<e$Buy>) ($Snap.combine
  ($SortWrappers.IntTo$Snap $arg0@630@01)
  ($SortWrappers.IntTo$Snap $arg1@631@01))) ($Snap.combine
  ($SortWrappers.IntTo$Snap $arg0@630@01)
  ($SortWrappers.IntTo$Snap $arg1@631@01))))
(assert (>
  ($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@630@01)
    ($SortWrappers.IntTo$Snap $arg1@631@01)))
  $Perm.No))
; [eval] perm(e$Buy($arg0, $arg1))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 15
(declare-fun inv@635@01 (Int Int) Int)
(declare-fun img@636@01 (Int Int) Bool)
(declare-fun inv@637@01 (Int Int) Int)
(declare-fun img@638@01 (Int Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=
    ($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1)))
    $Perm.No)
  :pattern (($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resPrmSumDef4|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  ($PSF.loc_e$Buy ($PSF.lookup_e$Buy (as sm@632@01  $PSF<e$Buy>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1)))
  :pattern (($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resTrgDef5|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@630@01 Int) ($arg1@631@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@630@01)
        ($SortWrappers.IntTo$Snap $arg1@631@01)))
      $Perm.No)
    ($PSF.loc_e$Buy ($PSF.lookup_e$Buy (as sm@632@01  $PSF<e$Buy>) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@630@01)
      ($SortWrappers.IntTo$Snap $arg1@631@01))) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@630@01)
      ($SortWrappers.IntTo$Snap $arg1@631@01))))
  :pattern (($PSF.loc_e$Buy ($PSF.lookup_e$Buy (as sm@632@01  $PSF<e$Buy>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@630@01)
    ($SortWrappers.IntTo$Snap $arg1@631@01))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@630@01)
    ($SortWrappers.IntTo$Snap $arg1@631@01))))
  :qid |e$Buy-aux|)))
(push) ; 15
(assert (not (forall (($arg0@630@01 Int) ($arg1@631@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@630@01)
        ($SortWrappers.IntTo$Snap $arg1@631@01)))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@630@01)
          ($SortWrappers.IntTo$Snap $arg1@631@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@630@01)
          ($SortWrappers.IntTo$Snap $arg1@631@01))))))
  
  :qid |quant-u-2048|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 15
(assert (not (forall (($arg01@630@01 Int) ($arg11@631@01 Int) ($arg02@630@01 Int) ($arg12@631@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@630@01)
              ($SortWrappers.IntTo$Snap $arg11@631@01)))
            $Perm.No)
          ($PSF.loc_e$Buy ($PSF.lookup_e$Buy (as sm@632@01  $PSF<e$Buy>) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg01@630@01)
            ($SortWrappers.IntTo$Snap $arg11@631@01))) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg01@630@01)
            ($SortWrappers.IntTo$Snap $arg11@631@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg01@630@01)
            ($SortWrappers.IntTo$Snap $arg11@631@01)))))
      (and
        (and
          (>
            ($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@630@01)
              ($SortWrappers.IntTo$Snap $arg12@631@01)))
            $Perm.No)
          ($PSF.loc_e$Buy ($PSF.lookup_e$Buy (as sm@632@01  $PSF<e$Buy>) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg02@630@01)
            ($SortWrappers.IntTo$Snap $arg12@631@01))) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg02@630@01)
            ($SortWrappers.IntTo$Snap $arg12@631@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg02@630@01)
            ($SortWrappers.IntTo$Snap $arg12@631@01)))))
      (and (= $arg01@630@01 $arg02@630@01) (= $arg11@631@01 $arg12@631@01)))
    (and (= $arg01@630@01 $arg02@630@01) (= $arg11@631@01 $arg12@631@01)))
  
  :qid |e$Buy-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@630@01 Int) ($arg1@631@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@630@01)
          ($SortWrappers.IntTo$Snap $arg1@631@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@630@01)
          ($SortWrappers.IntTo$Snap $arg1@631@01)))))
    (and
      (and
        (= (inv@635@01 $arg0@630@01 $arg1@631@01) $arg0@630@01)
        (= (inv@637@01 $arg0@630@01 $arg1@631@01) $arg1@631@01))
      (and
        (img@636@01 $arg0@630@01 $arg1@631@01)
        (img@638@01 $arg0@630@01 $arg1@631@01))))
  :pattern (($PSF.loc_e$Buy ($PSF.lookup_e$Buy (as sm@632@01  $PSF<e$Buy>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@630@01)
    ($SortWrappers.IntTo$Snap $arg1@631@01))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@630@01)
    ($SortWrappers.IntTo$Snap $arg1@631@01))))
  :qid |e$Buy-invOfFct|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=>
    (and
      (and (img@636@01 $arg0 $arg1) (img@638@01 $arg0 $arg1))
      (and
        (>
          ($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@635@01 $arg0 $arg1))
            ($SortWrappers.IntTo$Snap (inv@637@01 $arg0 $arg1))))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@635@01 $arg0 $arg1))
            ($SortWrappers.IntTo$Snap (inv@637@01 $arg0 $arg1)))))))
    (and (= (inv@635@01 $arg0 $arg1) $arg0) (= (inv@637@01 $arg0 $arg1) $arg1)))
  :pattern ((inv@635@01 $arg0 $arg1))
  :pattern ((inv@637@01 $arg0 $arg1))
  :qid |e$Buy-fctOfInv|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap (inv@635@01 $arg0 $arg1))
        ($SortWrappers.IntTo$Snap (inv@637@01 $arg0 $arg1))))
      $Perm.No)
    ($PSF.loc_e$Buy ($PSF.lookup_e$Buy (as sm@632@01  $PSF<e$Buy>) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))))
  :pattern ((inv@635@01 $arg0 $arg1) (inv@637@01 $arg0 $arg1))
  :qid |quant-u-2049|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 15
(assert (not (forall (($arg0 Int) ($arg1 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@635@01 $arg0 $arg1))
          ($SortWrappers.IntTo$Snap (inv@637@01 $arg0 $arg1))))
        $Perm.No)
      (and (img@636@01 $arg0 $arg1) (img@638@01 $arg0 $arg1))
      (and (= $arg0 (inv@635@01 $arg0 $arg1)) (= $arg1 (inv@637@01 $arg0 $arg1))))
    (=
      ($PSF.perm_e$Buy (as pm@634@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap (inv@635@01 $arg0 $arg1))
        ($SortWrappers.IntTo$Snap (inv@637@01 $arg0 $arg1))))
      $Perm.No))
  
  :qid |quant-u-2050|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; exhale true &&
;   (forall $arg0: Int, $arg1: Int ::
;     { e$Sell($arg0, $arg1) }
;     perm(e$Sell($arg0, $arg1)) > none ==>
;     acc(e$Sell($arg0, $arg1), perm(e$Sell($arg0, $arg1))))
(declare-const $arg0@639@01 Int)
(declare-const $arg1@640@01 Int)
(push) ; 15
; [eval] perm(e$Sell($arg0, $arg1)) > none
; [eval] perm(e$Sell($arg0, $arg1))
(declare-const sm@641@01 $PSF<e$Sell>)
(declare-const s@642@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@643@01 $PPM)
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=
    ($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1)))
    $Perm.No)
  :pattern (($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resPrmSumDef7|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  ($PSF.loc_e$Sell ($PSF.lookup_e$Sell (as sm@641@01  $PSF<e$Sell>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1)))
  :pattern (($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resTrgDef8|)))
(assert ($PSF.loc_e$Sell ($PSF.lookup_e$Sell (as sm@641@01  $PSF<e$Sell>) ($Snap.combine
  ($SortWrappers.IntTo$Snap $arg0@639@01)
  ($SortWrappers.IntTo$Snap $arg1@640@01))) ($Snap.combine
  ($SortWrappers.IntTo$Snap $arg0@639@01)
  ($SortWrappers.IntTo$Snap $arg1@640@01))))
(assert (>
  ($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@639@01)
    ($SortWrappers.IntTo$Snap $arg1@640@01)))
  $Perm.No))
; [eval] perm(e$Sell($arg0, $arg1))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 15
(declare-fun inv@644@01 (Int Int) Int)
(declare-fun img@645@01 (Int Int) Bool)
(declare-fun inv@646@01 (Int Int) Int)
(declare-fun img@647@01 (Int Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=
    ($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1)))
    $Perm.No)
  :pattern (($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resPrmSumDef7|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  ($PSF.loc_e$Sell ($PSF.lookup_e$Sell (as sm@641@01  $PSF<e$Sell>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1)))
  :pattern (($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resTrgDef8|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@639@01 Int) ($arg1@640@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@639@01)
        ($SortWrappers.IntTo$Snap $arg1@640@01)))
      $Perm.No)
    ($PSF.loc_e$Sell ($PSF.lookup_e$Sell (as sm@641@01  $PSF<e$Sell>) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@639@01)
      ($SortWrappers.IntTo$Snap $arg1@640@01))) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@639@01)
      ($SortWrappers.IntTo$Snap $arg1@640@01))))
  :pattern (($PSF.loc_e$Sell ($PSF.lookup_e$Sell (as sm@641@01  $PSF<e$Sell>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@639@01)
    ($SortWrappers.IntTo$Snap $arg1@640@01))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@639@01)
    ($SortWrappers.IntTo$Snap $arg1@640@01))))
  :qid |e$Sell-aux|)))
(push) ; 15
(assert (not (forall (($arg0@639@01 Int) ($arg1@640@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@639@01)
        ($SortWrappers.IntTo$Snap $arg1@640@01)))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@639@01)
          ($SortWrappers.IntTo$Snap $arg1@640@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@639@01)
          ($SortWrappers.IntTo$Snap $arg1@640@01))))))
  
  :qid |quant-u-2051|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 15
(assert (not (forall (($arg01@639@01 Int) ($arg11@640@01 Int) ($arg02@639@01 Int) ($arg12@640@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@639@01)
              ($SortWrappers.IntTo$Snap $arg11@640@01)))
            $Perm.No)
          ($PSF.loc_e$Sell ($PSF.lookup_e$Sell (as sm@641@01  $PSF<e$Sell>) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg01@639@01)
            ($SortWrappers.IntTo$Snap $arg11@640@01))) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg01@639@01)
            ($SortWrappers.IntTo$Snap $arg11@640@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg01@639@01)
            ($SortWrappers.IntTo$Snap $arg11@640@01)))))
      (and
        (and
          (>
            ($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@639@01)
              ($SortWrappers.IntTo$Snap $arg12@640@01)))
            $Perm.No)
          ($PSF.loc_e$Sell ($PSF.lookup_e$Sell (as sm@641@01  $PSF<e$Sell>) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg02@639@01)
            ($SortWrappers.IntTo$Snap $arg12@640@01))) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg02@639@01)
            ($SortWrappers.IntTo$Snap $arg12@640@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg02@639@01)
            ($SortWrappers.IntTo$Snap $arg12@640@01)))))
      (and (= $arg01@639@01 $arg02@639@01) (= $arg11@640@01 $arg12@640@01)))
    (and (= $arg01@639@01 $arg02@639@01) (= $arg11@640@01 $arg12@640@01)))
  
  :qid |e$Sell-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@639@01 Int) ($arg1@640@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@639@01)
          ($SortWrappers.IntTo$Snap $arg1@640@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@639@01)
          ($SortWrappers.IntTo$Snap $arg1@640@01)))))
    (and
      (and
        (= (inv@644@01 $arg0@639@01 $arg1@640@01) $arg0@639@01)
        (= (inv@646@01 $arg0@639@01 $arg1@640@01) $arg1@640@01))
      (and
        (img@645@01 $arg0@639@01 $arg1@640@01)
        (img@647@01 $arg0@639@01 $arg1@640@01))))
  :pattern (($PSF.loc_e$Sell ($PSF.lookup_e$Sell (as sm@641@01  $PSF<e$Sell>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@639@01)
    ($SortWrappers.IntTo$Snap $arg1@640@01))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@639@01)
    ($SortWrappers.IntTo$Snap $arg1@640@01))))
  :qid |e$Sell-invOfFct|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=>
    (and
      (and (img@645@01 $arg0 $arg1) (img@647@01 $arg0 $arg1))
      (and
        (>
          ($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@644@01 $arg0 $arg1))
            ($SortWrappers.IntTo$Snap (inv@646@01 $arg0 $arg1))))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@644@01 $arg0 $arg1))
            ($SortWrappers.IntTo$Snap (inv@646@01 $arg0 $arg1)))))))
    (and (= (inv@644@01 $arg0 $arg1) $arg0) (= (inv@646@01 $arg0 $arg1) $arg1)))
  :pattern ((inv@644@01 $arg0 $arg1))
  :pattern ((inv@646@01 $arg0 $arg1))
  :qid |e$Sell-fctOfInv|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap (inv@644@01 $arg0 $arg1))
        ($SortWrappers.IntTo$Snap (inv@646@01 $arg0 $arg1))))
      $Perm.No)
    ($PSF.loc_e$Sell ($PSF.lookup_e$Sell (as sm@641@01  $PSF<e$Sell>) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))))
  :pattern ((inv@644@01 $arg0 $arg1) (inv@646@01 $arg0 $arg1))
  :qid |quant-u-2052|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 15
(assert (not (forall (($arg0 Int) ($arg1 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@644@01 $arg0 $arg1))
          ($SortWrappers.IntTo$Snap (inv@646@01 $arg0 $arg1))))
        $Perm.No)
      (and (img@645@01 $arg0 $arg1) (img@647@01 $arg0 $arg1))
      (and (= $arg0 (inv@644@01 $arg0 $arg1)) (= $arg1 (inv@646@01 $arg0 $arg1))))
    (=
      ($PSF.perm_e$Sell (as pm@643@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap (inv@644@01 $arg0 $arg1))
        ($SortWrappers.IntTo$Snap (inv@646@01 $arg0 $arg1))))
      $Perm.No))
  
  :qid |quant-u-2053|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; exhale true &&
;   (forall $arg0: Int, $arg1: Int ::
;     { e$Pay($arg0, $arg1) }
;     perm(e$Pay($arg0, $arg1)) > none ==>
;     acc(e$Pay($arg0, $arg1), perm(e$Pay($arg0, $arg1))))
(declare-const $arg0@648@01 Int)
(declare-const $arg1@649@01 Int)
(push) ; 15
; [eval] perm(e$Pay($arg0, $arg1)) > none
; [eval] perm(e$Pay($arg0, $arg1))
(declare-const sm@650@01 $PSF<e$Pay>)
(declare-const s@651@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@652@01 $PPM)
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=
    ($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1)))
    $Perm.No)
  :pattern (($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resPrmSumDef10|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  ($PSF.loc_e$Pay ($PSF.lookup_e$Pay (as sm@650@01  $PSF<e$Pay>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1)))
  :pattern (($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resTrgDef11|)))
(assert ($PSF.loc_e$Pay ($PSF.lookup_e$Pay (as sm@650@01  $PSF<e$Pay>) ($Snap.combine
  ($SortWrappers.IntTo$Snap $arg0@648@01)
  ($SortWrappers.IntTo$Snap $arg1@649@01))) ($Snap.combine
  ($SortWrappers.IntTo$Snap $arg0@648@01)
  ($SortWrappers.IntTo$Snap $arg1@649@01))))
(assert (>
  ($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@648@01)
    ($SortWrappers.IntTo$Snap $arg1@649@01)))
  $Perm.No))
; [eval] perm(e$Pay($arg0, $arg1))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 15
(declare-fun inv@653@01 (Int Int) Int)
(declare-fun img@654@01 (Int Int) Bool)
(declare-fun inv@655@01 (Int Int) Int)
(declare-fun img@656@01 (Int Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=
    ($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1)))
    $Perm.No)
  :pattern (($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resPrmSumDef10|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  ($PSF.loc_e$Pay ($PSF.lookup_e$Pay (as sm@650@01  $PSF<e$Pay>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1)))
  :pattern (($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resTrgDef11|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@648@01 Int) ($arg1@649@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@648@01)
        ($SortWrappers.IntTo$Snap $arg1@649@01)))
      $Perm.No)
    ($PSF.loc_e$Pay ($PSF.lookup_e$Pay (as sm@650@01  $PSF<e$Pay>) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@648@01)
      ($SortWrappers.IntTo$Snap $arg1@649@01))) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@648@01)
      ($SortWrappers.IntTo$Snap $arg1@649@01))))
  :pattern (($PSF.loc_e$Pay ($PSF.lookup_e$Pay (as sm@650@01  $PSF<e$Pay>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@648@01)
    ($SortWrappers.IntTo$Snap $arg1@649@01))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@648@01)
    ($SortWrappers.IntTo$Snap $arg1@649@01))))
  :qid |e$Pay-aux|)))
(push) ; 15
(assert (not (forall (($arg0@648@01 Int) ($arg1@649@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@648@01)
        ($SortWrappers.IntTo$Snap $arg1@649@01)))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@648@01)
          ($SortWrappers.IntTo$Snap $arg1@649@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@648@01)
          ($SortWrappers.IntTo$Snap $arg1@649@01))))))
  
  :qid |quant-u-2054|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 15
(assert (not (forall (($arg01@648@01 Int) ($arg11@649@01 Int) ($arg02@648@01 Int) ($arg12@649@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@648@01)
              ($SortWrappers.IntTo$Snap $arg11@649@01)))
            $Perm.No)
          ($PSF.loc_e$Pay ($PSF.lookup_e$Pay (as sm@650@01  $PSF<e$Pay>) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg01@648@01)
            ($SortWrappers.IntTo$Snap $arg11@649@01))) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg01@648@01)
            ($SortWrappers.IntTo$Snap $arg11@649@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg01@648@01)
            ($SortWrappers.IntTo$Snap $arg11@649@01)))))
      (and
        (and
          (>
            ($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@648@01)
              ($SortWrappers.IntTo$Snap $arg12@649@01)))
            $Perm.No)
          ($PSF.loc_e$Pay ($PSF.lookup_e$Pay (as sm@650@01  $PSF<e$Pay>) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg02@648@01)
            ($SortWrappers.IntTo$Snap $arg12@649@01))) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg02@648@01)
            ($SortWrappers.IntTo$Snap $arg12@649@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg02@648@01)
            ($SortWrappers.IntTo$Snap $arg12@649@01)))))
      (and (= $arg01@648@01 $arg02@648@01) (= $arg11@649@01 $arg12@649@01)))
    (and (= $arg01@648@01 $arg02@648@01) (= $arg11@649@01 $arg12@649@01)))
  
  :qid |e$Pay-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@648@01 Int) ($arg1@649@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@648@01)
          ($SortWrappers.IntTo$Snap $arg1@649@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@648@01)
          ($SortWrappers.IntTo$Snap $arg1@649@01)))))
    (and
      (and
        (= (inv@653@01 $arg0@648@01 $arg1@649@01) $arg0@648@01)
        (= (inv@655@01 $arg0@648@01 $arg1@649@01) $arg1@649@01))
      (and
        (img@654@01 $arg0@648@01 $arg1@649@01)
        (img@656@01 $arg0@648@01 $arg1@649@01))))
  :pattern (($PSF.loc_e$Pay ($PSF.lookup_e$Pay (as sm@650@01  $PSF<e$Pay>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@648@01)
    ($SortWrappers.IntTo$Snap $arg1@649@01))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@648@01)
    ($SortWrappers.IntTo$Snap $arg1@649@01))))
  :qid |e$Pay-invOfFct|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=>
    (and
      (and (img@654@01 $arg0 $arg1) (img@656@01 $arg0 $arg1))
      (and
        (>
          ($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@653@01 $arg0 $arg1))
            ($SortWrappers.IntTo$Snap (inv@655@01 $arg0 $arg1))))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@653@01 $arg0 $arg1))
            ($SortWrappers.IntTo$Snap (inv@655@01 $arg0 $arg1)))))))
    (and (= (inv@653@01 $arg0 $arg1) $arg0) (= (inv@655@01 $arg0 $arg1) $arg1)))
  :pattern ((inv@653@01 $arg0 $arg1))
  :pattern ((inv@655@01 $arg0 $arg1))
  :qid |e$Pay-fctOfInv|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap (inv@653@01 $arg0 $arg1))
        ($SortWrappers.IntTo$Snap (inv@655@01 $arg0 $arg1))))
      $Perm.No)
    ($PSF.loc_e$Pay ($PSF.lookup_e$Pay (as sm@650@01  $PSF<e$Pay>) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))))
  :pattern ((inv@653@01 $arg0 $arg1) (inv@655@01 $arg0 $arg1))
  :qid |quant-u-2055|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 15
(assert (not (forall (($arg0 Int) ($arg1 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@653@01 $arg0 $arg1))
          ($SortWrappers.IntTo$Snap (inv@655@01 $arg0 $arg1))))
        $Perm.No)
      (and (img@654@01 $arg0 $arg1) (img@656@01 $arg0 $arg1))
      (and (= $arg0 (inv@653@01 $arg0 $arg1)) (= $arg1 (inv@655@01 $arg0 $arg1))))
    (=
      ($PSF.perm_e$Pay (as pm@652@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap (inv@653@01 $arg0 $arg1))
        ($SortWrappers.IntTo$Snap (inv@655@01 $arg0 $arg1))))
      $Perm.No))
  
  :qid |quant-u-2056|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 15
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@617@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 1)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@617@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 15
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@617@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@617@01 3))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@617@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@617@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 15
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@617@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@617@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 2))))
(push) ; 15
(set-option :timeout 10)
(assert (not (not l$send_fail@553@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not l$send_fail@553@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 166 | l$send_fail@553@01 | live]
; [else-branch: 166 | !(l$send_fail@553@01) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 166 | l$send_fail@553@01]
(assert l$send_fail@553@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(msg, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const $t@657@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 167 | True | live]
; [else-branch: 167 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 167 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@658@01 $Snap)
(assert (= $t@658@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@563@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@659@01 $Struct)
(assert (=
  self@659@01
  ($struct_set<$Struct> self@541@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@541@01 4))
    l$havoc$6@563@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 17
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@659@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 1)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@659@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 17
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@659@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@659@01 3))))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@659@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@659@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 17
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@659@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@659@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 2))))
(pop) ; 16
; [then-branch: 168 | False | dead]
; [else-branch: 168 | True | live]
(push) ; 16
; [else-branch: 168 | True]
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 166 | !(l$send_fail@553@01)]
(assert (not l$send_fail@553@01))
(pop) ; 15
; [eval] !l$send_fail
(push) ; 15
(set-option :timeout 10)
(assert (not l$send_fail@553@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not l$send_fail@553@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 169 | !(l$send_fail@553@01) | live]
; [else-branch: 169 | l$send_fail@553@01 | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 169 | !(l$send_fail@553@01)]
(assert (not l$send_fail@553@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i1$$pre_self := self
; [exec]
; i1$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$1
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$2
; [exec]
; $contracts := l$havoc$3
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@660@01 $Snap)
(assert (= $t@660@01 ($Snap.combine ($Snap.first $t@660@01) ($Snap.second $t@660@01))))
(assert (= ($Snap.first $t@660@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@557@01 0))))
(assert (= ($Snap.second $t@660@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@557@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@661@01 $Snap)
(assert (= $t@661@01 ($Snap.combine ($Snap.first $t@661@01) ($Snap.second $t@661@01))))
(assert (= ($Snap.first $t@661@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@557@01 1))))
(assert (= ($Snap.second $t@661@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@557@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@662@01 $Snap)
(assert (= $t@662@01 ($Snap.combine ($Snap.first $t@662@01) ($Snap.second $t@662@01))))
(assert (= ($Snap.first $t@662@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@557@01 2))))
(assert (= ($Snap.second $t@662@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@557@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@663@01 $Snap)
(assert (= $t@663@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@664@01 Int)
(set-option :timeout 0)
(push) ; 16
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 17
; [then-branch: 170 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@557@01, 3)), $q0@664@01)) | live]
; [else-branch: 170 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@557@01, 3)), $q0@664@01) | live]
(push) ; 18
; [then-branch: 170 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@557@01, 3)), $q0@664@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 3)) $q0@664@01))))
(pop) ; 18
(push) ; 18
; [else-branch: 170 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@557@01, 3)), $q0@664@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 3)) $q0@664@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 3)) $q0@664@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 3)) $q0@664@01)))))
(pop) ; 16
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@664@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 3)) $q0@664@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 3)) $q0@664@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 3)) $q0@664@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1514@11@1514@345-aux|)))
(assert (forall (($q0@664@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 3)) $q0@664@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 3)) $q0@664@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 3)) $q0@664@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1514@11@1514@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@665@01 $Snap)
(assert (= $t@665@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@666@01 Int)
(set-option :timeout 0)
(push) ; 16
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 16
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@666@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 3)) $q0@666@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 3)) $q0@666@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1515@11@1515@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@667@01 $Snap)
(assert (= $t@667@01 ($Snap.combine ($Snap.first $t@667@01) ($Snap.second $t@667@01))))
(assert (= ($Snap.first $t@667@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@557@01 4))))
(assert (= ($Snap.second $t@667@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@557@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@668@01 $Snap)
(assert (= $t@668@01 ($Snap.combine ($Snap.first $t@668@01) ($Snap.second $t@668@01))))
(assert (= ($Snap.first $t@668@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@557@01 5))))
(assert (= ($Snap.second $t@668@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@557@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@669@01 $Snap)
(assert (= $t@669@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@670@01 Int)
(set-option :timeout 0)
(push) ; 16
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 17
; [then-branch: 171 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@557@01, 7)), $q1@670@01)) | live]
; [else-branch: 171 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@557@01, 7)), $q1@670@01) | live]
(push) ; 18
; [then-branch: 171 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@557@01, 7)), $q1@670@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 7)) $q1@670@01))))
(pop) ; 18
(push) ; 18
; [else-branch: 171 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@557@01, 7)), $q1@670@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 7)) $q1@670@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 7)) $q1@670@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 7)) $q1@670@01)))))
(pop) ; 16
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@670@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 7)) $q1@670@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 7)) $q1@670@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 7)) $q1@670@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1518@11@1518@345-aux|)))
(assert (forall (($q1@670@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 7)) $q1@670@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 7)) $q1@670@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 7)) $q1@670@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1518@11@1518@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@671@01 $Snap)
(assert (= $t@671@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q1@672@01 Int)
(set-option :timeout 0)
(push) ; 16
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 16
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@672@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 7)) $q1@672@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 7)) $q1@672@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1519@11@1519@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@673@01 $Snap)
(assert (= $t@673@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@674@01 Int)
(set-option :timeout 0)
(push) ; 16
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 17
; [then-branch: 172 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@557@01, 8)), $q2@674@01)) | live]
; [else-branch: 172 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@557@01, 8)), $q2@674@01) | live]
(push) ; 18
; [then-branch: 172 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@557@01, 8)), $q2@674@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 8)) $q2@674@01))))
(pop) ; 18
(push) ; 18
; [else-branch: 172 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@557@01, 8)), $q2@674@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 8)) $q2@674@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 8)) $q2@674@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 8)) $q2@674@01)))))
(pop) ; 16
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@674@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 8)) $q2@674@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 8)) $q2@674@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 8)) $q2@674@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1520@11@1520@345-aux|)))
(assert (forall (($q2@674@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 8)) $q2@674@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 8)) $q2@674@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 8)) $q2@674@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1520@11@1520@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@675@01 $Snap)
(assert (= $t@675@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q2@676@01 Int)
(set-option :timeout 0)
(push) ; 16
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 16
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@676@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 8)) $q2@676@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 8)) $q2@676@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1521@11@1521@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@677@01 $Snap)
(assert (= $t@677@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@557@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@678@01 $Snap)
(assert (= $t@678@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@679@01 Int)
(set-option :timeout 0)
(push) ; 16
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 16
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@679@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 7)) $a@679@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@617@01 7)) $a@679@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 7)) $a@679@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1524@11@1524@259|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
(declare-const $t@680@01 $Snap)
(assert (= $t@680@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@557@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@617@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(declare-const $t@681@01 $Snap)
(assert (= $t@681@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@557@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@557@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
(declare-const $t@682@01 $Snap)
(assert (= $t@682@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@557@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@617@01 2))))
; State saturation: after inhale
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@559@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not l$no_reentrant_call@559@01))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 173 | l$no_reentrant_call@559@01 | live]
; [else-branch: 173 | !(l$no_reentrant_call@559@01) | live]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 173 | l$no_reentrant_call@559@01]
(assert l$no_reentrant_call@559@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; inhale acc(e$Sell(($struct_get($struct_loc(msg, 0)): Int), $unwrap(l$sell_order)), write)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$sell_order)
(declare-const $t@683@01 $Snap)
(declare-const sm@684@01 $PSF<e$Sell>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($PSF.lookup_e$Sell (as sm@684@01  $PSF<e$Sell>) ($Snap.combine
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)))
    ($SortWrappers.IntTo$Snap ($unwrap<Int> l$sell_order@535@01))))
  $t@683@01))
(assert (<=
  $Perm.No
  (ite
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@537@01 0))
        ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)))
      (= ($unwrap<Int> l$sell_order@535@01) ($unwrap<Int> l$sell_order@535@01)))
    $Perm.Write
    $Perm.No)))
; Definitional axioms for snapshot map values
(assert ($PSF.loc_e$Sell ($PSF.lookup_e$Sell (as sm@641@01  $PSF<e$Sell>) ($Snap.combine
  ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)))
  ($SortWrappers.IntTo$Snap ($unwrap<Int> l$sell_order@535@01)))) ($Snap.combine
  ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)))
  ($SortWrappers.IntTo$Snap ($unwrap<Int> l$sell_order@535@01)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label return
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not $out_of_gas@562@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not $out_of_gas@562@01))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 174 | $out_of_gas@562@01 | live]
; [else-branch: 174 | !($out_of_gas@562@01) | live]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 174 | $out_of_gas@562@01]
(assert $out_of_gas@562@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 175 | True | live]
; [else-branch: 175 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 175 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@685@01 $Snap)
(assert (= $t@685@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@563@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@686@01 $Struct)
(assert (=
  self@686@01
  ($struct_set<$Struct> self@541@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@541@01 4))
    l$havoc$6@563@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 19
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@686@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 1)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@686@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 19
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@686@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@686@01 3))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@686@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@686@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 19
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@686@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@686@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 2))))
(pop) ; 18
; [then-branch: 176 | False | dead]
; [else-branch: 176 | True | live]
(push) ; 18
; [else-branch: 176 | True]
(pop) ; 18
(pop) ; 17
(push) ; 17
; [else-branch: 174 | !($out_of_gas@562@01)]
(assert (not $out_of_gas@562@01))
(pop) ; 17
; [eval] !$out_of_gas
(push) ; 17
(set-option :timeout 10)
(assert (not $out_of_gas@562@01))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not $out_of_gas@562@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 177 | !($out_of_gas@562@01) | live]
; [else-branch: 177 | $out_of_gas@562@01 | live]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 177 | !($out_of_gas@562@01)]
(assert (not $out_of_gas@562@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 178 | False | dead]
; [else-branch: 178 | True | live]
(push) ; 18
; [else-branch: 178 | True]
(pop) ; 18
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 179 | True | live]
; [else-branch: 179 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 179 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@687@01 $Snap)
(assert (= $t@687@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@563@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@688@01 $Struct)
(assert (=
  self@688@01
  ($struct_set<$Struct> self@617@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@617@01 4))
    l$havoc$6@563@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 19
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@688@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@617@01 1)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@688@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@617@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 19
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@688@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 3))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@688@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@688@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 19
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@688@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@617@01 2)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@688@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@617@01 2))))
(pop) ; 18
(pop) ; 17
(push) ; 17
; [else-branch: 177 | $out_of_gas@562@01]
(assert $out_of_gas@562@01)
(pop) ; 17
(pop) ; 16
(push) ; 16
; [else-branch: 173 | !(l$no_reentrant_call@559@01)]
(assert (not l$no_reentrant_call@559@01))
(pop) ; 16
; [eval] !l$no_reentrant_call
(push) ; 16
(set-option :timeout 10)
(assert (not l$no_reentrant_call@559@01))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@559@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 180 | !(l$no_reentrant_call@559@01) | live]
; [else-branch: 180 | l$no_reentrant_call@559@01 | live]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 180 | !(l$no_reentrant_call@559@01)]
(assert (not l$no_reentrant_call@559@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; inhale acc(e$Sell(($struct_get($struct_loc(msg, 0)): Int), $unwrap(l$sell_order)), write)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$sell_order)
(declare-const $t@689@01 $Snap)
(declare-const sm@690@01 $PSF<e$Sell>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($PSF.lookup_e$Sell (as sm@690@01  $PSF<e$Sell>) ($Snap.combine
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)))
    ($SortWrappers.IntTo$Snap ($unwrap<Int> l$sell_order@535@01))))
  $t@689@01))
(assert (<=
  $Perm.No
  (ite
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@537@01 0))
        ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)))
      (= ($unwrap<Int> l$sell_order@535@01) ($unwrap<Int> l$sell_order@535@01)))
    $Perm.Write
    $Perm.No)))
; Definitional axioms for snapshot map values
(assert ($PSF.loc_e$Sell ($PSF.lookup_e$Sell (as sm@641@01  $PSF<e$Sell>) ($Snap.combine
  ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)))
  ($SortWrappers.IntTo$Snap ($unwrap<Int> l$sell_order@535@01)))) ($Snap.combine
  ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@537@01 0)))
  ($SortWrappers.IntTo$Snap ($unwrap<Int> l$sell_order@535@01)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label return
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not $out_of_gas@562@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not $out_of_gas@562@01))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 181 | $out_of_gas@562@01 | live]
; [else-branch: 181 | !($out_of_gas@562@01) | live]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 181 | $out_of_gas@562@01]
(assert $out_of_gas@562@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 182 | True | live]
; [else-branch: 182 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 182 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@691@01 $Snap)
(assert (= $t@691@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@563@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@692@01 $Struct)
(assert (=
  self@692@01
  ($struct_set<$Struct> self@541@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@541@01 4))
    l$havoc$6@563@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 19
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@692@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 1)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@692@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 19
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@692@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@692@01 3))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@692@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@692@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 19
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@692@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@692@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@541@01 2))))
(pop) ; 18
; [then-branch: 183 | False | dead]
; [else-branch: 183 | True | live]
(push) ; 18
; [else-branch: 183 | True]
(pop) ; 18
(pop) ; 17
(push) ; 17
; [else-branch: 181 | !($out_of_gas@562@01)]
(assert (not $out_of_gas@562@01))
(pop) ; 17
; [eval] !$out_of_gas
(push) ; 17
(set-option :timeout 10)
(assert (not $out_of_gas@562@01))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not $out_of_gas@562@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 184 | !($out_of_gas@562@01) | live]
; [else-branch: 184 | $out_of_gas@562@01 | live]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 184 | !($out_of_gas@562@01)]
(assert (not $out_of_gas@562@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 185 | False | dead]
; [else-branch: 185 | True | live]
(push) ; 18
; [else-branch: 185 | True]
(pop) ; 18
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 186 | True | live]
; [else-branch: 186 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 186 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@693@01 $Snap)
(assert (= $t@693@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@563@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@694@01 $Struct)
(assert (=
  self@694@01
  ($struct_set<$Struct> l$havoc$2@557@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@557@01 4))
    l$havoc$6@563@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 19
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@694@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@557@01 1)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@694@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@557@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 19
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@694@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@694@01 3))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@694@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@694@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 19
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@694@01 2))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@557@01 2)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@694@01 2))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@557@01 2))))
(pop) ; 18
(pop) ; 17
(push) ; 17
; [else-branch: 184 | $out_of_gas@562@01]
(assert $out_of_gas@562@01)
(pop) ; 17
(pop) ; 16
(push) ; 16
; [else-branch: 180 | l$no_reentrant_call@559@01]
(assert l$no_reentrant_call@559@01)
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 169 | l$send_fail@553@01]
(assert l$send_fail@553@01)
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 159 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 3)), $struct_get[Int]($struct_loc[Int](self@612@01, 0))))) + $unwrap[Int](l$sell_order@535@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 3)) ($struct_get<Int> ($struct_loc<Int> self@612@01 0)))))
    ($unwrap<Int> l$sell_order@535@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 149 | !($struct_get[Int]($struct_loc[Int](self@541@01, 4)) >= $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2))))))]
(assert (not
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@541@01 4))
    ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2))))))))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 145 | $unwrap[Int]($w_mul[$Int](l$sell_order@535@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@541@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  ($unwrap<Int> ($w_mul<$Int> l$sell_order@535@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@541@01 2)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 139 | !(i0$$res@605@01 >= $unwrap[Int](l$sell_order@535@01))]
(assert (not (>= i0$$res@605@01 ($unwrap<Int> l$sell_order@535@01))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 135 | !($unwrap[Int](l$sell_order@535@01) > 0)]
(assert (not (> ($unwrap<Int> l$sell_order@535@01) 0)))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$transferStock ----------
(declare-const l$receiver@695@01 Int)
(declare-const l$transfer_order@696@01 $Int)
(declare-const $succ@697@01 Bool)
(declare-const l$receiver@698@01 Int)
(declare-const l$transfer_order@699@01 $Int)
(declare-const $succ@700@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@701@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@702@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@703@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@704@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@705@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@706@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@707@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@708@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@709@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@710@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@711@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@712@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@713@01 Bool)
; [exec]
; var l$i0$_stockholder: Int
(declare-const l$i0$_stockholder@714@01 Int)
; [exec]
; var i0$$res: Int
(declare-const i0$$res@715@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@716@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@717@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@718@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@719@01 $Snap)
(assert (= $t@719@01 ($Snap.combine ($Snap.first $t@719@01) ($Snap.second $t@719@01))))
(assert (= ($Snap.first $t@719@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@705@01 0))))
(assert (= ($Snap.second $t@719@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@705@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@720@01 $Snap)
(assert (= $t@720@01 ($Snap.combine ($Snap.first $t@720@01) ($Snap.second $t@720@01))))
(assert (= ($Snap.first $t@720@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@705@01 1))))
(assert (= ($Snap.second $t@720@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@705@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@721@01 $Snap)
(assert (= $t@721@01 ($Snap.combine ($Snap.first $t@721@01) ($Snap.second $t@721@01))))
(assert (= ($Snap.first $t@721@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@705@01 2))))
(assert (= ($Snap.second $t@721@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@705@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@722@01 $Snap)
(assert (= $t@722@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@723@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 187 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 3)), $q0@723@01)) | live]
; [else-branch: 187 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 3)), $q0@723@01) | live]
(push) ; 5
; [then-branch: 187 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 3)), $q0@723@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) $q0@723@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 187 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 3)), $q0@723@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) $q0@723@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) $q0@723@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) $q0@723@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@723@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) $q0@723@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) $q0@723@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) $q0@723@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1602@11@1602@345-aux|)))
(assert (forall (($q0@723@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) $q0@723@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) $q0@723@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) $q0@723@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1602@11@1602@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@724@01 $Snap)
(assert (= $t@724@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@725@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@725@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) $q0@725@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) $q0@725@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1603@11@1603@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@726@01 $Snap)
(assert (= $t@726@01 ($Snap.combine ($Snap.first $t@726@01) ($Snap.second $t@726@01))))
(assert (= ($Snap.first $t@726@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@705@01 4))))
(assert (= ($Snap.second $t@726@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@705@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@727@01 $Snap)
(assert (= $t@727@01 ($Snap.combine ($Snap.first $t@727@01) ($Snap.second $t@727@01))))
(assert (= ($Snap.first $t@727@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@705@01 5))))
(assert (= ($Snap.second $t@727@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@705@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@728@01 $Snap)
(assert (= $t@728@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@729@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 188 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 7)), $q1@729@01)) | live]
; [else-branch: 188 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 7)), $q1@729@01) | live]
(push) ; 5
; [then-branch: 188 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 7)), $q1@729@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 7)) $q1@729@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 188 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 7)), $q1@729@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 7)) $q1@729@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 7)) $q1@729@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 7)) $q1@729@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@729@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 7)) $q1@729@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 7)) $q1@729@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 7)) $q1@729@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1606@11@1606@345-aux|)))
(assert (forall (($q1@729@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 7)) $q1@729@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 7)) $q1@729@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 7)) $q1@729@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1606@11@1606@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@730@01 $Snap)
(assert (= $t@730@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q1@731@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@731@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 7)) $q1@731@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 7)) $q1@731@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1607@11@1607@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@732@01 $Snap)
(assert (= $t@732@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@733@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 189 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 8)), $q2@733@01)) | live]
; [else-branch: 189 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 8)), $q2@733@01) | live]
(push) ; 5
; [then-branch: 189 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 8)), $q2@733@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 8)) $q2@733@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 189 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 8)), $q2@733@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 8)) $q2@733@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 8)) $q2@733@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 8)) $q2@733@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@733@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 8)) $q2@733@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 8)) $q2@733@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 8)) $q2@733@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1608@11@1608@345-aux|)))
(assert (forall (($q2@733@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 8)) $q2@733@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 8)) $q2@733@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 8)) $q2@733@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1608@11@1608@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@734@01 $Snap)
(assert (= $t@734@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q2@735@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@735@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 8)) $q2@735@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 8)) $q2@735@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1609@11@1609@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@736@01 $Snap)
(assert (= $t@736@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@705@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@737@01 $Snap)
(assert (= $t@737@01 ($Snap.combine ($Snap.first $t@737@01) ($Snap.second $t@737@01))))
(assert (= ($Snap.first $t@737@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@737@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$receiver &&
;   l$receiver <= 1461501637330902918203684832716283019655932542975
(declare-const $t@738@01 $Snap)
(assert (= $t@738@01 ($Snap.combine ($Snap.first $t@738@01) ($Snap.second $t@738@01))))
(assert (= ($Snap.first $t@738@01) $Snap.unit))
; [eval] 0 <= l$receiver
(assert (<= 0 l$receiver@698@01))
(assert (= ($Snap.second $t@738@01) $Snap.unit))
; [eval] l$receiver <= 1461501637330902918203684832716283019655932542975
(assert (<= l$receiver@698@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $unwrap(l$transfer_order) &&
;   $unwrap(l$transfer_order) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@739@01 $Snap)
(assert (= $t@739@01 ($Snap.combine ($Snap.first $t@739@01) ($Snap.second $t@739@01))))
(assert (= ($Snap.first $t@739@01) $Snap.unit))
; [eval] 0 <= $unwrap(l$transfer_order)
; [eval] $unwrap(l$transfer_order)
(assert (<= 0 ($unwrap<Int> l$transfer_order@699@01)))
(assert (= ($Snap.second $t@739@01) $Snap.unit))
; [eval] $unwrap(l$transfer_order) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$transfer_order)
(assert (<=
  ($unwrap<Int> l$transfer_order@699@01)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@740@01 $Snap)
(assert (= $t@740@01 ($Snap.combine ($Snap.first $t@740@01) ($Snap.second $t@740@01))))
(assert (= ($Snap.first $t@740@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@702@01 0))))
(assert (= ($Snap.second $t@740@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@702@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@741@01 $Snap)
(assert (= $t@741@01 ($Snap.combine ($Snap.first $t@741@01) ($Snap.second $t@741@01))))
(assert (= ($Snap.first $t@741@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@702@01 1))))
(assert (= ($Snap.second $t@741@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@702@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@742@01 $Snap)
(assert (= $t@742@01 ($Snap.combine ($Snap.first $t@742@01) ($Snap.second $t@742@01))))
(assert (= ($Snap.first $t@742@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@702@01 2))))
(assert (= ($Snap.second $t@742@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@702@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@743@01 $Snap)
(assert (= $t@743@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@702@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@744@01 $Snap)
(assert (= $t@744@01 ($Snap.combine ($Snap.first $t@744@01) ($Snap.second $t@744@01))))
(assert (= ($Snap.first $t@744@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@702@01 4))))
(assert (= ($Snap.second $t@744@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@702@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@745@01 $Snap)
(assert (= $t@745@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@702@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@746@01 $Snap)
(assert (= $t@746@01 ($Snap.combine ($Snap.first $t@746@01) ($Snap.second $t@746@01))))
(assert (= ($Snap.first $t@746@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@701@01 0))))
(assert (= ($Snap.second $t@746@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@701@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@747@01 $Snap)
(assert (= $t@747@01 ($Snap.combine ($Snap.first $t@747@01) ($Snap.second $t@747@01))))
(assert (= ($Snap.first $t@747@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@701@01 1))))
(assert (= ($Snap.second $t@747@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@701@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@748@01 $Snap)
(assert (= $t@748@01 ($Snap.combine ($Snap.first $t@748@01) ($Snap.second $t@748@01))))
(assert (= ($Snap.first $t@748@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@701@01 2))))
(assert (= ($Snap.second $t@748@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@701@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@749@01 $Snap)
(assert (= $t@749@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@701@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@750@01 $Snap)
(assert (= $t@750@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@701@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@751@01 $Snap)
(assert (= $t@751@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@752@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@753@01 $Snap)
(assert (= $t@753@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(declare-const $t@754@01 $Snap)
(assert (= $t@754@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@705@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc(self, 2)): Int)
(declare-const $t@755@01 $Snap)
(assert (= $t@755@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@756@01 $Snap)
(assert (= $t@756@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@701@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !($unwrap(l$transfer_order) > 0)
; [eval] $unwrap(l$transfer_order) > 0
; [eval] $unwrap(l$transfer_order)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (> ($unwrap<Int> l$transfer_order@699@01) 0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (> ($unwrap<Int> l$transfer_order@699@01) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 190 | !($unwrap[Int](l$transfer_order@699@01) > 0) | live]
; [else-branch: 190 | $unwrap[Int](l$transfer_order@699@01) > 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 190 | !($unwrap[Int](l$transfer_order@699@01) > 0)]
(assert (not (> ($unwrap<Int> l$transfer_order@699@01) 0)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 191 | True | live]
; [else-branch: 191 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 191 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@757@01 $Snap)
(assert (= $t@757@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@758@01 $Struct)
(assert (=
  self@758@01
  ($struct_set<$Struct> self@705@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@705@01 4))
    l$havoc@717@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@758@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@705@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@758@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@705@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@758@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@758@01 3))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@758@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@758@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@758@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@705@01 2)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@758@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@705@01 2))))
(pop) ; 4
; [then-branch: 192 | False | dead]
; [else-branch: 192 | True | live]
(push) ; 4
; [else-branch: 192 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 190 | $unwrap[Int](l$transfer_order@699@01) > 0]
(assert (> ($unwrap<Int> l$transfer_order@699@01) 0))
(pop) ; 3
; [eval] !!($unwrap(l$transfer_order) > 0)
; [eval] !($unwrap(l$transfer_order) > 0)
; [eval] $unwrap(l$transfer_order) > 0
; [eval] $unwrap(l$transfer_order)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (> ($unwrap<Int> l$transfer_order@699@01) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (> ($unwrap<Int> l$transfer_order@699@01) 0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 193 | $unwrap[Int](l$transfer_order@699@01) > 0 | live]
; [else-branch: 193 | !($unwrap[Int](l$transfer_order@699@01) > 0) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 193 | $unwrap[Int](l$transfer_order@699@01) > 0]
(assert (> ($unwrap<Int> l$transfer_order@699@01) 0))
; [exec]
; l$i0$_stockholder := ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const l$i0$_stockholder@759@01 Int)
(assert (= l$i0$_stockholder@759@01 ($struct_get<Int> ($struct_loc<Int> msg@701@01 0))))
; [exec]
; i0$$res := $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]),
;   l$i0$_stockholder): Int)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$i0$_stockholder): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$i0$_stockholder): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$i0$_stockholder): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(declare-const i0$$res@760@01 Int)
(assert (=
  i0$$res@760@01
  ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) l$i0$_stockholder@759@01)))))
; [exec]
; label i0$return
; [eval] !(i0$$res >= $unwrap(l$transfer_order))
; [eval] i0$$res >= $unwrap(l$transfer_order)
; [eval] $unwrap(l$transfer_order)
(push) ; 4
(set-option :timeout 10)
(assert (not (>= i0$$res@760@01 ($unwrap<Int> l$transfer_order@699@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (>= i0$$res@760@01 ($unwrap<Int> l$transfer_order@699@01)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 194 | !(i0$$res@760@01 >= $unwrap[Int](l$transfer_order@699@01)) | live]
; [else-branch: 194 | i0$$res@760@01 >= $unwrap[Int](l$transfer_order@699@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 194 | !(i0$$res@760@01 >= $unwrap[Int](l$transfer_order@699@01))]
(assert (not (>= i0$$res@760@01 ($unwrap<Int> l$transfer_order@699@01))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 195 | True | live]
; [else-branch: 195 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 195 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@761@01 $Snap)
(assert (= $t@761@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@762@01 $Struct)
(assert (=
  self@762@01
  ($struct_set<$Struct> self@705@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@705@01 4))
    l$havoc@717@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@762@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@705@01 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@762@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@705@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@762@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@762@01 3))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@762@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@762@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@762@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@705@01 2)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@762@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@705@01 2))))
(pop) ; 5
; [then-branch: 196 | False | dead]
; [else-branch: 196 | True | live]
(push) ; 5
; [else-branch: 196 | True]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 194 | i0$$res@760@01 >= $unwrap[Int](l$transfer_order@699@01)]
(assert (>= i0$$res@760@01 ($unwrap<Int> l$transfer_order@699@01)))
(pop) ; 4
; [eval] !!(i0$$res >= $unwrap(l$transfer_order))
; [eval] !(i0$$res >= $unwrap(l$transfer_order))
; [eval] i0$$res >= $unwrap(l$transfer_order)
; [eval] $unwrap(l$transfer_order)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (>= i0$$res@760@01 ($unwrap<Int> l$transfer_order@699@01)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>= i0$$res@760@01 ($unwrap<Int> l$transfer_order@699@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 197 | i0$$res@760@01 >= $unwrap[Int](l$transfer_order@699@01) | live]
; [else-branch: 197 | !(i0$$res@760@01 >= $unwrap[Int](l$transfer_order@699@01)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 197 | i0$$res@760@01 >= $unwrap[Int](l$transfer_order@699@01)]
(assert (>= i0$$res@760@01 ($unwrap<Int> l$transfer_order@699@01)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$transfer_order) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$transfer_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$transfer_order)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@701@01 0)))))
      ($unwrap<Int> l$transfer_order@699@01))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 198 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 3)), $struct_get[Int]($struct_loc[Int](msg@701@01, 0))))) - $unwrap[Int](l$transfer_order@699@01) < 0 | dead]
; [else-branch: 198 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 3)), $struct_get[Int]($struct_loc[Int](msg@701@01, 0))))) - $unwrap[Int](l$transfer_order@699@01) < 0) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 198 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 3)), $struct_get[Int]($struct_loc[Int](msg@701@01, 0))))) - $unwrap[Int](l$transfer_order@699@01) < 0)]
(assert (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@701@01 0)))))
      ($unwrap<Int> l$transfer_order@699@01))
    0)))
(pop) ; 5
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$transfer_order) < 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$transfer_order) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$transfer_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$transfer_order)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@701@01 0)))))
    ($unwrap<Int> l$transfer_order@699@01))
  0)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@701@01 0)))))
      ($unwrap<Int> l$transfer_order@699@01))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 199 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 3)), $struct_get[Int]($struct_loc[Int](msg@701@01, 0))))) - $unwrap[Int](l$transfer_order@699@01) < 0) | live]
; [else-branch: 199 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 3)), $struct_get[Int]($struct_loc[Int](msg@701@01, 0))))) - $unwrap[Int](l$transfer_order@699@01) < 0 | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 199 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 3)), $struct_get[Int]($struct_loc[Int](msg@701@01, 0))))) - $unwrap[Int](l$transfer_order@699@01) < 0)]
(assert (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@701@01 0)))))
      ($unwrap<Int> l$transfer_order@699@01))
    0)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$transfer_order) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$transfer_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$transfer_order)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@701@01 0)))))
      ($unwrap<Int> l$transfer_order@699@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 200 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 3)), $struct_get[Int]($struct_loc[Int](msg@701@01, 0))))) - $unwrap[Int](l$transfer_order@699@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 200 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 3)), $struct_get[Int]($struct_loc[Int](msg@701@01, 0))))) - $unwrap[Int](l$transfer_order@699@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 200 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 3)), $struct_get[Int]($struct_loc[Int](msg@701@01, 0))))) - $unwrap[Int](l$transfer_order@699@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@701@01 0)))))
      ($unwrap<Int> l$transfer_order@699@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 6
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$transfer_order) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$transfer_order) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$transfer_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$transfer_order)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@701@01 0)))))
    ($unwrap<Int> l$transfer_order@699@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@701@01 0)))))
      ($unwrap<Int> l$transfer_order@699@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 201 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 3)), $struct_get[Int]($struct_loc[Int](msg@701@01, 0))))) - $unwrap[Int](l$transfer_order@699@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 201 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 3)), $struct_get[Int]($struct_loc[Int](msg@701@01, 0))))) - $unwrap[Int](l$transfer_order@699@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 201 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@705@01, 3)), $struct_get[Int]($struct_loc[Int](msg@701@01, 0))))) - $unwrap[Int](l$transfer_order@699@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@701@01 0)))))
      ($unwrap<Int> l$transfer_order@699@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]),
;   ($struct_get($struct_loc(msg, 0)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self,
;   3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) -
;   $unwrap(l$transfer_order)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$transfer_order)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$transfer_order)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))) - $unwrap(l$transfer_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$transfer_order)
(declare-const self@763@01 $Struct)
(assert (=
  self@763@01
  ($struct_set<$Struct> self@705@01 3 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@701@01 0)) (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@705@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@701@01 0)))))
    ($unwrap<Int> l$transfer_order@699@01))))))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int))) + $unwrap(l$transfer_order) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int))) + $unwrap(l$transfer_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] $unwrap(l$transfer_order)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@763@01 3)) l$receiver@698@01)))
      ($unwrap<Int> l$transfer_order@699@01))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 202 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@763@01, 3)), l$receiver@698@01))) + $unwrap[Int](l$transfer_order@699@01) < 0 | dead]
; [else-branch: 202 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@763@01, 3)), l$receiver@698@01))) + $unwrap[Int](l$transfer_order@699@01) < 0) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 202 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@763@01, 3)), l$receiver@698@01))) + $unwrap[Int](l$transfer_order@699@01) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@763@01 3)) l$receiver@698@01)))
      ($unwrap<Int> l$transfer_order@699@01))
    0)))
(pop) ; 7
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int))) + $unwrap(l$transfer_order) < 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int))) + $unwrap(l$transfer_order) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int))) + $unwrap(l$transfer_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] $unwrap(l$transfer_order)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@763@01 3)) l$receiver@698@01)))
    ($unwrap<Int> l$transfer_order@699@01))
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@763@01 3)) l$receiver@698@01)))
      ($unwrap<Int> l$transfer_order@699@01))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 203 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@763@01, 3)), l$receiver@698@01))) + $unwrap[Int](l$transfer_order@699@01) < 0) | live]
; [else-branch: 203 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@763@01, 3)), l$receiver@698@01))) + $unwrap[Int](l$transfer_order@699@01) < 0 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 203 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@763@01, 3)), l$receiver@698@01))) + $unwrap[Int](l$transfer_order@699@01) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@763@01 3)) l$receiver@698@01)))
      ($unwrap<Int> l$transfer_order@699@01))
    0)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int))) + $unwrap(l$transfer_order) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int))) + $unwrap(l$transfer_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] $unwrap(l$transfer_order)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@763@01 3)) l$receiver@698@01)))
      ($unwrap<Int> l$transfer_order@699@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@763@01 3)) l$receiver@698@01)))
    ($unwrap<Int> l$transfer_order@699@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 204 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@763@01, 3)), l$receiver@698@01))) + $unwrap[Int](l$transfer_order@699@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 204 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@763@01, 3)), l$receiver@698@01))) + $unwrap[Int](l$transfer_order@699@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 204 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@763@01, 3)), l$receiver@698@01))) + $unwrap[Int](l$transfer_order@699@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@763@01 3)) l$receiver@698@01)))
    ($unwrap<Int> l$transfer_order@699@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 205 | True | live]
; [else-branch: 205 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 205 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@764@01 $Snap)
(assert (= $t@764@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@765@01 $Struct)
(assert (=
  self@765@01
  ($struct_set<$Struct> self@705@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@705@01 4))
    l$havoc@717@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 10
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@765@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@705@01 1)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@765@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@705@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 10
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@765@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@765@01 3))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@765@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@765@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 10
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@765@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@705@01 2)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@765@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@705@01 2))))
(pop) ; 9
; [then-branch: 206 | False | dead]
; [else-branch: 206 | True | live]
(push) ; 9
; [else-branch: 206 | True]
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 204 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@763@01, 3)), l$receiver@698@01))) + $unwrap[Int](l$transfer_order@699@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@763@01 3)) l$receiver@698@01)))
      ($unwrap<Int> l$transfer_order@699@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 8
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int))) + $unwrap(l$transfer_order) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int))) + $unwrap(l$transfer_order) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int))) + $unwrap(l$transfer_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] $unwrap(l$transfer_order)
(push) ; 8
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@763@01 3)) l$receiver@698@01)))
    ($unwrap<Int> l$transfer_order@699@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@763@01 3)) l$receiver@698@01)))
      ($unwrap<Int> l$transfer_order@699@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 207 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@763@01, 3)), l$receiver@698@01))) + $unwrap[Int](l$transfer_order@699@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 207 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@763@01, 3)), l$receiver@698@01))) + $unwrap[Int](l$transfer_order@699@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 207 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@763@01, 3)), l$receiver@698@01))) + $unwrap[Int](l$transfer_order@699@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@763@01 3)) l$receiver@698@01)))
      ($unwrap<Int> l$transfer_order@699@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]),
;   l$receiver, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]),
;   l$receiver): Int))) +
;   $unwrap(l$transfer_order)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int))) + $unwrap(l$transfer_order)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int))) + $unwrap(l$transfer_order)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int))) + $unwrap(l$transfer_order)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), l$receiver): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] $unwrap(l$transfer_order)
(declare-const self@766@01 $Struct)
(assert (=
  self@766@01
  ($struct_set<$Struct> self@763@01 3 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@763@01 3)) l$receiver@698@01 (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@763@01 3)) l$receiver@698@01)))
    ($unwrap<Int> l$transfer_order@699@01))))))
; [exec]
; inhale acc(e$Transfer(($struct_get($struct_loc(msg, 0)): Int), l$receiver, $unwrap(l$transfer_order)), write)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$transfer_order)
(declare-const $t@767@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label return
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@716@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@716@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 208 | $out_of_gas@716@01 | live]
; [else-branch: 208 | !($out_of_gas@716@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 208 | $out_of_gas@716@01]
(assert $out_of_gas@716@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 209 | True | live]
; [else-branch: 209 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 209 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@768@01 $Snap)
(assert (= $t@768@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@769@01 $Struct)
(assert (=
  self@769@01
  ($struct_set<$Struct> self@705@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@705@01 4))
    l$havoc@717@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@769@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@705@01 1)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@769@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@705@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@769@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@769@01 3))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@769@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@769@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@769@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@705@01 2)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@769@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@705@01 2))))
(pop) ; 10
; [then-branch: 210 | False | dead]
; [else-branch: 210 | True | live]
(push) ; 10
; [else-branch: 210 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 208 | !($out_of_gas@716@01)]
(assert (not $out_of_gas@716@01))
(pop) ; 9
; [eval] !$out_of_gas
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@716@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@716@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 211 | !($out_of_gas@716@01) | live]
; [else-branch: 211 | $out_of_gas@716@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 211 | !($out_of_gas@716@01)]
(assert (not $out_of_gas@716@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 212 | False | dead]
; [else-branch: 212 | True | live]
(push) ; 10
; [else-branch: 212 | True]
(pop) ; 10
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 213 | True | live]
; [else-branch: 213 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 213 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@770@01 $Snap)
(assert (= $t@770@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@771@01 $Struct)
(assert (=
  self@771@01
  ($struct_set<$Struct> self@766@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@766@01 4))
    l$havoc@717@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@771@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@705@01 1)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@771@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@705@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@771@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@771@01 3))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@771@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@771@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@771@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@705@01 2)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@771@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@705@01 2))))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 211 | $out_of_gas@716@01]
(assert $out_of_gas@716@01)
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 207 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@763@01, 3)), l$receiver@698@01))) + $unwrap[Int](l$transfer_order@699@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@763@01 3)) l$receiver@698@01)))
    ($unwrap<Int> l$transfer_order@699@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 197 | !(i0$$res@760@01 >= $unwrap[Int](l$transfer_order@699@01))]
(assert (not (>= i0$$res@760@01 ($unwrap<Int> l$transfer_order@699@01))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 193 | !($unwrap[Int](l$transfer_order@699@01) > 0)]
(assert (not (> ($unwrap<Int> l$transfer_order@699@01) 0)))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$payBill ----------
(declare-const l$vendor@772@01 Int)
(declare-const l$amount@773@01 $Int)
(declare-const $succ@774@01 Bool)
(declare-const l$vendor@775@01 Int)
(declare-const l$amount@776@01 $Int)
(declare-const $succ@777@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@778@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@779@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@780@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@781@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@782@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@783@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@784@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@785@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@786@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@787@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@788@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@789@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@790@01 Bool)
; [exec]
; var l$havoc: $Map[Int, $Struct]
(declare-const l$havoc@791@01 $Map<Int~_$Struct>)
; [exec]
; var l$send_fail: Bool
(declare-const l$send_fail@792@01 Bool)
; [exec]
; var i0$$pre_self: $Struct
(declare-const i0$$pre_self@793@01 $Struct)
; [exec]
; var i0$$pre_$contracts: $Map[Int, $Struct]
(declare-const i0$$pre_$contracts@794@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@795@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$2: $Struct
(declare-const l$havoc$2@796@01 $Struct)
; [exec]
; var l$havoc$3: $Map[Int, $Struct]
(declare-const l$havoc$3@797@01 $Map<Int~_$Struct>)
; [exec]
; var l$no_reentrant_call: Bool
(declare-const l$no_reentrant_call@798@01 Bool)
; [exec]
; var l$havoc$4: $Map[Int, $Struct]
(declare-const l$havoc$4@799@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$5: $Map[Int, $Struct]
(declare-const l$havoc$5@800@01 $Map<Int~_$Struct>)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@801@01 Bool)
; [exec]
; var l$havoc$6: Int
(declare-const l$havoc$6@802@01 Int)
; [exec]
; var l$havoc$7: $Map[Int, $Struct]
(declare-const l$havoc$7@803@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@804@01 $Snap)
(assert (= $t@804@01 ($Snap.combine ($Snap.first $t@804@01) ($Snap.second $t@804@01))))
(assert (= ($Snap.first $t@804@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@782@01 0))))
(assert (= ($Snap.second $t@804@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@782@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@805@01 $Snap)
(assert (= $t@805@01 ($Snap.combine ($Snap.first $t@805@01) ($Snap.second $t@805@01))))
(assert (= ($Snap.first $t@805@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@782@01 1))))
(assert (= ($Snap.second $t@805@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@782@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@806@01 $Snap)
(assert (= $t@806@01 ($Snap.combine ($Snap.first $t@806@01) ($Snap.second $t@806@01))))
(assert (= ($Snap.first $t@806@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@782@01 2))))
(assert (= ($Snap.second $t@806@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@782@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@807@01 $Snap)
(assert (= $t@807@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@808@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 214 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@782@01, 3)), $q0@808@01)) | live]
; [else-branch: 214 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@782@01, 3)), $q0@808@01) | live]
(push) ; 5
; [then-branch: 214 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@782@01, 3)), $q0@808@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 3)) $q0@808@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 214 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@782@01, 3)), $q0@808@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 3)) $q0@808@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 3)) $q0@808@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 3)) $q0@808@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@808@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 3)) $q0@808@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 3)) $q0@808@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 3)) $q0@808@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1734@11@1734@345-aux|)))
(assert (forall (($q0@808@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 3)) $q0@808@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 3)) $q0@808@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 3)) $q0@808@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1734@11@1734@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@809@01 $Snap)
(assert (= $t@809@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@810@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@810@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 3)) $q0@810@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 3)) $q0@810@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1735@11@1735@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@811@01 $Snap)
(assert (= $t@811@01 ($Snap.combine ($Snap.first $t@811@01) ($Snap.second $t@811@01))))
(assert (= ($Snap.first $t@811@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@782@01 4))))
(assert (= ($Snap.second $t@811@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@782@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@812@01 $Snap)
(assert (= $t@812@01 ($Snap.combine ($Snap.first $t@812@01) ($Snap.second $t@812@01))))
(assert (= ($Snap.first $t@812@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@782@01 5))))
(assert (= ($Snap.second $t@812@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@782@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@813@01 $Snap)
(assert (= $t@813@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@814@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 215 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@782@01, 7)), $q1@814@01)) | live]
; [else-branch: 215 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@782@01, 7)), $q1@814@01) | live]
(push) ; 5
; [then-branch: 215 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@782@01, 7)), $q1@814@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 7)) $q1@814@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 215 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@782@01, 7)), $q1@814@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 7)) $q1@814@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 7)) $q1@814@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 7)) $q1@814@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@814@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 7)) $q1@814@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 7)) $q1@814@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 7)) $q1@814@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1738@11@1738@345-aux|)))
(assert (forall (($q1@814@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 7)) $q1@814@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 7)) $q1@814@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 7)) $q1@814@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1738@11@1738@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@815@01 $Snap)
(assert (= $t@815@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q1@816@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@816@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 7)) $q1@816@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 7)) $q1@816@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1739@11@1739@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@817@01 $Snap)
(assert (= $t@817@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@818@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 216 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@782@01, 8)), $q2@818@01)) | live]
; [else-branch: 216 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@782@01, 8)), $q2@818@01) | live]
(push) ; 5
; [then-branch: 216 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@782@01, 8)), $q2@818@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 8)) $q2@818@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 216 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@782@01, 8)), $q2@818@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 8)) $q2@818@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 8)) $q2@818@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 8)) $q2@818@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@818@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 8)) $q2@818@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 8)) $q2@818@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 8)) $q2@818@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1740@11@1740@345-aux|)))
(assert (forall (($q2@818@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 8)) $q2@818@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 8)) $q2@818@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 8)) $q2@818@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1740@11@1740@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@819@01 $Snap)
(assert (= $t@819@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q2@820@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@820@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 8)) $q2@820@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 8)) $q2@820@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1741@11@1741@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@821@01 $Snap)
(assert (= $t@821@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@782@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@822@01 $Snap)
(assert (= $t@822@01 ($Snap.combine ($Snap.first $t@822@01) ($Snap.second $t@822@01))))
(assert (= ($Snap.first $t@822@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@822@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$vendor &&
;   l$vendor <= 1461501637330902918203684832716283019655932542975
(declare-const $t@823@01 $Snap)
(assert (= $t@823@01 ($Snap.combine ($Snap.first $t@823@01) ($Snap.second $t@823@01))))
(assert (= ($Snap.first $t@823@01) $Snap.unit))
; [eval] 0 <= l$vendor
(assert (<= 0 l$vendor@775@01))
(assert (= ($Snap.second $t@823@01) $Snap.unit))
; [eval] l$vendor <= 1461501637330902918203684832716283019655932542975
(assert (<= l$vendor@775@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $unwrap(l$amount) &&
;   $unwrap(l$amount) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@824@01 $Snap)
(assert (= $t@824@01 ($Snap.combine ($Snap.first $t@824@01) ($Snap.second $t@824@01))))
(assert (= ($Snap.first $t@824@01) $Snap.unit))
; [eval] 0 <= $unwrap(l$amount)
; [eval] $unwrap(l$amount)
(assert (<= 0 ($unwrap<Int> l$amount@776@01)))
(assert (= ($Snap.second $t@824@01) $Snap.unit))
; [eval] $unwrap(l$amount) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$amount)
(assert (<=
  ($unwrap<Int> l$amount@776@01)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@825@01 $Snap)
(assert (= $t@825@01 ($Snap.combine ($Snap.first $t@825@01) ($Snap.second $t@825@01))))
(assert (= ($Snap.first $t@825@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@779@01 0))))
(assert (= ($Snap.second $t@825@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@779@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@826@01 $Snap)
(assert (= $t@826@01 ($Snap.combine ($Snap.first $t@826@01) ($Snap.second $t@826@01))))
(assert (= ($Snap.first $t@826@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@779@01 1))))
(assert (= ($Snap.second $t@826@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@779@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@827@01 $Snap)
(assert (= $t@827@01 ($Snap.combine ($Snap.first $t@827@01) ($Snap.second $t@827@01))))
(assert (= ($Snap.first $t@827@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@779@01 2))))
(assert (= ($Snap.second $t@827@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@779@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@828@01 $Snap)
(assert (= $t@828@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@779@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@829@01 $Snap)
(assert (= $t@829@01 ($Snap.combine ($Snap.first $t@829@01) ($Snap.second $t@829@01))))
(assert (= ($Snap.first $t@829@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@779@01 4))))
(assert (= ($Snap.second $t@829@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@779@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@830@01 $Snap)
(assert (= $t@830@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@779@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@831@01 $Snap)
(assert (= $t@831@01 ($Snap.combine ($Snap.first $t@831@01) ($Snap.second $t@831@01))))
(assert (= ($Snap.first $t@831@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@778@01 0))))
(assert (= ($Snap.second $t@831@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@778@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@832@01 $Snap)
(assert (= $t@832@01 ($Snap.combine ($Snap.first $t@832@01) ($Snap.second $t@832@01))))
(assert (= ($Snap.first $t@832@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@778@01 1))))
(assert (= ($Snap.second $t@832@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@778@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@833@01 $Snap)
(assert (= $t@833@01 ($Snap.combine ($Snap.first $t@833@01) ($Snap.second $t@833@01))))
(assert (= ($Snap.first $t@833@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@778@01 2))))
(assert (= ($Snap.second $t@833@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@778@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@834@01 $Snap)
(assert (= $t@834@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@778@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@835@01 $Snap)
(assert (= $t@835@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@778@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@836@01 $Snap)
(assert (= $t@836@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@837@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@838@01 $Snap)
(assert (= $t@838@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(declare-const $t@839@01 $Snap)
(assert (= $t@839@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@782@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc(self, 2)): Int)
(declare-const $t@840@01 $Snap)
(assert (= $t@840@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@841@01 $Snap)
(assert (= $t@841@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@778@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@778@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 0)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@778@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@782@01 0))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 217 | $struct_get[Int]($struct_loc[Int](msg@778@01, 0)) != $struct_get[Int]($struct_loc[Int](self@782@01, 0)) | live]
; [else-branch: 217 | $struct_get[Int]($struct_loc[Int](msg@778@01, 0)) == $struct_get[Int]($struct_loc[Int](self@782@01, 0)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 217 | $struct_get[Int]($struct_loc[Int](msg@778@01, 0)) != $struct_get[Int]($struct_loc[Int](self@782@01, 0))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@778@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@782@01 0)))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 218 | True | live]
; [else-branch: 218 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 218 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@842@01 $Snap)
(assert (= $t@842@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@802@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@843@01 $Struct)
(assert (=
  self@843@01
  ($struct_set<$Struct> self@782@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@782@01 4))
    l$havoc$6@802@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@843@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@843@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@843@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@843@01 3))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@843@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@843@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@843@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 2)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@843@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 2))))
(pop) ; 4
; [then-branch: 219 | False | dead]
; [else-branch: 219 | True | live]
(push) ; 4
; [else-branch: 219 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 217 | $struct_get[Int]($struct_loc[Int](msg@778@01, 0)) == $struct_get[Int]($struct_loc[Int](self@782@01, 0))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@778@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 0))))
(pop) ; 3
; [eval] !!(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int))
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@778@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@782@01 0))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@778@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 0)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 220 | $struct_get[Int]($struct_loc[Int](msg@778@01, 0)) == $struct_get[Int]($struct_loc[Int](self@782@01, 0)) | live]
; [else-branch: 220 | $struct_get[Int]($struct_loc[Int](msg@778@01, 0)) != $struct_get[Int]($struct_loc[Int](self@782@01, 0)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 220 | $struct_get[Int]($struct_loc[Int](msg@778@01, 0)) == $struct_get[Int]($struct_loc[Int](self@782@01, 0))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@778@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 0))))
; [eval] !(($struct_get($struct_loc(self, 4)): Int) >= $unwrap(l$amount))
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= $unwrap(l$amount)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] $unwrap(l$amount)
(push) ; 4
(set-option :timeout 10)
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@782@01 4))
  ($unwrap<Int> l$amount@776@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@782@01 4))
    ($unwrap<Int> l$amount@776@01)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 221 | !($struct_get[Int]($struct_loc[Int](self@782@01, 4)) >= $unwrap[Int](l$amount@776@01)) | live]
; [else-branch: 221 | $struct_get[Int]($struct_loc[Int](self@782@01, 4)) >= $unwrap[Int](l$amount@776@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 221 | !($struct_get[Int]($struct_loc[Int](self@782@01, 4)) >= $unwrap[Int](l$amount@776@01))]
(assert (not
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@782@01 4))
    ($unwrap<Int> l$amount@776@01))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 222 | True | live]
; [else-branch: 222 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 222 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@844@01 $Snap)
(assert (= $t@844@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@802@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@845@01 $Struct)
(assert (=
  self@845@01
  ($struct_set<$Struct> self@782@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@782@01 4))
    l$havoc$6@802@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@845@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@845@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@845@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@845@01 3))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@845@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@845@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@845@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 2)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@845@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 2))))
(pop) ; 5
; [then-branch: 223 | False | dead]
; [else-branch: 223 | True | live]
(push) ; 5
; [else-branch: 223 | True]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 221 | $struct_get[Int]($struct_loc[Int](self@782@01, 4)) >= $unwrap[Int](l$amount@776@01)]
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@782@01 4))
  ($unwrap<Int> l$amount@776@01)))
(pop) ; 4
; [eval] !!(($struct_get($struct_loc(self, 4)): Int) >= $unwrap(l$amount))
; [eval] !(($struct_get($struct_loc(self, 4)): Int) >= $unwrap(l$amount))
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= $unwrap(l$amount)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] $unwrap(l$amount)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@782@01 4))
    ($unwrap<Int> l$amount@776@01)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@782@01 4))
  ($unwrap<Int> l$amount@776@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 224 | $struct_get[Int]($struct_loc[Int](self@782@01, 4)) >= $unwrap[Int](l$amount@776@01) | live]
; [else-branch: 224 | !($struct_get[Int]($struct_loc[Int](self@782@01, 4)) >= $unwrap[Int](l$amount@776@01)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 224 | $struct_get[Int]($struct_loc[Int](self@782@01, 4)) >= $unwrap[Int](l$amount@776@01)]
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@782@01 4))
  ($unwrap<Int> l$amount@776@01)))
; [eval] ($struct_get($struct_loc(self, 4)): Int) < $unwrap(l$amount)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] $unwrap(l$amount)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@782@01 4))
    ($unwrap<Int> l$amount@776@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 225 | $struct_get[Int]($struct_loc[Int](self@782@01, 4)) < $unwrap[Int](l$amount@776@01) | dead]
; [else-branch: 225 | !($struct_get[Int]($struct_loc[Int](self@782@01, 4)) < $unwrap[Int](l$amount@776@01)) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 225 | !($struct_get[Int]($struct_loc[Int](self@782@01, 4)) < $unwrap[Int](l$amount@776@01))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@782@01 4))
    ($unwrap<Int> l$amount@776@01))))
(pop) ; 5
; [eval] !(($struct_get($struct_loc(self, 4)): Int) < $unwrap(l$amount))
; [eval] ($struct_get($struct_loc(self, 4)): Int) < $unwrap(l$amount)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] $unwrap(l$amount)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> self@782@01 4))
  ($unwrap<Int> l$amount@776@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@782@01 4))
    ($unwrap<Int> l$amount@776@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 226 | !($struct_get[Int]($struct_loc[Int](self@782@01, 4)) < $unwrap[Int](l$amount@776@01)) | live]
; [else-branch: 226 | $struct_get[Int]($struct_loc[Int](self@782@01, 4)) < $unwrap[Int](l$amount@776@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 226 | !($struct_get[Int]($struct_loc[Int](self@782@01, 4)) < $unwrap[Int](l$amount@776@01))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@782@01 4))
    ($unwrap<Int> l$amount@776@01))))
; [exec]
; self := ($struct_set(self, 7, ($map_set(($struct_get($struct_loc(self, 7)): $Map[Int, Int]),
;   l$vendor, ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), l$vendor): Int) +
;   $unwrap(l$amount)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 7, ($map_set(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), l$vendor, ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), l$vendor): Int) + $unwrap(l$amount)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), l$vendor, ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), l$vendor): Int) + $unwrap(l$amount)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), l$vendor): Int) + $unwrap(l$amount)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), l$vendor): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] $unwrap(l$amount)
(declare-const self@846@01 $Struct)
(assert (=
  self@846@01
  ($struct_set<$Struct> self@782@01 7 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 7)) l$vendor@775@01 (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@782@01 7)) l$vendor@775@01)
    ($unwrap<Int> l$amount@776@01))))))
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) -
;   $unwrap(l$amount)): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) - $unwrap(l$amount)): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) - $unwrap(l$amount)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] $unwrap(l$amount)
(declare-const self@847@01 $Struct)
(assert (=
  self@847@01
  ($struct_set<$Struct> self@846@01 4 (-
    ($struct_get<Int> ($struct_loc<Int> self@846@01 4))
    ($unwrap<Int> l$amount@776@01)))))
; [exec]
; exhale true &&
;   (forall $arg0: Int, $arg1: Int, $arg2: Int ::
;     { e$Transfer($arg0, $arg1, $arg2) }
;     perm(e$Transfer($arg0, $arg1, $arg2)) > none ==>
;     acc(e$Transfer($arg0, $arg1, $arg2), perm(e$Transfer($arg0, $arg1, $arg2))))
(declare-const $arg0@848@01 Int)
(declare-const $arg1@849@01 Int)
(declare-const $arg2@850@01 Int)
(push) ; 6
; [eval] perm(e$Transfer($arg0, $arg1, $arg2)) > none
; [eval] perm(e$Transfer($arg0, $arg1, $arg2))
(declare-const sm@851@01 $PSF<e$Transfer>)
(declare-const s@852@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@853@01 $PPM)
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef13|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@851@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef14|)))
(assert ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@851@01  $PSF<e$Transfer>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@848@01)
    ($SortWrappers.IntTo$Snap $arg1@849@01))
  ($SortWrappers.IntTo$Snap $arg2@850@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@848@01)
    ($SortWrappers.IntTo$Snap $arg1@849@01))
  ($SortWrappers.IntTo$Snap $arg2@850@01))))
(assert (>
  ($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@848@01)
      ($SortWrappers.IntTo$Snap $arg1@849@01))
    ($SortWrappers.IntTo$Snap $arg2@850@01)))
  $Perm.No))
; [eval] perm(e$Transfer($arg0, $arg1, $arg2))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 6
(declare-fun inv@854@01 (Int Int Int) Int)
(declare-fun img@855@01 (Int Int Int) Bool)
(declare-fun inv@856@01 (Int Int Int) Int)
(declare-fun img@857@01 (Int Int Int) Bool)
(declare-fun inv@858@01 (Int Int Int) Int)
(declare-fun img@859@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef13|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@851@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef14|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@848@01 Int) ($arg1@849@01 Int) ($arg2@850@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@848@01)
          ($SortWrappers.IntTo$Snap $arg1@849@01))
        ($SortWrappers.IntTo$Snap $arg2@850@01)))
      $Perm.No)
    ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@851@01  $PSF<e$Transfer>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@848@01)
        ($SortWrappers.IntTo$Snap $arg1@849@01))
      ($SortWrappers.IntTo$Snap $arg2@850@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@848@01)
        ($SortWrappers.IntTo$Snap $arg1@849@01))
      ($SortWrappers.IntTo$Snap $arg2@850@01))))
  :pattern (($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@851@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@848@01)
      ($SortWrappers.IntTo$Snap $arg1@849@01))
    ($SortWrappers.IntTo$Snap $arg2@850@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@848@01)
      ($SortWrappers.IntTo$Snap $arg1@849@01))
    ($SortWrappers.IntTo$Snap $arg2@850@01))))
  :qid |e$Transfer-aux|)))
(push) ; 6
(assert (not (forall (($arg0@848@01 Int) ($arg1@849@01 Int) ($arg2@850@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@848@01)
          ($SortWrappers.IntTo$Snap $arg1@849@01))
        ($SortWrappers.IntTo$Snap $arg2@850@01)))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@848@01)
            ($SortWrappers.IntTo$Snap $arg1@849@01))
          ($SortWrappers.IntTo$Snap $arg2@850@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@848@01)
            ($SortWrappers.IntTo$Snap $arg1@849@01))
          ($SortWrappers.IntTo$Snap $arg2@850@01))))))
  
  :qid |quant-u-2057|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall (($arg01@848@01 Int) ($arg11@849@01 Int) ($arg21@850@01 Int) ($arg02@848@01 Int) ($arg12@849@01 Int) ($arg22@850@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg01@848@01)
                ($SortWrappers.IntTo$Snap $arg11@849@01))
              ($SortWrappers.IntTo$Snap $arg21@850@01)))
            $Perm.No)
          ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@851@01  $PSF<e$Transfer>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@848@01)
              ($SortWrappers.IntTo$Snap $arg11@849@01))
            ($SortWrappers.IntTo$Snap $arg21@850@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@848@01)
              ($SortWrappers.IntTo$Snap $arg11@849@01))
            ($SortWrappers.IntTo$Snap $arg21@850@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@848@01)
              ($SortWrappers.IntTo$Snap $arg11@849@01))
            ($SortWrappers.IntTo$Snap $arg21@850@01)))))
      (and
        (and
          (>
            ($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg02@848@01)
                ($SortWrappers.IntTo$Snap $arg12@849@01))
              ($SortWrappers.IntTo$Snap $arg22@850@01)))
            $Perm.No)
          ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@851@01  $PSF<e$Transfer>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@848@01)
              ($SortWrappers.IntTo$Snap $arg12@849@01))
            ($SortWrappers.IntTo$Snap $arg22@850@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@848@01)
              ($SortWrappers.IntTo$Snap $arg12@849@01))
            ($SortWrappers.IntTo$Snap $arg22@850@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@848@01)
              ($SortWrappers.IntTo$Snap $arg12@849@01))
            ($SortWrappers.IntTo$Snap $arg22@850@01)))))
      (and
        (and (= $arg01@848@01 $arg02@848@01) (= $arg11@849@01 $arg12@849@01))
        (= $arg21@850@01 $arg22@850@01)))
    (and
      (and (= $arg01@848@01 $arg02@848@01) (= $arg11@849@01 $arg12@849@01))
      (= $arg21@850@01 $arg22@850@01)))
  
  :qid |e$Transfer-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@848@01 Int) ($arg1@849@01 Int) ($arg2@850@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@848@01)
            ($SortWrappers.IntTo$Snap $arg1@849@01))
          ($SortWrappers.IntTo$Snap $arg2@850@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@848@01)
            ($SortWrappers.IntTo$Snap $arg1@849@01))
          ($SortWrappers.IntTo$Snap $arg2@850@01)))))
    (and
      (and
        (= (inv@854@01 $arg0@848@01 $arg1@849@01 $arg2@850@01) $arg0@848@01)
        (= (inv@856@01 $arg0@848@01 $arg1@849@01 $arg2@850@01) $arg1@849@01)
        (= (inv@858@01 $arg0@848@01 $arg1@849@01 $arg2@850@01) $arg2@850@01))
      (and
        (img@855@01 $arg0@848@01 $arg1@849@01 $arg2@850@01)
        (img@857@01 $arg0@848@01 $arg1@849@01 $arg2@850@01)
        (img@859@01 $arg0@848@01 $arg1@849@01 $arg2@850@01))))
  :pattern (($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@851@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@848@01)
      ($SortWrappers.IntTo$Snap $arg1@849@01))
    ($SortWrappers.IntTo$Snap $arg2@850@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@848@01)
      ($SortWrappers.IntTo$Snap $arg1@849@01))
    ($SortWrappers.IntTo$Snap $arg2@850@01))))
  :qid |e$Transfer-invOfFct|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (and
      (and
        (img@855@01 $arg0 $arg1 $arg2)
        (img@857@01 $arg0 $arg1 $arg2)
        (img@859@01 $arg0 $arg1 $arg2))
      (and
        (>
          ($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@854@01 $arg0 $arg1 $arg2))
              ($SortWrappers.IntTo$Snap (inv@856@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@858@01 $arg0 $arg1 $arg2))))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@854@01 $arg0 $arg1 $arg2))
              ($SortWrappers.IntTo$Snap (inv@856@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@858@01 $arg0 $arg1 $arg2)))))))
    (and
      (= (inv@854@01 $arg0 $arg1 $arg2) $arg0)
      (= (inv@856@01 $arg0 $arg1 $arg2) $arg1)
      (= (inv@858@01 $arg0 $arg1 $arg2) $arg2)))
  :pattern ((inv@854@01 $arg0 $arg1 $arg2))
  :pattern ((inv@856@01 $arg0 $arg1 $arg2))
  :pattern ((inv@858@01 $arg0 $arg1 $arg2))
  :qid |e$Transfer-fctOfInv|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@854@01 $arg0 $arg1 $arg2))
          ($SortWrappers.IntTo$Snap (inv@856@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@858@01 $arg0 $arg1 $arg2))))
      $Perm.No)
    ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@851@01  $PSF<e$Transfer>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))))
  :pattern ((inv@854@01 $arg0 $arg1 $arg2) (inv@856@01 $arg0 $arg1 $arg2) (inv@858@01 $arg0 $arg1 $arg2))
  :qid |quant-u-2058|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 6
(assert (not (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@854@01 $arg0 $arg1 $arg2))
            ($SortWrappers.IntTo$Snap (inv@856@01 $arg0 $arg1 $arg2)))
          ($SortWrappers.IntTo$Snap (inv@858@01 $arg0 $arg1 $arg2))))
        $Perm.No)
      (and
        (img@855@01 $arg0 $arg1 $arg2)
        (img@857@01 $arg0 $arg1 $arg2)
        (img@859@01 $arg0 $arg1 $arg2))
      (and
        (= $arg0 (inv@854@01 $arg0 $arg1 $arg2))
        (= $arg1 (inv@856@01 $arg0 $arg1 $arg2))
        (= $arg2 (inv@858@01 $arg0 $arg1 $arg2))))
    (=
      ($PSF.perm_e$Transfer (as pm@853@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@854@01 $arg0 $arg1 $arg2))
          ($SortWrappers.IntTo$Snap (inv@856@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@858@01 $arg0 $arg1 $arg2))))
      $Perm.No))
  
  :qid |quant-u-2059|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; exhale true &&
;   (forall $arg0: Int, $arg1: Int ::
;     { e$Buy($arg0, $arg1) }
;     perm(e$Buy($arg0, $arg1)) > none ==>
;     acc(e$Buy($arg0, $arg1), perm(e$Buy($arg0, $arg1))))
(declare-const $arg0@860@01 Int)
(declare-const $arg1@861@01 Int)
(push) ; 6
; [eval] perm(e$Buy($arg0, $arg1)) > none
; [eval] perm(e$Buy($arg0, $arg1))
(declare-const sm@862@01 $PSF<e$Buy>)
(declare-const s@863@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@864@01 $PPM)
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=
    ($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1)))
    $Perm.No)
  :pattern (($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resPrmSumDef16|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  ($PSF.loc_e$Buy ($PSF.lookup_e$Buy (as sm@862@01  $PSF<e$Buy>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1)))
  :pattern (($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resTrgDef17|)))
(assert ($PSF.loc_e$Buy ($PSF.lookup_e$Buy (as sm@862@01  $PSF<e$Buy>) ($Snap.combine
  ($SortWrappers.IntTo$Snap $arg0@860@01)
  ($SortWrappers.IntTo$Snap $arg1@861@01))) ($Snap.combine
  ($SortWrappers.IntTo$Snap $arg0@860@01)
  ($SortWrappers.IntTo$Snap $arg1@861@01))))
(assert (>
  ($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@860@01)
    ($SortWrappers.IntTo$Snap $arg1@861@01)))
  $Perm.No))
; [eval] perm(e$Buy($arg0, $arg1))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 6
(declare-fun inv@865@01 (Int Int) Int)
(declare-fun img@866@01 (Int Int) Bool)
(declare-fun inv@867@01 (Int Int) Int)
(declare-fun img@868@01 (Int Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=
    ($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1)))
    $Perm.No)
  :pattern (($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resPrmSumDef16|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  ($PSF.loc_e$Buy ($PSF.lookup_e$Buy (as sm@862@01  $PSF<e$Buy>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1)))
  :pattern (($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resTrgDef17|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@860@01 Int) ($arg1@861@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@860@01)
        ($SortWrappers.IntTo$Snap $arg1@861@01)))
      $Perm.No)
    ($PSF.loc_e$Buy ($PSF.lookup_e$Buy (as sm@862@01  $PSF<e$Buy>) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@860@01)
      ($SortWrappers.IntTo$Snap $arg1@861@01))) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@860@01)
      ($SortWrappers.IntTo$Snap $arg1@861@01))))
  :pattern (($PSF.loc_e$Buy ($PSF.lookup_e$Buy (as sm@862@01  $PSF<e$Buy>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@860@01)
    ($SortWrappers.IntTo$Snap $arg1@861@01))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@860@01)
    ($SortWrappers.IntTo$Snap $arg1@861@01))))
  :qid |e$Buy-aux|)))
(push) ; 6
(assert (not (forall (($arg0@860@01 Int) ($arg1@861@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@860@01)
        ($SortWrappers.IntTo$Snap $arg1@861@01)))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@860@01)
          ($SortWrappers.IntTo$Snap $arg1@861@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@860@01)
          ($SortWrappers.IntTo$Snap $arg1@861@01))))))
  
  :qid |quant-u-2060|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall (($arg01@860@01 Int) ($arg11@861@01 Int) ($arg02@860@01 Int) ($arg12@861@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@860@01)
              ($SortWrappers.IntTo$Snap $arg11@861@01)))
            $Perm.No)
          ($PSF.loc_e$Buy ($PSF.lookup_e$Buy (as sm@862@01  $PSF<e$Buy>) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg01@860@01)
            ($SortWrappers.IntTo$Snap $arg11@861@01))) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg01@860@01)
            ($SortWrappers.IntTo$Snap $arg11@861@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg01@860@01)
            ($SortWrappers.IntTo$Snap $arg11@861@01)))))
      (and
        (and
          (>
            ($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@860@01)
              ($SortWrappers.IntTo$Snap $arg12@861@01)))
            $Perm.No)
          ($PSF.loc_e$Buy ($PSF.lookup_e$Buy (as sm@862@01  $PSF<e$Buy>) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg02@860@01)
            ($SortWrappers.IntTo$Snap $arg12@861@01))) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg02@860@01)
            ($SortWrappers.IntTo$Snap $arg12@861@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg02@860@01)
            ($SortWrappers.IntTo$Snap $arg12@861@01)))))
      (and (= $arg01@860@01 $arg02@860@01) (= $arg11@861@01 $arg12@861@01)))
    (and (= $arg01@860@01 $arg02@860@01) (= $arg11@861@01 $arg12@861@01)))
  
  :qid |e$Buy-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@860@01 Int) ($arg1@861@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@860@01)
          ($SortWrappers.IntTo$Snap $arg1@861@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@860@01)
          ($SortWrappers.IntTo$Snap $arg1@861@01)))))
    (and
      (and
        (= (inv@865@01 $arg0@860@01 $arg1@861@01) $arg0@860@01)
        (= (inv@867@01 $arg0@860@01 $arg1@861@01) $arg1@861@01))
      (and
        (img@866@01 $arg0@860@01 $arg1@861@01)
        (img@868@01 $arg0@860@01 $arg1@861@01))))
  :pattern (($PSF.loc_e$Buy ($PSF.lookup_e$Buy (as sm@862@01  $PSF<e$Buy>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@860@01)
    ($SortWrappers.IntTo$Snap $arg1@861@01))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@860@01)
    ($SortWrappers.IntTo$Snap $arg1@861@01))))
  :qid |e$Buy-invOfFct|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=>
    (and
      (and (img@866@01 $arg0 $arg1) (img@868@01 $arg0 $arg1))
      (and
        (>
          ($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@865@01 $arg0 $arg1))
            ($SortWrappers.IntTo$Snap (inv@867@01 $arg0 $arg1))))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@865@01 $arg0 $arg1))
            ($SortWrappers.IntTo$Snap (inv@867@01 $arg0 $arg1)))))))
    (and (= (inv@865@01 $arg0 $arg1) $arg0) (= (inv@867@01 $arg0 $arg1) $arg1)))
  :pattern ((inv@865@01 $arg0 $arg1))
  :pattern ((inv@867@01 $arg0 $arg1))
  :qid |e$Buy-fctOfInv|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap (inv@865@01 $arg0 $arg1))
        ($SortWrappers.IntTo$Snap (inv@867@01 $arg0 $arg1))))
      $Perm.No)
    ($PSF.loc_e$Buy ($PSF.lookup_e$Buy (as sm@862@01  $PSF<e$Buy>) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))))
  :pattern ((inv@865@01 $arg0 $arg1) (inv@867@01 $arg0 $arg1))
  :qid |quant-u-2061|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 6
(assert (not (forall (($arg0 Int) ($arg1 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@865@01 $arg0 $arg1))
          ($SortWrappers.IntTo$Snap (inv@867@01 $arg0 $arg1))))
        $Perm.No)
      (and (img@866@01 $arg0 $arg1) (img@868@01 $arg0 $arg1))
      (and (= $arg0 (inv@865@01 $arg0 $arg1)) (= $arg1 (inv@867@01 $arg0 $arg1))))
    (=
      ($PSF.perm_e$Buy (as pm@864@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap (inv@865@01 $arg0 $arg1))
        ($SortWrappers.IntTo$Snap (inv@867@01 $arg0 $arg1))))
      $Perm.No))
  
  :qid |quant-u-2062|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; exhale true &&
;   (forall $arg0: Int, $arg1: Int ::
;     { e$Sell($arg0, $arg1) }
;     perm(e$Sell($arg0, $arg1)) > none ==>
;     acc(e$Sell($arg0, $arg1), perm(e$Sell($arg0, $arg1))))
(declare-const $arg0@869@01 Int)
(declare-const $arg1@870@01 Int)
(push) ; 6
; [eval] perm(e$Sell($arg0, $arg1)) > none
; [eval] perm(e$Sell($arg0, $arg1))
(declare-const sm@871@01 $PSF<e$Sell>)
(declare-const s@872@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@873@01 $PPM)
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=
    ($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1)))
    $Perm.No)
  :pattern (($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resPrmSumDef19|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  ($PSF.loc_e$Sell ($PSF.lookup_e$Sell (as sm@871@01  $PSF<e$Sell>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1)))
  :pattern (($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resTrgDef20|)))
(assert ($PSF.loc_e$Sell ($PSF.lookup_e$Sell (as sm@871@01  $PSF<e$Sell>) ($Snap.combine
  ($SortWrappers.IntTo$Snap $arg0@869@01)
  ($SortWrappers.IntTo$Snap $arg1@870@01))) ($Snap.combine
  ($SortWrappers.IntTo$Snap $arg0@869@01)
  ($SortWrappers.IntTo$Snap $arg1@870@01))))
(assert (>
  ($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@869@01)
    ($SortWrappers.IntTo$Snap $arg1@870@01)))
  $Perm.No))
; [eval] perm(e$Sell($arg0, $arg1))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 6
(declare-fun inv@874@01 (Int Int) Int)
(declare-fun img@875@01 (Int Int) Bool)
(declare-fun inv@876@01 (Int Int) Int)
(declare-fun img@877@01 (Int Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=
    ($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1)))
    $Perm.No)
  :pattern (($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resPrmSumDef19|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  ($PSF.loc_e$Sell ($PSF.lookup_e$Sell (as sm@871@01  $PSF<e$Sell>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1)))
  :pattern (($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resTrgDef20|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@869@01 Int) ($arg1@870@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@869@01)
        ($SortWrappers.IntTo$Snap $arg1@870@01)))
      $Perm.No)
    ($PSF.loc_e$Sell ($PSF.lookup_e$Sell (as sm@871@01  $PSF<e$Sell>) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@869@01)
      ($SortWrappers.IntTo$Snap $arg1@870@01))) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@869@01)
      ($SortWrappers.IntTo$Snap $arg1@870@01))))
  :pattern (($PSF.loc_e$Sell ($PSF.lookup_e$Sell (as sm@871@01  $PSF<e$Sell>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@869@01)
    ($SortWrappers.IntTo$Snap $arg1@870@01))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@869@01)
    ($SortWrappers.IntTo$Snap $arg1@870@01))))
  :qid |e$Sell-aux|)))
(push) ; 6
(assert (not (forall (($arg0@869@01 Int) ($arg1@870@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@869@01)
        ($SortWrappers.IntTo$Snap $arg1@870@01)))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@869@01)
          ($SortWrappers.IntTo$Snap $arg1@870@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@869@01)
          ($SortWrappers.IntTo$Snap $arg1@870@01))))))
  
  :qid |quant-u-2063|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall (($arg01@869@01 Int) ($arg11@870@01 Int) ($arg02@869@01 Int) ($arg12@870@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@869@01)
              ($SortWrappers.IntTo$Snap $arg11@870@01)))
            $Perm.No)
          ($PSF.loc_e$Sell ($PSF.lookup_e$Sell (as sm@871@01  $PSF<e$Sell>) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg01@869@01)
            ($SortWrappers.IntTo$Snap $arg11@870@01))) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg01@869@01)
            ($SortWrappers.IntTo$Snap $arg11@870@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg01@869@01)
            ($SortWrappers.IntTo$Snap $arg11@870@01)))))
      (and
        (and
          (>
            ($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@869@01)
              ($SortWrappers.IntTo$Snap $arg12@870@01)))
            $Perm.No)
          ($PSF.loc_e$Sell ($PSF.lookup_e$Sell (as sm@871@01  $PSF<e$Sell>) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg02@869@01)
            ($SortWrappers.IntTo$Snap $arg12@870@01))) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg02@869@01)
            ($SortWrappers.IntTo$Snap $arg12@870@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg02@869@01)
            ($SortWrappers.IntTo$Snap $arg12@870@01)))))
      (and (= $arg01@869@01 $arg02@869@01) (= $arg11@870@01 $arg12@870@01)))
    (and (= $arg01@869@01 $arg02@869@01) (= $arg11@870@01 $arg12@870@01)))
  
  :qid |e$Sell-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@869@01 Int) ($arg1@870@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@869@01)
          ($SortWrappers.IntTo$Snap $arg1@870@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@869@01)
          ($SortWrappers.IntTo$Snap $arg1@870@01)))))
    (and
      (and
        (= (inv@874@01 $arg0@869@01 $arg1@870@01) $arg0@869@01)
        (= (inv@876@01 $arg0@869@01 $arg1@870@01) $arg1@870@01))
      (and
        (img@875@01 $arg0@869@01 $arg1@870@01)
        (img@877@01 $arg0@869@01 $arg1@870@01))))
  :pattern (($PSF.loc_e$Sell ($PSF.lookup_e$Sell (as sm@871@01  $PSF<e$Sell>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@869@01)
    ($SortWrappers.IntTo$Snap $arg1@870@01))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@869@01)
    ($SortWrappers.IntTo$Snap $arg1@870@01))))
  :qid |e$Sell-invOfFct|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=>
    (and
      (and (img@875@01 $arg0 $arg1) (img@877@01 $arg0 $arg1))
      (and
        (>
          ($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@874@01 $arg0 $arg1))
            ($SortWrappers.IntTo$Snap (inv@876@01 $arg0 $arg1))))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@874@01 $arg0 $arg1))
            ($SortWrappers.IntTo$Snap (inv@876@01 $arg0 $arg1)))))))
    (and (= (inv@874@01 $arg0 $arg1) $arg0) (= (inv@876@01 $arg0 $arg1) $arg1)))
  :pattern ((inv@874@01 $arg0 $arg1))
  :pattern ((inv@876@01 $arg0 $arg1))
  :qid |e$Sell-fctOfInv|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap (inv@874@01 $arg0 $arg1))
        ($SortWrappers.IntTo$Snap (inv@876@01 $arg0 $arg1))))
      $Perm.No)
    ($PSF.loc_e$Sell ($PSF.lookup_e$Sell (as sm@871@01  $PSF<e$Sell>) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))))
  :pattern ((inv@874@01 $arg0 $arg1) (inv@876@01 $arg0 $arg1))
  :qid |quant-u-2064|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 6
(assert (not (forall (($arg0 Int) ($arg1 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@874@01 $arg0 $arg1))
          ($SortWrappers.IntTo$Snap (inv@876@01 $arg0 $arg1))))
        $Perm.No)
      (and (img@875@01 $arg0 $arg1) (img@877@01 $arg0 $arg1))
      (and (= $arg0 (inv@874@01 $arg0 $arg1)) (= $arg1 (inv@876@01 $arg0 $arg1))))
    (=
      ($PSF.perm_e$Sell (as pm@873@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap (inv@874@01 $arg0 $arg1))
        ($SortWrappers.IntTo$Snap (inv@876@01 $arg0 $arg1))))
      $Perm.No))
  
  :qid |quant-u-2065|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; exhale true &&
;   (forall $arg0: Int, $arg1: Int ::
;     { e$Pay($arg0, $arg1) }
;     perm(e$Pay($arg0, $arg1)) > none ==>
;     acc(e$Pay($arg0, $arg1), perm(e$Pay($arg0, $arg1))))
(declare-const $arg0@878@01 Int)
(declare-const $arg1@879@01 Int)
(push) ; 6
; [eval] perm(e$Pay($arg0, $arg1)) > none
; [eval] perm(e$Pay($arg0, $arg1))
(declare-const sm@880@01 $PSF<e$Pay>)
(declare-const s@881@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@882@01 $PPM)
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=
    ($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1)))
    $Perm.No)
  :pattern (($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resPrmSumDef22|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  ($PSF.loc_e$Pay ($PSF.lookup_e$Pay (as sm@880@01  $PSF<e$Pay>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1)))
  :pattern (($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resTrgDef23|)))
(assert ($PSF.loc_e$Pay ($PSF.lookup_e$Pay (as sm@880@01  $PSF<e$Pay>) ($Snap.combine
  ($SortWrappers.IntTo$Snap $arg0@878@01)
  ($SortWrappers.IntTo$Snap $arg1@879@01))) ($Snap.combine
  ($SortWrappers.IntTo$Snap $arg0@878@01)
  ($SortWrappers.IntTo$Snap $arg1@879@01))))
(assert (>
  ($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@878@01)
    ($SortWrappers.IntTo$Snap $arg1@879@01)))
  $Perm.No))
; [eval] perm(e$Pay($arg0, $arg1))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 6
(declare-fun inv@883@01 (Int Int) Int)
(declare-fun img@884@01 (Int Int) Bool)
(declare-fun inv@885@01 (Int Int) Int)
(declare-fun img@886@01 (Int Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=
    ($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1)))
    $Perm.No)
  :pattern (($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resPrmSumDef22|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  ($PSF.loc_e$Pay ($PSF.lookup_e$Pay (as sm@880@01  $PSF<e$Pay>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1)))
  :pattern (($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0)
    ($SortWrappers.IntTo$Snap $arg1))))
  :qid |qp.resTrgDef23|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@878@01 Int) ($arg1@879@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@878@01)
        ($SortWrappers.IntTo$Snap $arg1@879@01)))
      $Perm.No)
    ($PSF.loc_e$Pay ($PSF.lookup_e$Pay (as sm@880@01  $PSF<e$Pay>) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@878@01)
      ($SortWrappers.IntTo$Snap $arg1@879@01))) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@878@01)
      ($SortWrappers.IntTo$Snap $arg1@879@01))))
  :pattern (($PSF.loc_e$Pay ($PSF.lookup_e$Pay (as sm@880@01  $PSF<e$Pay>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@878@01)
    ($SortWrappers.IntTo$Snap $arg1@879@01))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@878@01)
    ($SortWrappers.IntTo$Snap $arg1@879@01))))
  :qid |e$Pay-aux|)))
(push) ; 6
(assert (not (forall (($arg0@878@01 Int) ($arg1@879@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@878@01)
        ($SortWrappers.IntTo$Snap $arg1@879@01)))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@878@01)
          ($SortWrappers.IntTo$Snap $arg1@879@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@878@01)
          ($SortWrappers.IntTo$Snap $arg1@879@01))))))
  
  :qid |quant-u-2066|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall (($arg01@878@01 Int) ($arg11@879@01 Int) ($arg02@878@01 Int) ($arg12@879@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@878@01)
              ($SortWrappers.IntTo$Snap $arg11@879@01)))
            $Perm.No)
          ($PSF.loc_e$Pay ($PSF.lookup_e$Pay (as sm@880@01  $PSF<e$Pay>) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg01@878@01)
            ($SortWrappers.IntTo$Snap $arg11@879@01))) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg01@878@01)
            ($SortWrappers.IntTo$Snap $arg11@879@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg01@878@01)
            ($SortWrappers.IntTo$Snap $arg11@879@01)))))
      (and
        (and
          (>
            ($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@878@01)
              ($SortWrappers.IntTo$Snap $arg12@879@01)))
            $Perm.No)
          ($PSF.loc_e$Pay ($PSF.lookup_e$Pay (as sm@880@01  $PSF<e$Pay>) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg02@878@01)
            ($SortWrappers.IntTo$Snap $arg12@879@01))) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg02@878@01)
            ($SortWrappers.IntTo$Snap $arg12@879@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg02@878@01)
            ($SortWrappers.IntTo$Snap $arg12@879@01)))))
      (and (= $arg01@878@01 $arg02@878@01) (= $arg11@879@01 $arg12@879@01)))
    (and (= $arg01@878@01 $arg02@878@01) (= $arg11@879@01 $arg12@879@01)))
  
  :qid |e$Pay-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@878@01 Int) ($arg1@879@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@878@01)
          ($SortWrappers.IntTo$Snap $arg1@879@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@878@01)
          ($SortWrappers.IntTo$Snap $arg1@879@01)))))
    (and
      (and
        (= (inv@883@01 $arg0@878@01 $arg1@879@01) $arg0@878@01)
        (= (inv@885@01 $arg0@878@01 $arg1@879@01) $arg1@879@01))
      (and
        (img@884@01 $arg0@878@01 $arg1@879@01)
        (img@886@01 $arg0@878@01 $arg1@879@01))))
  :pattern (($PSF.loc_e$Pay ($PSF.lookup_e$Pay (as sm@880@01  $PSF<e$Pay>) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@878@01)
    ($SortWrappers.IntTo$Snap $arg1@879@01))) ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@878@01)
    ($SortWrappers.IntTo$Snap $arg1@879@01))))
  :qid |e$Pay-invOfFct|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=>
    (and
      (and (img@884@01 $arg0 $arg1) (img@886@01 $arg0 $arg1))
      (and
        (>
          ($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@883@01 $arg0 $arg1))
            ($SortWrappers.IntTo$Snap (inv@885@01 $arg0 $arg1))))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@883@01 $arg0 $arg1))
            ($SortWrappers.IntTo$Snap (inv@885@01 $arg0 $arg1)))))))
    (and (= (inv@883@01 $arg0 $arg1) $arg0) (= (inv@885@01 $arg0 $arg1) $arg1)))
  :pattern ((inv@883@01 $arg0 $arg1))
  :pattern ((inv@885@01 $arg0 $arg1))
  :qid |e$Pay-fctOfInv|)))
(assert (forall (($arg0 Int) ($arg1 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap (inv@883@01 $arg0 $arg1))
        ($SortWrappers.IntTo$Snap (inv@885@01 $arg0 $arg1))))
      $Perm.No)
    ($PSF.loc_e$Pay ($PSF.lookup_e$Pay (as sm@880@01  $PSF<e$Pay>) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))) ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))))
  :pattern ((inv@883@01 $arg0 $arg1) (inv@885@01 $arg0 $arg1))
  :qid |quant-u-2067|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 6
(assert (not (forall (($arg0 Int) ($arg1 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@883@01 $arg0 $arg1))
          ($SortWrappers.IntTo$Snap (inv@885@01 $arg0 $arg1))))
        $Perm.No)
      (and (img@884@01 $arg0 $arg1) (img@886@01 $arg0 $arg1))
      (and (= $arg0 (inv@883@01 $arg0 $arg1)) (= $arg1 (inv@885@01 $arg0 $arg1))))
    (=
      ($PSF.perm_e$Pay (as pm@882@01  $PPM) ($Snap.combine
        ($SortWrappers.IntTo$Snap (inv@883@01 $arg0 $arg1))
        ($SortWrappers.IntTo$Snap (inv@885@01 $arg0 $arg1))))
      $Perm.No))
  
  :qid |quant-u-2068|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@847@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@847@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@847@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 3))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@847@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@847@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 2)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@847@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 2))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not l$send_fail@792@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not l$send_fail@792@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 227 | l$send_fail@792@01 | live]
; [else-branch: 227 | !(l$send_fail@792@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 227 | l$send_fail@792@01]
(assert l$send_fail@792@01)
; [exec]
; inhale acc($failed(l$vendor), write)
(declare-const $t@887@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 228 | True | live]
; [else-branch: 228 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 228 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@888@01 $Snap)
(assert (= $t@888@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@802@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@889@01 $Struct)
(assert (=
  self@889@01
  ($struct_set<$Struct> self@782@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@782@01 4))
    l$havoc$6@802@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@889@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@889@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@889@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@889@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@889@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@889@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@889@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 2)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@889@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 2))))
(pop) ; 7
; [then-branch: 229 | False | dead]
; [else-branch: 229 | True | live]
(push) ; 7
; [else-branch: 229 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 227 | !(l$send_fail@792@01)]
(assert (not l$send_fail@792@01))
(pop) ; 6
; [eval] !l$send_fail
(push) ; 6
(set-option :timeout 10)
(assert (not l$send_fail@792@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not l$send_fail@792@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 230 | !(l$send_fail@792@01) | live]
; [else-branch: 230 | l$send_fail@792@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 230 | !(l$send_fail@792@01)]
(assert (not l$send_fail@792@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i0$$pre_self := self
; [exec]
; i0$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$1
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$2
; [exec]
; $contracts := l$havoc$3
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@890@01 $Snap)
(assert (= $t@890@01 ($Snap.combine ($Snap.first $t@890@01) ($Snap.second $t@890@01))))
(assert (= ($Snap.first $t@890@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@796@01 0))))
(assert (= ($Snap.second $t@890@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@796@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@891@01 $Snap)
(assert (= $t@891@01 ($Snap.combine ($Snap.first $t@891@01) ($Snap.second $t@891@01))))
(assert (= ($Snap.first $t@891@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@796@01 1))))
(assert (= ($Snap.second $t@891@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@796@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@892@01 $Snap)
(assert (= $t@892@01 ($Snap.combine ($Snap.first $t@892@01) ($Snap.second $t@892@01))))
(assert (= ($Snap.first $t@892@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@796@01 2))))
(assert (= ($Snap.second $t@892@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@796@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@893@01 $Snap)
(assert (= $t@893@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@894@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
; [then-branch: 231 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@796@01, 3)), $q0@894@01)) | live]
; [else-branch: 231 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@796@01, 3)), $q0@894@01) | live]
(push) ; 9
; [then-branch: 231 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@796@01, 3)), $q0@894@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 3)) $q0@894@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 231 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@796@01, 3)), $q0@894@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 3)) $q0@894@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 3)) $q0@894@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 3)) $q0@894@01)))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@894@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 3)) $q0@894@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 3)) $q0@894@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 3)) $q0@894@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1823@11@1823@345-aux|)))
(assert (forall (($q0@894@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 3)) $q0@894@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 3)) $q0@894@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 3)) $q0@894@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1823@11@1823@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@895@01 $Snap)
(assert (= $t@895@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@896@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@896@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 3)) $q0@896@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 3)) $q0@896@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1824@11@1824@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@897@01 $Snap)
(assert (= $t@897@01 ($Snap.combine ($Snap.first $t@897@01) ($Snap.second $t@897@01))))
(assert (= ($Snap.first $t@897@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@796@01 4))))
(assert (= ($Snap.second $t@897@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@796@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@898@01 $Snap)
(assert (= $t@898@01 ($Snap.combine ($Snap.first $t@898@01) ($Snap.second $t@898@01))))
(assert (= ($Snap.first $t@898@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@796@01 5))))
(assert (= ($Snap.second $t@898@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@796@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@899@01 $Snap)
(assert (= $t@899@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@900@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 8
; [then-branch: 232 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@796@01, 7)), $q1@900@01)) | live]
; [else-branch: 232 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@796@01, 7)), $q1@900@01) | live]
(push) ; 9
; [then-branch: 232 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@796@01, 7)), $q1@900@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 7)) $q1@900@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 232 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@796@01, 7)), $q1@900@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 7)) $q1@900@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 7)) $q1@900@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 7)) $q1@900@01)))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@900@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 7)) $q1@900@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 7)) $q1@900@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 7)) $q1@900@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1827@11@1827@345-aux|)))
(assert (forall (($q1@900@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 7)) $q1@900@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 7)) $q1@900@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 7)) $q1@900@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1827@11@1827@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@901@01 $Snap)
(assert (= $t@901@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q1@902@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@902@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 7)) $q1@902@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 7)) $q1@902@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1828@11@1828@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@903@01 $Snap)
(assert (= $t@903@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@904@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 8
; [then-branch: 233 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@796@01, 8)), $q2@904@01)) | live]
; [else-branch: 233 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@796@01, 8)), $q2@904@01) | live]
(push) ; 9
; [then-branch: 233 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@796@01, 8)), $q2@904@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 8)) $q2@904@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 233 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@796@01, 8)), $q2@904@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 8)) $q2@904@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 8)) $q2@904@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 8)) $q2@904@01)))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@904@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 8)) $q2@904@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 8)) $q2@904@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 8)) $q2@904@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1829@11@1829@345-aux|)))
(assert (forall (($q2@904@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 8)) $q2@904@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 8)) $q2@904@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 8)) $q2@904@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1829@11@1829@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@905@01 $Snap)
(assert (= $t@905@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q2@906@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@906@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 8)) $q2@906@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 8)) $q2@906@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1830@11@1830@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@907@01 $Snap)
(assert (= $t@907@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@796@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@908@01 $Snap)
(assert (= $t@908@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@909@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@909@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 7)) $a@909@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 7)) $a@909@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 7)) $a@909@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1833@11@1833@259|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
(declare-const $t@910@01 $Snap)
(assert (= $t@910@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@796@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@847@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(declare-const $t@911@01 $Snap)
(assert (= $t@911@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@796@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@796@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
(declare-const $t@912@01 $Snap)
(assert (= $t@912@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@796@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@847@01 2))))
; State saturation: after inhale
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@798@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not l$no_reentrant_call@798@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 234 | l$no_reentrant_call@798@01 | live]
; [else-branch: 234 | !(l$no_reentrant_call@798@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 234 | l$no_reentrant_call@798@01]
(assert l$no_reentrant_call@798@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; inhale acc(e$Pay(l$vendor, $unwrap(l$amount)), write)
; [eval] $unwrap(l$amount)
(declare-const $t@913@01 $Snap)
(declare-const sm@914@01 $PSF<e$Pay>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($PSF.lookup_e$Pay (as sm@914@01  $PSF<e$Pay>) ($Snap.combine
    ($SortWrappers.IntTo$Snap l$vendor@775@01)
    ($SortWrappers.IntTo$Snap ($unwrap<Int> l$amount@776@01))))
  $t@913@01))
(assert (<=
  $Perm.No
  (ite
    (= ($unwrap<Int> l$amount@776@01) ($unwrap<Int> l$amount@776@01))
    $Perm.Write
    $Perm.No)))
; Definitional axioms for snapshot map values
(assert ($PSF.loc_e$Pay ($PSF.lookup_e$Pay (as sm@880@01  $PSF<e$Pay>) ($Snap.combine
  ($SortWrappers.IntTo$Snap l$vendor@775@01)
  ($SortWrappers.IntTo$Snap ($unwrap<Int> l$amount@776@01)))) ($Snap.combine
  ($SortWrappers.IntTo$Snap l$vendor@775@01)
  ($SortWrappers.IntTo$Snap ($unwrap<Int> l$amount@776@01)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label return
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not $out_of_gas@801@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not $out_of_gas@801@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 235 | $out_of_gas@801@01 | live]
; [else-branch: 235 | !($out_of_gas@801@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 235 | $out_of_gas@801@01]
(assert $out_of_gas@801@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 236 | True | live]
; [else-branch: 236 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 236 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@915@01 $Snap)
(assert (= $t@915@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@802@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@916@01 $Struct)
(assert (=
  self@916@01
  ($struct_set<$Struct> self@782@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@782@01 4))
    l$havoc$6@802@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 10
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@916@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 1)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@916@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 10
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@916@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@916@01 3))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@916@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@916@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 10
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@916@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 2)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@916@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 2))))
(pop) ; 9
; [then-branch: 237 | False | dead]
; [else-branch: 237 | True | live]
(push) ; 9
; [else-branch: 237 | True]
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 235 | !($out_of_gas@801@01)]
(assert (not $out_of_gas@801@01))
(pop) ; 8
; [eval] !$out_of_gas
(push) ; 8
(set-option :timeout 10)
(assert (not $out_of_gas@801@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not $out_of_gas@801@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 238 | !($out_of_gas@801@01) | live]
; [else-branch: 238 | $out_of_gas@801@01 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 238 | !($out_of_gas@801@01)]
(assert (not $out_of_gas@801@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 239 | False | dead]
; [else-branch: 239 | True | live]
(push) ; 9
; [else-branch: 239 | True]
(pop) ; 9
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 240 | True | live]
; [else-branch: 240 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 240 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@917@01 $Snap)
(assert (= $t@917@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@802@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@918@01 $Struct)
(assert (=
  self@918@01
  ($struct_set<$Struct> self@847@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@847@01 4))
    l$havoc$6@802@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 10
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@918@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@847@01 1)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@918@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@847@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 10
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@918@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@918@01 3))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@918@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@918@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 10
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@918@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@847@01 2)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@918@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@847@01 2))))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 238 | $out_of_gas@801@01]
(assert $out_of_gas@801@01)
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 234 | !(l$no_reentrant_call@798@01)]
(assert (not l$no_reentrant_call@798@01))
(pop) ; 7
; [eval] !l$no_reentrant_call
(push) ; 7
(set-option :timeout 10)
(assert (not l$no_reentrant_call@798@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@798@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 241 | !(l$no_reentrant_call@798@01) | live]
; [else-branch: 241 | l$no_reentrant_call@798@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 241 | !(l$no_reentrant_call@798@01)]
(assert (not l$no_reentrant_call@798@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; inhale acc(e$Pay(l$vendor, $unwrap(l$amount)), write)
; [eval] $unwrap(l$amount)
(declare-const $t@919@01 $Snap)
(declare-const sm@920@01 $PSF<e$Pay>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($PSF.lookup_e$Pay (as sm@920@01  $PSF<e$Pay>) ($Snap.combine
    ($SortWrappers.IntTo$Snap l$vendor@775@01)
    ($SortWrappers.IntTo$Snap ($unwrap<Int> l$amount@776@01))))
  $t@919@01))
(assert (<=
  $Perm.No
  (ite
    (= ($unwrap<Int> l$amount@776@01) ($unwrap<Int> l$amount@776@01))
    $Perm.Write
    $Perm.No)))
; Definitional axioms for snapshot map values
(assert ($PSF.loc_e$Pay ($PSF.lookup_e$Pay (as sm@880@01  $PSF<e$Pay>) ($Snap.combine
  ($SortWrappers.IntTo$Snap l$vendor@775@01)
  ($SortWrappers.IntTo$Snap ($unwrap<Int> l$amount@776@01)))) ($Snap.combine
  ($SortWrappers.IntTo$Snap l$vendor@775@01)
  ($SortWrappers.IntTo$Snap ($unwrap<Int> l$amount@776@01)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label return
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not $out_of_gas@801@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not $out_of_gas@801@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 242 | $out_of_gas@801@01 | live]
; [else-branch: 242 | !($out_of_gas@801@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 242 | $out_of_gas@801@01]
(assert $out_of_gas@801@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 243 | True | live]
; [else-branch: 243 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 243 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@921@01 $Snap)
(assert (= $t@921@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@802@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@922@01 $Struct)
(assert (=
  self@922@01
  ($struct_set<$Struct> self@782@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@782@01 4))
    l$havoc$6@802@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 10
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@922@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 1)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@922@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 10
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@922@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@922@01 3))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@922@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@922@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 10
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@922@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 2)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@922@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@782@01 2))))
(pop) ; 9
; [then-branch: 244 | False | dead]
; [else-branch: 244 | True | live]
(push) ; 9
; [else-branch: 244 | True]
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 242 | !($out_of_gas@801@01)]
(assert (not $out_of_gas@801@01))
(pop) ; 8
; [eval] !$out_of_gas
(push) ; 8
(set-option :timeout 10)
(assert (not $out_of_gas@801@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not $out_of_gas@801@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 245 | !($out_of_gas@801@01) | live]
; [else-branch: 245 | $out_of_gas@801@01 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 245 | !($out_of_gas@801@01)]
(assert (not $out_of_gas@801@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 246 | False | dead]
; [else-branch: 246 | True | live]
(push) ; 9
; [else-branch: 246 | True]
(pop) ; 9
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 247 | True | live]
; [else-branch: 247 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 247 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@923@01 $Snap)
(assert (= $t@923@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@802@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@924@01 $Struct)
(assert (=
  self@924@01
  ($struct_set<$Struct> l$havoc$2@796@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@796@01 4))
    l$havoc$6@802@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 10
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@924@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@796@01 1)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@924@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@796@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 10
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@924@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@924@01 3))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@924@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@924@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 10
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@924@01 2))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@796@01 2)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@924@01 2))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@796@01 2))))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 245 | $out_of_gas@801@01]
(assert $out_of_gas@801@01)
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 241 | l$no_reentrant_call@798@01]
(assert l$no_reentrant_call@798@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 230 | l$send_fail@792@01]
(assert l$send_fail@792@01)
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 224 | !($struct_get[Int]($struct_loc[Int](self@782@01, 4)) >= $unwrap[Int](l$amount@776@01))]
(assert (not
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@782@01 4))
    ($unwrap<Int> l$amount@776@01))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 220 | $struct_get[Int]($struct_loc[Int](msg@778@01, 0)) != $struct_get[Int]($struct_loc[Int](self@782@01, 0))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@778@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@782@01 0)))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$debt ----------
(declare-const $succ@925@01 Bool)
(declare-const $res@926@01 Int)
(declare-const $succ@927@01 Bool)
(declare-const $res@928@01 Int)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@929@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@930@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@931@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@932@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@933@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@934@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@935@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@936@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@937@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@938@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@939@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@940@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@941@01 Bool)
; [exec]
; var i0$$res: Int
(declare-const i0$$res@942@01 Int)
; [exec]
; var i1$$res: Int
(declare-const i1$$res@943@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@944@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@945@01 Int)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@946@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@947@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@948@01 $Snap)
(assert (= $t@948@01 ($Snap.combine ($Snap.first $t@948@01) ($Snap.second $t@948@01))))
(assert (= ($Snap.first $t@948@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@933@01 0))))
(assert (= ($Snap.second $t@948@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@933@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@949@01 $Snap)
(assert (= $t@949@01 ($Snap.combine ($Snap.first $t@949@01) ($Snap.second $t@949@01))))
(assert (= ($Snap.first $t@949@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@933@01 1))))
(assert (= ($Snap.second $t@949@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@933@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@950@01 $Snap)
(assert (= $t@950@01 ($Snap.combine ($Snap.first $t@950@01) ($Snap.second $t@950@01))))
(assert (= ($Snap.first $t@950@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@933@01 2))))
(assert (= ($Snap.second $t@950@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@933@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@951@01 $Snap)
(assert (= $t@951@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@952@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 248 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@933@01, 3)), $q0@952@01)) | live]
; [else-branch: 248 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@933@01, 3)), $q0@952@01) | live]
(push) ; 5
; [then-branch: 248 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@933@01, 3)), $q0@952@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 3)) $q0@952@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 248 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@933@01, 3)), $q0@952@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 3)) $q0@952@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 3)) $q0@952@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 3)) $q0@952@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@952@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 3)) $q0@952@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 3)) $q0@952@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 3)) $q0@952@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1912@11@1912@345-aux|)))
(assert (forall (($q0@952@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 3)) $q0@952@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 3)) $q0@952@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 3)) $q0@952@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1912@11@1912@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@953@01 $Snap)
(assert (= $t@953@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@954@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@954@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 3)) $q0@954@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 3)) $q0@954@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1913@11@1913@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@955@01 $Snap)
(assert (= $t@955@01 ($Snap.combine ($Snap.first $t@955@01) ($Snap.second $t@955@01))))
(assert (= ($Snap.first $t@955@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@933@01 4))))
(assert (= ($Snap.second $t@955@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@933@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@956@01 $Snap)
(assert (= $t@956@01 ($Snap.combine ($Snap.first $t@956@01) ($Snap.second $t@956@01))))
(assert (= ($Snap.first $t@956@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@933@01 5))))
(assert (= ($Snap.second $t@956@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@933@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@957@01 $Snap)
(assert (= $t@957@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@958@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 249 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@933@01, 7)), $q1@958@01)) | live]
; [else-branch: 249 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@933@01, 7)), $q1@958@01) | live]
(push) ; 5
; [then-branch: 249 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@933@01, 7)), $q1@958@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 7)) $q1@958@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 249 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@933@01, 7)), $q1@958@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 7)) $q1@958@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 7)) $q1@958@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 7)) $q1@958@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@958@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 7)) $q1@958@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 7)) $q1@958@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 7)) $q1@958@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1916@11@1916@345-aux|)))
(assert (forall (($q1@958@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 7)) $q1@958@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 7)) $q1@958@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 7)) $q1@958@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1916@11@1916@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@959@01 $Snap)
(assert (= $t@959@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q1@960@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@960@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 7)) $q1@960@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 7)) $q1@960@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1917@11@1917@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@961@01 $Snap)
(assert (= $t@961@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@962@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 250 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@933@01, 8)), $q2@962@01)) | live]
; [else-branch: 250 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@933@01, 8)), $q2@962@01) | live]
(push) ; 5
; [then-branch: 250 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@933@01, 8)), $q2@962@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 8)) $q2@962@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 250 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@933@01, 8)), $q2@962@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 8)) $q2@962@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 8)) $q2@962@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 8)) $q2@962@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@962@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 8)) $q2@962@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 8)) $q2@962@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 8)) $q2@962@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1918@11@1918@345-aux|)))
(assert (forall (($q2@962@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 8)) $q2@962@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 8)) $q2@962@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 8)) $q2@962@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1918@11@1918@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@963@01 $Snap)
(assert (= $t@963@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q2@964@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@964@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 8)) $q2@964@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 8)) $q2@964@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@1919@11@1919@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@965@01 $Snap)
(assert (= $t@965@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@933@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@966@01 $Snap)
(assert (= $t@966@01 ($Snap.combine ($Snap.first $t@966@01) ($Snap.second $t@966@01))))
(assert (= ($Snap.first $t@966@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@966@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@967@01 $Snap)
(assert (= $t@967@01 ($Snap.combine ($Snap.first $t@967@01) ($Snap.second $t@967@01))))
(assert (= ($Snap.first $t@967@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@930@01 0))))
(assert (= ($Snap.second $t@967@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@930@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@968@01 $Snap)
(assert (= $t@968@01 ($Snap.combine ($Snap.first $t@968@01) ($Snap.second $t@968@01))))
(assert (= ($Snap.first $t@968@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@930@01 1))))
(assert (= ($Snap.second $t@968@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@930@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@969@01 $Snap)
(assert (= $t@969@01 ($Snap.combine ($Snap.first $t@969@01) ($Snap.second $t@969@01))))
(assert (= ($Snap.first $t@969@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@930@01 2))))
(assert (= ($Snap.second $t@969@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@930@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@970@01 $Snap)
(assert (= $t@970@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@930@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@971@01 $Snap)
(assert (= $t@971@01 ($Snap.combine ($Snap.first $t@971@01) ($Snap.second $t@971@01))))
(assert (= ($Snap.first $t@971@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@930@01 4))))
(assert (= ($Snap.second $t@971@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@930@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@972@01 $Snap)
(assert (= $t@972@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@930@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@973@01 $Snap)
(assert (= $t@973@01 ($Snap.combine ($Snap.first $t@973@01) ($Snap.second $t@973@01))))
(assert (= ($Snap.first $t@973@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@929@01 0))))
(assert (= ($Snap.second $t@973@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@929@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@974@01 $Snap)
(assert (= $t@974@01 ($Snap.combine ($Snap.first $t@974@01) ($Snap.second $t@974@01))))
(assert (= ($Snap.first $t@974@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@929@01 1))))
(assert (= ($Snap.second $t@974@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@929@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@975@01 $Snap)
(assert (= $t@975@01 ($Snap.combine ($Snap.first $t@975@01) ($Snap.second $t@975@01))))
(assert (= ($Snap.first $t@975@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@929@01 2))))
(assert (= ($Snap.second $t@975@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@929@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@976@01 $Snap)
(assert (= $t@976@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@929@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@977@01 $Snap)
(assert (= $t@977@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@929@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@978@01 $Snap)
(assert (= $t@978@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@979@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@980@01 $Snap)
(assert (= $t@980@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(declare-const $t@981@01 $Snap)
(assert (= $t@981@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@933@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc(self, 2)): Int)
(declare-const $t@982@01 $Snap)
(assert (= $t@982@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@983@01 $Snap)
(assert (= $t@983@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@929@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; i1$$res := $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const i1$$res@984@01 Int)
(assert (=
  i1$$res@984@01
  ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@933@01 3)) ($struct_get<Int> ($struct_loc<Int> self@933@01 0)))))))
; [exec]
; label i1$return
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res < 0
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (< (- ($struct_get<Int> ($struct_loc<Int> self@933@01 1)) i1$$res@984@01) 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 251 | $struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01 < 0 | dead]
; [else-branch: 251 | !($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01 < 0) | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 251 | !($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01 < 0)]
(assert (not
  (< (- ($struct_get<Int> ($struct_loc<Int> self@933@01 1)) i1$$res@984@01) 0)))
(pop) ; 3
; [eval] !(($struct_get($struct_loc(self, 1)): Int) - i1$$res < 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res < 0
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 3
(set-option :timeout 10)
(assert (not (< (- ($struct_get<Int> ($struct_loc<Int> self@933@01 1)) i1$$res@984@01) 0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (< (- ($struct_get<Int> ($struct_loc<Int> self@933@01 1)) i1$$res@984@01) 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 252 | !($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01 < 0) | live]
; [else-branch: 252 | $struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01 < 0 | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 252 | !($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01 < 0)]
(assert (not
  (< (- ($struct_get<Int> ($struct_loc<Int> self@933@01 1)) i1$$res@984@01) 0)))
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (- ($struct_get<Int> ($struct_loc<Int> self@933@01 1)) i1$$res@984@01)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 253 | $struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01 > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 253 | !($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01 > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 253 | !($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (- ($struct_get<Int> ($struct_loc<Int> self@933@01 1)) i1$$res@984@01)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 4
; [eval] !(($struct_get($struct_loc(self, 1)): Int) - i1$$res > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (- ($struct_get<Int> ($struct_loc<Int> self@933@01 1)) i1$$res@984@01)
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (- ($struct_get<Int> ($struct_loc<Int> self@933@01 1)) i1$$res@984@01)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 254 | !($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01 > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 254 | $struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01 > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 254 | !($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (- ($struct_get<Int> ($struct_loc<Int> self@933@01 1)) i1$$res@984@01)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] $unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))) < 0
; [eval] $unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res)
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
      ($struct_get<Int> ($struct_loc<Int> self@933@01 1))
      i1$$res@984@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@933@01 2)))))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 255 | $unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 2))))) < 0 | dead]
; [else-branch: 255 | !($unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 2))))) < 0) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 255 | !($unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 2))))) < 0)]
(assert (not
  (<
    ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
      ($struct_get<Int> ($struct_loc<Int> self@933@01 1))
      i1$$res@984@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@933@01 2)))))
    0)))
(pop) ; 5
; [eval] !($unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))) < 0)
; [eval] $unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))) < 0
; [eval] $unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res)
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
    ($struct_get<Int> ($struct_loc<Int> self@933@01 1))
    i1$$res@984@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@933@01 2)))))
  0)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
      ($struct_get<Int> ($struct_loc<Int> self@933@01 1))
      i1$$res@984@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@933@01 2)))))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 256 | !($unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 2))))) < 0) | live]
; [else-branch: 256 | $unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 2))))) < 0 | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 256 | !($unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 2))))) < 0)]
(assert (not
  (<
    ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
      ($struct_get<Int> ($struct_loc<Int> self@933@01 1))
      i1$$res@984@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@933@01 2)))))
    0)))
; [eval] $unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res)
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
      ($struct_get<Int> ($struct_loc<Int> self@933@01 1))
      i1$$res@984@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@933@01 2)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
    ($struct_get<Int> ($struct_loc<Int> self@933@01 1))
    i1$$res@984@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@933@01 2)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 257 | $unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 257 | !($unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 257 | $unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
    ($struct_get<Int> ($struct_loc<Int> self@933@01 1))
    i1$$res@984@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@933@01 2)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 258 | True | live]
; [else-branch: 258 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 258 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@985@01 $Snap)
(assert (= $t@985@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@946@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@986@01 $Struct)
(assert (=
  self@986@01
  ($struct_set<$Struct> self@933@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@933@01 4))
    l$havoc$1@946@01))))
; [exec]
; $contracts := l$havoc$2
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@986@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@933@01 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@986@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@933@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@986@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@986@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@986@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@933@01 2)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@986@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@933@01 2))))
(pop) ; 7
; [then-branch: 259 | False | dead]
; [else-branch: 259 | True | live]
(push) ; 7
; [else-branch: 259 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 257 | !($unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
      ($struct_get<Int> ($struct_loc<Int> self@933@01 1))
      i1$$res@984@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@933@01 2)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 6
; [eval] !($unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res)
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
    ($struct_get<Int> ($struct_loc<Int> self@933@01 1))
    i1$$res@984@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@933@01 2)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
      ($struct_get<Int> ($struct_loc<Int> self@933@01 1))
      i1$$res@984@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@933@01 2)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 260 | !($unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 260 | $unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 260 | !($unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
      ($struct_get<Int> ($struct_loc<Int> self@933@01 1))
      i1$$res@984@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@933@01 2)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; i0$$res := $unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) -
;   i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res)
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(declare-const i0$$res@987@01 Int)
(assert (=
  i0$$res@987@01
  ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
    ($struct_get<Int> ($struct_loc<Int> self@933@01 1))
    i1$$res@984@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@933@01 2)))))))
; [exec]
; label i0$return
; [exec]
; $res := $unwrap($wrap(i0$$res))
; [eval] $unwrap($wrap(i0$$res))
; [eval] $wrap(i0$$res)
(declare-const $res@988@01 Int)
(assert (= $res@988@01 ($unwrap<Int> ($wrap<$Int> i0$$res@987@01))))
; [exec]
; label return
(push) ; 7
(set-option :timeout 10)
(assert (not (not $out_of_gas@944@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not $out_of_gas@944@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 261 | $out_of_gas@944@01 | live]
; [else-branch: 261 | !($out_of_gas@944@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 261 | $out_of_gas@944@01]
(assert $out_of_gas@944@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 262 | True | live]
; [else-branch: 262 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 262 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@989@01 $Snap)
(assert (= $t@989@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@946@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@990@01 $Struct)
(assert (=
  self@990@01
  ($struct_set<$Struct> self@933@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@933@01 4))
    l$havoc$1@946@01))))
; [exec]
; $contracts := l$havoc$2
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@990@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@933@01 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@990@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@933@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@990@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@990@01 3))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@990@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@990@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@990@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@933@01 2)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@990@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@933@01 2))))
(pop) ; 8
; [then-branch: 263 | False | dead]
; [else-branch: 263 | True | live]
(push) ; 8
; [else-branch: 263 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 261 | !($out_of_gas@944@01)]
(assert (not $out_of_gas@944@01))
(pop) ; 7
; [eval] !$out_of_gas
(push) ; 7
(set-option :timeout 10)
(assert (not $out_of_gas@944@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not $out_of_gas@944@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 264 | !($out_of_gas@944@01) | live]
; [else-branch: 264 | $out_of_gas@944@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 264 | !($out_of_gas@944@01)]
(assert (not $out_of_gas@944@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 265 | False | dead]
; [else-branch: 265 | True | live]
(push) ; 8
; [else-branch: 265 | True]
(pop) ; 8
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 266 | True | live]
; [else-branch: 266 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 266 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@991@01 $Snap)
(assert (= $t@991@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@946@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@992@01 $Struct)
(assert (=
  self@992@01
  ($struct_set<$Struct> self@933@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@933@01 4))
    l$havoc$1@946@01))))
; [exec]
; $contracts := l$havoc$2
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@992@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@933@01 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@992@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@933@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@992@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@992@01 3))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@992@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@992@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@992@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@933@01 2)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@992@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@933@01 2))))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 264 | $out_of_gas@944@01]
(assert $out_of_gas@944@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 260 | $unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 1)) - i1$$res@984@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@933@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
    ($struct_get<Int> ($struct_loc<Int> self@933@01 1))
    i1$$res@984@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@933@01 2)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$worth ----------
(declare-const $succ@993@01 Bool)
(declare-const $res@994@01 Int)
(declare-const $succ@995@01 Bool)
(declare-const $res@996@01 Int)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@997@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@998@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@999@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@1000@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@1001@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@1002@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@1003@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@1004@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@1005@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@1006@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@1007@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@1008@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@1009@01 Bool)
; [exec]
; var i0$$res: Int
(declare-const i0$$res@1010@01 Int)
; [exec]
; var i1$$res: Int
(declare-const i1$$res@1011@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@1012@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@1013@01 Int)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@1014@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@1015@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1016@01 $Snap)
(assert (= $t@1016@01 ($Snap.combine ($Snap.first $t@1016@01) ($Snap.second $t@1016@01))))
(assert (= ($Snap.first $t@1016@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1001@01 0))))
(assert (= ($Snap.second $t@1016@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1017@01 $Snap)
(assert (= $t@1017@01 ($Snap.combine ($Snap.first $t@1017@01) ($Snap.second $t@1017@01))))
(assert (= ($Snap.first $t@1017@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))))
(assert (= ($Snap.second $t@1017@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1018@01 $Snap)
(assert (= $t@1018@01 ($Snap.combine ($Snap.first $t@1018@01) ($Snap.second $t@1018@01))))
(assert (= ($Snap.first $t@1018@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1001@01 2))))
(assert (= ($Snap.second $t@1018@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1019@01 $Snap)
(assert (= $t@1019@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@1020@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 267 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1001@01, 3)), $q0@1020@01)) | live]
; [else-branch: 267 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1001@01, 3)), $q0@1020@01) | live]
(push) ; 5
; [then-branch: 267 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1001@01, 3)), $q0@1020@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 3)) $q0@1020@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 267 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1001@01, 3)), $q0@1020@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 3)) $q0@1020@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 3)) $q0@1020@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 3)) $q0@1020@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@1020@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 3)) $q0@1020@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 3)) $q0@1020@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 3)) $q0@1020@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@2030@11@2030@345-aux|)))
(assert (forall (($q0@1020@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 3)) $q0@1020@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 3)) $q0@1020@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 3)) $q0@1020@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@2030@11@2030@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@1021@01 $Snap)
(assert (= $t@1021@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@1022@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@1022@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 3)) $q0@1022@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 3)) $q0@1022@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@2031@11@2031@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1023@01 $Snap)
(assert (= $t@1023@01 ($Snap.combine ($Snap.first $t@1023@01) ($Snap.second $t@1023@01))))
(assert (= ($Snap.first $t@1023@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1001@01 4))))
(assert (= ($Snap.second $t@1023@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1024@01 $Snap)
(assert (= $t@1024@01 ($Snap.combine ($Snap.first $t@1024@01) ($Snap.second $t@1024@01))))
(assert (= ($Snap.first $t@1024@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 5))))
(assert (= ($Snap.second $t@1024@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1025@01 $Snap)
(assert (= $t@1025@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@1026@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 268 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1001@01, 7)), $q1@1026@01)) | live]
; [else-branch: 268 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1001@01, 7)), $q1@1026@01) | live]
(push) ; 5
; [then-branch: 268 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1001@01, 7)), $q1@1026@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 7)) $q1@1026@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 268 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1001@01, 7)), $q1@1026@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 7)) $q1@1026@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 7)) $q1@1026@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 7)) $q1@1026@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1026@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 7)) $q1@1026@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 7)) $q1@1026@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 7)) $q1@1026@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@2034@11@2034@345-aux|)))
(assert (forall (($q1@1026@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 7)) $q1@1026@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 7)) $q1@1026@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 7)) $q1@1026@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@2034@11@2034@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@1027@01 $Snap)
(assert (= $t@1027@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q1@1028@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1028@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 7)) $q1@1028@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 7)) $q1@1028@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@2035@11@2035@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1029@01 $Snap)
(assert (= $t@1029@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@1030@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 269 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1001@01, 8)), $q2@1030@01)) | live]
; [else-branch: 269 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1001@01, 8)), $q2@1030@01) | live]
(push) ; 5
; [then-branch: 269 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1001@01, 8)), $q2@1030@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 8)) $q2@1030@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 269 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1001@01, 8)), $q2@1030@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 8)) $q2@1030@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 8)) $q2@1030@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 8)) $q2@1030@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@1030@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 8)) $q2@1030@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 8)) $q2@1030@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 8)) $q2@1030@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@2036@11@2036@345-aux|)))
(assert (forall (($q2@1030@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 8)) $q2@1030@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 8)) $q2@1030@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 8)) $q2@1030@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@2036@11@2036@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@1031@01 $Snap)
(assert (= $t@1031@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q2@1032@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@1032@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 8)) $q2@1032@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 8)) $q2@1032@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesstock.vy.vpr@2037@11@2037@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@1033@01 $Snap)
(assert (= $t@1033@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1034@01 $Snap)
(assert (= $t@1034@01 ($Snap.combine ($Snap.first $t@1034@01) ($Snap.second $t@1034@01))))
(assert (= ($Snap.first $t@1034@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@1034@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1035@01 $Snap)
(assert (= $t@1035@01 ($Snap.combine ($Snap.first $t@1035@01) ($Snap.second $t@1035@01))))
(assert (= ($Snap.first $t@1035@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@998@01 0))))
(assert (= ($Snap.second $t@1035@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@998@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1036@01 $Snap)
(assert (= $t@1036@01 ($Snap.combine ($Snap.first $t@1036@01) ($Snap.second $t@1036@01))))
(assert (= ($Snap.first $t@1036@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@998@01 1))))
(assert (= ($Snap.second $t@1036@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@998@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1037@01 $Snap)
(assert (= $t@1037@01 ($Snap.combine ($Snap.first $t@1037@01) ($Snap.second $t@1037@01))))
(assert (= ($Snap.first $t@1037@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@998@01 2))))
(assert (= ($Snap.second $t@1037@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@998@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@1038@01 $Snap)
(assert (= $t@1038@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@998@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1039@01 $Snap)
(assert (= $t@1039@01 ($Snap.combine ($Snap.first $t@1039@01) ($Snap.second $t@1039@01))))
(assert (= ($Snap.first $t@1039@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@998@01 4))))
(assert (= ($Snap.second $t@1039@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@998@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@1040@01 $Snap)
(assert (= $t@1040@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@998@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1041@01 $Snap)
(assert (= $t@1041@01 ($Snap.combine ($Snap.first $t@1041@01) ($Snap.second $t@1041@01))))
(assert (= ($Snap.first $t@1041@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@997@01 0))))
(assert (= ($Snap.second $t@1041@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@997@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1042@01 $Snap)
(assert (= $t@1042@01 ($Snap.combine ($Snap.first $t@1042@01) ($Snap.second $t@1042@01))))
(assert (= ($Snap.first $t@1042@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@997@01 1))))
(assert (= ($Snap.second $t@1042@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@997@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1043@01 $Snap)
(assert (= $t@1043@01 ($Snap.combine ($Snap.first $t@1043@01) ($Snap.second $t@1043@01))))
(assert (= ($Snap.first $t@1043@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@997@01 2))))
(assert (= ($Snap.second $t@1043@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@997@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@1044@01 $Snap)
(assert (= $t@1044@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@997@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@1045@01 $Snap)
(assert (= $t@1045@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@997@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@1046@01 $Snap)
(assert (= $t@1046@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@1047@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@1048@01 $Snap)
(assert (= $t@1048@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(declare-const $t@1049@01 $Snap)
(assert (= $t@1049@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc(self, 2)): Int)
(declare-const $t@1050@01 $Snap)
(assert (= $t@1050@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@1051@01 $Snap)
(assert (= $t@1051@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@997@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; i1$$res := $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const i1$$res@1052@01 Int)
(assert (=
  i1$$res@1052@01
  ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1001@01 3)) ($struct_get<Int> ($struct_loc<Int> self@1001@01 0)))))))
; [exec]
; label i1$return
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res < 0
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (< (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 1)) i1$$res@1052@01) 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 270 | $struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01 < 0 | dead]
; [else-branch: 270 | !($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01 < 0) | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 270 | !($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01 < 0)]
(assert (not
  (< (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 1)) i1$$res@1052@01) 0)))
(pop) ; 3
; [eval] !(($struct_get($struct_loc(self, 1)): Int) - i1$$res < 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res < 0
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 3
(set-option :timeout 10)
(assert (not (< (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 1)) i1$$res@1052@01) 0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (< (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 1)) i1$$res@1052@01) 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 271 | !($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01 < 0) | live]
; [else-branch: 271 | $struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01 < 0 | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 271 | !($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01 < 0)]
(assert (not
  (< (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 1)) i1$$res@1052@01) 0)))
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 1)) i1$$res@1052@01)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 272 | $struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01 > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 272 | !($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01 > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 272 | !($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 1)) i1$$res@1052@01)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 4
; [eval] !(($struct_get($struct_loc(self, 1)): Int) - i1$$res > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 1)) i1$$res@1052@01)
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 1)) i1$$res@1052@01)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 273 | !($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01 > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 273 | $struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01 > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 273 | !($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 1)) i1$$res@1052@01)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] $unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))) < 0
; [eval] $unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res)
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
      ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))
      i1$$res@1052@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@1001@01 2)))))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 274 | $unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 2))))) < 0 | dead]
; [else-branch: 274 | !($unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 2))))) < 0) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 274 | !($unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 2))))) < 0)]
(assert (not
  (<
    ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
      ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))
      i1$$res@1052@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@1001@01 2)))))
    0)))
(pop) ; 5
; [eval] !($unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))) < 0)
; [eval] $unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))) < 0
; [eval] $unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res)
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
    ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))
    i1$$res@1052@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@1001@01 2)))))
  0)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
      ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))
      i1$$res@1052@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@1001@01 2)))))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 275 | !($unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 2))))) < 0) | live]
; [else-branch: 275 | $unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 2))))) < 0 | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 275 | !($unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 2))))) < 0)]
(assert (not
  (<
    ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
      ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))
      i1$$res@1052@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@1001@01 2)))))
    0)))
; [eval] $unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res)
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
      ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))
      i1$$res@1052@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@1001@01 2)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
    ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))
    i1$$res@1052@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@1001@01 2)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 276 | $unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 276 | !($unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 276 | $unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
    ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))
    i1$$res@1052@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@1001@01 2)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 277 | True | live]
; [else-branch: 277 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 277 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1053@01 $Snap)
(assert (= $t@1053@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1014@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@1054@01 $Struct)
(assert (=
  self@1054@01
  ($struct_set<$Struct> self@1001@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@1001@01 4))
    l$havoc$1@1014@01))))
; [exec]
; $contracts := l$havoc$2
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1054@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1054@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1054@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1054@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1054@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1054@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1054@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 2)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1054@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 2))))
(pop) ; 7
; [then-branch: 278 | False | dead]
; [else-branch: 278 | True | live]
(push) ; 7
; [else-branch: 278 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 276 | !($unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
      ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))
      i1$$res@1052@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@1001@01 2)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 6
; [eval] !($unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res)
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
    ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))
    i1$$res@1052@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@1001@01 2)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
      ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))
      i1$$res@1052@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@1001@01 2)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 279 | !($unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 279 | $unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 279 | !($unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
      ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))
      i1$$res@1052@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@1001@01 2)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; i0$$res := $unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) -
;   i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $unwrap($w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int))))
; [eval] $w_mul($wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res), $wrap(($struct_get($struct_loc(self, 2)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int) - i1$$res)
; [eval] ($struct_get($struct_loc(self, 1)): Int) - i1$$res
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $wrap(($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(declare-const i0$$res@1055@01 Int)
(assert (=
  i0$$res@1055@01
  ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
    ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))
    i1$$res@1052@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@1001@01 2)))))))
; [exec]
; label i0$return
; [eval] ($struct_get($struct_loc(self, 4)): Int) - i0$$res < 0
; [eval] ($struct_get($struct_loc(self, 4)): Int) - i0$$res
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (< (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 4)) i0$$res@1055@01) 0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 4)) i0$$res@1055@01) 0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 280 | $struct_get[Int]($struct_loc[Int](self@1001@01, 4)) - i0$$res@1055@01 < 0 | live]
; [else-branch: 280 | !($struct_get[Int]($struct_loc[Int](self@1001@01, 4)) - i0$$res@1055@01 < 0) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 280 | $struct_get[Int]($struct_loc[Int](self@1001@01, 4)) - i0$$res@1055@01 < 0]
(assert (< (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 4)) i0$$res@1055@01) 0))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 281 | True | live]
; [else-branch: 281 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 281 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1056@01 $Snap)
(assert (= $t@1056@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1014@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@1057@01 $Struct)
(assert (=
  self@1057@01
  ($struct_set<$Struct> self@1001@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@1001@01 4))
    l$havoc$1@1014@01))))
; [exec]
; $contracts := l$havoc$2
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1057@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1057@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1057@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1057@01 3))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1057@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1057@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1057@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 2)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1057@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 2))))
(pop) ; 8
; [then-branch: 282 | False | dead]
; [else-branch: 282 | True | live]
(push) ; 8
; [else-branch: 282 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 280 | !($struct_get[Int]($struct_loc[Int](self@1001@01, 4)) - i0$$res@1055@01 < 0)]
(assert (not
  (< (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 4)) i0$$res@1055@01) 0)))
(pop) ; 7
; [eval] !(($struct_get($struct_loc(self, 4)): Int) - i0$$res < 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int) - i0$$res < 0
; [eval] ($struct_get($struct_loc(self, 4)): Int) - i0$$res
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(push) ; 7
(set-option :timeout 10)
(assert (not (< (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 4)) i0$$res@1055@01) 0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (< (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 4)) i0$$res@1055@01) 0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 283 | !($struct_get[Int]($struct_loc[Int](self@1001@01, 4)) - i0$$res@1055@01 < 0) | live]
; [else-branch: 283 | $struct_get[Int]($struct_loc[Int](self@1001@01, 4)) - i0$$res@1055@01 < 0 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 283 | !($struct_get[Int]($struct_loc[Int](self@1001@01, 4)) - i0$$res@1055@01 < 0)]
(assert (not
  (< (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 4)) i0$$res@1055@01) 0)))
; [eval] ($struct_get($struct_loc(self, 4)): Int) - i0$$res > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int) - i0$$res
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 4)) i0$$res@1055@01)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 284 | $struct_get[Int]($struct_loc[Int](self@1001@01, 4)) - i0$$res@1055@01 > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 284 | !($struct_get[Int]($struct_loc[Int](self@1001@01, 4)) - i0$$res@1055@01 > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 284 | !($struct_get[Int]($struct_loc[Int](self@1001@01, 4)) - i0$$res@1055@01 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 4)) i0$$res@1055@01)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 8
; [eval] !(($struct_get($struct_loc(self, 4)): Int) - i0$$res > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] ($struct_get($struct_loc(self, 4)): Int) - i0$$res > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int) - i0$$res
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(push) ; 8
(set-option :timeout 10)
(assert (not (>
  (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 4)) i0$$res@1055@01)
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 4)) i0$$res@1055@01)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 285 | !($struct_get[Int]($struct_loc[Int](self@1001@01, 4)) - i0$$res@1055@01 > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 285 | $struct_get[Int]($struct_loc[Int](self@1001@01, 4)) - i0$$res@1055@01 > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 285 | !($struct_get[Int]($struct_loc[Int](self@1001@01, 4)) - i0$$res@1055@01 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 4)) i0$$res@1055@01)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; $res := $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int) - i0$$res))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int) - i0$$res))
; [eval] $wrap(($struct_get($struct_loc(self, 4)): Int) - i0$$res)
; [eval] ($struct_get($struct_loc(self, 4)): Int) - i0$$res
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const $res@1058@01 Int)
(assert (=
  $res@1058@01
  ($unwrap<Int> ($wrap<$Int> (-
    ($struct_get<Int> ($struct_loc<Int> self@1001@01 4))
    i0$$res@1055@01)))))
; [exec]
; label return
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@1012@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@1012@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 286 | $out_of_gas@1012@01 | live]
; [else-branch: 286 | !($out_of_gas@1012@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 286 | $out_of_gas@1012@01]
(assert $out_of_gas@1012@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 287 | True | live]
; [else-branch: 287 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 287 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1059@01 $Snap)
(assert (= $t@1059@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1014@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@1060@01 $Struct)
(assert (=
  self@1060@01
  ($struct_set<$Struct> self@1001@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@1001@01 4))
    l$havoc$1@1014@01))))
; [exec]
; $contracts := l$havoc$2
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1060@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 1)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1060@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1060@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1060@01 3))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1060@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1060@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1060@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 2)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1060@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 2))))
(pop) ; 10
; [then-branch: 288 | False | dead]
; [else-branch: 288 | True | live]
(push) ; 10
; [else-branch: 288 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 286 | !($out_of_gas@1012@01)]
(assert (not $out_of_gas@1012@01))
(pop) ; 9
; [eval] !$out_of_gas
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@1012@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@1012@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 289 | !($out_of_gas@1012@01) | live]
; [else-branch: 289 | $out_of_gas@1012@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 289 | !($out_of_gas@1012@01)]
(assert (not $out_of_gas@1012@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 290 | False | dead]
; [else-branch: 290 | True | live]
(push) ; 10
; [else-branch: 290 | True]
(pop) ; 10
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 291 | True | live]
; [else-branch: 291 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 291 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1061@01 $Snap)
(assert (= $t@1061@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1014@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@1062@01 $Struct)
(assert (=
  self@1062@01
  ($struct_set<$Struct> self@1001@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@1001@01 4))
    l$havoc$1@1014@01))))
; [exec]
; $contracts := l$havoc$2
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1062@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 1)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1062@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1062@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1062@01 3))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1062@01 1))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1062@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1062@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 2)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1062@01 2))
  ($struct_get<Int> ($struct_loc<Int> self@1001@01 2))))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 289 | $out_of_gas@1012@01]
(assert $out_of_gas@1012@01)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 283 | $struct_get[Int]($struct_loc[Int](self@1001@01, 4)) - i0$$res@1055@01 < 0]
(assert (< (- ($struct_get<Int> ($struct_loc<Int> self@1001@01 4)) i0$$res@1055@01) 0))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 279 | $unwrap[Int]($w_mul[$Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 1)) - i1$$res@1052@01), $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@1001@01, 2))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  ($unwrap<Int> ($w_mul<$Int> ($wrap<$Int> (-
    ($struct_get<Int> ($struct_loc<Int> self@1001@01 1))
    i1$$res@1052@01)) ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@1001@01 2)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
