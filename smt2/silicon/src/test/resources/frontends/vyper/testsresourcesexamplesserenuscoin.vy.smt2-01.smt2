(get-info :version)
; (:version "4.12.1")
; Started: 2024-12-29 19:53:35
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<$Snap> 0)
(declare-sort $StructOps<$Map<Int~_$Map<Int~_Int>>> 0)
(declare-sort s$struct$self 0)
(declare-sort $Struct 0)
(declare-sort $StructOps<$Map<Int~_Bool>> 0)
(declare-sort s$resource$$creator 0)
(declare-sort $Blockchain 0)
(declare-sort $Convert 0)
(declare-sort $StructOps<Seq<Int>> 0)
(declare-sort $Range 0)
(declare-sort $Int 0)
(declare-sort $StructOps<$Map<Int~_Int>> 0)
(declare-sort $Math 0)
(declare-sort $StructOps<Int> 0)
(declare-sort $Map<Int~_$Struct> 0)
(declare-sort $StructOps<Bool> 0)
(declare-sort $Map<Int~_Bool> 0)
(declare-sort $Contract 0)
(declare-sort $MapInt<Int> 0)
(declare-sort $Map<Int~_Int> 0)
(declare-sort $Map<Int~_$Map<Int~_Int>> 0)
(declare-sort $StructOps<$Struct> 0)
(declare-sort $PSF<e$Transfer> 0)
(declare-sort $PSF<e$Approval> 0)
(declare-sort $PSF<e$OpenMinter> 0)
(declare-sort $PSF<e$CloseMinter> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$StructOps<$Map<Int~_$Map<Int~_Int>>>To$Snap ($StructOps<$Map<Int~_$Map<Int~_Int>>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Map<Int~_$Map<Int~_Int>>> ($Snap) $StructOps<$Map<Int~_$Map<Int~_Int>>>)
(assert (forall ((x $StructOps<$Map<Int~_$Map<Int~_Int>>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Map<Int~_$Map<Int~_Int>>>($SortWrappers.$StructOps<$Map<Int~_$Map<Int~_Int>>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Map<Int~_$Map<Int~_Int>>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Map<Int~_$Map<Int~_Int>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Map<Int~_$Map<Int~_Int>>>To$Snap($SortWrappers.$SnapTo$StructOps<$Map<Int~_$Map<Int~_Int>>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Map<Int~_$Map<Int~_Int>>> x))
    :qid |$Snap.$StructOps<$Map<Int~_$Map<Int~_Int>>>To$SnapTo$StructOps<$Map<Int~_$Map<Int~_Int>>>|
    )))
(declare-fun $SortWrappers.s$struct$selfTo$Snap (s$struct$self) $Snap)
(declare-fun $SortWrappers.$SnapTos$struct$self ($Snap) s$struct$self)
(assert (forall ((x s$struct$self)) (!
    (= x ($SortWrappers.$SnapTos$struct$self($SortWrappers.s$struct$selfTo$Snap x)))
    :pattern (($SortWrappers.s$struct$selfTo$Snap x))
    :qid |$Snap.$SnapTos$struct$selfTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$struct$selfTo$Snap($SortWrappers.$SnapTos$struct$self x)))
    :pattern (($SortWrappers.$SnapTos$struct$self x))
    :qid |$Snap.s$struct$selfTo$SnapTos$struct$self|
    )))
(declare-fun $SortWrappers.$StructTo$Snap ($Struct) $Snap)
(declare-fun $SortWrappers.$SnapTo$Struct ($Snap) $Struct)
(assert (forall ((x $Struct)) (!
    (= x ($SortWrappers.$SnapTo$Struct($SortWrappers.$StructTo$Snap x)))
    :pattern (($SortWrappers.$StructTo$Snap x))
    :qid |$Snap.$SnapTo$StructTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructTo$Snap($SortWrappers.$SnapTo$Struct x)))
    :pattern (($SortWrappers.$SnapTo$Struct x))
    :qid |$Snap.$StructTo$SnapTo$Struct|
    )))
(declare-fun $SortWrappers.$StructOps<$Map<Int~_Bool>>To$Snap ($StructOps<$Map<Int~_Bool>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Map<Int~_Bool>> ($Snap) $StructOps<$Map<Int~_Bool>>)
(assert (forall ((x $StructOps<$Map<Int~_Bool>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Map<Int~_Bool>>($SortWrappers.$StructOps<$Map<Int~_Bool>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Map<Int~_Bool>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Map<Int~_Bool>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Map<Int~_Bool>>To$Snap($SortWrappers.$SnapTo$StructOps<$Map<Int~_Bool>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Map<Int~_Bool>> x))
    :qid |$Snap.$StructOps<$Map<Int~_Bool>>To$SnapTo$StructOps<$Map<Int~_Bool>>|
    )))
(declare-fun $SortWrappers.s$resource$$creatorTo$Snap (s$resource$$creator) $Snap)
(declare-fun $SortWrappers.$SnapTos$resource$$creator ($Snap) s$resource$$creator)
(assert (forall ((x s$resource$$creator)) (!
    (= x ($SortWrappers.$SnapTos$resource$$creator($SortWrappers.s$resource$$creatorTo$Snap x)))
    :pattern (($SortWrappers.s$resource$$creatorTo$Snap x))
    :qid |$Snap.$SnapTos$resource$$creatorTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$resource$$creatorTo$Snap($SortWrappers.$SnapTos$resource$$creator x)))
    :pattern (($SortWrappers.$SnapTos$resource$$creator x))
    :qid |$Snap.s$resource$$creatorTo$SnapTos$resource$$creator|
    )))
(declare-fun $SortWrappers.$BlockchainTo$Snap ($Blockchain) $Snap)
(declare-fun $SortWrappers.$SnapTo$Blockchain ($Snap) $Blockchain)
(assert (forall ((x $Blockchain)) (!
    (= x ($SortWrappers.$SnapTo$Blockchain($SortWrappers.$BlockchainTo$Snap x)))
    :pattern (($SortWrappers.$BlockchainTo$Snap x))
    :qid |$Snap.$SnapTo$BlockchainTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$BlockchainTo$Snap($SortWrappers.$SnapTo$Blockchain x)))
    :pattern (($SortWrappers.$SnapTo$Blockchain x))
    :qid |$Snap.$BlockchainTo$SnapTo$Blockchain|
    )))
(declare-fun $SortWrappers.$ConvertTo$Snap ($Convert) $Snap)
(declare-fun $SortWrappers.$SnapTo$Convert ($Snap) $Convert)
(assert (forall ((x $Convert)) (!
    (= x ($SortWrappers.$SnapTo$Convert($SortWrappers.$ConvertTo$Snap x)))
    :pattern (($SortWrappers.$ConvertTo$Snap x))
    :qid |$Snap.$SnapTo$ConvertTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$ConvertTo$Snap($SortWrappers.$SnapTo$Convert x)))
    :pattern (($SortWrappers.$SnapTo$Convert x))
    :qid |$Snap.$ConvertTo$SnapTo$Convert|
    )))
(declare-fun $SortWrappers.$StructOps<Seq<Int>>To$Snap ($StructOps<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Seq<Int>> ($Snap) $StructOps<Seq<Int>>)
(assert (forall ((x $StructOps<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Seq<Int>>($SortWrappers.$StructOps<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Seq<Int>>To$Snap($SortWrappers.$SnapTo$StructOps<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Seq<Int>> x))
    :qid |$Snap.$StructOps<Seq<Int>>To$SnapTo$StructOps<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$RangeTo$Snap ($Range) $Snap)
(declare-fun $SortWrappers.$SnapTo$Range ($Snap) $Range)
(assert (forall ((x $Range)) (!
    (= x ($SortWrappers.$SnapTo$Range($SortWrappers.$RangeTo$Snap x)))
    :pattern (($SortWrappers.$RangeTo$Snap x))
    :qid |$Snap.$SnapTo$RangeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RangeTo$Snap($SortWrappers.$SnapTo$Range x)))
    :pattern (($SortWrappers.$SnapTo$Range x))
    :qid |$Snap.$RangeTo$SnapTo$Range|
    )))
(declare-fun $SortWrappers.$IntTo$Snap ($Int) $Snap)
(declare-fun $SortWrappers.$SnapTo$Int ($Snap) $Int)
(assert (forall ((x $Int)) (!
    (= x ($SortWrappers.$SnapTo$Int($SortWrappers.$IntTo$Snap x)))
    :pattern (($SortWrappers.$IntTo$Snap x))
    :qid |$Snap.$SnapTo$IntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$IntTo$Snap($SortWrappers.$SnapTo$Int x)))
    :pattern (($SortWrappers.$SnapTo$Int x))
    :qid |$Snap.$IntTo$SnapTo$Int|
    )))
(declare-fun $SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap ($StructOps<$Map<Int~_Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> ($Snap) $StructOps<$Map<Int~_Int>>)
(assert (forall ((x $StructOps<$Map<Int~_Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>>($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Map<Int~_Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> x))
    :qid |$Snap.$StructOps<$Map<Int~_Int>>To$SnapTo$StructOps<$Map<Int~_Int>>|
    )))
(declare-fun $SortWrappers.$MathTo$Snap ($Math) $Snap)
(declare-fun $SortWrappers.$SnapTo$Math ($Snap) $Math)
(assert (forall ((x $Math)) (!
    (= x ($SortWrappers.$SnapTo$Math($SortWrappers.$MathTo$Snap x)))
    :pattern (($SortWrappers.$MathTo$Snap x))
    :qid |$Snap.$SnapTo$MathTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MathTo$Snap($SortWrappers.$SnapTo$Math x)))
    :pattern (($SortWrappers.$SnapTo$Math x))
    :qid |$Snap.$MathTo$SnapTo$Math|
    )))
(declare-fun $SortWrappers.$StructOps<Int>To$Snap ($StructOps<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Int> ($Snap) $StructOps<Int>)
(assert (forall ((x $StructOps<Int>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Int>($SortWrappers.$StructOps<Int>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Int>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Int>To$Snap($SortWrappers.$SnapTo$StructOps<Int> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Int> x))
    :qid |$Snap.$StructOps<Int>To$SnapTo$StructOps<Int>|
    )))
(declare-fun $SortWrappers.$Map<Int~_$Struct>To$Snap ($Map<Int~_$Struct>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_$Struct> ($Snap) $Map<Int~_$Struct>)
(assert (forall ((x $Map<Int~_$Struct>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_$Struct>($SortWrappers.$Map<Int~_$Struct>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_$Struct>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_$Struct>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_$Struct>To$Snap($SortWrappers.$SnapTo$Map<Int~_$Struct> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_$Struct> x))
    :qid |$Snap.$Map<Int~_$Struct>To$SnapTo$Map<Int~_$Struct>|
    )))
(declare-fun $SortWrappers.$StructOps<Bool>To$Snap ($StructOps<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Bool> ($Snap) $StructOps<Bool>)
(assert (forall ((x $StructOps<Bool>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Bool>($SortWrappers.$StructOps<Bool>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Bool>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Bool>To$Snap($SortWrappers.$SnapTo$StructOps<Bool> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Bool> x))
    :qid |$Snap.$StructOps<Bool>To$SnapTo$StructOps<Bool>|
    )))
(declare-fun $SortWrappers.$Map<Int~_Bool>To$Snap ($Map<Int~_Bool>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_Bool> ($Snap) $Map<Int~_Bool>)
(assert (forall ((x $Map<Int~_Bool>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_Bool>($SortWrappers.$Map<Int~_Bool>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_Bool>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_Bool>To$Snap($SortWrappers.$SnapTo$Map<Int~_Bool> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_Bool> x))
    :qid |$Snap.$Map<Int~_Bool>To$SnapTo$Map<Int~_Bool>|
    )))
(declare-fun $SortWrappers.$ContractTo$Snap ($Contract) $Snap)
(declare-fun $SortWrappers.$SnapTo$Contract ($Snap) $Contract)
(assert (forall ((x $Contract)) (!
    (= x ($SortWrappers.$SnapTo$Contract($SortWrappers.$ContractTo$Snap x)))
    :pattern (($SortWrappers.$ContractTo$Snap x))
    :qid |$Snap.$SnapTo$ContractTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$ContractTo$Snap($SortWrappers.$SnapTo$Contract x)))
    :pattern (($SortWrappers.$SnapTo$Contract x))
    :qid |$Snap.$ContractTo$SnapTo$Contract|
    )))
(declare-fun $SortWrappers.$MapInt<Int>To$Snap ($MapInt<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$MapInt<Int> ($Snap) $MapInt<Int>)
(assert (forall ((x $MapInt<Int>)) (!
    (= x ($SortWrappers.$SnapTo$MapInt<Int>($SortWrappers.$MapInt<Int>To$Snap x)))
    :pattern (($SortWrappers.$MapInt<Int>To$Snap x))
    :qid |$Snap.$SnapTo$MapInt<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MapInt<Int>To$Snap($SortWrappers.$SnapTo$MapInt<Int> x)))
    :pattern (($SortWrappers.$SnapTo$MapInt<Int> x))
    :qid |$Snap.$MapInt<Int>To$SnapTo$MapInt<Int>|
    )))
(declare-fun $SortWrappers.$Map<Int~_Int>To$Snap ($Map<Int~_Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_Int> ($Snap) $Map<Int~_Int>)
(assert (forall ((x $Map<Int~_Int>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_Int>($SortWrappers.$Map<Int~_Int>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_Int>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_Int>To$Snap($SortWrappers.$SnapTo$Map<Int~_Int> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_Int> x))
    :qid |$Snap.$Map<Int~_Int>To$SnapTo$Map<Int~_Int>|
    )))
(declare-fun $SortWrappers.$Map<Int~_$Map<Int~_Int>>To$Snap ($Map<Int~_$Map<Int~_Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_$Map<Int~_Int>> ($Snap) $Map<Int~_$Map<Int~_Int>>)
(assert (forall ((x $Map<Int~_$Map<Int~_Int>>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_$Map<Int~_Int>>($SortWrappers.$Map<Int~_$Map<Int~_Int>>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_$Map<Int~_Int>>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_$Map<Int~_Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_$Map<Int~_Int>>To$Snap($SortWrappers.$SnapTo$Map<Int~_$Map<Int~_Int>> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_$Map<Int~_Int>> x))
    :qid |$Snap.$Map<Int~_$Map<Int~_Int>>To$SnapTo$Map<Int~_$Map<Int~_Int>>|
    )))
(declare-fun $SortWrappers.$StructOps<$Struct>To$Snap ($StructOps<$Struct>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Struct> ($Snap) $StructOps<$Struct>)
(assert (forall ((x $StructOps<$Struct>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Struct>($SortWrappers.$StructOps<$Struct>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Struct>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Struct>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Struct>To$Snap($SortWrappers.$SnapTo$StructOps<$Struct> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Struct> x))
    :qid |$Snap.$StructOps<$Struct>To$SnapTo$StructOps<$Struct>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$PSF<e$Transfer>To$Snap ($PSF<e$Transfer>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<e$Transfer> ($Snap) $PSF<e$Transfer>)
(assert (forall ((x $PSF<e$Transfer>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<e$Transfer>($SortWrappers.$PSF<e$Transfer>To$Snap x)))
    :pattern (($SortWrappers.$PSF<e$Transfer>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<e$Transfer>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<e$Transfer>To$Snap($SortWrappers.$SnapTo$PSF<e$Transfer> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<e$Transfer> x))
    :qid |$Snap.$PSF<e$Transfer>To$SnapTo$PSF<e$Transfer>|
    )))
(declare-fun $SortWrappers.$PSF<e$Approval>To$Snap ($PSF<e$Approval>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<e$Approval> ($Snap) $PSF<e$Approval>)
(assert (forall ((x $PSF<e$Approval>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<e$Approval>($SortWrappers.$PSF<e$Approval>To$Snap x)))
    :pattern (($SortWrappers.$PSF<e$Approval>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<e$Approval>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<e$Approval>To$Snap($SortWrappers.$SnapTo$PSF<e$Approval> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<e$Approval> x))
    :qid |$Snap.$PSF<e$Approval>To$SnapTo$PSF<e$Approval>|
    )))
(declare-fun $SortWrappers.$PSF<e$OpenMinter>To$Snap ($PSF<e$OpenMinter>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<e$OpenMinter> ($Snap) $PSF<e$OpenMinter>)
(assert (forall ((x $PSF<e$OpenMinter>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<e$OpenMinter>($SortWrappers.$PSF<e$OpenMinter>To$Snap x)))
    :pattern (($SortWrappers.$PSF<e$OpenMinter>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<e$OpenMinter>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<e$OpenMinter>To$Snap($SortWrappers.$SnapTo$PSF<e$OpenMinter> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<e$OpenMinter> x))
    :qid |$Snap.$PSF<e$OpenMinter>To$SnapTo$PSF<e$OpenMinter>|
    )))
(declare-fun $SortWrappers.$PSF<e$CloseMinter>To$Snap ($PSF<e$CloseMinter>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<e$CloseMinter> ($Snap) $PSF<e$CloseMinter>)
(assert (forall ((x $PSF<e$CloseMinter>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<e$CloseMinter>($SortWrappers.$PSF<e$CloseMinter>To$Snap x)))
    :pattern (($SortWrappers.$PSF<e$CloseMinter>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<e$CloseMinter>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<e$CloseMinter>To$Snap($SortWrappers.$SnapTo$PSF<e$CloseMinter> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<e$CloseMinter> x))
    :qid |$Snap.$PSF<e$CloseMinter>To$SnapTo$PSF<e$CloseMinter>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_contains_trigger (Seq<Int> Int) Bool)
(declare-fun Seq_skolem (Seq<Int> Int) Int)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_skolem_diff (Seq<Int> Seq<Int>) Int)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun $map_init<$Map<Int~_$Struct>> ($Struct) $Map<Int~_$Struct>)
(declare-fun $map_eq<Bool> ($Map<Int~_$Struct> $Map<Int~_$Struct>) Bool)
(declare-fun $map_get<$Struct> ($Map<Int~_$Struct> Int) $Struct)
(declare-fun $map_set<$Map<Int~_$Struct>> ($Map<Int~_$Struct> Int $Struct) $Map<Int~_$Struct>)
(declare-fun $bytes32_to_signed_int<Int> (Seq<Int>) Int)
(declare-fun $bytes32_to_unsigned_int<Int> (Seq<Int>) Int)
(declare-fun $signed_int_to_bytes32<Seq<Int>> (Int) Seq<Int>)
(declare-fun $unsigned_int_to_bytes32<Seq<Int>> (Int) Seq<Int>)
(declare-fun $pad32<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $struct_get<Int> (Int) Int)
(declare-fun $struct_set<$Struct> ($Struct Int Int) $Struct)
(declare-fun $struct_get<Bool> (Int) Bool)
(declare-fun $struct_set<$Struct> ($Struct Int Bool) $Struct)
(declare-fun $map_init<$Map<Int~_$Map<Int~_Int>>> ($Map<Int~_Int>) $Map<Int~_$Map<Int~_Int>>)
(declare-fun $map_eq<Bool> ($Map<Int~_$Map<Int~_Int>> $Map<Int~_$Map<Int~_Int>>) Bool)
(declare-fun $map_get<$Map<Int~_Int>> ($Map<Int~_$Map<Int~_Int>> Int) $Map<Int~_Int>)
(declare-fun $map_set<$Map<Int~_$Map<Int~_Int>>> ($Map<Int~_$Map<Int~_Int>> Int $Map<Int~_Int>) $Map<Int~_$Map<Int~_Int>>)
(declare-fun $blockhash<Seq<Int>> (Int) Seq<Int>)
(declare-fun $method_id<Seq<Int>> (Seq<Int> Int) Seq<Int>)
(declare-fun $keccak256<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $sha256<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $ecrecover<Int> (Seq<Int> Int Int Int) Int)
(declare-fun $ecadd<Seq<Int>> (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun $ecmul<Seq<Int>> (Seq<Int> Int) Seq<Int>)
(declare-fun $wrap<$Int> (Int) $Int)
(declare-fun $unwrap<Int> ($Int) Int)
(declare-fun $w_mul<$Int> ($Int $Int) $Int)
(declare-fun $w_mulI<$Int> ($Int $Int) $Int)
(declare-fun $w_mulL<$Int> ($Int $Int) $Int)
(declare-fun $w_abs<Int> ($Int) Int)
(declare-fun $w_mod<$Int> ($Int $Int) $Int)
(declare-fun $w_modL<$Int> ($Int $Int) $Int)
(declare-fun $w_div<$Int> ($Int $Int) $Int)
(declare-fun $w_div_down<$Int> ($Int $Int) $Int)
(declare-fun $w_div_nat<$Int> ($Int $Int) $Int)
(declare-fun $w_div_natL<$Int> ($Int $Int) $Int)
(declare-fun s$struct$self$init<$Struct> (Int Int $Map<Int~_Bool> Int Seq<Int> Seq<Int> Int Int $Map<Int~_Int> $Map<Int~_$Map<Int~_Int>> Int Int Int Bool $Map<Int~_Int> $Map<Int~_Int> Bool) $Struct)
(declare-fun s$struct$self$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $struct_loc<Int> ($Struct Int) Int)
(declare-fun $struct_get<$Map<Int~_Bool>> (Int) $Map<Int~_Bool>)
(declare-fun $struct_set<$Struct> ($Struct Int $Map<Int~_Bool>) $Struct)
(declare-fun $map_init<$Map<Int~_Int>> (Int) $Map<Int~_Int>)
(declare-fun $map_eq<Bool> ($Map<Int~_Int> $Map<Int~_Int>) Bool)
(declare-fun $map_get<Int> ($Map<Int~_Int> Int) Int)
(declare-fun $map_set<$Map<Int~_Int>> ($Map<Int~_Int> Int Int) $Map<Int~_Int>)
(declare-const $self_address<Int> Int)
(declare-fun $implements<Bool> (Int Int) Bool)
(declare-fun $struct_get<$Map<Int~_$Map<Int~_Int>>> (Int) $Map<Int~_$Map<Int~_Int>>)
(declare-fun $struct_set<$Struct> ($Struct Int $Map<Int~_$Map<Int~_Int>>) $Struct)
(declare-fun $struct_get<$Struct> (Int) $Struct)
(declare-fun $struct_set<$Struct> ($Struct Int $Struct) $Struct)
(declare-fun $range<Seq<Int>> (Int Int) Seq<Int>)
(declare-fun $struct_get<$Map<Int~_Int>> (Int) $Map<Int~_Int>)
(declare-fun $struct_set<$Struct> ($Struct Int $Map<Int~_Int>) $Struct)
(declare-fun $struct_get<Seq<Int>> (Int) Seq<Int>)
(declare-fun $struct_set<$Struct> ($Struct Int Seq<Int>) $Struct)
(declare-fun s$resource$$creator$init<$Struct> ($Struct) $Struct)
(declare-fun s$resource$$creator$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $map_sum<Int> ($Map<Int~_Int>) Int)
(declare-fun $sign<Int> (Int) Int)
(declare-fun $div<Int> (Int Int Int) Int)
(declare-fun $mod<Int> (Int Int Int) Int)
(declare-fun $pow<Int> (Int Int) Int)
(declare-fun $sqrt<Int> (Int) Int)
(declare-fun $floor<Int> (Int Int) Int)
(declare-fun $ceil<Int> (Int Int) Int)
(declare-fun $shift<Int> (Int Int) Int)
(declare-fun $bitwise_not<Int> (Int) Int)
(declare-fun $bitwise_and<Int> (Int Int) Int)
(declare-fun $bitwise_or<Int> (Int Int) Int)
(declare-fun $bitwise_xor<Int> (Int Int) Int)
(declare-fun $map_init<$Map<Int~_Bool>> (Bool) $Map<Int~_Bool>)
(declare-fun $map_eq<Bool> ($Map<Int~_Bool> $Map<Int~_Bool>) Bool)
(declare-fun $map_get<Bool> ($Map<Int~_Bool> Int) Bool)
(declare-fun $map_set<$Map<Int~_Bool>> ($Map<Int~_Bool> Int Bool) $Map<Int~_Bool>)
; /predicate_snap_functions_declarations.smt2 [e$Transfer: Snap]
(declare-fun $PSF.domain_e$Transfer ($PSF<e$Transfer>) Set<$Snap>)
(declare-fun $PSF.lookup_e$Transfer ($PSF<e$Transfer> $Snap) $Snap)
(declare-fun $PSF.after_e$Transfer ($PSF<e$Transfer> $PSF<e$Transfer>) Bool)
(declare-fun $PSF.loc_e$Transfer ($Snap $Snap) Bool)
(declare-fun $PSF.perm_e$Transfer ($PPM $Snap) $Perm)
(declare-const $psfTOP_e$Transfer $PSF<e$Transfer>)
; /predicate_snap_functions_declarations.smt2 [e$Approval: Snap]
(declare-fun $PSF.domain_e$Approval ($PSF<e$Approval>) Set<$Snap>)
(declare-fun $PSF.lookup_e$Approval ($PSF<e$Approval> $Snap) $Snap)
(declare-fun $PSF.after_e$Approval ($PSF<e$Approval> $PSF<e$Approval>) Bool)
(declare-fun $PSF.loc_e$Approval ($Snap $Snap) Bool)
(declare-fun $PSF.perm_e$Approval ($PPM $Snap) $Perm)
(declare-const $psfTOP_e$Approval $PSF<e$Approval>)
; /predicate_snap_functions_declarations.smt2 [e$OpenMinter: Snap]
(declare-fun $PSF.domain_e$OpenMinter ($PSF<e$OpenMinter>) Set<$Snap>)
(declare-fun $PSF.lookup_e$OpenMinter ($PSF<e$OpenMinter> $Snap) $Snap)
(declare-fun $PSF.after_e$OpenMinter ($PSF<e$OpenMinter> $PSF<e$OpenMinter>) Bool)
(declare-fun $PSF.loc_e$OpenMinter ($Snap $Snap) Bool)
(declare-fun $PSF.perm_e$OpenMinter ($PPM $Snap) $Perm)
(declare-const $psfTOP_e$OpenMinter $PSF<e$OpenMinter>)
; /predicate_snap_functions_declarations.smt2 [e$CloseMinter: Snap]
(declare-fun $PSF.domain_e$CloseMinter ($PSF<e$CloseMinter>) Set<$Snap>)
(declare-fun $PSF.lookup_e$CloseMinter ($PSF<e$CloseMinter> $Snap) $Snap)
(declare-fun $PSF.after_e$CloseMinter ($PSF<e$CloseMinter> $PSF<e$CloseMinter>) Bool)
(declare-fun $PSF.loc_e$CloseMinter ($Snap $Snap) Bool)
(declare-fun $PSF.perm_e$CloseMinter ($PPM $Snap) $Perm)
(declare-const $psfTOP_e$CloseMinter $PSF<e$CloseMinter>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun $pure$success_get ($Snap $Struct) Bool)
(declare-fun $pure$success_get%limited ($Snap $Struct) Bool)
(declare-fun $pure$success_get%stateless ($Struct) Bool)
(declare-fun $pure$success_get%precondition ($Snap $Struct) Bool)
(declare-fun $pure$return_get ($Snap $Struct) Int)
(declare-fun $pure$return_get%limited ($Snap $Struct) Int)
(declare-fun $pure$return_get%stateless ($Struct) Bool)
(declare-fun $pure$return_get%precondition ($Snap $Struct) Bool)
(declare-fun $range_sum ($Snap Int Int) Int)
(declare-fun $range_sum%limited ($Snap Int Int) Int)
(declare-fun $range_sum%stateless (Int Int) Bool)
(declare-fun $range_sum%precondition ($Snap Int Int) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun $failed%trigger ($Snap Int) Bool)
(declare-fun $failed_0%trigger ($Snap Int) Bool)
(declare-fun $allocation%trigger ($Snap $Struct Int) Bool)
(declare-fun $allocation_0%trigger ($Snap $Struct Int) Bool)
(declare-fun $offer%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $offer_0%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $trust%trigger ($Snap Int Int) Bool)
(declare-fun $trust_0%trigger ($Snap Int Int) Bool)
(declare-fun $performs$create%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$create_0%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$destroy%trigger ($Snap $Struct Int Int) Bool)
(declare-fun $performs$destroy_0%trigger ($Snap $Struct Int Int) Bool)
(declare-fun $performs$reallocate%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$reallocate_0%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$offer%trigger ($Snap $Struct $Struct Int Int Int Int Int) Bool)
(declare-fun $performs$offer_0%trigger ($Snap $Struct $Struct Int Int Int Int Int) Bool)
(declare-fun $performs$revoke%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $performs$revoke_0%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $performs$trust%trigger ($Snap Int Int Bool) Bool)
(declare-fun $performs$trust_0%trigger ($Snap Int Int Bool) Bool)
(declare-fun e$Transfer%trigger ($Snap Int Int Int) Bool)
(declare-fun e$Transfer_0%trigger ($Snap Int Int Int) Bool)
(declare-fun e$Approval%trigger ($Snap Int Int Int) Bool)
(declare-fun e$Approval_0%trigger ($Snap Int Int Int) Bool)
(declare-fun e$OpenMinter%trigger ($Snap Int) Bool)
(declare-fun e$OpenMinter_0%trigger ($Snap Int) Bool)
(declare-fun e$CloseMinter%trigger ($Snap Int) Bool)
(declare-fun e$CloseMinter_0%trigger ($Snap Int) Bool)
(declare-fun $accessible$__init__%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$__init___0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$changeOwner%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$changeOwner_0%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$burn%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$burn_0%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$mint%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$mint_0%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$setGovernorAddress%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$setGovernorAddress_0%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$setFactoryAddress%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$setFactoryAddress_0%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$setMinterAddress%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$setMinterAddress_0%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$removeMinterAddress%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$removeMinterAddress_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$totalSupply%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$totalSupply_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$balanceOf%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$balanceOf_0%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$transfer%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$transfer_0%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$transferFrom%trigger ($Snap Int Int Int Int Int Int) Bool)
(declare-fun $accessible$transferFrom_0%trigger ($Snap Int Int Int Int Int Int) Bool)
(declare-fun $accessible$approve%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$approve_0%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$allowance%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$allowance_0%trigger ($Snap Int Int Int Int Int) Bool)
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (not (= s1 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (x Int)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Int>) (x Int) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Int>) (b Seq<Int>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Int) (y Int)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((min_ Int) (max Int)) (!
  (and
    (=> (< min_ max) (= (Seq_length (Seq_range min_ max)) (- max min_)))
    (=> (<= max min_) (= (Seq_length (Seq_range min_ max)) 0)))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (j Int)) (!
  (=>
    (and (<= 0 j) (< j (- max min_)))
    (= (Seq_index (Seq_range min_ max) j) (+ min_ j)))
  :pattern ((Seq_index (Seq_range min_ max) j))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (v Int)) (!
  (= (Seq_contains (Seq_range min_ max) v) (and (<= min_ v) (< v max)))
  :pattern ((Seq_contains (Seq_range min_ max) v))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall (($v $Struct) ($k Int)) (!
  (= ($map_get<$Struct> ($map_init<$Map<Int~_$Struct>> $v) $k) $v)
  :pattern (($map_get<$Struct> ($map_init<$Map<Int~_$Struct>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_$Struct>) ($n $Map<Int~_$Struct>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<$Struct> $m $k) ($map_get<$Struct> $n $k))
        :pattern (($map_get<$Struct> $m $k) ($map_get<$Struct> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_$Struct>) ($k Int) ($v $Struct) ($kk Int)) (!
  (=
    ($map_get<$Struct> ($map_set<$Map<Int~_$Struct>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<$Struct> $m $kk)))
  :pattern (($map_get<$Struct> ($map_set<$Map<Int~_$Struct>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (=>
    (<= (Seq_length $bb) 32)
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        ($bytes32_to_signed_int<Int> $bb))
      (<=
        ($bytes32_to_signed_int<Int> $bb)
        57896044618658097711785492504343953926634992332820282019728792003956564819967)))
  :pattern (($bytes32_to_signed_int<Int> $bb))
  :qid |prog.$bytes32_to_signed_int_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (=>
    (<= (Seq_length $bb) 32)
    (and
      (<= 0 ($bytes32_to_unsigned_int<Int> $bb))
      (<=
        ($bytes32_to_unsigned_int<Int> $bb)
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  :pattern (($bytes32_to_unsigned_int<Int> $bb))
  :qid |prog.$bytes32_to_unsigned_int_ax|)))
(assert (forall (($i Int)) (!
  (=>
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        $i)
      (<=
        $i
        57896044618658097711785492504343953926634992332820282019728792003956564819967))
    (= (Seq_length ($signed_int_to_bytes32<Seq<Int>> $i)) 32))
  :pattern (($signed_int_to_bytes32<Seq<Int>> $i))
  :qid |prog.$signed_int_to_bytes32_ax|)))
(assert (forall (($i Int)) (!
  (=>
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        $i)
      (<=
        $i
        57896044618658097711785492504343953926634992332820282019728792003956564819967))
    (= (Seq_length ($unsigned_int_to_bytes32<Seq<Int>> $i)) 32))
  :pattern (($unsigned_int_to_bytes32<Seq<Int>> $i))
  :qid |prog.$unsigned_int_to_bytes32_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (= (Seq_length ($pad32<Seq<Int>> $bb)) 32)
  :pattern (($pad32<Seq<Int>> $bb))
  :qid |prog.$pad32_len_ax|)))
(assert (and
  (forall (($bb Seq<Int>) ($i Int)) (!
    (let ((diff (- 32 (Seq_length $bb)))) true)
    :pattern ((Seq_index ($pad32<Seq<Int>> $bb) $i))
    :qid |prog.$pad32_vals_ax|))
  (forall (($bb Seq<Int>) ($i Int)) (!
    (let ((diff (- 32 (Seq_length $bb)))) (=>
      (and (<= 0 $i) (< $i (Seq_length ($pad32<Seq<Int>> $bb))))
      (=
        (Seq_index ($pad32<Seq<Int>> $bb) $i)
        (ite (< $i diff) 0 (Seq_index $bb (- $i diff))))))
    :pattern ((Seq_index ($pad32<Seq<Int>> $bb) $i))
    :qid |prog.$pad32_vals_ax|))))
(assert (forall (($s $Struct) ($m Int) ($t Int)) (!
  (= ($struct_get<Int> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m)) $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Int)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Bool)) (!
  (=
    ($struct_get<Bool> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Bool)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($v $Map<Int~_Int>) ($k Int)) (!
  (= ($map_get<$Map<Int~_Int>> ($map_init<$Map<Int~_$Map<Int~_Int>>> $v) $k) $v)
  :pattern (($map_get<$Map<Int~_Int>> ($map_init<$Map<Int~_$Map<Int~_Int>>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_$Map<Int~_Int>>) ($n $Map<Int~_$Map<Int~_Int>>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<$Map<Int~_Int>> $m $k) ($map_get<$Map<Int~_Int>> $n $k))
        :pattern (($map_get<$Map<Int~_Int>> $m $k) ($map_get<$Map<Int~_Int>> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_$Map<Int~_Int>>) ($k Int) ($v $Map<Int~_Int>) ($kk Int)) (!
  (=
    ($map_get<$Map<Int~_Int>> ($map_set<$Map<Int~_$Map<Int~_Int>>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<$Map<Int~_Int>> $m $kk)))
  :pattern (($map_get<$Map<Int~_Int>> ($map_set<$Map<Int~_$Map<Int~_Int>>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (forall (($no Int)) (!
  (= (Seq_length ($blockhash<Seq<Int>> $no)) 32)
  :pattern (($blockhash<Seq<Int>> $no))
  :qid |prog.$blockhash_ax|)))
(assert (forall (($bb Seq<Int>) ($l Int)) (!
  (= (Seq_length ($method_id<Seq<Int>> $bb $l)) $l)
  :pattern (($method_id<Seq<Int>> $bb $l))
  :qid |prog.$method_id_ax|)))
(assert (forall (($s Seq<Int>)) (!
  (= (Seq_length ($keccak256<Seq<Int>> $s)) 32)
  :pattern (($keccak256<Seq<Int>> $s))
  :qid |prog.$keccak256_ax|)))
(assert (forall (($s Seq<Int>)) (!
  (= (Seq_length ($sha256<Seq<Int>> $s)) 32)
  :pattern (($sha256<Seq<Int>> $s))
  :qid |prog.$sha256_ax|)))
(assert (forall (($p Seq<Int>) ($q Seq<Int>)) (!
  (= (Seq_length ($ecadd<Seq<Int>> $p $q)) 2)
  :pattern (($ecadd<Seq<Int>> $p $q))
  :qid |prog.$ecadd_ax|)))
(assert (forall (($p Seq<Int>) ($s Int)) (!
  (= (Seq_length ($ecmul<Seq<Int>> $p $s)) 2)
  :pattern (($ecmul<Seq<Int>> $p $s))
  :qid |prog.$ecmul_ax|)))
(assert (forall ((i Int)) (!
  (= ($unwrap<Int> ($wrap<$Int> i)) i)
  :pattern (($wrap<$Int> i))
  :qid |prog.$wrap_ax|)))
(assert (forall ((i $Int)) (!
  (= ($wrap<$Int> ($unwrap<Int> i)) i)
  :pattern (($wrap<$Int> ($unwrap<Int> i)))
  :qid |prog.$unwrap_ax|)))
(assert (forall ((i $Int)) (!
  (=> (< ($unwrap<Int> i) 0) (= ($w_abs<Int> i) (- 0 ($unwrap<Int> i))))
  :pattern (($w_abs<Int> i))
  :qid |prog.$w_abs_ax_1|)))
(assert (forall ((i $Int)) (!
  (=> (>= ($unwrap<Int> i) 0) (= ($w_abs<Int> i) ($unwrap<Int> i)))
  :pattern (($w_abs<Int> i))
  :qid |prog.$w_abs_ax_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulI<$Int> i j))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_intermediate|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulL<$Int> i j))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mulI<$Int> i j) ($w_mulL<$Int> i j))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_intermediate_to_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulI<$Int> j i))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_commutative|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (= ($w_mulI<$Int> i ($w_mulI<$Int> j k)) ($w_mulL<$Int> ($w_mulL<$Int> i j) k))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j k)))
  :qid |prog.$w_mul_associative|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (= ($unwrap<Int> j) (+ ($unwrap<Int> k) ($unwrap<Int> l)))
    (=
      ($w_mulI<$Int> i j)
      ($wrap<$Int> (+
        ($unwrap<Int> ($w_mulL<$Int> i k))
        ($unwrap<Int> ($w_mulL<$Int> i l))))))
  :pattern (($w_mulI<$Int> i j) ($w_mulI<$Int> i k) ($w_mulI<$Int> i l))
  :qid |prog.$w_mul_distributive|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_mulI<$Int> i j)
    ($w_mulL<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) ($wrap<$Int> (-
      0
      ($unwrap<Int> j)))))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_sign_1|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_mulI<$Int> i j)
    ($wrap<$Int> (-
      0
      ($unwrap<Int> ($w_mulL<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) j)))))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_sign_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> i) 0) (= ($unwrap<Int> j) 0))
    (= ($unwrap<Int> ($w_mulI<$Int> i j)) 0))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_zero_1|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or
      (and (> ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
      (and (< ($unwrap<Int> i) 0) (< ($unwrap<Int> j) 0)))
    (> ($unwrap<Int> ($w_mulI<$Int> i j)) 0))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_zero_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> i) 1) (= ($unwrap<Int> j) 0))
    (= ($w_mulI<$Int> i j) j))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_neutral|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    (>= ($w_abs<Int> ($w_mulI<$Int> i j)) ($w_abs<Int> j))
    (or (>= ($w_abs<Int> i) 1) (= ($unwrap<Int> j) 0)))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_proportional|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (> ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (> ($unwrap<Int> l) 0))
    (>
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))
      ($unwrap<Int> ($w_mulI<$Int> k l))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (>= ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (> ($unwrap<Int> l) 0))
    (>=
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))
      ($unwrap<Int> ($w_mulI<$Int> k l))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_2|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (> ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (< ($unwrap<Int> l) 0))
    (>
      ($unwrap<Int> ($w_mulI<$Int> k l))
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_3|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (>= ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (< ($unwrap<Int> l) 0))
    (>=
      ($unwrap<Int> ($w_mulI<$Int> k l))
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_4|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (<= ($w_abs<Int> i) ($w_abs<Int> j))
      (<= ($w_abs<Int> k) ($w_abs<Int> l)))
    (<= ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (< ($w_abs<Int> i) ($w_abs<Int> j))
      (and (<= ($w_abs<Int> k) ($w_abs<Int> l)) (not (= ($unwrap<Int> l) 0))))
    (< ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_2|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (<= ($w_abs<Int> i) ($w_abs<Int> j))
      (and (< ($w_abs<Int> k) ($w_abs<Int> l)) (not (= ($unwrap<Int> j) 0))))
    (< ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mod<$Int> i j) ($w_modL<$Int> i j))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (not (= j ($wrap<$Int> 0))) (or (= i j) (= i ($wrap<$Int> 0))))
    (= ($w_mod<$Int> i j) ($wrap<$Int> 0)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_identity|)))
(assert (forall ((i $Int) (j $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and
        (= ($unwrap<Int> i) (+ ($unwrap<Int> l) ($w_abs<Int> j)))
        (or (>= ($unwrap<Int> l) 0) (< ($unwrap<Int> i) 0))))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> l j)))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_basic_1|)))
(assert (forall ((i $Int) (j $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and
        (= ($unwrap<Int> i) (- ($unwrap<Int> l) ($w_abs<Int> j)))
        (or (<= ($unwrap<Int> l) 0) (> ($unwrap<Int> i) 0))))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> l j)))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_basic_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and (<= 0 ($w_abs<Int> i)) (< ($w_abs<Int> i) ($w_abs<Int> j))))
    (= ($w_mod<$Int> i j) i))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_basic_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (< ($w_abs<Int> ($w_mod<$Int> i j)) ($w_abs<Int> j)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_basic_4|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (or
      (=
        ($sign<Int> ($unwrap<Int> ($w_mod<$Int> i j)))
        ($sign<Int> ($unwrap<Int> i)))
      (= ($sign<Int> ($unwrap<Int> ($w_mod<$Int> i j))) 0)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_sign_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and (not (= j ($wrap<$Int> 0))) (= ($unwrap<Int> i) (- 0 ($unwrap<Int> k))))
    (= ($w_mod<$Int> i j) ($wrap<$Int> (- 0 ($unwrap<Int> ($w_modL<$Int> k j))))))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> k j))
  :qid |prog.$w_mod_sign_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> i j) ($w_mod<$Int> i ($wrap<$Int> (- 0 ($unwrap<Int> j))))))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_sign_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> ($w_modL<$Int> i j) j)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_mod|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (<= ($w_abs<Int> ($w_mod<$Int> i j)) ($w_abs<Int> i)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_decrease|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (= ($unwrap<Int> i) (+ ($unwrap<Int> k) ($unwrap<Int> l))))
    (and
      (=>
        (or
          (and
            (>= ($unwrap<Int> i) 0)
            (>=
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0))
          (and
            (<= ($unwrap<Int> i) 0)
            (<=
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0)))
        (or
          (and
            (<=
              ($w_abs<Int> j)
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                (* 2 ($w_abs<Int> j)))
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (-
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))
          (or
            (and
              (<
                (- 0 ($w_abs<Int> j))
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j))))
              (and
                (<
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))
                (=
                  ($w_mod<$Int> i j)
                  ($wrap<$Int> (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))))))
            (and
              (<
                (* (- 0 2) ($w_abs<Int> j))
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j))))
              (and
                (<=
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  (- 0 ($w_abs<Int> j)))
                (=
                  ($w_mod<$Int> i j)
                  ($wrap<$Int> (+
                    (+
                      ($unwrap<Int> ($w_modL<$Int> k j))
                      ($unwrap<Int> ($w_modL<$Int> l j)))
                    ($w_abs<Int> j)))))))))
      (=>
        (or
          (and
            (> ($unwrap<Int> i) 0)
            (<
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0))
          (and
            (< ($unwrap<Int> i) 0)
            (>
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0)))
        (or
          (and
            (<
              0
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                ($w_abs<Int> j))
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (-
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))
          (and
            (<
              (- 0 ($w_abs<Int> j))
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                0)
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (+
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))))))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> k j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_add|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> ($w_mul<$Int> i j) j) ($wrap<$Int> 0)))
  :pattern (($w_mod<$Int> ($w_mul<$Int> i j) j))
  :qid |prog.$w_mod_mul_basic|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (and
      (=
        ($w_mod<$Int> ($w_mulI<$Int> i k) j)
        ($w_modL<$Int> ($w_mulL<$Int> ($w_modL<$Int> i j) k) j))
      (and
        (=
          ($w_mod<$Int> ($w_mulI<$Int> i k) j)
          ($w_modL<$Int> ($w_mulL<$Int> i ($w_modL<$Int> k j)) j))
        (=
          ($w_mod<$Int> ($w_mulI<$Int> i k) j)
          ($w_modL<$Int> ($w_mulL<$Int> ($w_modL<$Int> i j) ($w_modL<$Int> k j)) j)))))
  :pattern (($w_mod<$Int> ($w_mulI<$Int> i k) j))
  :qid |prog.$w_mod_mul_mod_noop|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (=
      ($w_mod<$Int> i j)
      ($w_modL<$Int> ($wrap<$Int> (+
        ($unwrap<Int> ($w_mulL<$Int> k j))
        ($unwrap<Int> i))) j)))
  :pattern (($w_mod<$Int> i j) ($w_mulI<$Int> k j))
  :qid |prog.$w_mod_mul_vanish|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (=
      ($w_div<$Int> i j)
      (ite
        (>= ($unwrap<Int> i) 0)
        ($w_div_down<$Int> i j)
        ($wrap<$Int> (-
          0
          ($unwrap<Int> ($w_div_down<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) j)))))))
  :pattern (($w_div<$Int> i j))
  :qid |prog.$w_div_div_down|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_div_down<$Int> i j)
    (ite
      (>= ($unwrap<Int> j) 0)
      ($w_div_nat<$Int> i j)
      ($wrap<$Int> (-
        0
        ($unwrap<Int> ($w_div_nat<$Int> i ($wrap<$Int> (- 0 ($unwrap<Int> j)))))))))
  :pattern (($w_div_down<$Int> i j))
  :qid |prog.$w_div_down_div_nat|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_div_nat<$Int> i j) ($w_div_natL<$Int> i j))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> j) 1) (= ($unwrap<Int> i) 0))
    (= ($w_div_nat<$Int> i j) i))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_neutral|)))
(assert (forall ((i $Int)) (!
  (=> (> ($unwrap<Int> i) 0) (= ($w_div_nat<$Int> i i) ($wrap<$Int> 1)))
  :pattern (($w_div_nat<$Int> i i))
  :qid |prog.$w_div_nat_self|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (>= ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
    (=
      (< ($unwrap<Int> i) ($unwrap<Int> j))
      (= ($w_div_nat<$Int> i j) ($wrap<$Int> 0))))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_small|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and
          (> ($unwrap<Int> j) 0)
          (and (>= ($unwrap<Int> k) 0) (>= ($unwrap<Int> l) 0))))
      (= ($unwrap<Int> i) (+ ($unwrap<Int> k) ($unwrap<Int> l))))
    (or
      (and
        (<=
          0
          (+ ($unwrap<Int> ($w_mod<$Int> k j)) ($unwrap<Int> ($w_mod<$Int> l j))))
        (and
          (<
            (+
              ($unwrap<Int> ($w_mod<$Int> k j))
              ($unwrap<Int> ($w_mod<$Int> l j)))
            ($unwrap<Int> j))
          (=
            ($w_div_nat<$Int> i j)
            ($wrap<$Int> (+
              ($unwrap<Int> ($w_div_natL<$Int> k j))
              ($unwrap<Int> ($w_div_natL<$Int> l j)))))))
      (and
        (<=
          ($unwrap<Int> j)
          (+ ($unwrap<Int> ($w_mod<$Int> k j)) ($unwrap<Int> ($w_mod<$Int> l j))))
        (and
          (<
            (+
              ($unwrap<Int> ($w_mod<$Int> k j))
              ($unwrap<Int> ($w_mod<$Int> l j)))
            (* 2 ($unwrap<Int> j)))
          (=
            ($w_div_nat<$Int> i j)
            ($wrap<$Int> (+
              (+
                ($unwrap<Int> ($w_div_natL<$Int> k j))
                ($unwrap<Int> ($w_div_natL<$Int> l j)))
              1)))))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> k j) ($w_div_nat<$Int> l j))
  :qid |prog.$w_div_nat_dividend_add|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and (> ($unwrap<Int> j) 0) (>= ($unwrap<Int> k) 0)))
      (<= ($unwrap<Int> i) ($unwrap<Int> k)))
    (<=
      ($unwrap<Int> ($w_div_nat<$Int> i j))
      ($unwrap<Int> ($w_div_natL<$Int> k j))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> k j))
  :qid |prog.$w_div_nat_ordered_by_dividend|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and (> ($unwrap<Int> j) 0) (> ($unwrap<Int> k) 0)))
      (<= ($unwrap<Int> j) ($unwrap<Int> k)))
    (>=
      ($unwrap<Int> ($w_div_nat<$Int> i j))
      ($unwrap<Int> ($w_div_natL<$Int> i k))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> i k))
  :qid |prog.$w_div_nat_ordered_by_divisor|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (> ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 1))
    (< ($unwrap<Int> ($w_div_nat<$Int> i j)) ($unwrap<Int> i)))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_decrease|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (>= ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
    (<= ($unwrap<Int> ($w_div_nat<$Int> i j)) ($unwrap<Int> i)))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_nonincrease|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=> (not (= ($unwrap<Int> j) 0)) (= ($w_div<$Int> ($w_mulI<$Int> i j) j) i))
  :pattern (($w_div<$Int> ($w_mulI<$Int> i j) j))
  :qid |prog.$w_div_mul|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (or
      (=
        ($sign<Int> ($unwrap<Int> ($w_div<$Int> i j)))
        (* ($sign<Int> ($unwrap<Int> i)) ($sign<Int> ($unwrap<Int> j))))
      (= ($sign<Int> ($unwrap<Int> ($w_div<$Int> i j))) 0)))
  :pattern (($w_div<$Int> i j))
  :qid |prog.$w_div_sign|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (=
      ($unwrap<Int> i)
      (+
        ($unwrap<Int> ($w_mulI<$Int> j ($w_div<$Int> i j)))
        ($unwrap<Int> ($w_mod<$Int> i j)))))
  :pattern (($w_div<$Int> i j) ($w_mod<$Int> i j))
  :qid |prog.$w_div_mod_mul|)))
(assert (forall (($arg_0 Int) ($arg_1 Int) ($arg_2 $Map<Int~_Bool>) ($arg_3 Int) ($arg_4 Seq<Int>) ($arg_5 Seq<Int>) ($arg_6 Int) ($arg_7 Int) ($arg_8 $Map<Int~_Int>) ($arg_9 $Map<Int~_$Map<Int~_Int>>) ($arg_10 Int) ($arg_11 Int) ($arg_12 Int) ($arg_13 Bool) ($arg_14 $Map<Int~_Int>) ($arg_15 $Map<Int~_Int>) ($arg_16 Bool)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12 $arg_13 $arg_14 $arg_15 $arg_16) (- 0 1)))
      9122519725869122497593506884710)
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12 $arg_13 $arg_14 $arg_15 $arg_16) 0))
        $arg_0)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12 $arg_13 $arg_14 $arg_15 $arg_16) 1))
          $arg_1)
        (and
          (=
            ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12 $arg_13 $arg_14 $arg_15 $arg_16) 2))
            $arg_2)
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12 $arg_13 $arg_14 $arg_15 $arg_16) 3))
              $arg_3)
            (and
              (Seq_equal
                ($struct_get<Seq<Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12 $arg_13 $arg_14 $arg_15 $arg_16) 4))
                $arg_4)
              (and
                (Seq_equal
                  ($struct_get<Seq<Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12 $arg_13 $arg_14 $arg_15 $arg_16) 5))
                  $arg_5)
                (and
                  (=
                    ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12 $arg_13 $arg_14 $arg_15 $arg_16) 6))
                    $arg_6)
                  (and
                    (=
                      ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12 $arg_13 $arg_14 $arg_15 $arg_16) 7))
                      $arg_7)
                    (and
                      (=
                        ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12 $arg_13 $arg_14 $arg_15 $arg_16) 8))
                        $arg_8)
                      (and
                        (=
                          ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12 $arg_13 $arg_14 $arg_15 $arg_16) 9))
                          $arg_9)
                        (and
                          (=
                            ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12 $arg_13 $arg_14 $arg_15 $arg_16) 10))
                            $arg_10)
                          (and
                            (=
                              ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12 $arg_13 $arg_14 $arg_15 $arg_16) 11))
                              $arg_11)
                            (and
                              (=
                                ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12 $arg_13 $arg_14 $arg_15 $arg_16) 12))
                                $arg_12)
                              (and
                                (=
                                  ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12 $arg_13 $arg_14 $arg_15 $arg_16) 13))
                                  $arg_13)
                                (and
                                  (=
                                    ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12 $arg_13 $arg_14 $arg_15 $arg_16) 14))
                                    $arg_14)
                                  (and
                                    (=
                                      ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12 $arg_13 $arg_14 $arg_15 $arg_16) 15))
                                      $arg_15)
                                    (=
                                      ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12 $arg_13 $arg_14 $arg_15 $arg_16) 16))
                                      $arg_16))))))))))))))))))
  :pattern ((s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12 $arg_13 $arg_14 $arg_15 $arg_16))
  :qid |prog.s$struct$self$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$struct$self$eq<Bool> $l $r) (= $l $r))
    (=
      (s$struct$self$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> $l 0))
            ($struct_get<Int> ($struct_loc<Int> $r 0)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> $l 1))
              ($struct_get<Int> ($struct_loc<Int> $r 1)))
            (and
              ($map_eq<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> $l 2)) ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> $r 2)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> $l 3))
                  ($struct_get<Int> ($struct_loc<Int> $r 3)))
                (and
                  (Seq_equal
                    ($struct_get<Seq<Int>> ($struct_loc<Int> $l 4))
                    ($struct_get<Seq<Int>> ($struct_loc<Int> $r 4)))
                  (and
                    (Seq_equal
                      ($struct_get<Seq<Int>> ($struct_loc<Int> $l 5))
                      ($struct_get<Seq<Int>> ($struct_loc<Int> $r 5)))
                    (and
                      (=
                        ($struct_get<Int> ($struct_loc<Int> $l 6))
                        ($struct_get<Int> ($struct_loc<Int> $r 6)))
                      (and
                        (=
                          ($struct_get<Int> ($struct_loc<Int> $l 7))
                          ($struct_get<Int> ($struct_loc<Int> $r 7)))
                        (and
                          ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 8)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 8)))
                          (and
                            ($map_eq<Bool> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $l 9)) ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $r 9)))
                            (and
                              (=
                                ($struct_get<Int> ($struct_loc<Int> $l 10))
                                ($struct_get<Int> ($struct_loc<Int> $r 10)))
                              (and
                                (=
                                  ($struct_get<Int> ($struct_loc<Int> $l 11))
                                  ($struct_get<Int> ($struct_loc<Int> $r 11)))
                                (and
                                  (=
                                    ($struct_get<Int> ($struct_loc<Int> $l 12))
                                    ($struct_get<Int> ($struct_loc<Int> $r 12)))
                                  (and
                                    (=
                                      ($struct_get<Bool> ($struct_loc<Int> $l 13))
                                      ($struct_get<Bool> ($struct_loc<Int> $r 13)))
                                    (and
                                      ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 14)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 14)))
                                      (and
                                        ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 15)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 15)))
                                        (=
                                          ($struct_get<Bool> ($struct_loc<Int> $l 16))
                                          ($struct_get<Bool> ($struct_loc<Int> $r 16))))))))))))))))))))))
  :pattern ((s$struct$self$eq<Bool> $l $r))
  :qid |prog.s$struct$self$eq$ax|)))
(assert (forall (($s $Struct) ($m Int) ($t $Map<Int~_Bool>)) (!
  (=
    ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Map<Int~_Bool>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($v Int) ($k Int)) (!
  (= ($map_get<Int> ($map_init<$Map<Int~_Int>> $v) $k) $v)
  :pattern (($map_get<Int> ($map_init<$Map<Int~_Int>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_Int>) ($n $Map<Int~_Int>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<Int> $m $k) ($map_get<Int> $n $k))
        :pattern (($map_get<Int> $m $k) ($map_get<Int> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_Int>) ($k Int) ($v Int) ($kk Int)) (!
  (=
    ($map_get<Int> ($map_set<$Map<Int~_Int>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<Int> $m $kk)))
  :pattern (($map_get<Int> ($map_set<$Map<Int~_Int>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (not (= (as $self_address<Int>  Int) 0)))
(assert (forall (($s $Struct) ($m Int) ($t $Map<Int~_$Map<Int~_Int>>)) (!
  (=
    ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Map<Int~_$Map<Int~_Int>>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t $Struct)) (!
  (=
    ($struct_get<$Struct> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Struct)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($f Int) ($t Int)) (!
  (= (Seq_length ($range<Seq<Int>> $f $t)) (- $t $f))
  :pattern ((Seq_length ($range<Seq<Int>> $f $t)))
  :qid |prog.$range_len_ax|)))
(assert (forall (($f Int) ($t Int) ($i Int)) (!
  (=>
    (and (<= 0 $i) (< $i (Seq_length ($range<Seq<Int>> $f $t))))
    (= (Seq_index ($range<Seq<Int>> $f $t) $i) (+ $f $i)))
  :pattern ((Seq_index ($range<Seq<Int>> $f $t) $i))
  :qid |prog.$range_lookup_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t $Map<Int~_Int>)) (!
  (=
    ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Map<Int~_Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Seq<Int>)) (!
  (Seq_equal
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Seq<Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($arg_0 $Struct)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$resource$$creator$init<$Struct> $arg_0) (- 0 1)))
      2567760667165796382711201132846784524754120562)
    (=
      ($struct_get<$Struct> ($struct_loc<Int> (s$resource$$creator$init<$Struct> $arg_0) 0))
      $arg_0))
  :pattern ((s$resource$$creator$init<$Struct> $arg_0))
  :qid |prog.s$resource$$creator$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$resource$$creator$eq<Bool> $l $r) (= $l $r))
    (=
      (s$resource$$creator$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (=
          ($struct_get<$Struct> ($struct_loc<Int> $l 0))
          ($struct_get<$Struct> ($struct_loc<Int> $r 0))))))
  :pattern ((s$resource$$creator$eq<Bool> $l $r))
  :qid |prog.s$resource$$creator$eq$ax|)))
(assert (= ($map_sum<Int> ($map_init<$Map<Int~_Int>> 0)) 0))
(assert (forall (($m $Map<Int~_Int>) ($k Int) ($v Int)) (!
  (=
    ($map_sum<Int> ($map_set<$Map<Int~_Int>> $m $k $v))
    (+ (- ($map_sum<Int> $m) ($map_get<Int> $m $k)) $v))
  :pattern (($map_sum<Int> ($map_set<$Map<Int~_Int>> $m $k $v)))
  :qid |prog.$map_sum_set_ax|)))
(assert (and
  (= ($sign<Int> 0) 0)
  (forall (($a Int)) (!
    (and
      (=> (> $a 0) (= ($sign<Int> $a) 1))
      (=> (< $a 0) (= ($sign<Int> $a) (- 0 1))))
    :pattern (($sign<Int> $a))
    ))))
(assert (forall (($a Int) ($b Int) ($r Int)) (!
  (=
    ($div<Int> $a $b $r)
    (+ (div $a $b) (ite (or (>= $a 0) (= (mod $a $b) 0)) 0 ($sign<Int> $b))))
  :pattern (($div<Int> $a $b $r))
  :qid |prog.$div_ax|)))
(assert (forall (($a Int) ($b Int) ($r Int)) (!
  (= ($mod<Int> $a $b $r) (- $a (* ($div<Int> $a $b $r) $b)))
  :pattern (($mod<Int> $a $b $r))
  :qid |prog.$mod_ax|)))
(assert (forall (($a Int)) (!
  (=> (not (= $a 0)) (= ($pow<Int> 0 $a) 0))
  :pattern (($pow<Int> 0 $a))
  :qid |prog.$pow0N_ax|)))
(assert (forall (($a Int)) (!
  (=> (not (= $a 0)) (= ($pow<Int> $a 0) 1))
  :pattern (($pow<Int> $a 0))
  :qid |prog.$powN0_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (=> (>= $a 0) (>= ($pow<Int> $a $b) 0))
  :pattern (($pow<Int> $a $b))
  :qid |prog.$pow_non_negative_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (=> (and (> $a 0) (>= $b 0)) (> ($pow<Int> $a $b) 0))
  :pattern (($pow<Int> $a $b))
  :qid |prog.$pow_non_negative_and_non_null_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (=>
    (> $s 0)
    (= ($floor<Int> $a $s) ($div<Int> (ite (< $a 0) (- $a (- $s 1)) $a) $s 0)))
  :pattern (($floor<Int> $a $s))
  :qid |prog.$floor_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (=>
    (> $s 0)
    (= ($ceil<Int> $a $s) ($div<Int> (ite (< $a 0) $a (- (+ $a $s) 1)) $s 0)))
  :pattern (($ceil<Int> $a $s))
  :qid |prog.$ceil_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (>= ($shift<Int> $a $s) 0)
  :pattern (($shift<Int> $a $s))
  :qid |prog.$shift_ax|)))
(assert (forall (($a Int)) (!
  (>= ($bitwise_not<Int> $a) 0)
  :pattern (($bitwise_not<Int> $a))
  :qid |prog.$bitwise_not_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_and<Int> $a $b) 0)
  :pattern (($bitwise_and<Int> $a $b))
  :qid |prog.$bitwise_and_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_or<Int> $a $b) 0)
  :pattern (($bitwise_or<Int> $a $b))
  :qid |prog.$bitwise_or_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_xor<Int> $a $b) 0)
  :pattern (($bitwise_xor<Int> $a $b))
  :qid |prog.$bitwise_xor_ax|)))
(assert (forall (($v Bool) ($k Int)) (!
  (= ($map_get<Bool> ($map_init<$Map<Int~_Bool>> $v) $k) $v)
  :pattern (($map_get<Bool> ($map_init<$Map<Int~_Bool>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_Bool>) ($n $Map<Int~_Bool>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<Bool> $m $k) ($map_get<Bool> $n $k))
        :pattern (($map_get<Bool> $m $k) ($map_get<Bool> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_Bool>) ($k Int) ($v Bool) ($kk Int)) (!
  (=
    ($map_get<Bool> ($map_set<$Map<Int~_Bool>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<Bool> $m $kk)))
  :pattern (($map_get<Bool> ($map_set<$Map<Int~_Bool>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
; /predicate_snap_functions_axioms.smt2 [e$Transfer: Snap]
(assert (forall ((vs $PSF<e$Transfer>) (ws $PSF<e$Transfer>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_e$Transfer vs) ($PSF.domain_e$Transfer ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_e$Transfer vs))
            (= ($PSF.lookup_e$Transfer vs x) ($PSF.lookup_e$Transfer ws x)))
          :pattern (($PSF.lookup_e$Transfer vs x) ($PSF.lookup_e$Transfer ws x))
          :qid |qp.$PSF<e$Transfer>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<e$Transfer>To$Snap vs)
              ($SortWrappers.$PSF<e$Transfer>To$Snap ws)
              )
    :qid |qp.$PSF<e$Transfer>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_e$Transfer pm s))
    :pattern (($PSF.perm_e$Transfer pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_e$Transfer f s) true)
    :pattern (($PSF.loc_e$Transfer f s)))))
; /predicate_snap_functions_axioms.smt2 [e$Approval: Snap]
(assert (forall ((vs $PSF<e$Approval>) (ws $PSF<e$Approval>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_e$Approval vs) ($PSF.domain_e$Approval ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_e$Approval vs))
            (= ($PSF.lookup_e$Approval vs x) ($PSF.lookup_e$Approval ws x)))
          :pattern (($PSF.lookup_e$Approval vs x) ($PSF.lookup_e$Approval ws x))
          :qid |qp.$PSF<e$Approval>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<e$Approval>To$Snap vs)
              ($SortWrappers.$PSF<e$Approval>To$Snap ws)
              )
    :qid |qp.$PSF<e$Approval>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_e$Approval pm s))
    :pattern (($PSF.perm_e$Approval pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_e$Approval f s) true)
    :pattern (($PSF.loc_e$Approval f s)))))
; /predicate_snap_functions_axioms.smt2 [e$OpenMinter: Snap]
(assert (forall ((vs $PSF<e$OpenMinter>) (ws $PSF<e$OpenMinter>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_e$OpenMinter vs) ($PSF.domain_e$OpenMinter ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_e$OpenMinter vs))
            (= ($PSF.lookup_e$OpenMinter vs x) ($PSF.lookup_e$OpenMinter ws x)))
          :pattern (($PSF.lookup_e$OpenMinter vs x) ($PSF.lookup_e$OpenMinter ws x))
          :qid |qp.$PSF<e$OpenMinter>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<e$OpenMinter>To$Snap vs)
              ($SortWrappers.$PSF<e$OpenMinter>To$Snap ws)
              )
    :qid |qp.$PSF<e$OpenMinter>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_e$OpenMinter pm s))
    :pattern (($PSF.perm_e$OpenMinter pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_e$OpenMinter f s) true)
    :pattern (($PSF.loc_e$OpenMinter f s)))))
; /predicate_snap_functions_axioms.smt2 [e$CloseMinter: Snap]
(assert (forall ((vs $PSF<e$CloseMinter>) (ws $PSF<e$CloseMinter>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_e$CloseMinter vs) ($PSF.domain_e$CloseMinter ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_e$CloseMinter vs))
            (= ($PSF.lookup_e$CloseMinter vs x) ($PSF.lookup_e$CloseMinter ws x)))
          :pattern (($PSF.lookup_e$CloseMinter vs x) ($PSF.lookup_e$CloseMinter ws x))
          :qid |qp.$PSF<e$CloseMinter>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<e$CloseMinter>To$Snap vs)
              ($SortWrappers.$PSF<e$CloseMinter>To$Snap ws)
              )
    :qid |qp.$PSF<e$CloseMinter>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_e$CloseMinter pm s))
    :pattern (($PSF.perm_e$CloseMinter pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_e$CloseMinter f s) true)
    :pattern (($PSF.loc_e$CloseMinter f s)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun letvar@7@00 ($Snap Int Int) Bool)
(declare-fun letvar@8@00 ($Snap Int Int) Bool)
(declare-fun letvar@9@00 ($Snap Int Int) Int)
(declare-fun letvar@10@00 ($Snap Int Int) Int)
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  (= ($pure$success_get%limited s@$ x@0@00) ($pure$success_get s@$ x@0@00))
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1817|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  ($pure$success_get%stateless x@0@00)
  :pattern (($pure$success_get%limited s@$ x@0@00))
  :qid |quant-u-1818|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  (=>
    ($pure$success_get%precondition s@$ x@0@00)
    (=
      ($pure$success_get s@$ x@0@00)
      ($struct_get<Bool> ($struct_loc<Int> x@0@00 0))))
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1823|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  true
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1824|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  (= ($pure$return_get%limited s@$ x@2@00) ($pure$return_get s@$ x@2@00))
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1819|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  ($pure$return_get%stateless x@2@00)
  :pattern (($pure$return_get%limited s@$ x@2@00))
  :qid |quant-u-1820|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  (=>
    ($pure$return_get%precondition s@$ x@2@00)
    (= ($pure$return_get s@$ x@2@00) ($struct_loc<Int> x@2@00 1)))
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1825|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  true
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1826|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (= ($range_sum%limited s@$ $x@4@00 $y@5@00) ($range_sum s@$ $x@4@00 $y@5@00))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1821|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  ($range_sum%stateless $x@4@00 $y@5@00)
  :pattern (($range_sum%limited s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1822|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (=>
    ($range_sum%precondition s@$ $x@4@00 $y@5@00)
    (=
      ($range_sum s@$ $x@4@00 $y@5@00)
      (let (($x_ge_0 (>= $x@4@00 0))) (let (($y_ge_0 (>= $y@5@00 0))) (let (($x_exclusive (ite
        $x_ge_0
        (div (* (- $x@4@00 1) $x@4@00) 2)
        (div (* (- (- 0 $x@4@00) 1) (- 0 $x@4@00)) 2)))) (let (($y_exclusive (ite
        $y_ge_0
        (div (* (- $y@5@00 1) $y@5@00) 2)
        (div (* (- (- 0 $y@5@00) 1) (- 0 $y@5@00)) 2)))) (ite
        (and $x_ge_0 $y_ge_0)
        (- $y_exclusive $x_exclusive)
        (ite
          (and (not $x_ge_0) $y_ge_0)
          (+ (- $y_exclusive $x_exclusive) $x@4@00)
          (+ (- (- $y_exclusive $y@5@00) $x_exclusive) $x@4@00)))))))))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1827|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (=>
    ($range_sum%precondition s@$ $x@4@00 $y@5@00)
    (let (($x_ge_0 (>= $x@4@00 0))) (let (($y_ge_0 (>= $y@5@00 0))) (let (($x_exclusive (ite
      $x_ge_0
      (div (* (- $x@4@00 1) $x@4@00) 2)
      (div (* (- (- 0 $x@4@00) 1) (- 0 $x@4@00)) 2)))) (let (($y_exclusive (ite
      $y_ge_0
      (div (* (- $y@5@00 1) $y@5@00) 2)
      (div (* (- (- 0 $y@5@00) 1) (- 0 $y@5@00)) 2)))) true)))))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1828|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- $transitivity_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var $self$0: $Struct
(declare-const $self$0@0@01 $Struct)
; [exec]
; var $$contracts$0: $Map[Int, $Struct]
(declare-const $$contracts$0@1@01 $Map<Int~_$Struct>)
; [exec]
; var $self$1: $Struct
(declare-const $self$1@2@01 $Struct)
; [exec]
; var $$contracts$1: $Map[Int, $Struct]
(declare-const $$contracts$1@3@01 $Map<Int~_$Struct>)
; [exec]
; var $self$2: $Struct
(declare-const $self$2@4@01 $Struct)
; [exec]
; var $$contracts$2: $Map[Int, $Struct]
(declare-const $$contracts$2@5@01 $Map<Int~_$Struct>)
; [exec]
; var block: $Struct
(declare-const block@6@01 $Struct)
; [exec]
; var $post: Bool
(declare-const $post@7@01 Bool)
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 0)): Int) &&
;   ($struct_get($struct_loc($self$0, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@8@01 $Snap)
(assert (= $t@8@01 ($Snap.combine ($Snap.first $t@8@01) ($Snap.second $t@8@01))))
(assert (= ($Snap.first $t@8@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
(assert (= ($Snap.second $t@8@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 1)): Int) &&
;   ($struct_get($struct_loc($self$0, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@9@01 $Snap)
(assert (= $t@9@01 ($Snap.combine ($Snap.first $t@9@01) ($Snap.second $t@9@01))))
(assert (= ($Snap.first $t@9@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
(assert (= ($Snap.second $t@9@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 3)): Int) &&
;   ($struct_get($struct_loc($self$0, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@10@01 $Snap)
(assert (= $t@10@01 ($Snap.combine ($Snap.first $t@10@01) ($Snap.second $t@10@01))))
(assert (= ($Snap.first $t@10@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))
(assert (= ($Snap.second $t@10@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$0, 4)): Seq[Int])| <= 12
(declare-const $t@11@01 $Snap)
(assert (= $t@11@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$0, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc($self$0, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$0, 4)): Seq[Int])
; [eval] $struct_loc($self$0, 4)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 4))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$0, 5)): Seq[Int])| <= 3
(declare-const $t@12@01 $Snap)
(assert (= $t@12@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$0, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc($self$0, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$0, 5)): Seq[Int])
; [eval] $struct_loc($self$0, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 6)): Int) &&
;   ($struct_get($struct_loc($self$0, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@13@01 $Snap)
(assert (= $t@13@01 ($Snap.combine ($Snap.first $t@13@01) ($Snap.second $t@13@01))))
(assert (= ($Snap.first $t@13@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] $struct_loc($self$0, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 6))))
(assert (= ($Snap.second $t@13@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] $struct_loc($self$0, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 7)): Int) &&
;   ($struct_get($struct_loc($self$0, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@14@01 $Snap)
(assert (= $t@14@01 ($Snap.combine ($Snap.first $t@14@01) ($Snap.second $t@14@01))))
(assert (= ($Snap.first $t@14@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] $struct_loc($self$0, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 7))))
(assert (= ($Snap.second $t@14@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] $struct_loc($self$0, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@15@01 $Snap)
(assert (= $t@15@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@16@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(push) ; 4
; [then-branch: 0 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q3@16@01)) | live]
; [else-branch: 0 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q3@16@01) | live]
(push) ; 5
; [then-branch: 0 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q3@16@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@16@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 0 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q3@16@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@16@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@16@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@16@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@16@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@16@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@16@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@16@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@673@11@673@354-aux|)))
(assert (forall (($q3@16@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@16@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@16@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@16@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@673@11@673@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $t@17@01 $Snap)
(assert (= $t@17@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $q3@18@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@18@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@18@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@18@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@674@11@674@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@19@01 $Snap)
(assert (= $t@19@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@20@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@21@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($self$0, 9)
(push) ; 5
; [then-branch: 1 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($self$0@0@01, 9)), $q4@20@01), $q5@21@01)) | live]
; [else-branch: 1 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($self$0@0@01, 9)), $q4@20@01), $q5@21@01) | live]
(push) ; 6
; [then-branch: 1 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($self$0@0@01, 9)), $q4@20@01), $q5@21@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@0@01 9)) $q4@20@01) $q5@21@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 1 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($self$0@0@01, 9)), $q4@20@01), $q5@21@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@0@01 9)) $q4@20@01) $q5@21@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($self$0, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@0@01 9)) $q4@20@01) $q5@21@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@0@01 9)) $q4@20@01) $q5@21@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@21@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@0@01 9)) $q4@20@01) $q5@21@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@0@01 9)) $q4@20@01) $q5@21@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@0@01 9)) $q4@20@01) $q5@21@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@675@134@675@609-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@20@01 Int)) (!
  (forall (($q5@21@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@0@01 9)) $q4@20@01) $q5@21@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@0@01 9)) $q4@20@01) $q5@21@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@0@01 9)) $q4@20@01) $q5@21@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@675@134@675@609-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@0@01 9)) $q4@20@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@675@11@675@610-aux|)))
(assert (forall (($q4@20@01 Int)) (!
  (forall (($q5@21@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@0@01 9)) $q4@20@01) $q5@21@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@0@01 9)) $q4@20@01) $q5@21@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@0@01 9)) $q4@20@01) $q5@21@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@675@134@675@609|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@0@01 9)) $q4@20@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@675@11@675@610|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@22@01 $Snap)
(assert (= $t@22@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@23@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@24@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($self$0, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($self$0, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@23@01 Int)) (!
  (forall (($q5@24@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@0@01 9)) $q4@23@01) $q5@24@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@0@01 9)) $q4@23@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@0@01 9)) $q4@23@01) $q5@24@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@676@134@676@517|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@0@01 9)) $q4@23@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@676@11@676@518|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 10)): Int) &&
;   ($struct_get($struct_loc($self$0, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@25@01 $Snap)
(assert (= $t@25@01 ($Snap.combine ($Snap.first $t@25@01) ($Snap.second $t@25@01))))
(assert (= ($Snap.first $t@25@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 10)): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): Int)
; [eval] $struct_loc($self$0, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 10))))
(assert (= ($Snap.second $t@25@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 10)): Int)
; [eval] $struct_loc($self$0, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 11)): Int) &&
;   ($struct_get($struct_loc($self$0, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@26@01 $Snap)
(assert (= $t@26@01 ($Snap.combine ($Snap.first $t@26@01) ($Snap.second $t@26@01))))
(assert (= ($Snap.first $t@26@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 11)): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): Int)
; [eval] $struct_loc($self$0, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 11))))
(assert (= ($Snap.second $t@26@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 11)): Int)
; [eval] $struct_loc($self$0, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 12)): Int) &&
;   ($struct_get($struct_loc($self$0, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@27@01 $Snap)
(assert (= $t@27@01 ($Snap.combine ($Snap.first $t@27@01) ($Snap.second $t@27@01))))
(assert (= ($Snap.first $t@27@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 12)): Int)
; [eval] $struct_loc($self$0, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 12))))
(assert (= ($Snap.second $t@27@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 12)): Int)
; [eval] $struct_loc($self$0, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@28@01 $Snap)
(assert (= $t@28@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@29@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc($self$0, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 14)
(push) ; 4
; [then-branch: 2 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 14)), $q6@29@01)) | live]
; [else-branch: 2 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 14)), $q6@29@01) | live]
(push) ; 5
; [then-branch: 2 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 14)), $q6@29@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 14)) $q6@29@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 2 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 14)), $q6@29@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 14)) $q6@29@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc($self$0, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 14)) $q6@29@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 14)) $q6@29@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@29@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 14)) $q6@29@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 14)) $q6@29@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 14)) $q6@29@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@680@11@680@357-aux|)))
(assert (forall (($q6@29@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 14)) $q6@29@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 14)) $q6@29@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 14)) $q6@29@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@680@11@680@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int])): Int))
(declare-const $t@30@01 $Snap)
(assert (= $t@30@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int])): Int))
(declare-const $q6@31@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc($self$0, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 14)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@31@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 14)) $q6@31@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 14)) $q6@31@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@681@11@681@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@32@01 $Snap)
(assert (= $t@32@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@33@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc($self$0, 15)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 15)
(push) ; 4
; [then-branch: 3 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 15)), $q7@33@01)) | live]
; [else-branch: 3 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 15)), $q7@33@01) | live]
(push) ; 5
; [then-branch: 3 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 15)), $q7@33@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 15)) $q7@33@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 3 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 15)), $q7@33@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 15)) $q7@33@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc($self$0, 15)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 15)) $q7@33@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 15)) $q7@33@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@33@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 15)) $q7@33@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 15)) $q7@33@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 15)) $q7@33@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@682@11@682@357-aux|)))
(assert (forall (($q7@33@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 15)) $q7@33@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 15)) $q7@33@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 15)) $q7@33@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@682@11@682@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int])): Int))
(declare-const $t@34@01 $Snap)
(assert (= $t@34@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int])): Int))
(declare-const $q7@35@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc($self$0, 15)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 15)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 15)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@35@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 15)) $q7@35@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 15)) $q7@35@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@683@11@683@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@36@01 $Snap)
(assert (= $t@36@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$0, -1)): Int)
; [eval] $struct_loc($self$0, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 0)): Int) &&
;   ($struct_get($struct_loc($self$1, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@37@01 $Snap)
(assert (= $t@37@01 ($Snap.combine ($Snap.first $t@37@01) ($Snap.second $t@37@01))))
(assert (= ($Snap.first $t@37@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
(assert (= ($Snap.second $t@37@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 1)): Int) &&
;   ($struct_get($struct_loc($self$1, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@38@01 $Snap)
(assert (= $t@38@01 ($Snap.combine ($Snap.first $t@38@01) ($Snap.second $t@38@01))))
(assert (= ($Snap.first $t@38@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
(assert (= ($Snap.second $t@38@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 3)): Int) &&
;   ($struct_get($struct_loc($self$1, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@39@01 $Snap)
(assert (= $t@39@01 ($Snap.combine ($Snap.first $t@39@01) ($Snap.second $t@39@01))))
(assert (= ($Snap.first $t@39@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))))
(assert (= ($Snap.second $t@39@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$1, 4)): Seq[Int])| <= 12
(declare-const $t@40@01 $Snap)
(assert (= $t@40@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$1, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc($self$1, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$1, 4)): Seq[Int])
; [eval] $struct_loc($self$1, 4)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 4))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$1, 5)): Seq[Int])| <= 3
(declare-const $t@41@01 $Snap)
(assert (= $t@41@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$1, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc($self$1, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$1, 5)): Seq[Int])
; [eval] $struct_loc($self$1, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 6)): Int) &&
;   ($struct_get($struct_loc($self$1, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@42@01 $Snap)
(assert (= $t@42@01 ($Snap.combine ($Snap.first $t@42@01) ($Snap.second $t@42@01))))
(assert (= ($Snap.first $t@42@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] $struct_loc($self$1, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 6))))
(assert (= ($Snap.second $t@42@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] $struct_loc($self$1, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 7)): Int) &&
;   ($struct_get($struct_loc($self$1, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@43@01 $Snap)
(assert (= $t@43@01 ($Snap.combine ($Snap.first $t@43@01) ($Snap.second $t@43@01))))
(assert (= ($Snap.first $t@43@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] $struct_loc($self$1, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 7))))
(assert (= ($Snap.second $t@43@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] $struct_loc($self$1, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@44@01 $Snap)
(assert (= $t@44@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@45@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(push) ; 4
; [then-branch: 4 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q3@45@01)) | live]
; [else-branch: 4 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q3@45@01) | live]
(push) ; 5
; [then-branch: 4 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q3@45@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@45@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 4 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q3@45@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@45@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@45@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@45@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@45@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@45@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@45@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@45@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@692@11@692@354-aux|)))
(assert (forall (($q3@45@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@45@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@45@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@45@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@692@11@692@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $t@46@01 $Snap)
(assert (= $t@46@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $q3@47@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@47@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@47@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@47@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@693@11@693@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@48@01 $Snap)
(assert (= $t@48@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@49@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@50@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($self$1, 9)
(push) ; 5
; [then-branch: 5 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($self$1@2@01, 9)), $q4@49@01), $q5@50@01)) | live]
; [else-branch: 5 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($self$1@2@01, 9)), $q4@49@01), $q5@50@01) | live]
(push) ; 6
; [then-branch: 5 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($self$1@2@01, 9)), $q4@49@01), $q5@50@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@2@01 9)) $q4@49@01) $q5@50@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 5 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($self$1@2@01, 9)), $q4@49@01), $q5@50@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@2@01 9)) $q4@49@01) $q5@50@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($self$1, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@2@01 9)) $q4@49@01) $q5@50@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@2@01 9)) $q4@49@01) $q5@50@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@50@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@2@01 9)) $q4@49@01) $q5@50@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@2@01 9)) $q4@49@01) $q5@50@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@2@01 9)) $q4@49@01) $q5@50@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@694@134@694@609-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@49@01 Int)) (!
  (forall (($q5@50@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@2@01 9)) $q4@49@01) $q5@50@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@2@01 9)) $q4@49@01) $q5@50@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@2@01 9)) $q4@49@01) $q5@50@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@694@134@694@609-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@2@01 9)) $q4@49@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@694@11@694@610-aux|)))
(assert (forall (($q4@49@01 Int)) (!
  (forall (($q5@50@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@2@01 9)) $q4@49@01) $q5@50@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@2@01 9)) $q4@49@01) $q5@50@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@2@01 9)) $q4@49@01) $q5@50@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@694@134@694@609|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@2@01 9)) $q4@49@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@694@11@694@610|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@51@01 $Snap)
(assert (= $t@51@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@52@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@53@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($self$1, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($self$1, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@52@01 Int)) (!
  (forall (($q5@53@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@2@01 9)) $q4@52@01) $q5@53@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@2@01 9)) $q4@52@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@2@01 9)) $q4@52@01) $q5@53@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@695@134@695@517|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@2@01 9)) $q4@52@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@695@11@695@518|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 10)): Int) &&
;   ($struct_get($struct_loc($self$1, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@54@01 $Snap)
(assert (= $t@54@01 ($Snap.combine ($Snap.first $t@54@01) ($Snap.second $t@54@01))))
(assert (= ($Snap.first $t@54@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 10)): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): Int)
; [eval] $struct_loc($self$1, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 10))))
(assert (= ($Snap.second $t@54@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 10)): Int)
; [eval] $struct_loc($self$1, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 11)): Int) &&
;   ($struct_get($struct_loc($self$1, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@55@01 $Snap)
(assert (= $t@55@01 ($Snap.combine ($Snap.first $t@55@01) ($Snap.second $t@55@01))))
(assert (= ($Snap.first $t@55@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 11)): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): Int)
; [eval] $struct_loc($self$1, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 11))))
(assert (= ($Snap.second $t@55@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 11)): Int)
; [eval] $struct_loc($self$1, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 12)): Int) &&
;   ($struct_get($struct_loc($self$1, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@56@01 $Snap)
(assert (= $t@56@01 ($Snap.combine ($Snap.first $t@56@01) ($Snap.second $t@56@01))))
(assert (= ($Snap.first $t@56@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 12)): Int)
; [eval] $struct_loc($self$1, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 12))))
(assert (= ($Snap.second $t@56@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 12)): Int)
; [eval] $struct_loc($self$1, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@57@01 $Snap)
(assert (= $t@57@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@58@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc($self$1, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 14)
(push) ; 4
; [then-branch: 6 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 14)), $q6@58@01)) | live]
; [else-branch: 6 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 14)), $q6@58@01) | live]
(push) ; 5
; [then-branch: 6 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 14)), $q6@58@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 14)) $q6@58@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 6 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 14)), $q6@58@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 14)) $q6@58@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc($self$1, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 14)) $q6@58@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 14)) $q6@58@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@58@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 14)) $q6@58@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 14)) $q6@58@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 14)) $q6@58@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@699@11@699@357-aux|)))
(assert (forall (($q6@58@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 14)) $q6@58@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 14)) $q6@58@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 14)) $q6@58@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@699@11@699@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int])): Int))
(declare-const $t@59@01 $Snap)
(assert (= $t@59@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int])): Int))
(declare-const $q6@60@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc($self$1, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 14)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@60@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 14)) $q6@60@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 14)) $q6@60@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@700@11@700@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@61@01 $Snap)
(assert (= $t@61@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@62@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc($self$1, 15)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 15)
(push) ; 4
; [then-branch: 7 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 15)), $q7@62@01)) | live]
; [else-branch: 7 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 15)), $q7@62@01) | live]
(push) ; 5
; [then-branch: 7 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 15)), $q7@62@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 15)) $q7@62@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 7 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 15)), $q7@62@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 15)) $q7@62@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc($self$1, 15)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 15)) $q7@62@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 15)) $q7@62@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@62@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 15)) $q7@62@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 15)) $q7@62@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 15)) $q7@62@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@701@11@701@357-aux|)))
(assert (forall (($q7@62@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 15)) $q7@62@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 15)) $q7@62@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 15)) $q7@62@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@701@11@701@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int])): Int))
(declare-const $t@63@01 $Snap)
(assert (= $t@63@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int])): Int))
(declare-const $q7@64@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc($self$1, 15)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 15)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 15)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@64@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 15)) $q7@64@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 15)) $q7@64@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@702@11@702@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@65@01 $Snap)
(assert (= $t@65@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$1, -1)): Int)
; [eval] $struct_loc($self$1, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 0)): Int) &&
;   ($struct_get($struct_loc($self$2, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@66@01 $Snap)
(assert (= $t@66@01 ($Snap.combine ($Snap.first $t@66@01) ($Snap.second $t@66@01))))
(assert (= ($Snap.first $t@66@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
(assert (= ($Snap.second $t@66@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 1)): Int) &&
;   ($struct_get($struct_loc($self$2, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@67@01 $Snap)
(assert (= $t@67@01 ($Snap.combine ($Snap.first $t@67@01) ($Snap.second $t@67@01))))
(assert (= ($Snap.first $t@67@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
(assert (= ($Snap.second $t@67@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 3)): Int) &&
;   ($struct_get($struct_loc($self$2, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@68@01 $Snap)
(assert (= $t@68@01 ($Snap.combine ($Snap.first $t@68@01) ($Snap.second $t@68@01))))
(assert (= ($Snap.first $t@68@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] $struct_loc($self$2, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
(assert (= ($Snap.second $t@68@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] $struct_loc($self$2, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$2, 4)): Seq[Int])| <= 12
(declare-const $t@69@01 $Snap)
(assert (= $t@69@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$2, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc($self$2, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$2, 4)): Seq[Int])
; [eval] $struct_loc($self$2, 4)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 4))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$2, 5)): Seq[Int])| <= 3
(declare-const $t@70@01 $Snap)
(assert (= $t@70@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$2, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc($self$2, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$2, 5)): Seq[Int])
; [eval] $struct_loc($self$2, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 6)): Int) &&
;   ($struct_get($struct_loc($self$2, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@71@01 $Snap)
(assert (= $t@71@01 ($Snap.combine ($Snap.first $t@71@01) ($Snap.second $t@71@01))))
(assert (= ($Snap.first $t@71@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 6)): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): Int)
; [eval] $struct_loc($self$2, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 6))))
(assert (= ($Snap.second $t@71@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 6)): Int)
; [eval] $struct_loc($self$2, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 7)): Int) &&
;   ($struct_get($struct_loc($self$2, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@72@01 $Snap)
(assert (= $t@72@01 ($Snap.combine ($Snap.first $t@72@01) ($Snap.second $t@72@01))))
(assert (= ($Snap.first $t@72@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] $struct_loc($self$2, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 7))))
(assert (= ($Snap.second $t@72@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] $struct_loc($self$2, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@73@01 $Snap)
(assert (= $t@73@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@74@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(push) ; 4
; [then-branch: 8 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q3@74@01)) | live]
; [else-branch: 8 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q3@74@01) | live]
(push) ; 5
; [then-branch: 8 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q3@74@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@74@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 8 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q3@74@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@74@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@74@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@74@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@74@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@74@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@74@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@74@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@711@11@711@354-aux|)))
(assert (forall (($q3@74@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@74@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@74@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@74@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@711@11@711@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int))
(declare-const $t@75@01 $Snap)
(assert (= $t@75@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int))
(declare-const $q3@76@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@76@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@76@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@76@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@712@11@712@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@77@01 $Snap)
(assert (= $t@77@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@78@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@79@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($self$2, 9)
(push) ; 5
; [then-branch: 9 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($self$2@4@01, 9)), $q4@78@01), $q5@79@01)) | live]
; [else-branch: 9 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($self$2@4@01, 9)), $q4@78@01), $q5@79@01) | live]
(push) ; 6
; [then-branch: 9 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($self$2@4@01, 9)), $q4@78@01), $q5@79@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$2@4@01 9)) $q4@78@01) $q5@79@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 9 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($self$2@4@01, 9)), $q4@78@01), $q5@79@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$2@4@01 9)) $q4@78@01) $q5@79@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($self$2, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$2@4@01 9)) $q4@78@01) $q5@79@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$2@4@01 9)) $q4@78@01) $q5@79@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@79@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$2@4@01 9)) $q4@78@01) $q5@79@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$2@4@01 9)) $q4@78@01) $q5@79@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$2@4@01 9)) $q4@78@01) $q5@79@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@713@134@713@609-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@78@01 Int)) (!
  (forall (($q5@79@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$2@4@01 9)) $q4@78@01) $q5@79@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$2@4@01 9)) $q4@78@01) $q5@79@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$2@4@01 9)) $q4@78@01) $q5@79@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@713@134@713@609-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$2@4@01 9)) $q4@78@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@713@11@713@610-aux|)))
(assert (forall (($q4@78@01 Int)) (!
  (forall (($q5@79@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$2@4@01 9)) $q4@78@01) $q5@79@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$2@4@01 9)) $q4@78@01) $q5@79@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$2@4@01 9)) $q4@78@01) $q5@79@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@713@134@713@609|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$2@4@01 9)) $q4@78@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@713@11@713@610|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@80@01 $Snap)
(assert (= $t@80@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@81@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@82@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($self$2, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($self$2, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@81@01 Int)) (!
  (forall (($q5@82@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$2@4@01 9)) $q4@81@01) $q5@82@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$2@4@01 9)) $q4@81@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$2@4@01 9)) $q4@81@01) $q5@82@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@714@134@714@517|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$2@4@01 9)) $q4@81@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@714@11@714@518|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 10)): Int) &&
;   ($struct_get($struct_loc($self$2, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@83@01 $Snap)
(assert (= $t@83@01 ($Snap.combine ($Snap.first $t@83@01) ($Snap.second $t@83@01))))
(assert (= ($Snap.first $t@83@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 10)): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): Int)
; [eval] $struct_loc($self$2, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 10))))
(assert (= ($Snap.second $t@83@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 10)): Int)
; [eval] $struct_loc($self$2, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 11)): Int) &&
;   ($struct_get($struct_loc($self$2, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@84@01 $Snap)
(assert (= $t@84@01 ($Snap.combine ($Snap.first $t@84@01) ($Snap.second $t@84@01))))
(assert (= ($Snap.first $t@84@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 11)): Int)
; [eval] ($struct_get($struct_loc($self$2, 11)): Int)
; [eval] $struct_loc($self$2, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 11))))
(assert (= ($Snap.second $t@84@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 11)): Int)
; [eval] $struct_loc($self$2, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$2, 12)): Int) &&
;   ($struct_get($struct_loc($self$2, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@85@01 $Snap)
(assert (= $t@85@01 ($Snap.combine ($Snap.first $t@85@01) ($Snap.second $t@85@01))))
(assert (= ($Snap.first $t@85@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$2, 12)): Int)
; [eval] $struct_loc($self$2, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 12))))
(assert (= ($Snap.second $t@85@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$2, 12)): Int)
; [eval] $struct_loc($self$2, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@86@01 $Snap)
(assert (= $t@86@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@87@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc($self$2, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 14)
(push) ; 4
; [then-branch: 10 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 14)), $q6@87@01)) | live]
; [else-branch: 10 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 14)), $q6@87@01) | live]
(push) ; 5
; [then-branch: 10 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 14)), $q6@87@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 14)) $q6@87@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 10 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 14)), $q6@87@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 14)) $q6@87@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc($self$2, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 14)) $q6@87@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 14)) $q6@87@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@87@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 14)) $q6@87@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 14)) $q6@87@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 14)) $q6@87@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@718@11@718@357-aux|)))
(assert (forall (($q6@87@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 14)) $q6@87@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 14)) $q6@87@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 14)) $q6@87@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@718@11@718@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int])): Int))
(declare-const $t@88@01 $Snap)
(assert (= $t@88@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int])): Int))
(declare-const $q6@89@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc($self$2, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 14)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@89@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 14)) $q6@89@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 14)) $q6@89@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@719@11@719@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@90@01 $Snap)
(assert (= $t@90@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@91@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc($self$2, 15)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 15)
(push) ; 4
; [then-branch: 11 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 15)), $q7@91@01)) | live]
; [else-branch: 11 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 15)), $q7@91@01) | live]
(push) ; 5
; [then-branch: 11 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 15)), $q7@91@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 15)) $q7@91@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 11 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 15)), $q7@91@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 15)) $q7@91@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc($self$2, 15)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 15)) $q7@91@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 15)) $q7@91@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@91@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 15)) $q7@91@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 15)) $q7@91@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 15)) $q7@91@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@720@11@720@357-aux|)))
(assert (forall (($q7@91@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 15)) $q7@91@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 15)) $q7@91@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 15)) $q7@91@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@720@11@720@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int])): Int))
(declare-const $t@92@01 $Snap)
(assert (= $t@92@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int])): Int))
(declare-const $q7@93@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc($self$2, 15)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 15)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 15)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@93@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 15)) $q7@93@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 15)) $q7@93@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@721@11@721@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@94@01 $Snap)
(assert (= $t@94@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$2, -1)): Int)
; [eval] $struct_loc($self$2, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@95@01 $Snap)
(assert (= $t@95@01 ($Snap.combine ($Snap.first $t@95@01) ($Snap.second $t@95@01))))
(assert (= ($Snap.first $t@95@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 0))))
(assert (= ($Snap.second $t@95@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@96@01 $Snap)
(assert (= $t@96@01 ($Snap.combine ($Snap.first $t@96@01) ($Snap.second $t@96@01))))
(assert (= ($Snap.first $t@96@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 1))))
(assert (= ($Snap.second $t@96@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@97@01 $Snap)
(assert (= $t@97@01 ($Snap.combine ($Snap.first $t@97@01) ($Snap.second $t@97@01))))
(assert (= ($Snap.first $t@97@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 2))))
(assert (= ($Snap.second $t@97@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@98@01 $Snap)
(assert (= $t@98@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@6@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@99@01 $Snap)
(assert (= $t@99@01 ($Snap.combine ($Snap.first $t@99@01) ($Snap.second $t@99@01))))
(assert (= ($Snap.first $t@99@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 4))))
(assert (= ($Snap.second $t@99@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@100@01 $Snap)
(assert (= $t@100@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $a): Int))
(declare-const $t@101@01 $Snap)
(assert (= $t@101@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $a): Int))
(declare-const $a@102@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 14)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $a): Int))
(declare-const $t@103@01 $Snap)
(assert (= $t@103@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $a): Int))
(declare-const $a@104@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 14)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@104@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 14)) $a@104@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 14)) $a@104@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 14)) $a@104@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@730@11@730@266|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $a): Int))
(declare-const $t@105@01 $Snap)
(assert (= $t@105@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $a): Int))
(declare-const $a@106@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$2, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 14)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@106@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 14)) $a@106@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 14)) $a@106@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 14)) $a@106@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@731@11@731@266|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- $reflexivity_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var $self$0: $Struct
(declare-const $self$0@107@01 $Struct)
; [exec]
; var $$contracts$0: $Map[Int, $Struct]
(declare-const $$contracts$0@108@01 $Map<Int~_$Struct>)
; [exec]
; var $self$1: $Struct
(declare-const $self$1@109@01 $Struct)
; [exec]
; var $$contracts$1: $Map[Int, $Struct]
(declare-const $$contracts$1@110@01 $Map<Int~_$Struct>)
; [exec]
; var block: $Struct
(declare-const block@111@01 $Struct)
; [exec]
; var $post: Bool
(declare-const $post@112@01 Bool)
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 0)): Int) &&
;   ($struct_get($struct_loc($self$0, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@113@01 $Snap)
(assert (= $t@113@01 ($Snap.combine ($Snap.first $t@113@01) ($Snap.second $t@113@01))))
(assert (= ($Snap.first $t@113@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@107@01 0))))
(assert (= ($Snap.second $t@113@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@107@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 1)): Int) &&
;   ($struct_get($struct_loc($self$0, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@114@01 $Snap)
(assert (= $t@114@01 ($Snap.combine ($Snap.first $t@114@01) ($Snap.second $t@114@01))))
(assert (= ($Snap.first $t@114@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@107@01 1))))
(assert (= ($Snap.second $t@114@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@107@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 3)): Int) &&
;   ($struct_get($struct_loc($self$0, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@115@01 $Snap)
(assert (= $t@115@01 ($Snap.combine ($Snap.first $t@115@01) ($Snap.second $t@115@01))))
(assert (= ($Snap.first $t@115@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@107@01 3))))
(assert (= ($Snap.second $t@115@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@107@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$0, 4)): Seq[Int])| <= 12
(declare-const $t@116@01 $Snap)
(assert (= $t@116@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$0, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc($self$0, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$0, 4)): Seq[Int])
; [eval] $struct_loc($self$0, 4)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@107@01 4))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$0, 5)): Seq[Int])| <= 3
(declare-const $t@117@01 $Snap)
(assert (= $t@117@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$0, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc($self$0, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$0, 5)): Seq[Int])
; [eval] $struct_loc($self$0, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@107@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 6)): Int) &&
;   ($struct_get($struct_loc($self$0, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@118@01 $Snap)
(assert (= $t@118@01 ($Snap.combine ($Snap.first $t@118@01) ($Snap.second $t@118@01))))
(assert (= ($Snap.first $t@118@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] $struct_loc($self$0, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@107@01 6))))
(assert (= ($Snap.second $t@118@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] $struct_loc($self$0, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@107@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 7)): Int) &&
;   ($struct_get($struct_loc($self$0, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@119@01 $Snap)
(assert (= $t@119@01 ($Snap.combine ($Snap.first $t@119@01) ($Snap.second $t@119@01))))
(assert (= ($Snap.first $t@119@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] $struct_loc($self$0, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@107@01 7))))
(assert (= ($Snap.second $t@119@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] $struct_loc($self$0, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@107@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@120@01 $Snap)
(assert (= $t@120@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@121@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(push) ; 4
; [then-branch: 12 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@107@01, 8)), $q3@121@01)) | live]
; [else-branch: 12 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@107@01, 8)), $q3@121@01) | live]
(push) ; 5
; [then-branch: 12 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@107@01, 8)), $q3@121@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 8)) $q3@121@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 12 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@107@01, 8)), $q3@121@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 8)) $q3@121@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 8)) $q3@121@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 8)) $q3@121@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@121@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 8)) $q3@121@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 8)) $q3@121@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 8)) $q3@121@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@749@11@749@354-aux|)))
(assert (forall (($q3@121@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 8)) $q3@121@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 8)) $q3@121@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 8)) $q3@121@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@749@11@749@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $t@122@01 $Snap)
(assert (= $t@122@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $q3@123@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@123@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 8)) $q3@123@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 8)) $q3@123@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@750@11@750@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@124@01 $Snap)
(assert (= $t@124@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@125@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@126@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($self$0, 9)
(push) ; 5
; [then-branch: 13 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($self$0@107@01, 9)), $q4@125@01), $q5@126@01)) | live]
; [else-branch: 13 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($self$0@107@01, 9)), $q4@125@01), $q5@126@01) | live]
(push) ; 6
; [then-branch: 13 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($self$0@107@01, 9)), $q4@125@01), $q5@126@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@107@01 9)) $q4@125@01) $q5@126@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 13 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($self$0@107@01, 9)), $q4@125@01), $q5@126@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@107@01 9)) $q4@125@01) $q5@126@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($self$0, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@107@01 9)) $q4@125@01) $q5@126@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@107@01 9)) $q4@125@01) $q5@126@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@126@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@107@01 9)) $q4@125@01) $q5@126@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@107@01 9)) $q4@125@01) $q5@126@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@107@01 9)) $q4@125@01) $q5@126@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@751@134@751@609-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@125@01 Int)) (!
  (forall (($q5@126@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@107@01 9)) $q4@125@01) $q5@126@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@107@01 9)) $q4@125@01) $q5@126@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@107@01 9)) $q4@125@01) $q5@126@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@751@134@751@609-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@107@01 9)) $q4@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@751@11@751@610-aux|)))
(assert (forall (($q4@125@01 Int)) (!
  (forall (($q5@126@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@107@01 9)) $q4@125@01) $q5@126@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@107@01 9)) $q4@125@01) $q5@126@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@107@01 9)) $q4@125@01) $q5@126@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@751@134@751@609|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@107@01 9)) $q4@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@751@11@751@610|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@127@01 $Snap)
(assert (= $t@127@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@128@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@129@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($self$0, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($self$0, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@128@01 Int)) (!
  (forall (($q5@129@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@107@01 9)) $q4@128@01) $q5@129@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@107@01 9)) $q4@128@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@107@01 9)) $q4@128@01) $q5@129@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@752@134@752@517|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$0@107@01 9)) $q4@128@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@752@11@752@518|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 10)): Int) &&
;   ($struct_get($struct_loc($self$0, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@130@01 $Snap)
(assert (= $t@130@01 ($Snap.combine ($Snap.first $t@130@01) ($Snap.second $t@130@01))))
(assert (= ($Snap.first $t@130@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 10)): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): Int)
; [eval] $struct_loc($self$0, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@107@01 10))))
(assert (= ($Snap.second $t@130@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 10)): Int)
; [eval] $struct_loc($self$0, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@107@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 11)): Int) &&
;   ($struct_get($struct_loc($self$0, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@131@01 $Snap)
(assert (= $t@131@01 ($Snap.combine ($Snap.first $t@131@01) ($Snap.second $t@131@01))))
(assert (= ($Snap.first $t@131@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 11)): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): Int)
; [eval] $struct_loc($self$0, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@107@01 11))))
(assert (= ($Snap.second $t@131@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 11)): Int)
; [eval] $struct_loc($self$0, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@107@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 12)): Int) &&
;   ($struct_get($struct_loc($self$0, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@132@01 $Snap)
(assert (= $t@132@01 ($Snap.combine ($Snap.first $t@132@01) ($Snap.second $t@132@01))))
(assert (= ($Snap.first $t@132@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 12)): Int)
; [eval] $struct_loc($self$0, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@107@01 12))))
(assert (= ($Snap.second $t@132@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 12)): Int)
; [eval] $struct_loc($self$0, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@107@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@133@01 $Snap)
(assert (= $t@133@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@134@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc($self$0, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 14)
(push) ; 4
; [then-branch: 14 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@107@01, 14)), $q6@134@01)) | live]
; [else-branch: 14 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@107@01, 14)), $q6@134@01) | live]
(push) ; 5
; [then-branch: 14 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@107@01, 14)), $q6@134@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 14)) $q6@134@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 14 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@107@01, 14)), $q6@134@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 14)) $q6@134@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc($self$0, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 14)) $q6@134@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 14)) $q6@134@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@134@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 14)) $q6@134@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 14)) $q6@134@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 14)) $q6@134@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@756@11@756@357-aux|)))
(assert (forall (($q6@134@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 14)) $q6@134@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 14)) $q6@134@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 14)) $q6@134@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@756@11@756@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int])): Int))
(declare-const $t@135@01 $Snap)
(assert (= $t@135@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int])): Int))
(declare-const $q6@136@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc($self$0, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 14)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@136@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 14)) $q6@136@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 14)) $q6@136@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@757@11@757@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@137@01 $Snap)
(assert (= $t@137@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@138@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc($self$0, 15)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 15)
(push) ; 4
; [then-branch: 15 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@107@01, 15)), $q7@138@01)) | live]
; [else-branch: 15 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@107@01, 15)), $q7@138@01) | live]
(push) ; 5
; [then-branch: 15 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@107@01, 15)), $q7@138@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 15)) $q7@138@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 15 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@107@01, 15)), $q7@138@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 15)) $q7@138@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc($self$0, 15)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 15)) $q7@138@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 15)) $q7@138@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@138@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 15)) $q7@138@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 15)) $q7@138@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 15)) $q7@138@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@758@11@758@357-aux|)))
(assert (forall (($q7@138@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 15)) $q7@138@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 15)) $q7@138@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 15)) $q7@138@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@758@11@758@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int])): Int))
(declare-const $t@139@01 $Snap)
(assert (= $t@139@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int])): Int))
(declare-const $q7@140@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc($self$0, 15)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 15)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 15)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@140@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 15)) $q7@140@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 15)) $q7@140@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@759@11@759@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@141@01 $Snap)
(assert (= $t@141@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$0, -1)): Int)
; [eval] $struct_loc($self$0, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@107@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 0)): Int) &&
;   ($struct_get($struct_loc($self$1, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@142@01 $Snap)
(assert (= $t@142@01 ($Snap.combine ($Snap.first $t@142@01) ($Snap.second $t@142@01))))
(assert (= ($Snap.first $t@142@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@109@01 0))))
(assert (= ($Snap.second $t@142@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@109@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 1)): Int) &&
;   ($struct_get($struct_loc($self$1, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@143@01 $Snap)
(assert (= $t@143@01 ($Snap.combine ($Snap.first $t@143@01) ($Snap.second $t@143@01))))
(assert (= ($Snap.first $t@143@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@109@01 1))))
(assert (= ($Snap.second $t@143@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@109@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 3)): Int) &&
;   ($struct_get($struct_loc($self$1, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@144@01 $Snap)
(assert (= $t@144@01 ($Snap.combine ($Snap.first $t@144@01) ($Snap.second $t@144@01))))
(assert (= ($Snap.first $t@144@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@109@01 3))))
(assert (= ($Snap.second $t@144@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@109@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$1, 4)): Seq[Int])| <= 12
(declare-const $t@145@01 $Snap)
(assert (= $t@145@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$1, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc($self$1, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$1, 4)): Seq[Int])
; [eval] $struct_loc($self$1, 4)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@109@01 4))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$1, 5)): Seq[Int])| <= 3
(declare-const $t@146@01 $Snap)
(assert (= $t@146@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$1, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc($self$1, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$1, 5)): Seq[Int])
; [eval] $struct_loc($self$1, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@109@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 6)): Int) &&
;   ($struct_get($struct_loc($self$1, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@147@01 $Snap)
(assert (= $t@147@01 ($Snap.combine ($Snap.first $t@147@01) ($Snap.second $t@147@01))))
(assert (= ($Snap.first $t@147@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] $struct_loc($self$1, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@109@01 6))))
(assert (= ($Snap.second $t@147@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] $struct_loc($self$1, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@109@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 7)): Int) &&
;   ($struct_get($struct_loc($self$1, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@148@01 $Snap)
(assert (= $t@148@01 ($Snap.combine ($Snap.first $t@148@01) ($Snap.second $t@148@01))))
(assert (= ($Snap.first $t@148@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] $struct_loc($self$1, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@109@01 7))))
(assert (= ($Snap.second $t@148@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] $struct_loc($self$1, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@109@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@149@01 $Snap)
(assert (= $t@149@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@150@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(push) ; 4
; [then-branch: 16 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@109@01, 8)), $q3@150@01)) | live]
; [else-branch: 16 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@109@01, 8)), $q3@150@01) | live]
(push) ; 5
; [then-branch: 16 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@109@01, 8)), $q3@150@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 8)) $q3@150@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 16 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@109@01, 8)), $q3@150@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 8)) $q3@150@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 8)) $q3@150@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 8)) $q3@150@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@150@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 8)) $q3@150@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 8)) $q3@150@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 8)) $q3@150@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@768@11@768@354-aux|)))
(assert (forall (($q3@150@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 8)) $q3@150@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 8)) $q3@150@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 8)) $q3@150@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@768@11@768@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $t@151@01 $Snap)
(assert (= $t@151@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $q3@152@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@152@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 8)) $q3@152@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 8)) $q3@152@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@769@11@769@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@153@01 $Snap)
(assert (= $t@153@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@154@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@155@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($self$1, 9)
(push) ; 5
; [then-branch: 17 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($self$1@109@01, 9)), $q4@154@01), $q5@155@01)) | live]
; [else-branch: 17 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($self$1@109@01, 9)), $q4@154@01), $q5@155@01) | live]
(push) ; 6
; [then-branch: 17 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($self$1@109@01, 9)), $q4@154@01), $q5@155@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@109@01 9)) $q4@154@01) $q5@155@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 17 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($self$1@109@01, 9)), $q4@154@01), $q5@155@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@109@01 9)) $q4@154@01) $q5@155@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($self$1, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@109@01 9)) $q4@154@01) $q5@155@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@109@01 9)) $q4@154@01) $q5@155@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@155@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@109@01 9)) $q4@154@01) $q5@155@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@109@01 9)) $q4@154@01) $q5@155@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@109@01 9)) $q4@154@01) $q5@155@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@770@134@770@609-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@154@01 Int)) (!
  (forall (($q5@155@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@109@01 9)) $q4@154@01) $q5@155@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@109@01 9)) $q4@154@01) $q5@155@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@109@01 9)) $q4@154@01) $q5@155@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@770@134@770@609-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@109@01 9)) $q4@154@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@770@11@770@610-aux|)))
(assert (forall (($q4@154@01 Int)) (!
  (forall (($q5@155@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@109@01 9)) $q4@154@01) $q5@155@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@109@01 9)) $q4@154@01) $q5@155@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@109@01 9)) $q4@154@01) $q5@155@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@770@134@770@609|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@109@01 9)) $q4@154@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@770@11@770@610|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@156@01 $Snap)
(assert (= $t@156@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@157@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@158@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($self$1, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($self$1, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@157@01 Int)) (!
  (forall (($q5@158@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@109@01 9)) $q4@157@01) $q5@158@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@109@01 9)) $q4@157@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@109@01 9)) $q4@157@01) $q5@158@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@771@134@771@517|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $self$1@109@01 9)) $q4@157@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@771@11@771@518|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 10)): Int) &&
;   ($struct_get($struct_loc($self$1, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@159@01 $Snap)
(assert (= $t@159@01 ($Snap.combine ($Snap.first $t@159@01) ($Snap.second $t@159@01))))
(assert (= ($Snap.first $t@159@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 10)): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): Int)
; [eval] $struct_loc($self$1, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@109@01 10))))
(assert (= ($Snap.second $t@159@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 10)): Int)
; [eval] $struct_loc($self$1, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@109@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 11)): Int) &&
;   ($struct_get($struct_loc($self$1, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@160@01 $Snap)
(assert (= $t@160@01 ($Snap.combine ($Snap.first $t@160@01) ($Snap.second $t@160@01))))
(assert (= ($Snap.first $t@160@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 11)): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): Int)
; [eval] $struct_loc($self$1, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@109@01 11))))
(assert (= ($Snap.second $t@160@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 11)): Int)
; [eval] $struct_loc($self$1, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@109@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 12)): Int) &&
;   ($struct_get($struct_loc($self$1, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@161@01 $Snap)
(assert (= $t@161@01 ($Snap.combine ($Snap.first $t@161@01) ($Snap.second $t@161@01))))
(assert (= ($Snap.first $t@161@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 12)): Int)
; [eval] $struct_loc($self$1, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@109@01 12))))
(assert (= ($Snap.second $t@161@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 12)): Int)
; [eval] $struct_loc($self$1, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@109@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@162@01 $Snap)
(assert (= $t@162@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@163@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc($self$1, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 14)
(push) ; 4
; [then-branch: 18 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@109@01, 14)), $q6@163@01)) | live]
; [else-branch: 18 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@109@01, 14)), $q6@163@01) | live]
(push) ; 5
; [then-branch: 18 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@109@01, 14)), $q6@163@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 14)) $q6@163@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 18 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@109@01, 14)), $q6@163@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 14)) $q6@163@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc($self$1, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 14)) $q6@163@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 14)) $q6@163@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@163@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 14)) $q6@163@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 14)) $q6@163@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 14)) $q6@163@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@775@11@775@357-aux|)))
(assert (forall (($q6@163@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 14)) $q6@163@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 14)) $q6@163@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 14)) $q6@163@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@775@11@775@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int])): Int))
(declare-const $t@164@01 $Snap)
(assert (= $t@164@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int])): Int))
(declare-const $q6@165@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc($self$1, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 14)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@165@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 14)) $q6@165@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 14)) $q6@165@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@776@11@776@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@166@01 $Snap)
(assert (= $t@166@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@167@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc($self$1, 15)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 15)
(push) ; 4
; [then-branch: 19 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@109@01, 15)), $q7@167@01)) | live]
; [else-branch: 19 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@109@01, 15)), $q7@167@01) | live]
(push) ; 5
; [then-branch: 19 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@109@01, 15)), $q7@167@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 15)) $q7@167@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 19 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@109@01, 15)), $q7@167@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 15)) $q7@167@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc($self$1, 15)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 15)) $q7@167@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 15)) $q7@167@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@167@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 15)) $q7@167@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 15)) $q7@167@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 15)) $q7@167@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@777@11@777@357-aux|)))
(assert (forall (($q7@167@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 15)) $q7@167@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 15)) $q7@167@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 15)) $q7@167@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@777@11@777@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int])): Int))
(declare-const $t@168@01 $Snap)
(assert (= $t@168@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int])): Int))
(declare-const $q7@169@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc($self$1, 15)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 15)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 15)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@169@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 15)) $q7@169@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 15)) $q7@169@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@778@11@778@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@170@01 $Snap)
(assert (= $t@170@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$1, -1)): Int)
; [eval] $struct_loc($self$1, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@109@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@171@01 $Snap)
(assert (= $t@171@01 ($Snap.combine ($Snap.first $t@171@01) ($Snap.second $t@171@01))))
(assert (= ($Snap.first $t@171@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@111@01 0))))
(assert (= ($Snap.second $t@171@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@111@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@172@01 $Snap)
(assert (= $t@172@01 ($Snap.combine ($Snap.first $t@172@01) ($Snap.second $t@172@01))))
(assert (= ($Snap.first $t@172@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@111@01 1))))
(assert (= ($Snap.second $t@172@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@111@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@173@01 $Snap)
(assert (= $t@173@01 ($Snap.combine ($Snap.first $t@173@01) ($Snap.second $t@173@01))))
(assert (= ($Snap.first $t@173@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@111@01 2))))
(assert (= ($Snap.second $t@173@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@111@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@174@01 $Snap)
(assert (= $t@174@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@111@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@175@01 $Snap)
(assert (= $t@175@01 ($Snap.combine ($Snap.first $t@175@01) ($Snap.second $t@175@01))))
(assert (= ($Snap.first $t@175@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@111@01 4))))
(assert (= ($Snap.second $t@175@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@111@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@176@01 $Snap)
(assert (= $t@176@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@111@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $a): Int))
(declare-const $t@177@01 $Snap)
(assert (= $t@177@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $a): Int))
(declare-const $a@178@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 14)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 14)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@178@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 14)) $a@178@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@107@01 14)) $a@178@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@109@01 14)) $a@178@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@786@11@786@266|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- $forced_ether_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var self: $Struct
(declare-const self@179@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@180@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@181@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@182@01 $Map<Int~_$Struct>)
; [exec]
; var $post: Bool
(declare-const $post@183@01 Bool)
; [exec]
; var $havoc: Int
(declare-const $havoc@184@01 Int)
; [exec]
; var block: $Struct
(declare-const block@185@01 $Struct)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@186@01 $Snap)
(assert (= $t@186@01 ($Snap.combine ($Snap.first $t@186@01) ($Snap.second $t@186@01))))
(assert (= ($Snap.first $t@186@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@179@01 0))))
(assert (= ($Snap.second $t@186@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@179@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@187@01 $Snap)
(assert (= $t@187@01 ($Snap.combine ($Snap.first $t@187@01) ($Snap.second $t@187@01))))
(assert (= ($Snap.first $t@187@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@179@01 1))))
(assert (= ($Snap.second $t@187@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@179@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@188@01 $Snap)
(assert (= $t@188@01 ($Snap.combine ($Snap.first $t@188@01) ($Snap.second $t@188@01))))
(assert (= ($Snap.first $t@188@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@179@01 3))))
(assert (= ($Snap.second $t@188@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@179@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
(declare-const $t@189@01 $Snap)
(assert (= $t@189@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 4)): Seq[Int])
; [eval] $struct_loc(self, 4)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@179@01 4))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
(declare-const $t@190@01 $Snap)
(assert (= $t@190@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 5)): Seq[Int])
; [eval] $struct_loc(self, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@179@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@191@01 $Snap)
(assert (= $t@191@01 ($Snap.combine ($Snap.first $t@191@01) ($Snap.second $t@191@01))))
(assert (= ($Snap.first $t@191@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@179@01 6))))
(assert (= ($Snap.second $t@191@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@179@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@192@01 $Snap)
(assert (= $t@192@01 ($Snap.combine ($Snap.first $t@192@01) ($Snap.second $t@192@01))))
(assert (= ($Snap.first $t@192@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@179@01 7))))
(assert (= ($Snap.second $t@192@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@179@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@193@01 $Snap)
(assert (= $t@193@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@194@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 20 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@179@01, 8)), $q3@194@01)) | live]
; [else-branch: 20 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@179@01, 8)), $q3@194@01) | live]
(push) ; 5
; [then-branch: 20 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@179@01, 8)), $q3@194@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 8)) $q3@194@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 20 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@179@01, 8)), $q3@194@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 8)) $q3@194@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 8)) $q3@194@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 8)) $q3@194@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@194@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 8)) $q3@194@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 8)) $q3@194@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 8)) $q3@194@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@805@11@805@345-aux|)))
(assert (forall (($q3@194@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 8)) $q3@194@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 8)) $q3@194@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 8)) $q3@194@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@805@11@805@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@195@01 $Snap)
(assert (= $t@195@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@196@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@196@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 8)) $q3@196@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 8)) $q3@196@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@806@11@806@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@197@01 $Snap)
(assert (= $t@197@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@198@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@199@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(push) ; 5
; [then-branch: 21 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@179@01, 9)), $q4@198@01), $q5@199@01)) | live]
; [else-branch: 21 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@179@01, 9)), $q4@198@01), $q5@199@01) | live]
(push) ; 6
; [then-branch: 21 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@179@01, 9)), $q4@198@01), $q5@199@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@179@01 9)) $q4@198@01) $q5@199@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 21 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@179@01, 9)), $q4@198@01), $q5@199@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@179@01 9)) $q4@198@01) $q5@199@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@179@01 9)) $q4@198@01) $q5@199@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@179@01 9)) $q4@198@01) $q5@199@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@199@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@179@01 9)) $q4@198@01) $q5@199@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@179@01 9)) $q4@198@01) $q5@199@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@179@01 9)) $q4@198@01) $q5@199@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@807@131@807@597-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@198@01 Int)) (!
  (forall (($q5@199@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@179@01 9)) $q4@198@01) $q5@199@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@179@01 9)) $q4@198@01) $q5@199@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@179@01 9)) $q4@198@01) $q5@199@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@807@131@807@597-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@179@01 9)) $q4@198@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@807@11@807@598-aux|)))
(assert (forall (($q4@198@01 Int)) (!
  (forall (($q5@199@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@179@01 9)) $q4@198@01) $q5@199@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@179@01 9)) $q4@198@01) $q5@199@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@179@01 9)) $q4@198@01) $q5@199@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@807@131@807@597|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@179@01 9)) $q4@198@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@807@11@807@598|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@200@01 $Snap)
(assert (= $t@200@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@201@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@202@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@201@01 Int)) (!
  (forall (($q5@202@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@179@01 9)) $q4@201@01) $q5@202@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@179@01 9)) $q4@201@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@179@01 9)) $q4@201@01) $q5@202@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@808@131@808@505|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@179@01 9)) $q4@201@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@808@11@808@506|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 10)): Int) &&
;   ($struct_get($struct_loc(self, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@203@01 $Snap)
(assert (= $t@203@01 ($Snap.combine ($Snap.first $t@203@01) ($Snap.second $t@203@01))))
(assert (= ($Snap.first $t@203@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 10)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@179@01 10))))
(assert (= ($Snap.second $t@203@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@179@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 11)): Int) &&
;   ($struct_get($struct_loc(self, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@204@01 $Snap)
(assert (= $t@204@01 ($Snap.combine ($Snap.first $t@204@01) ($Snap.second $t@204@01))))
(assert (= ($Snap.first $t@204@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 11)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@179@01 11))))
(assert (= ($Snap.second $t@204@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@179@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 12)): Int) &&
;   ($struct_get($struct_loc(self, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@205@01 $Snap)
(assert (= $t@205@01 ($Snap.combine ($Snap.first $t@205@01) ($Snap.second $t@205@01))))
(assert (= ($Snap.first $t@205@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@179@01 12))))
(assert (= ($Snap.second $t@205@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@179@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@206@01 $Snap)
(assert (= $t@206@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@207@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(push) ; 4
; [then-branch: 22 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@179@01, 14)), $q6@207@01)) | live]
; [else-branch: 22 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@179@01, 14)), $q6@207@01) | live]
(push) ; 5
; [then-branch: 22 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@179@01, 14)), $q6@207@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 14)) $q6@207@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 22 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@179@01, 14)), $q6@207@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 14)) $q6@207@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 14)) $q6@207@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 14)) $q6@207@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@207@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 14)) $q6@207@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 14)) $q6@207@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 14)) $q6@207@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@812@11@812@348-aux|)))
(assert (forall (($q6@207@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 14)) $q6@207@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 14)) $q6@207@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 14)) $q6@207@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@812@11@812@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $t@208@01 $Snap)
(assert (= $t@208@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $q6@209@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@209@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 14)) $q6@209@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 14)) $q6@209@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@813@11@813@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@210@01 $Snap)
(assert (= $t@210@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@211@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(push) ; 4
; [then-branch: 23 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@179@01, 15)), $q7@211@01)) | live]
; [else-branch: 23 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@179@01, 15)), $q7@211@01) | live]
(push) ; 5
; [then-branch: 23 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@179@01, 15)), $q7@211@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 15)) $q7@211@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 23 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@179@01, 15)), $q7@211@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 15)) $q7@211@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 15)) $q7@211@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 15)) $q7@211@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@211@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 15)) $q7@211@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 15)) $q7@211@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 15)) $q7@211@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@814@11@814@348-aux|)))
(assert (forall (($q7@211@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 15)) $q7@211@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 15)) $q7@211@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 15)) $q7@211@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@814@11@814@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $t@212@01 $Snap)
(assert (= $t@212@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $q7@213@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
; [eval] ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@213@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 15)) $q7@213@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@179@01 15)) $q7@213@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@815@11@815@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@214@01 $Snap)
(assert (= $t@214@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@179@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 0)): Int) &&
;   ($struct_get($struct_loc($pre_self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@215@01 $Snap)
(assert (= $t@215@01 ($Snap.combine ($Snap.first $t@215@01) ($Snap.second $t@215@01))))
(assert (= ($Snap.first $t@215@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@181@01 0))))
(assert (= ($Snap.second $t@215@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@181@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 1)): Int) &&
;   ($struct_get($struct_loc($pre_self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@216@01 $Snap)
(assert (= $t@216@01 ($Snap.combine ($Snap.first $t@216@01) ($Snap.second $t@216@01))))
(assert (= ($Snap.first $t@216@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@181@01 1))))
(assert (= ($Snap.second $t@216@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@181@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 3)): Int) &&
;   ($struct_get($struct_loc($pre_self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@217@01 $Snap)
(assert (= $t@217@01 ($Snap.combine ($Snap.first $t@217@01) ($Snap.second $t@217@01))))
(assert (= ($Snap.first $t@217@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 3)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 3)): Int)
; [eval] $struct_loc($pre_self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@181@01 3))))
(assert (= ($Snap.second $t@217@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($pre_self, 3)): Int)
; [eval] $struct_loc($pre_self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@181@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($pre_self, 4)): Seq[Int])| <= 12
(declare-const $t@218@01 $Snap)
(assert (= $t@218@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($pre_self, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc($pre_self, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc($pre_self, 4)): Seq[Int])
; [eval] $struct_loc($pre_self, 4)
(assert (<=
  (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@181@01 4)))
  12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($pre_self, 5)): Seq[Int])| <= 3
(declare-const $t@219@01 $Snap)
(assert (= $t@219@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($pre_self, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc($pre_self, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc($pre_self, 5)): Seq[Int])
; [eval] $struct_loc($pre_self, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@181@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 6)): Int) &&
;   ($struct_get($struct_loc($pre_self, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@220@01 $Snap)
(assert (= $t@220@01 ($Snap.combine ($Snap.first $t@220@01) ($Snap.second $t@220@01))))
(assert (= ($Snap.first $t@220@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 6)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 6)): Int)
; [eval] $struct_loc($pre_self, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@181@01 6))))
(assert (= ($Snap.second $t@220@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 6)): Int)
; [eval] $struct_loc($pre_self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@181@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 7)): Int) &&
;   ($struct_get($struct_loc($pre_self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@221@01 $Snap)
(assert (= $t@221@01 ($Snap.combine ($Snap.first $t@221@01) ($Snap.second $t@221@01))))
(assert (= ($Snap.first $t@221@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 7)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): Int)
; [eval] $struct_loc($pre_self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@181@01 7))))
(assert (= ($Snap.second $t@221@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 7)): Int)
; [eval] $struct_loc($pre_self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@181@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@222@01 $Snap)
(assert (= $t@222@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@223@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(push) ; 4
; [then-branch: 24 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@181@01, 8)), $q3@223@01)) | live]
; [else-branch: 24 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@181@01, 8)), $q3@223@01) | live]
(push) ; 5
; [then-branch: 24 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@181@01, 8)), $q3@223@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 8)) $q3@223@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 24 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@181@01, 8)), $q3@223@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 8)) $q3@223@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 8)) $q3@223@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 8)) $q3@223@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@223@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 8)) $q3@223@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 8)) $q3@223@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 8)) $q3@223@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@824@11@824@360-aux|)))
(assert (forall (($q3@223@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 8)) $q3@223@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 8)) $q3@223@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 8)) $q3@223@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@824@11@824@360|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int))
(declare-const $t@224@01 $Snap)
(assert (= $t@224@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@225@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@225@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 8)) $q3@225@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 8)) $q3@225@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@825@11@825@268|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@226@01 $Snap)
(assert (= $t@226@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@227@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@228@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($pre_self, 9)
(push) ; 5
; [then-branch: 25 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($pre_self@181@01, 9)), $q4@227@01), $q5@228@01)) | live]
; [else-branch: 25 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($pre_self@181@01, 9)), $q4@227@01), $q5@228@01) | live]
(push) ; 6
; [then-branch: 25 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($pre_self@181@01, 9)), $q4@227@01), $q5@228@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $pre_self@181@01 9)) $q4@227@01) $q5@228@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 25 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int]($pre_self@181@01, 9)), $q4@227@01), $q5@228@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $pre_self@181@01 9)) $q4@227@01) $q5@228@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($pre_self, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $pre_self@181@01 9)) $q4@227@01) $q5@228@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $pre_self@181@01 9)) $q4@227@01) $q5@228@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@228@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $pre_self@181@01 9)) $q4@227@01) $q5@228@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $pre_self@181@01 9)) $q4@227@01) $q5@228@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $pre_self@181@01 9)) $q4@227@01) $q5@228@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@826@136@826@617-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@227@01 Int)) (!
  (forall (($q5@228@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $pre_self@181@01 9)) $q4@227@01) $q5@228@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $pre_self@181@01 9)) $q4@227@01) $q5@228@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $pre_self@181@01 9)) $q4@227@01) $q5@228@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@826@136@826@617-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $pre_self@181@01 9)) $q4@227@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@826@11@826@618-aux|)))
(assert (forall (($q4@227@01 Int)) (!
  (forall (($q5@228@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $pre_self@181@01 9)) $q4@227@01) $q5@228@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $pre_self@181@01 9)) $q4@227@01) $q5@228@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $pre_self@181@01 9)) $q4@227@01) $q5@228@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@826@136@826@617|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $pre_self@181@01 9)) $q4@227@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@826@11@826@618|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@229@01 $Snap)
(assert (= $t@229@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@230@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@231@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($pre_self, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc($pre_self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc($pre_self, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@230@01 Int)) (!
  (forall (($q5@231@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $pre_self@181@01 9)) $q4@230@01) $q5@231@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $pre_self@181@01 9)) $q4@230@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $pre_self@181@01 9)) $q4@230@01) $q5@231@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@827@136@827@525|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> $pre_self@181@01 9)) $q4@230@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@827@11@827@526|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 10)): Int) &&
;   ($struct_get($struct_loc($pre_self, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@232@01 $Snap)
(assert (= $t@232@01 ($Snap.combine ($Snap.first $t@232@01) ($Snap.second $t@232@01))))
(assert (= ($Snap.first $t@232@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 10)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 10)): Int)
; [eval] $struct_loc($pre_self, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@181@01 10))))
(assert (= ($Snap.second $t@232@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 10)): Int)
; [eval] $struct_loc($pre_self, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@181@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 11)): Int) &&
;   ($struct_get($struct_loc($pre_self, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@233@01 $Snap)
(assert (= $t@233@01 ($Snap.combine ($Snap.first $t@233@01) ($Snap.second $t@233@01))))
(assert (= ($Snap.first $t@233@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 11)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 11)): Int)
; [eval] $struct_loc($pre_self, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@181@01 11))))
(assert (= ($Snap.second $t@233@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 11)): Int)
; [eval] $struct_loc($pre_self, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@181@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($pre_self, 12)): Int) &&
;   ($struct_get($struct_loc($pre_self, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@234@01 $Snap)
(assert (= $t@234@01 ($Snap.combine ($Snap.first $t@234@01) ($Snap.second $t@234@01))))
(assert (= ($Snap.first $t@234@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($pre_self, 12)): Int)
; [eval] $struct_loc($pre_self, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $pre_self@181@01 12))))
(assert (= ($Snap.second $t@234@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($pre_self, 12)): Int)
; [eval] $struct_loc($pre_self, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@181@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@235@01 $Snap)
(assert (= $t@235@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@236@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 14)
(push) ; 4
; [then-branch: 26 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@181@01, 14)), $q6@236@01)) | live]
; [else-branch: 26 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@181@01, 14)), $q6@236@01) | live]
(push) ; 5
; [then-branch: 26 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@181@01, 14)), $q6@236@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 14)) $q6@236@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 26 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@181@01, 14)), $q6@236@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 14)) $q6@236@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 14)) $q6@236@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 14)) $q6@236@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@236@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 14)) $q6@236@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 14)) $q6@236@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 14)) $q6@236@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@831@11@831@363-aux|)))
(assert (forall (($q6@236@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 14)) $q6@236@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 14)) $q6@236@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 14)) $q6@236@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@831@11@831@363|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int])): Int))
(declare-const $t@237@01 $Snap)
(assert (= $t@237@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int])): Int))
(declare-const $q6@238@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 14)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 14)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@238@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 14)) $q6@238@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 14)) $q6@238@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@832@11@832@271|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@239@01 $Snap)
(assert (= $t@239@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@240@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 15)
(push) ; 4
; [then-branch: 27 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@181@01, 15)), $q7@240@01)) | live]
; [else-branch: 27 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@181@01, 15)), $q7@240@01) | live]
(push) ; 5
; [then-branch: 27 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@181@01, 15)), $q7@240@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 15)) $q7@240@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 27 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@181@01, 15)), $q7@240@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 15)) $q7@240@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 15)) $q7@240@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 15)) $q7@240@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@240@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 15)) $q7@240@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 15)) $q7@240@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 15)) $q7@240@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@833@11@833@363-aux|)))
(assert (forall (($q7@240@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 15)) $q7@240@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 15)) $q7@240@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 15)) $q7@240@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@833@11@833@363|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int])): Int))
(declare-const $t@241@01 $Snap)
(assert (= $t@241@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int])): Int))
(declare-const $q7@242@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 15)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 15)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@242@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 15)) $q7@242@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@181@01 15)) $q7@242@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@834@11@834@271|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($pre_self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@243@01 $Snap)
(assert (= $t@243@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($pre_self, -1)): Int)
; [eval] $struct_loc($pre_self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@181@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@244@01 $Snap)
(assert (= $t@244@01 ($Snap.combine ($Snap.first $t@244@01) ($Snap.second $t@244@01))))
(assert (= ($Snap.first $t@244@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@185@01 0))))
(assert (= ($Snap.second $t@244@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@185@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@245@01 $Snap)
(assert (= $t@245@01 ($Snap.combine ($Snap.first $t@245@01) ($Snap.second $t@245@01))))
(assert (= ($Snap.first $t@245@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@185@01 1))))
(assert (= ($Snap.second $t@245@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@185@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@246@01 $Snap)
(assert (= $t@246@01 ($Snap.combine ($Snap.first $t@246@01) ($Snap.second $t@246@01))))
(assert (= ($Snap.first $t@246@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@185@01 2))))
(assert (= ($Snap.second $t@246@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@185@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@247@01 $Snap)
(assert (= $t@247@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@185@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@248@01 $Snap)
(assert (= $t@248@01 ($Snap.combine ($Snap.first $t@248@01) ($Snap.second $t@248@01))))
(assert (= ($Snap.first $t@248@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@185@01 4))))
(assert (= ($Snap.second $t@248@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@185@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@249@01 $Snap)
(assert (= $t@249@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@185@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale $havoc >= 0
(declare-const $t@250@01 $Snap)
(assert (= $t@250@01 $Snap.unit))
; [eval] $havoc >= 0
(assert (>= $havoc@184@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $t@251@01 $Snap)
(assert (= $t@251@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $a@252@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   $havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + $havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + $havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@253@01 $Struct)
(assert (=
  self@253@01
  ($struct_set<$Struct> self@179@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@179@01 11))
    $havoc@184@01))))
(pop) ; 2
(pop) ; 1
; ---------- f$__init__ ----------
(declare-const $succ@254@01 Bool)
(declare-const $succ@255@01 Bool)
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@256@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@257@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@258@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@259@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@260@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@261@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@262@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@263@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@264@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@265@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@266@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@267@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@268@01 Bool)
; [exec]
; var $first_public_state: Bool
(declare-const $first_public_state@269@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@270@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@271@01 Bool)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@272@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@273@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@274@01 $Snap)
(assert (= $t@274@01 ($Snap.combine ($Snap.first $t@274@01) ($Snap.second $t@274@01))))
(assert (= ($Snap.first $t@274@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@260@01 0))))
(assert (= ($Snap.second $t@274@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@260@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@275@01 $Snap)
(assert (= $t@275@01 ($Snap.combine ($Snap.first $t@275@01) ($Snap.second $t@275@01))))
(assert (= ($Snap.first $t@275@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@260@01 1))))
(assert (= ($Snap.second $t@275@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@260@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@276@01 $Snap)
(assert (= $t@276@01 ($Snap.combine ($Snap.first $t@276@01) ($Snap.second $t@276@01))))
(assert (= ($Snap.first $t@276@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@260@01 3))))
(assert (= ($Snap.second $t@276@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@260@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
(declare-const $t@277@01 $Snap)
(assert (= $t@277@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 4)): Seq[Int])
; [eval] $struct_loc(self, 4)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@260@01 4))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
(declare-const $t@278@01 $Snap)
(assert (= $t@278@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 5)): Seq[Int])
; [eval] $struct_loc(self, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@260@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@279@01 $Snap)
(assert (= $t@279@01 ($Snap.combine ($Snap.first $t@279@01) ($Snap.second $t@279@01))))
(assert (= ($Snap.first $t@279@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@260@01 6))))
(assert (= ($Snap.second $t@279@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@260@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@280@01 $Snap)
(assert (= $t@280@01 ($Snap.combine ($Snap.first $t@280@01) ($Snap.second $t@280@01))))
(assert (= ($Snap.first $t@280@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@260@01 7))))
(assert (= ($Snap.second $t@280@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@260@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@281@01 $Snap)
(assert (= $t@281@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@282@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 28 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@260@01, 8)), $q3@282@01)) | live]
; [else-branch: 28 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@260@01, 8)), $q3@282@01) | live]
(push) ; 5
; [then-branch: 28 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@260@01, 8)), $q3@282@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 8)) $q3@282@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 28 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@260@01, 8)), $q3@282@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 8)) $q3@282@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 8)) $q3@282@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 8)) $q3@282@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@282@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 8)) $q3@282@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 8)) $q3@282@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 8)) $q3@282@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@878@11@878@345-aux|)))
(assert (forall (($q3@282@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 8)) $q3@282@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 8)) $q3@282@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 8)) $q3@282@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@878@11@878@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@283@01 $Snap)
(assert (= $t@283@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@284@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@284@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 8)) $q3@284@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 8)) $q3@284@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@879@11@879@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@285@01 $Snap)
(assert (= $t@285@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@286@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@287@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(push) ; 5
; [then-branch: 29 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@260@01, 9)), $q4@286@01), $q5@287@01)) | live]
; [else-branch: 29 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@260@01, 9)), $q4@286@01), $q5@287@01) | live]
(push) ; 6
; [then-branch: 29 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@260@01, 9)), $q4@286@01), $q5@287@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@260@01 9)) $q4@286@01) $q5@287@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 29 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@260@01, 9)), $q4@286@01), $q5@287@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@260@01 9)) $q4@286@01) $q5@287@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@260@01 9)) $q4@286@01) $q5@287@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@260@01 9)) $q4@286@01) $q5@287@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@287@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@260@01 9)) $q4@286@01) $q5@287@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@260@01 9)) $q4@286@01) $q5@287@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@260@01 9)) $q4@286@01) $q5@287@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@880@131@880@597-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@286@01 Int)) (!
  (forall (($q5@287@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@260@01 9)) $q4@286@01) $q5@287@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@260@01 9)) $q4@286@01) $q5@287@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@260@01 9)) $q4@286@01) $q5@287@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@880@131@880@597-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@260@01 9)) $q4@286@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@880@11@880@598-aux|)))
(assert (forall (($q4@286@01 Int)) (!
  (forall (($q5@287@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@260@01 9)) $q4@286@01) $q5@287@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@260@01 9)) $q4@286@01) $q5@287@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@260@01 9)) $q4@286@01) $q5@287@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@880@131@880@597|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@260@01 9)) $q4@286@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@880@11@880@598|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@288@01 $Snap)
(assert (= $t@288@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@289@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@290@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@289@01 Int)) (!
  (forall (($q5@290@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@260@01 9)) $q4@289@01) $q5@290@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@260@01 9)) $q4@289@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@260@01 9)) $q4@289@01) $q5@290@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@881@131@881@505|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@260@01 9)) $q4@289@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@881@11@881@506|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 10)): Int) &&
;   ($struct_get($struct_loc(self, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@291@01 $Snap)
(assert (= $t@291@01 ($Snap.combine ($Snap.first $t@291@01) ($Snap.second $t@291@01))))
(assert (= ($Snap.first $t@291@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 10)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@260@01 10))))
(assert (= ($Snap.second $t@291@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@260@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 11)): Int) &&
;   ($struct_get($struct_loc(self, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@292@01 $Snap)
(assert (= $t@292@01 ($Snap.combine ($Snap.first $t@292@01) ($Snap.second $t@292@01))))
(assert (= ($Snap.first $t@292@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 11)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@260@01 11))))
(assert (= ($Snap.second $t@292@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@260@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 12)): Int) &&
;   ($struct_get($struct_loc(self, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@293@01 $Snap)
(assert (= $t@293@01 ($Snap.combine ($Snap.first $t@293@01) ($Snap.second $t@293@01))))
(assert (= ($Snap.first $t@293@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@260@01 12))))
(assert (= ($Snap.second $t@293@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@260@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@294@01 $Snap)
(assert (= $t@294@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@295@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(push) ; 4
; [then-branch: 30 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@260@01, 14)), $q6@295@01)) | live]
; [else-branch: 30 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@260@01, 14)), $q6@295@01) | live]
(push) ; 5
; [then-branch: 30 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@260@01, 14)), $q6@295@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 14)) $q6@295@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 30 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@260@01, 14)), $q6@295@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 14)) $q6@295@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 14)) $q6@295@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 14)) $q6@295@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@295@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 14)) $q6@295@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 14)) $q6@295@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 14)) $q6@295@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@885@11@885@348-aux|)))
(assert (forall (($q6@295@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 14)) $q6@295@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 14)) $q6@295@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 14)) $q6@295@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@885@11@885@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $t@296@01 $Snap)
(assert (= $t@296@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $q6@297@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@297@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 14)) $q6@297@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 14)) $q6@297@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@886@11@886@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@298@01 $Snap)
(assert (= $t@298@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@299@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(push) ; 4
; [then-branch: 31 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@260@01, 15)), $q7@299@01)) | live]
; [else-branch: 31 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@260@01, 15)), $q7@299@01) | live]
(push) ; 5
; [then-branch: 31 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@260@01, 15)), $q7@299@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 15)) $q7@299@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 31 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@260@01, 15)), $q7@299@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 15)) $q7@299@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 15)) $q7@299@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 15)) $q7@299@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@299@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 15)) $q7@299@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 15)) $q7@299@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 15)) $q7@299@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@887@11@887@348-aux|)))
(assert (forall (($q7@299@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 15)) $q7@299@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 15)) $q7@299@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 15)) $q7@299@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@887@11@887@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $t@300@01 $Snap)
(assert (= $t@300@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $q7@301@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
; [eval] ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@301@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 15)) $q7@301@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@260@01 15)) $q7@301@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@888@11@888@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@302@01 $Snap)
(assert (= $t@302@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@260@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@303@01 $Snap)
(assert (= $t@303@01 ($Snap.combine ($Snap.first $t@303@01) ($Snap.second $t@303@01))))
(assert (= ($Snap.first $t@303@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@303@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@304@01 $Snap)
(assert (= $t@304@01 ($Snap.combine ($Snap.first $t@304@01) ($Snap.second $t@304@01))))
(assert (= ($Snap.first $t@304@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@257@01 0))))
(assert (= ($Snap.second $t@304@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@257@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@305@01 $Snap)
(assert (= $t@305@01 ($Snap.combine ($Snap.first $t@305@01) ($Snap.second $t@305@01))))
(assert (= ($Snap.first $t@305@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@257@01 1))))
(assert (= ($Snap.second $t@305@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@257@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@306@01 $Snap)
(assert (= $t@306@01 ($Snap.combine ($Snap.first $t@306@01) ($Snap.second $t@306@01))))
(assert (= ($Snap.first $t@306@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@257@01 2))))
(assert (= ($Snap.second $t@306@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@257@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@307@01 $Snap)
(assert (= $t@307@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@257@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@308@01 $Snap)
(assert (= $t@308@01 ($Snap.combine ($Snap.first $t@308@01) ($Snap.second $t@308@01))))
(assert (= ($Snap.first $t@308@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@257@01 4))))
(assert (= ($Snap.second $t@308@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@257@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@309@01 $Snap)
(assert (= $t@309@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@257@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@310@01 $Snap)
(assert (= $t@310@01 ($Snap.combine ($Snap.first $t@310@01) ($Snap.second $t@310@01))))
(assert (= ($Snap.first $t@310@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@256@01 0))))
(assert (= ($Snap.second $t@310@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@256@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@311@01 $Snap)
(assert (= $t@311@01 ($Snap.combine ($Snap.first $t@311@01) ($Snap.second $t@311@01))))
(assert (= ($Snap.first $t@311@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@256@01 1))))
(assert (= ($Snap.second $t@311@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@256@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@312@01 $Snap)
(assert (= $t@312@01 ($Snap.combine ($Snap.first $t@312@01) ($Snap.second $t@312@01))))
(assert (= ($Snap.first $t@312@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@256@01 2))))
(assert (= ($Snap.second $t@312@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@256@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@313@01 $Snap)
(assert (= $t@313@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@256@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@314@01 $Snap)
(assert (= $t@314@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@256@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; $first_public_state := true
; [exec]
; self := s$struct$self$init(0, 0, ($map_init(false): $Map[Int, Bool]), 0, Seq[Int](),
;   Seq[Int](), 0, 0, ($map_init(0): $Map[Int, Int]), ($map_init(($map_init(0): $Map[Int, Int])): $Map[Int, $Map[Int, Int]]),
;   0, 0, 0, false, ($map_init(0): $Map[Int, Int]), ($map_init(0): $Map[Int, Int]),
;   false)
; [eval] s$struct$self$init(0, 0, ($map_init(false): $Map[Int, Bool]), 0, Seq[Int](), Seq[Int](), 0, 0, ($map_init(0): $Map[Int, Int]), ($map_init(($map_init(0): $Map[Int, Int])): $Map[Int, $Map[Int, Int]]), 0, 0, 0, false, ($map_init(0): $Map[Int, Int]), ($map_init(0): $Map[Int, Int]), false)
; [eval] ($map_init(false): $Map[Int, Bool])
; [eval] Seq[Int]()
; [eval] Seq[Int]()
; [eval] ($map_init(0): $Map[Int, Int])
; [eval] ($map_init(($map_init(0): $Map[Int, Int])): $Map[Int, $Map[Int, Int]])
; [eval] ($map_init(0): $Map[Int, Int])
; [eval] ($map_init(0): $Map[Int, Int])
; [eval] ($map_init(0): $Map[Int, Int])
(declare-const self@315@01 $Struct)
(assert (=
  self@315@01
  (s$struct$self$init<$Struct> 0 0 ($map_init<$Map<Int~_Bool>> false) 0 (as Seq_empty  Seq<Int>) (as Seq_empty  Seq<Int>) 0 0 ($map_init<$Map<Int~_Int>> 0) ($map_init<$Map<Int~_$Map<Int~_Int>>> ($map_init<$Map<Int~_Int>> 0)) 0 0 0 false ($map_init<$Map<Int~_Int>> 0) ($map_init<$Map<Int~_Int>> 0) false)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@316@01 $Snap)
(assert (= $t@316@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@270@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@317@01 $Struct)
(assert (=
  self@317@01
  ($struct_set<$Struct> self@315@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@315@01 11))
    l$havoc@270@01))))
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@318@01 $Snap)
(assert (= $t@318@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@256@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 3, ($struct_get($struct_loc(msg, 0)): Int)): $Struct)
; [eval] ($struct_set(self, 3, ($struct_get($struct_loc(msg, 0)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const self@319@01 $Struct)
(assert (=
  self@319@01
  ($struct_set<$Struct> self@317@01 3 ($struct_get<Int> ($struct_loc<Int> msg@256@01 0)))))
; [exec]
; self := ($struct_set(self, 4, Seq(83, 101, 114, 101, 110, 117, 115, 32, 67,
;   111, 105, 110)): $Struct)
; [eval] ($struct_set(self, 4, Seq(83, 101, 114, 101, 110, 117, 115, 32, 67, 111, 105, 110)): $Struct)
; [eval] Seq(83, 101, 114, 101, 110, 117, 115, 32, 67, 111, 105, 110)
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append
        (Seq_append
          (Seq_append
            (Seq_append
              (Seq_append
                (Seq_append
                  (Seq_append
                    (Seq_append
                      (Seq_append
                        (Seq_append (Seq_singleton 83) (Seq_singleton 101))
                        (Seq_singleton 114))
                      (Seq_singleton 101))
                    (Seq_singleton 110))
                  (Seq_singleton 117))
                (Seq_singleton 115))
              (Seq_singleton 32))
            (Seq_singleton 67))
          (Seq_singleton 111))
        (Seq_singleton 105))
      (Seq_singleton 110)))
  12))
(declare-const self@320@01 $Struct)
(assert (=
  self@320@01
  ($struct_set<$Struct> self@319@01 4 (Seq_append
    (Seq_append
      (Seq_append
        (Seq_append
          (Seq_append
            (Seq_append
              (Seq_append
                (Seq_append
                  (Seq_append
                    (Seq_append
                      (Seq_append (Seq_singleton 83) (Seq_singleton 101))
                      (Seq_singleton 114))
                    (Seq_singleton 101))
                  (Seq_singleton 110))
                (Seq_singleton 117))
              (Seq_singleton 115))
            (Seq_singleton 32))
          (Seq_singleton 67))
        (Seq_singleton 111))
      (Seq_singleton 105))
    (Seq_singleton 110)))))
; [exec]
; self := ($struct_set(self, 5, Seq(83, 82, 83)): $Struct)
; [eval] ($struct_set(self, 5, Seq(83, 82, 83)): $Struct)
; [eval] Seq(83, 82, 83)
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append (Seq_singleton 83) (Seq_singleton 82))
      (Seq_singleton 83)))
  3))
(declare-const self@321@01 $Struct)
(assert (=
  self@321@01
  ($struct_set<$Struct> self@320@01 5 (Seq_append
    (Seq_append (Seq_singleton 83) (Seq_singleton 82))
    (Seq_singleton 83)))))
; [exec]
; self := ($struct_set(self, 6, 18): $Struct)
; [eval] ($struct_set(self, 6, 18): $Struct)
(declare-const self@322@01 $Struct)
(assert (= self@322@01 ($struct_set<$Struct> self@321@01 6 18)))
; [exec]
; self := ($struct_set(self, 7, 10): $Struct)
; [eval] ($struct_set(self, 7, 10): $Struct)
(declare-const self@323@01 $Struct)
(assert (= self@323@01 ($struct_set<$Struct> self@322@01 7 10)))
; [exec]
; label return
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@271@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@271@01))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; [then-branch: 32 | $out_of_gas@271@01 | live]
; [else-branch: 32 | !($out_of_gas@271@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 32 | $out_of_gas@271@01]
(assert $out_of_gas@271@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 33 | True | live]
; [else-branch: 33 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 33 | True]
; [exec]
; $old_self := self
; [then-branch: 34 | False | dead]
; [else-branch: 34 | True | live]
(push) ; 5
; [else-branch: 34 | True]
(pop) ; 5
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [then-branch: 35 | True | live]
; [else-branch: 35 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 35 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@324@01 $Snap)
(assert (= $t@324@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@272@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@325@01 $Struct)
(assert (=
  self@325@01
  ($struct_set<$Struct> self@260@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@260@01 11))
    l$havoc$1@272@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 36 | True | live]
; [else-branch: 36 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 36 | True]
; [exec]
; $old_self := self
(pop) ; 6
; [eval] !$first_public_state
; [then-branch: 37 | False | dead]
; [else-branch: 37 | True | live]
(push) ; 6
; [else-branch: 37 | True]
(pop) ; 6
(pop) ; 5
(pop) ; 4
; [eval] !$first_public_state
; [then-branch: 38 | False | dead]
; [else-branch: 38 | True | live]
(push) ; 4
; [else-branch: 38 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 32 | !($out_of_gas@271@01)]
(assert (not $out_of_gas@271@01))
(pop) ; 3
; [eval] !$out_of_gas
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@271@01))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@271@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; [then-branch: 39 | !($out_of_gas@271@01) | live]
; [else-branch: 39 | $out_of_gas@271@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 39 | !($out_of_gas@271@01)]
(assert (not $out_of_gas@271@01))
; [exec]
; label end
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 40 | True | live]
; [else-branch: 40 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 40 | True]
; [exec]
; $old_self := self
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [then-branch: 41 | True | live]
; [else-branch: 41 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 41 | True]
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 6
; [then-branch: 42 | False | dead]
; [else-branch: 42 | True | live]
(push) ; 7
; [else-branch: 42 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@256@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@323@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 43 | $struct_get[Int]($struct_loc[Int](msg@256@01, 0)) != $struct_get[Int]($struct_loc[Int](self@323@01, 3)) | dead]
; [else-branch: 43 | $struct_get[Int]($struct_loc[Int](msg@256@01, 0)) == $struct_get[Int]($struct_loc[Int](self@323@01, 3)) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 43 | $struct_get[Int]($struct_loc[Int](msg@256@01, 0)) == $struct_get[Int]($struct_loc[Int](self@323@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@256@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@323@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@256@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@323@01 3))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@326@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 44 | !(0 <= q$a@326@01) | live]
; [else-branch: 44 | 0 <= q$a@326@01 | live]
(push) ; 8
; [then-branch: 44 | !(0 <= q$a@326@01)]
(assert (not (<= 0 q$a@326@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 44 | 0 <= q$a@326@01]
(assert (<= 0 q$a@326@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@326@01) (not (<= 0 q$a@326@01))))
(push) ; 7
; [then-branch: 45 | 0 <= q$a@326@01 && q$a@326@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 45 | !(0 <= q$a@326@01 && q$a@326@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 45 | 0 <= q$a@326@01 && q$a@326@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@326@01)
  (<= q$a@326@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 46 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@326@01) | live]
; [else-branch: 46 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@326@01)) | live]
(push) ; 10
; [then-branch: 46 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@326@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
(pop) ; 10
(push) ; 10
; [else-branch: 46 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@326@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01)))
(push) ; 9
; [then-branch: 47 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@326@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@326@01) | live]
; [else-branch: 47 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@326@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@326@01)) | live]
(push) ; 10
; [then-branch: 47 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@326@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@326@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 11
; [then-branch: 48 | $struct_get[Int]($struct_loc[Int](msg@256@01, 0)) != $struct_get[Int]($struct_loc[Int](self@323@01, 1)) | live]
; [else-branch: 48 | $struct_get[Int]($struct_loc[Int](msg@256@01, 0)) == $struct_get[Int]($struct_loc[Int](self@323@01, 1)) | live]
(push) ; 12
; [then-branch: 48 | $struct_get[Int]($struct_loc[Int](msg@256@01, 0)) != $struct_get[Int]($struct_loc[Int](self@323@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@256@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@323@01 1)))))
(pop) ; 12
(push) ; 12
; [else-branch: 48 | $struct_get[Int]($struct_loc[Int](msg@256@01, 0)) == $struct_get[Int]($struct_loc[Int](self@323@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@256@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@323@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@256@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@323@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@256@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@323@01 1))))))
(pop) ; 10
(push) ; 10
; [else-branch: 47 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@326@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@326@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@256@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@323@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@256@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@323@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 45 | !(0 <= q$a@326@01 && q$a@326@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@326@01)
    (<= q$a@326@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@326@01)
    (<= q$a@326@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@326@01)
    (<= q$a@326@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@256@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@323@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@256@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@323@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@326@01)
      (<= q$a@326@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@326@01)
    (<= q$a@326@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@326@01 Int)) (!
  (and
    (or (<= 0 q$a@326@01) (not (<= 0 q$a@326@01)))
    (=>
      (and
        (<= 0 q$a@326@01)
        (<= q$a@326@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@326@01)
        (<= q$a@326@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@256@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@323@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@256@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@323@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01)))))
    (or
      (not
        (and
          (<= 0 q$a@326@01)
          (<= q$a@326@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@326@01)
        (<= q$a@326@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@946@13@946@393-aux|)))
(push) ; 6
(assert (not (forall ((q$a@326@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@326@01)
        (<= q$a@326@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@946@13@946@393|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@326@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@326@01)
        (<= q$a@326@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@326@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@946@13@946@393|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@327@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 49 | !(0 <= q$a@327@01) | live]
; [else-branch: 49 | 0 <= q$a@327@01 | live]
(push) ; 8
; [then-branch: 49 | !(0 <= q$a@327@01)]
(assert (not (<= 0 q$a@327@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 49 | 0 <= q$a@327@01]
(assert (<= 0 q$a@327@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@327@01) (not (<= 0 q$a@327@01))))
(push) ; 7
; [then-branch: 50 | 0 <= q$a@327@01 && q$a@327@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 50 | !(0 <= q$a@327@01 && q$a@327@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 50 | 0 <= q$a@327@01 && q$a@327@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@327@01)
  (<= q$a@327@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 51 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@327@01)) | live]
; [else-branch: 51 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@327@01) | live]
(push) ; 10
; [then-branch: 51 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@327@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 51 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@327@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01))))
(push) ; 9
; [then-branch: 52 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@327@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@327@01)) | live]
; [else-branch: 52 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@327@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@327@01))) | live]
(push) ; 10
; [then-branch: 52 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@327@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@327@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 53 | $struct_get[Int]($struct_loc[Int](msg@256@01, 0)) != q$a@327@01 | live]
; [else-branch: 53 | $struct_get[Int]($struct_loc[Int](msg@256@01, 0)) == q$a@327@01 | live]
(push) ; 12
; [then-branch: 53 | $struct_get[Int]($struct_loc[Int](msg@256@01, 0)) != q$a@327@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@256@01 0)) q$a@327@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 53 | $struct_get[Int]($struct_loc[Int](msg@256@01, 0)) == q$a@327@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@256@01 0)) q$a@327@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@256@01 0)) q$a@327@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@256@01 0)) q$a@327@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 52 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@327@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@323@01, 2)), q$a@327@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@256@01 0)) q$a@327@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@256@01 0)) q$a@327@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 50 | !(0 <= q$a@327@01 && q$a@327@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@327@01)
    (<= q$a@327@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@327@01)
    (<= q$a@327@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@327@01)
    (<= q$a@327@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@256@01 0)) q$a@327@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@256@01 0)) q$a@327@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@327@01)
      (<= q$a@327@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@327@01)
    (<= q$a@327@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@327@01 Int)) (!
  (and
    (or (<= 0 q$a@327@01) (not (<= 0 q$a@327@01)))
    (=>
      (and
        (<= 0 q$a@327@01)
        (<= q$a@327@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@327@01)
        (<= q$a@327@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@256@01 0)) q$a@327@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@256@01 0)) q$a@327@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01))))))
    (or
      (not
        (and
          (<= 0 q$a@327@01)
          (<= q$a@327@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@327@01)
        (<= q$a@327@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@947@13@947@357-aux|)))
(push) ; 6
(assert (not (forall ((q$a@327@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@327@01)
        (<= q$a@327@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@947@13@947@357|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@327@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@327@01)
        (<= q$a@327@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@323@01 2)) q$a@327@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@947@13@947@357|)))
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@328@01 $Snap)
(assert (= $t@328@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@272@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@329@01 $Struct)
(assert (=
  self@329@01
  ($struct_set<$Struct> self@323@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@323@01 11))
    l$havoc$1@272@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 54 | True | live]
; [else-branch: 54 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 54 | True]
; [exec]
; $old_self := self
(pop) ; 6
; [eval] !$first_public_state
; [then-branch: 55 | False | dead]
; [else-branch: 55 | True | live]
(push) ; 6
; [else-branch: 55 | True]
(pop) ; 6
(pop) ; 5
; [eval] !$succ
; [then-branch: 56 | False | dead]
; [else-branch: 56 | True | live]
(push) ; 5
; [else-branch: 56 | True]
(pop) ; 5
(pop) ; 4
; [eval] !$first_public_state
; [then-branch: 57 | False | dead]
; [else-branch: 57 | True | live]
(push) ; 4
; [else-branch: 57 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 39 | $out_of_gas@271@01]
(assert $out_of_gas@271@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$changeOwner ----------
(declare-const l$_address@330@01 Int)
(declare-const $succ@331@01 Bool)
(declare-const l$_address@332@01 Int)
(declare-const $succ@333@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@334@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@335@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@336@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@337@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@338@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@339@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@340@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@341@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@342@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@343@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@344@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@345@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@346@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@347@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@348@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@349@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@350@01 $Snap)
(assert (= $t@350@01 ($Snap.combine ($Snap.first $t@350@01) ($Snap.second $t@350@01))))
(assert (= ($Snap.first $t@350@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@338@01 0))))
(assert (= ($Snap.second $t@350@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@338@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@351@01 $Snap)
(assert (= $t@351@01 ($Snap.combine ($Snap.first $t@351@01) ($Snap.second $t@351@01))))
(assert (= ($Snap.first $t@351@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@338@01 1))))
(assert (= ($Snap.second $t@351@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@338@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@352@01 $Snap)
(assert (= $t@352@01 ($Snap.combine ($Snap.first $t@352@01) ($Snap.second $t@352@01))))
(assert (= ($Snap.first $t@352@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@338@01 3))))
(assert (= ($Snap.second $t@352@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@338@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
(declare-const $t@353@01 $Snap)
(assert (= $t@353@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 4)): Seq[Int])
; [eval] $struct_loc(self, 4)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@338@01 4))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
(declare-const $t@354@01 $Snap)
(assert (= $t@354@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 5)): Seq[Int])
; [eval] $struct_loc(self, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@338@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@355@01 $Snap)
(assert (= $t@355@01 ($Snap.combine ($Snap.first $t@355@01) ($Snap.second $t@355@01))))
(assert (= ($Snap.first $t@355@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@338@01 6))))
(assert (= ($Snap.second $t@355@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@338@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@356@01 $Snap)
(assert (= $t@356@01 ($Snap.combine ($Snap.first $t@356@01) ($Snap.second $t@356@01))))
(assert (= ($Snap.first $t@356@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@338@01 7))))
(assert (= ($Snap.second $t@356@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@338@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@357@01 $Snap)
(assert (= $t@357@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@358@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 58 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@338@01, 8)), $q3@358@01)) | live]
; [else-branch: 58 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@338@01, 8)), $q3@358@01) | live]
(push) ; 5
; [then-branch: 58 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@338@01, 8)), $q3@358@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 8)) $q3@358@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 58 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@338@01, 8)), $q3@358@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 8)) $q3@358@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 8)) $q3@358@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 8)) $q3@358@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@358@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 8)) $q3@358@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 8)) $q3@358@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 8)) $q3@358@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@984@11@984@345-aux|)))
(assert (forall (($q3@358@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 8)) $q3@358@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 8)) $q3@358@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 8)) $q3@358@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@984@11@984@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@359@01 $Snap)
(assert (= $t@359@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@360@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@360@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 8)) $q3@360@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 8)) $q3@360@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@985@11@985@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@361@01 $Snap)
(assert (= $t@361@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@362@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@363@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(push) ; 5
; [then-branch: 59 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@338@01, 9)), $q4@362@01), $q5@363@01)) | live]
; [else-branch: 59 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@338@01, 9)), $q4@362@01), $q5@363@01) | live]
(push) ; 6
; [then-branch: 59 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@338@01, 9)), $q4@362@01), $q5@363@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@338@01 9)) $q4@362@01) $q5@363@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 59 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@338@01, 9)), $q4@362@01), $q5@363@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@338@01 9)) $q4@362@01) $q5@363@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@338@01 9)) $q4@362@01) $q5@363@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@338@01 9)) $q4@362@01) $q5@363@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@363@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@338@01 9)) $q4@362@01) $q5@363@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@338@01 9)) $q4@362@01) $q5@363@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@338@01 9)) $q4@362@01) $q5@363@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@986@131@986@597-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@362@01 Int)) (!
  (forall (($q5@363@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@338@01 9)) $q4@362@01) $q5@363@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@338@01 9)) $q4@362@01) $q5@363@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@338@01 9)) $q4@362@01) $q5@363@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@986@131@986@597-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@338@01 9)) $q4@362@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@986@11@986@598-aux|)))
(assert (forall (($q4@362@01 Int)) (!
  (forall (($q5@363@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@338@01 9)) $q4@362@01) $q5@363@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@338@01 9)) $q4@362@01) $q5@363@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@338@01 9)) $q4@362@01) $q5@363@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@986@131@986@597|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@338@01 9)) $q4@362@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@986@11@986@598|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@364@01 $Snap)
(assert (= $t@364@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@365@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@366@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@365@01 Int)) (!
  (forall (($q5@366@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@338@01 9)) $q4@365@01) $q5@366@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@338@01 9)) $q4@365@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@338@01 9)) $q4@365@01) $q5@366@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@987@131@987@505|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@338@01 9)) $q4@365@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@987@11@987@506|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 10)): Int) &&
;   ($struct_get($struct_loc(self, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@367@01 $Snap)
(assert (= $t@367@01 ($Snap.combine ($Snap.first $t@367@01) ($Snap.second $t@367@01))))
(assert (= ($Snap.first $t@367@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 10)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@338@01 10))))
(assert (= ($Snap.second $t@367@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@338@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 11)): Int) &&
;   ($struct_get($struct_loc(self, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@368@01 $Snap)
(assert (= $t@368@01 ($Snap.combine ($Snap.first $t@368@01) ($Snap.second $t@368@01))))
(assert (= ($Snap.first $t@368@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 11)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@338@01 11))))
(assert (= ($Snap.second $t@368@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@338@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 12)): Int) &&
;   ($struct_get($struct_loc(self, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@369@01 $Snap)
(assert (= $t@369@01 ($Snap.combine ($Snap.first $t@369@01) ($Snap.second $t@369@01))))
(assert (= ($Snap.first $t@369@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@338@01 12))))
(assert (= ($Snap.second $t@369@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@338@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@370@01 $Snap)
(assert (= $t@370@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@371@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(push) ; 4
; [then-branch: 60 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@338@01, 14)), $q6@371@01)) | live]
; [else-branch: 60 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@338@01, 14)), $q6@371@01) | live]
(push) ; 5
; [then-branch: 60 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@338@01, 14)), $q6@371@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 14)) $q6@371@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 60 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@338@01, 14)), $q6@371@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 14)) $q6@371@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 14)) $q6@371@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 14)) $q6@371@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@371@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 14)) $q6@371@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 14)) $q6@371@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 14)) $q6@371@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@991@11@991@348-aux|)))
(assert (forall (($q6@371@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 14)) $q6@371@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 14)) $q6@371@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 14)) $q6@371@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@991@11@991@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $t@372@01 $Snap)
(assert (= $t@372@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $q6@373@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@373@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 14)) $q6@373@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 14)) $q6@373@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@992@11@992@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@374@01 $Snap)
(assert (= $t@374@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@375@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(push) ; 4
; [then-branch: 61 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@338@01, 15)), $q7@375@01)) | live]
; [else-branch: 61 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@338@01, 15)), $q7@375@01) | live]
(push) ; 5
; [then-branch: 61 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@338@01, 15)), $q7@375@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 15)) $q7@375@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 61 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@338@01, 15)), $q7@375@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 15)) $q7@375@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 15)) $q7@375@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 15)) $q7@375@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@375@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 15)) $q7@375@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 15)) $q7@375@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 15)) $q7@375@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@993@11@993@348-aux|)))
(assert (forall (($q7@375@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 15)) $q7@375@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 15)) $q7@375@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 15)) $q7@375@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@993@11@993@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $t@376@01 $Snap)
(assert (= $t@376@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $q7@377@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
; [eval] ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@377@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 15)) $q7@377@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@338@01 15)) $q7@377@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@994@11@994@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@378@01 $Snap)
(assert (= $t@378@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@338@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@379@01 $Snap)
(assert (= $t@379@01 ($Snap.combine ($Snap.first $t@379@01) ($Snap.second $t@379@01))))
(assert (= ($Snap.first $t@379@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@379@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$_address &&
;   l$_address <= 1461501637330902918203684832716283019655932542975
(declare-const $t@380@01 $Snap)
(assert (= $t@380@01 ($Snap.combine ($Snap.first $t@380@01) ($Snap.second $t@380@01))))
(assert (= ($Snap.first $t@380@01) $Snap.unit))
; [eval] 0 <= l$_address
(assert (<= 0 l$_address@332@01))
(assert (= ($Snap.second $t@380@01) $Snap.unit))
; [eval] l$_address <= 1461501637330902918203684832716283019655932542975
(assert (<= l$_address@332@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@381@01 $Snap)
(assert (= $t@381@01 ($Snap.combine ($Snap.first $t@381@01) ($Snap.second $t@381@01))))
(assert (= ($Snap.first $t@381@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@335@01 0))))
(assert (= ($Snap.second $t@381@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@335@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@382@01 $Snap)
(assert (= $t@382@01 ($Snap.combine ($Snap.first $t@382@01) ($Snap.second $t@382@01))))
(assert (= ($Snap.first $t@382@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@335@01 1))))
(assert (= ($Snap.second $t@382@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@335@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@383@01 $Snap)
(assert (= $t@383@01 ($Snap.combine ($Snap.first $t@383@01) ($Snap.second $t@383@01))))
(assert (= ($Snap.first $t@383@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@335@01 2))))
(assert (= ($Snap.second $t@383@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@335@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@384@01 $Snap)
(assert (= $t@384@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@335@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@385@01 $Snap)
(assert (= $t@385@01 ($Snap.combine ($Snap.first $t@385@01) ($Snap.second $t@385@01))))
(assert (= ($Snap.first $t@385@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@335@01 4))))
(assert (= ($Snap.second $t@385@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@335@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@386@01 $Snap)
(assert (= $t@386@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@335@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@387@01 $Snap)
(assert (= $t@387@01 ($Snap.combine ($Snap.first $t@387@01) ($Snap.second $t@387@01))))
(assert (= ($Snap.first $t@387@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))))
(assert (= ($Snap.second $t@387@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@388@01 $Snap)
(assert (= $t@388@01 ($Snap.combine ($Snap.first $t@388@01) ($Snap.second $t@388@01))))
(assert (= ($Snap.first $t@388@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@334@01 1))))
(assert (= ($Snap.second $t@388@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@334@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@389@01 $Snap)
(assert (= $t@389@01 ($Snap.combine ($Snap.first $t@389@01) ($Snap.second $t@389@01))))
(assert (= ($Snap.first $t@389@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@334@01 2))))
(assert (= ($Snap.second $t@389@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@334@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@390@01 $Snap)
(assert (= $t@390@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@334@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@391@01 $Snap)
(assert (= $t@391@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $t@392@01 $Snap)
(assert (= $t@392@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $a@393@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@394@01 $Snap)
(assert (= $t@394@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@338@01 3)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@338@01 3))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 62 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != $struct_get[Int]($struct_loc[Int](self@338@01, 3)) | live]
; [else-branch: 62 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == $struct_get[Int]($struct_loc[Int](self@338@01, 3)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 62 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != $struct_get[Int]($struct_loc[Int](self@338@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@338@01 3)))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 63 | False | dead]
; [else-branch: 63 | True | live]
(push) ; 4
; [else-branch: 63 | True]
(pop) ; 4
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 64 | True | live]
; [else-branch: 64 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 64 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
; [then-branch: 65 | False | dead]
; [else-branch: 65 | True | live]
(push) ; 6
; [else-branch: 65 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@338@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 66 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != $struct_get[Int]($struct_loc[Int](self@338@01, 3)) | live]
; [else-branch: 66 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == $struct_get[Int]($struct_loc[Int](self@338@01, 3)) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 66 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != $struct_get[Int]($struct_loc[Int](self@338@01, 3))]
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
; [then-branch: 67 | False | live]
; [else-branch: 67 | True | live]
(push) ; 8
; [then-branch: 67 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 67 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@395@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 68 | !(0 <= q$a@395@01) | live]
; [else-branch: 68 | 0 <= q$a@395@01 | live]
(push) ; 7
; [then-branch: 68 | !(0 <= q$a@395@01)]
(assert (not (<= 0 q$a@395@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 68 | 0 <= q$a@395@01]
(assert (<= 0 q$a@395@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@395@01) (not (<= 0 q$a@395@01))))
(push) ; 6
; [then-branch: 69 | 0 <= q$a@395@01 && q$a@395@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 69 | !(0 <= q$a@395@01 && q$a@395@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 69 | 0 <= q$a@395@01 && q$a@395@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@395@01)
  (<= q$a@395@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 70 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@395@01) | live]
; [else-branch: 70 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@395@01)) | live]
(push) ; 9
; [then-branch: 70 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@395@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
(pop) ; 9
(push) ; 9
; [else-branch: 70 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@395@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01)))
(push) ; 8
; [then-branch: 71 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@395@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@395@01) | live]
; [else-branch: 71 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@395@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@395@01)) | live]
(push) ; 9
; [then-branch: 71 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@395@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@395@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 10
; [then-branch: 72 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != $struct_get[Int]($struct_loc[Int](self@338@01, 1)) | live]
; [else-branch: 72 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == $struct_get[Int]($struct_loc[Int](self@338@01, 1)) | live]
(push) ; 11
; [then-branch: 72 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != $struct_get[Int]($struct_loc[Int](self@338@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 72 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == $struct_get[Int]($struct_loc[Int](self@338@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@338@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@338@01 1))))))
(pop) ; 9
(push) ; 9
; [else-branch: 71 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@395@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@395@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@338@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 69 | !(0 <= q$a@395@01 && q$a@395@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@395@01)
    (<= q$a@395@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@395@01)
    (<= q$a@395@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@395@01)
    (<= q$a@395@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@395@01)
      (<= q$a@395@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@395@01)
    (<= q$a@395@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@395@01 Int)) (!
  (and
    (or (<= 0 q$a@395@01) (not (<= 0 q$a@395@01)))
    (=>
      (and
        (<= 0 q$a@395@01)
        (<= q$a@395@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@395@01)
        (<= q$a@395@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01)))))
    (or
      (not
        (and
          (<= 0 q$a@395@01)
          (<= q$a@395@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@395@01)
        (<= q$a@395@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1053@17@1053@397-aux|)))
(push) ; 5
(assert (not (forall ((q$a@395@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@395@01)
        (<= q$a@395@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1053@17@1053@397|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@395@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@395@01)
        (<= q$a@395@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@395@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1053@17@1053@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@396@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 73 | !(0 <= q$a@396@01) | live]
; [else-branch: 73 | 0 <= q$a@396@01 | live]
(push) ; 7
; [then-branch: 73 | !(0 <= q$a@396@01)]
(assert (not (<= 0 q$a@396@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 73 | 0 <= q$a@396@01]
(assert (<= 0 q$a@396@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@396@01) (not (<= 0 q$a@396@01))))
(push) ; 6
; [then-branch: 74 | 0 <= q$a@396@01 && q$a@396@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 74 | !(0 <= q$a@396@01 && q$a@396@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 74 | 0 <= q$a@396@01 && q$a@396@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@396@01)
  (<= q$a@396@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 75 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@396@01)) | live]
; [else-branch: 75 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@396@01) | live]
(push) ; 9
; [then-branch: 75 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@396@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 75 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@396@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01))))
(push) ; 8
; [then-branch: 76 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@396@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@396@01)) | live]
; [else-branch: 76 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@396@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@396@01))) | live]
(push) ; 9
; [then-branch: 76 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@396@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@396@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 77 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != q$a@396@01 | live]
; [else-branch: 77 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == q$a@396@01 | live]
(push) ; 11
; [then-branch: 77 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != q$a@396@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@396@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 77 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == q$a@396@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@396@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@396@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@396@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 76 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@396@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@396@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@396@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@396@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 74 | !(0 <= q$a@396@01 && q$a@396@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@396@01)
    (<= q$a@396@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@396@01)
    (<= q$a@396@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@396@01)
    (<= q$a@396@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@396@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@396@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@396@01)
      (<= q$a@396@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@396@01)
    (<= q$a@396@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@396@01 Int)) (!
  (and
    (or (<= 0 q$a@396@01) (not (<= 0 q$a@396@01)))
    (=>
      (and
        (<= 0 q$a@396@01)
        (<= q$a@396@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@396@01)
        (<= q$a@396@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@396@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@396@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01))))))
    (or
      (not
        (and
          (<= 0 q$a@396@01)
          (<= q$a@396@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@396@01)
        (<= q$a@396@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1054@17@1054@361-aux|)))
(push) ; 5
(assert (not (forall ((q$a@396@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@396@01)
        (<= q$a@396@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1054@17@1054@361|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@396@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@396@01)
        (<= q$a@396@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@396@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1054@17@1054@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@397@01 $Snap)
(assert (= $t@397@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@348@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@398@01 $Struct)
(assert (=
  self@398@01
  ($struct_set<$Struct> self@338@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@338@01 11))
    l$havoc@348@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 4
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 62 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == $struct_get[Int]($struct_loc[Int](self@338@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@338@01 3))))
(pop) ; 3
; [eval] !!(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int))
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@338@01 3))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@338@01 3)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 78 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == $struct_get[Int]($struct_loc[Int](self@338@01, 3)) | live]
; [else-branch: 78 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != $struct_get[Int]($struct_loc[Int](self@338@01, 3)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 78 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == $struct_get[Int]($struct_loc[Int](self@338@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@338@01 3))))
; [exec]
; self := ($struct_set(self, 3, l$_address): $Struct)
; [eval] ($struct_set(self, 3, l$_address): $Struct)
(declare-const self@399@01 $Struct)
(assert (= self@399@01 ($struct_set<$Struct> self@338@01 3 l$_address@332@01)))
; [exec]
; label return
(push) ; 4
(set-option :timeout 10)
(assert (not (not $out_of_gas@347@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not $out_of_gas@347@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 79 | $out_of_gas@347@01 | live]
; [else-branch: 79 | !($out_of_gas@347@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 79 | $out_of_gas@347@01]
(assert $out_of_gas@347@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 80 | False | dead]
; [else-branch: 80 | True | live]
(push) ; 5
; [else-branch: 80 | True]
(pop) ; 5
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 81 | True | live]
; [else-branch: 81 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 81 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 6
; [then-branch: 82 | False | dead]
; [else-branch: 82 | True | live]
(push) ; 7
; [else-branch: 82 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
; [then-branch: 83 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != $struct_get[Int]($struct_loc[Int](self@338@01, 3)) | dead]
; [else-branch: 83 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == $struct_get[Int]($struct_loc[Int](self@338@01, 3)) | live]
(push) ; 7
; [else-branch: 83 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == $struct_get[Int]($struct_loc[Int](self@338@01, 3))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@400@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 84 | !(0 <= q$a@400@01) | live]
; [else-branch: 84 | 0 <= q$a@400@01 | live]
(push) ; 8
; [then-branch: 84 | !(0 <= q$a@400@01)]
(assert (not (<= 0 q$a@400@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 84 | 0 <= q$a@400@01]
(assert (<= 0 q$a@400@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@400@01) (not (<= 0 q$a@400@01))))
(push) ; 7
; [then-branch: 85 | 0 <= q$a@400@01 && q$a@400@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 85 | !(0 <= q$a@400@01 && q$a@400@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 85 | 0 <= q$a@400@01 && q$a@400@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@400@01)
  (<= q$a@400@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 86 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@400@01) | live]
; [else-branch: 86 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@400@01)) | live]
(push) ; 10
; [then-branch: 86 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@400@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
(pop) ; 10
(push) ; 10
; [else-branch: 86 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@400@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01)))
(push) ; 9
; [then-branch: 87 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@400@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@400@01) | live]
; [else-branch: 87 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@400@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@400@01)) | live]
(push) ; 10
; [then-branch: 87 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@400@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@400@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 11
; [then-branch: 88 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != $struct_get[Int]($struct_loc[Int](self@338@01, 1)) | live]
; [else-branch: 88 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == $struct_get[Int]($struct_loc[Int](self@338@01, 1)) | live]
(push) ; 12
; [then-branch: 88 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != $struct_get[Int]($struct_loc[Int](self@338@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))))
(pop) ; 12
(push) ; 12
; [else-branch: 88 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == $struct_get[Int]($struct_loc[Int](self@338@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@338@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@338@01 1))))))
(pop) ; 10
(push) ; 10
; [else-branch: 87 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@400@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@400@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@338@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 85 | !(0 <= q$a@400@01 && q$a@400@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@400@01)
    (<= q$a@400@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@400@01)
    (<= q$a@400@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@400@01)
    (<= q$a@400@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@400@01)
      (<= q$a@400@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@400@01)
    (<= q$a@400@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@400@01 Int)) (!
  (and
    (or (<= 0 q$a@400@01) (not (<= 0 q$a@400@01)))
    (=>
      (and
        (<= 0 q$a@400@01)
        (<= q$a@400@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@400@01)
        (<= q$a@400@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01)))))
    (or
      (not
        (and
          (<= 0 q$a@400@01)
          (<= q$a@400@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@400@01)
        (<= q$a@400@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1053@17@1053@397-aux|)))
(push) ; 6
(assert (not (forall ((q$a@400@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@400@01)
        (<= q$a@400@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1053@17@1053@397|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@400@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@400@01)
        (<= q$a@400@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@400@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1053@17@1053@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@401@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 89 | !(0 <= q$a@401@01) | live]
; [else-branch: 89 | 0 <= q$a@401@01 | live]
(push) ; 8
; [then-branch: 89 | !(0 <= q$a@401@01)]
(assert (not (<= 0 q$a@401@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 89 | 0 <= q$a@401@01]
(assert (<= 0 q$a@401@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@401@01) (not (<= 0 q$a@401@01))))
(push) ; 7
; [then-branch: 90 | 0 <= q$a@401@01 && q$a@401@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 90 | !(0 <= q$a@401@01 && q$a@401@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 90 | 0 <= q$a@401@01 && q$a@401@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@401@01)
  (<= q$a@401@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 91 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@401@01)) | live]
; [else-branch: 91 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@401@01) | live]
(push) ; 10
; [then-branch: 91 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@401@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 91 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@401@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01))))
(push) ; 9
; [then-branch: 92 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@401@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@401@01)) | live]
; [else-branch: 92 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@401@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@401@01))) | live]
(push) ; 10
; [then-branch: 92 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@401@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@401@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 93 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != q$a@401@01 | live]
; [else-branch: 93 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == q$a@401@01 | live]
(push) ; 12
; [then-branch: 93 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != q$a@401@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@401@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 93 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == q$a@401@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@401@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@401@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@401@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 92 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@401@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@401@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@401@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@401@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 90 | !(0 <= q$a@401@01 && q$a@401@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@401@01)
    (<= q$a@401@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@401@01)
    (<= q$a@401@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@401@01)
    (<= q$a@401@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@401@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@401@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@401@01)
      (<= q$a@401@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@401@01)
    (<= q$a@401@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@401@01 Int)) (!
  (and
    (or (<= 0 q$a@401@01) (not (<= 0 q$a@401@01)))
    (=>
      (and
        (<= 0 q$a@401@01)
        (<= q$a@401@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@401@01)
        (<= q$a@401@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@401@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@401@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01))))))
    (or
      (not
        (and
          (<= 0 q$a@401@01)
          (<= q$a@401@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@401@01)
        (<= q$a@401@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1054@17@1054@361-aux|)))
(push) ; 6
(assert (not (forall ((q$a@401@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@401@01)
        (<= q$a@401@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1054@17@1054@361|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@401@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@401@01)
        (<= q$a@401@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@401@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1054@17@1054@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@402@01 $Snap)
(assert (= $t@402@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@348@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@403@01 $Struct)
(assert (=
  self@403@01
  ($struct_set<$Struct> self@338@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@338@01 11))
    l$havoc@348@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 5
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 79 | !($out_of_gas@347@01)]
(assert (not $out_of_gas@347@01))
(pop) ; 4
; [eval] !$out_of_gas
(push) ; 4
(set-option :timeout 10)
(assert (not $out_of_gas@347@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not $out_of_gas@347@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 94 | !($out_of_gas@347@01) | live]
; [else-branch: 94 | $out_of_gas@347@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 94 | !($out_of_gas@347@01)]
(assert (not $out_of_gas@347@01))
; [exec]
; label end
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 95 | True | live]
; [else-branch: 95 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 95 | True]
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@399@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@338@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@399@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@338@01 3))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 96 | $struct_get[Int]($struct_loc[Int](self@399@01, 3)) != $struct_get[Int]($struct_loc[Int](self@338@01, 3)) | live]
; [else-branch: 96 | $struct_get[Int]($struct_loc[Int](self@399@01, 3)) == $struct_get[Int]($struct_loc[Int](self@338@01, 3)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 96 | $struct_get[Int]($struct_loc[Int](self@399@01, 3)) != $struct_get[Int]($struct_loc[Int](self@338@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@399@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@338@01 3)))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(pop) ; 7
(push) ; 7
; [else-branch: 96 | $struct_get[Int]($struct_loc[Int](self@399@01, 3)) == $struct_get[Int]($struct_loc[Int](self@338@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@399@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@338@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@399@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@338@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@399@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@338@01 3))))))
(push) ; 6
(assert (not (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@399@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@338@01 3))))
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@338@01 3))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@399@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@338@01 3))))
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@338@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@399@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@399@01 3))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 97 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != $struct_get[Int]($struct_loc[Int](self@399@01, 3)) | live]
; [else-branch: 97 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == $struct_get[Int]($struct_loc[Int](self@399@01, 3)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 97 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != $struct_get[Int]($struct_loc[Int](self@399@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@399@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 8
; [then-branch: 98 | $struct_get[Int]($struct_loc[Int](self@399@01, 1)) != $struct_get[Int]($struct_loc[Int](self@338@01, 1)) | live]
; [else-branch: 98 | $struct_get[Int]($struct_loc[Int](self@399@01, 1)) == $struct_get[Int]($struct_loc[Int](self@338@01, 1)) | live]
(push) ; 9
; [then-branch: 98 | $struct_get[Int]($struct_loc[Int](self@399@01, 1)) != $struct_get[Int]($struct_loc[Int](self@338@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@399@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))))
(pop) ; 9
(push) ; 9
; [else-branch: 98 | $struct_get[Int]($struct_loc[Int](self@399@01, 1)) == $struct_get[Int]($struct_loc[Int](self@338@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@399@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@338@01 1))))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@399@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@399@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@338@01 1))))))
(pop) ; 7
(push) ; 7
; [else-branch: 97 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == $struct_get[Int]($struct_loc[Int](self@399@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@399@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@399@01 3))))
  (and
    (not
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@399@01 3))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> self@399@01 1))
        ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> self@399@01 1))
          ($struct_get<Int> ($struct_loc<Int> self@338@01 1))))))))
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@399@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@399@01 3))))))
(push) ; 6
(assert (not (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@399@01 3))))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@399@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@399@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@338@01 0)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@399@01 3))))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@399@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@399@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@338@01 0))))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@404@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 99 | !(0 <= q$a@404@01) | live]
; [else-branch: 99 | 0 <= q$a@404@01 | live]
(push) ; 8
; [then-branch: 99 | !(0 <= q$a@404@01)]
(assert (not (<= 0 q$a@404@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 99 | 0 <= q$a@404@01]
(assert (<= 0 q$a@404@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@404@01) (not (<= 0 q$a@404@01))))
(push) ; 7
; [then-branch: 100 | 0 <= q$a@404@01 && q$a@404@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 100 | !(0 <= q$a@404@01 && q$a@404@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 100 | 0 <= q$a@404@01 && q$a@404@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@404@01)
  (<= q$a@404@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 101 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@404@01) | live]
; [else-branch: 101 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@404@01)) | live]
(push) ; 10
; [then-branch: 101 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@404@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
(pop) ; 10
(push) ; 10
; [else-branch: 101 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@404@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01)))
(push) ; 9
; [then-branch: 102 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@404@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@399@01, 2)), q$a@404@01) | live]
; [else-branch: 102 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@404@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@399@01, 2)), q$a@404@01)) | live]
(push) ; 10
; [then-branch: 102 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@404@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@399@01, 2)), q$a@404@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 11
; [then-branch: 103 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != $struct_get[Int]($struct_loc[Int](self@399@01, 1)) | live]
; [else-branch: 103 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == $struct_get[Int]($struct_loc[Int](self@399@01, 1)) | live]
(push) ; 12
; [then-branch: 103 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != $struct_get[Int]($struct_loc[Int](self@399@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@399@01 1)))))
(pop) ; 12
(push) ; 12
; [else-branch: 103 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == $struct_get[Int]($struct_loc[Int](self@399@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@399@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@399@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@399@01 1))))))
(pop) ; 10
(push) ; 10
; [else-branch: 102 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@404@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@399@01, 2)), q$a@404@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@399@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@399@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 100 | !(0 <= q$a@404@01 && q$a@404@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@404@01)
    (<= q$a@404@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@404@01)
    (<= q$a@404@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@404@01)
    (<= q$a@404@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@399@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@399@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@404@01)
      (<= q$a@404@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@404@01)
    (<= q$a@404@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@404@01 Int)) (!
  (and
    (or (<= 0 q$a@404@01) (not (<= 0 q$a@404@01)))
    (=>
      (and
        (<= 0 q$a@404@01)
        (<= q$a@404@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@404@01)
        (<= q$a@404@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@399@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@399@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01)))))
    (or
      (not
        (and
          (<= 0 q$a@404@01)
          (<= q$a@404@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@404@01)
        (<= q$a@404@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1048@13@1048@393-aux|)))
(assert (forall ((q$a@404@01 Int)) (!
  (and
    (or (<= 0 q$a@404@01) (not (<= 0 q$a@404@01)))
    (=>
      (and
        (<= 0 q$a@404@01)
        (<= q$a@404@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@404@01)
        (<= q$a@404@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@399@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@399@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01)))))
    (or
      (not
        (and
          (<= 0 q$a@404@01)
          (<= q$a@404@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@404@01)
        (<= q$a@404@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1048@13@1048@393-aux|)))
(push) ; 6
(assert (not (forall ((q$a@404@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@404@01)
        (<= q$a@404@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1048@13@1048@393|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@404@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@404@01)
        (<= q$a@404@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@404@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@404@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1048@13@1048@393|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@405@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 104 | !(0 <= q$a@405@01) | live]
; [else-branch: 104 | 0 <= q$a@405@01 | live]
(push) ; 8
; [then-branch: 104 | !(0 <= q$a@405@01)]
(assert (not (<= 0 q$a@405@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 104 | 0 <= q$a@405@01]
(assert (<= 0 q$a@405@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@405@01) (not (<= 0 q$a@405@01))))
(push) ; 7
; [then-branch: 105 | 0 <= q$a@405@01 && q$a@405@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 105 | !(0 <= q$a@405@01 && q$a@405@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 105 | 0 <= q$a@405@01 && q$a@405@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@405@01)
  (<= q$a@405@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 106 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@405@01)) | live]
; [else-branch: 106 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@405@01) | live]
(push) ; 10
; [then-branch: 106 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@405@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 106 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@405@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01))))
(push) ; 9
; [then-branch: 107 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@405@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@399@01, 2)), q$a@405@01)) | live]
; [else-branch: 107 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@405@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@399@01, 2)), q$a@405@01))) | live]
(push) ; 10
; [then-branch: 107 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@405@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@399@01, 2)), q$a@405@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 108 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != q$a@405@01 | live]
; [else-branch: 108 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == q$a@405@01 | live]
(push) ; 12
; [then-branch: 108 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != q$a@405@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@405@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 108 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) == q$a@405@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@405@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@405@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@405@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 107 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@338@01, 2)), q$a@405@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@399@01, 2)), q$a@405@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@405@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@405@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 105 | !(0 <= q$a@405@01 && q$a@405@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@405@01)
    (<= q$a@405@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@405@01)
    (<= q$a@405@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@405@01)
    (<= q$a@405@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@405@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@405@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@405@01)
      (<= q$a@405@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@405@01)
    (<= q$a@405@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@405@01 Int)) (!
  (and
    (or (<= 0 q$a@405@01) (not (<= 0 q$a@405@01)))
    (=>
      (and
        (<= 0 q$a@405@01)
        (<= q$a@405@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@405@01)
        (<= q$a@405@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@405@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@405@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01))))))
    (or
      (not
        (and
          (<= 0 q$a@405@01)
          (<= q$a@405@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@405@01)
        (<= q$a@405@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1049@13@1049@357-aux|)))
(assert (forall ((q$a@405@01 Int)) (!
  (and
    (or (<= 0 q$a@405@01) (not (<= 0 q$a@405@01)))
    (=>
      (and
        (<= 0 q$a@405@01)
        (<= q$a@405@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@405@01)
        (<= q$a@405@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@405@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@334@01 0)) q$a@405@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01))))))
    (or
      (not
        (and
          (<= 0 q$a@405@01)
          (<= q$a@405@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@405@01)
        (<= q$a@405@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1049@13@1049@357-aux|)))
(push) ; 6
(assert (not (forall ((q$a@405@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@405@01)
        (<= q$a@405@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1049@13@1049@357|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@405@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@405@01)
        (<= q$a@405@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@338@01 2)) q$a@405@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@399@01 2)) q$a@405@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1049@13@1049@357|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@406@01 $Snap)
(assert (= $t@406@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@348@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@407@01 $Struct)
(assert (=
  self@407@01
  ($struct_set<$Struct> self@399@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@399@01 11))
    l$havoc@348@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 5
; [eval] !$succ
; [then-branch: 109 | False | dead]
; [else-branch: 109 | True | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 109 | True]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 94 | $out_of_gas@347@01]
(assert $out_of_gas@347@01)
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 78 | $struct_get[Int]($struct_loc[Int](msg@334@01, 0)) != $struct_get[Int]($struct_loc[Int](self@338@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@334@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@338@01 3)))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$burn ----------
(declare-const l$_seller@408@01 Int)
(declare-const l$_amount@409@01 $Int)
(declare-const $succ@410@01 Bool)
(declare-const l$_seller@411@01 Int)
(declare-const l$_amount@412@01 $Int)
(declare-const $succ@413@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@414@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@415@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@416@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@417@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@418@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@419@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@420@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@421@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@422@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@423@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@424@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@425@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@426@01 Bool)
; [exec]
; var l$send_fail: Bool
(declare-const l$send_fail@427@01 Bool)
; [exec]
; var l$raw_ret: Int
(declare-const l$raw_ret@428@01 Int)
; [exec]
; var l$send_fail$1: Bool
(declare-const l$send_fail$1@429@01 Bool)
; [exec]
; var l$raw_ret$1: Int
(declare-const l$raw_ret$1@430@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@431@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@432@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@433@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@434@01 $Snap)
(assert (= $t@434@01 ($Snap.combine ($Snap.first $t@434@01) ($Snap.second $t@434@01))))
(assert (= ($Snap.first $t@434@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@418@01 0))))
(assert (= ($Snap.second $t@434@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@418@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@435@01 $Snap)
(assert (= $t@435@01 ($Snap.combine ($Snap.first $t@435@01) ($Snap.second $t@435@01))))
(assert (= ($Snap.first $t@435@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))
(assert (= ($Snap.second $t@435@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@418@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@436@01 $Snap)
(assert (= $t@436@01 ($Snap.combine ($Snap.first $t@436@01) ($Snap.second $t@436@01))))
(assert (= ($Snap.first $t@436@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))
(assert (= ($Snap.second $t@436@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
(declare-const $t@437@01 $Snap)
(assert (= $t@437@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 4)): Seq[Int])
; [eval] $struct_loc(self, 4)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@418@01 4))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
(declare-const $t@438@01 $Snap)
(assert (= $t@438@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 5)): Seq[Int])
; [eval] $struct_loc(self, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@418@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@439@01 $Snap)
(assert (= $t@439@01 ($Snap.combine ($Snap.first $t@439@01) ($Snap.second $t@439@01))))
(assert (= ($Snap.first $t@439@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@418@01 6))))
(assert (= ($Snap.second $t@439@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@418@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@440@01 $Snap)
(assert (= $t@440@01 ($Snap.combine ($Snap.first $t@440@01) ($Snap.second $t@440@01))))
(assert (= ($Snap.first $t@440@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@418@01 7))))
(assert (= ($Snap.second $t@440@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@418@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@441@01 $Snap)
(assert (= $t@441@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@442@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 110 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), $q3@442@01)) | live]
; [else-branch: 110 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), $q3@442@01) | live]
(push) ; 5
; [then-branch: 110 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), $q3@442@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) $q3@442@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 110 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), $q3@442@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) $q3@442@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) $q3@442@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) $q3@442@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@442@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) $q3@442@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) $q3@442@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) $q3@442@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1092@11@1092@345-aux|)))
(assert (forall (($q3@442@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) $q3@442@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) $q3@442@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) $q3@442@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1092@11@1092@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@443@01 $Snap)
(assert (= $t@443@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@444@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@444@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) $q3@444@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) $q3@444@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1093@11@1093@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@445@01 $Snap)
(assert (= $t@445@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@446@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@447@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(push) ; 5
; [then-branch: 111 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@418@01, 9)), $q4@446@01), $q5@447@01)) | live]
; [else-branch: 111 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@418@01, 9)), $q4@446@01), $q5@447@01) | live]
(push) ; 6
; [then-branch: 111 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@418@01, 9)), $q4@446@01), $q5@447@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@418@01 9)) $q4@446@01) $q5@447@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 111 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@418@01, 9)), $q4@446@01), $q5@447@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@418@01 9)) $q4@446@01) $q5@447@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@418@01 9)) $q4@446@01) $q5@447@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@418@01 9)) $q4@446@01) $q5@447@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@447@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@418@01 9)) $q4@446@01) $q5@447@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@418@01 9)) $q4@446@01) $q5@447@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@418@01 9)) $q4@446@01) $q5@447@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1094@131@1094@597-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@446@01 Int)) (!
  (forall (($q5@447@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@418@01 9)) $q4@446@01) $q5@447@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@418@01 9)) $q4@446@01) $q5@447@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@418@01 9)) $q4@446@01) $q5@447@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1094@131@1094@597-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@418@01 9)) $q4@446@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1094@11@1094@598-aux|)))
(assert (forall (($q4@446@01 Int)) (!
  (forall (($q5@447@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@418@01 9)) $q4@446@01) $q5@447@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@418@01 9)) $q4@446@01) $q5@447@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@418@01 9)) $q4@446@01) $q5@447@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1094@131@1094@597|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@418@01 9)) $q4@446@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1094@11@1094@598|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@448@01 $Snap)
(assert (= $t@448@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@449@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@450@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@449@01 Int)) (!
  (forall (($q5@450@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@418@01 9)) $q4@449@01) $q5@450@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@418@01 9)) $q4@449@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@418@01 9)) $q4@449@01) $q5@450@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1095@131@1095@505|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@418@01 9)) $q4@449@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1095@11@1095@506|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 10)): Int) &&
;   ($struct_get($struct_loc(self, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@451@01 $Snap)
(assert (= $t@451@01 ($Snap.combine ($Snap.first $t@451@01) ($Snap.second $t@451@01))))
(assert (= ($Snap.first $t@451@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 10)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@418@01 10))))
(assert (= ($Snap.second $t@451@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@418@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 11)): Int) &&
;   ($struct_get($struct_loc(self, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@452@01 $Snap)
(assert (= $t@452@01 ($Snap.combine ($Snap.first $t@452@01) ($Snap.second $t@452@01))))
(assert (= ($Snap.first $t@452@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 11)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@418@01 11))))
(assert (= ($Snap.second $t@452@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@418@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 12)): Int) &&
;   ($struct_get($struct_loc(self, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@453@01 $Snap)
(assert (= $t@453@01 ($Snap.combine ($Snap.first $t@453@01) ($Snap.second $t@453@01))))
(assert (= ($Snap.first $t@453@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@418@01 12))))
(assert (= ($Snap.second $t@453@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@418@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@454@01 $Snap)
(assert (= $t@454@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@455@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(push) ; 4
; [then-branch: 112 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 14)), $q6@455@01)) | live]
; [else-branch: 112 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 14)), $q6@455@01) | live]
(push) ; 5
; [then-branch: 112 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 14)), $q6@455@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 14)) $q6@455@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 112 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 14)), $q6@455@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 14)) $q6@455@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 14)) $q6@455@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 14)) $q6@455@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@455@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 14)) $q6@455@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 14)) $q6@455@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 14)) $q6@455@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1099@11@1099@348-aux|)))
(assert (forall (($q6@455@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 14)) $q6@455@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 14)) $q6@455@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 14)) $q6@455@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1099@11@1099@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $t@456@01 $Snap)
(assert (= $t@456@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $q6@457@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@457@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 14)) $q6@457@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 14)) $q6@457@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1100@11@1100@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@458@01 $Snap)
(assert (= $t@458@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@459@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(push) ; 4
; [then-branch: 113 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 15)), $q7@459@01)) | live]
; [else-branch: 113 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 15)), $q7@459@01) | live]
(push) ; 5
; [then-branch: 113 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 15)), $q7@459@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 15)) $q7@459@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 113 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 15)), $q7@459@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 15)) $q7@459@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 15)) $q7@459@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 15)) $q7@459@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@459@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 15)) $q7@459@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 15)) $q7@459@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 15)) $q7@459@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1101@11@1101@348-aux|)))
(assert (forall (($q7@459@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 15)) $q7@459@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 15)) $q7@459@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 15)) $q7@459@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1101@11@1101@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $t@460@01 $Snap)
(assert (= $t@460@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $q7@461@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
; [eval] ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@461@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 15)) $q7@461@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 15)) $q7@461@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1102@11@1102@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@462@01 $Snap)
(assert (= $t@462@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@418@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@463@01 $Snap)
(assert (= $t@463@01 ($Snap.combine ($Snap.first $t@463@01) ($Snap.second $t@463@01))))
(assert (= ($Snap.first $t@463@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@463@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$_seller &&
;   l$_seller <= 1461501637330902918203684832716283019655932542975
(declare-const $t@464@01 $Snap)
(assert (= $t@464@01 ($Snap.combine ($Snap.first $t@464@01) ($Snap.second $t@464@01))))
(assert (= ($Snap.first $t@464@01) $Snap.unit))
; [eval] 0 <= l$_seller
(assert (<= 0 l$_seller@411@01))
(assert (= ($Snap.second $t@464@01) $Snap.unit))
; [eval] l$_seller <= 1461501637330902918203684832716283019655932542975
(assert (<= l$_seller@411@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $unwrap(l$_amount) &&
;   $unwrap(l$_amount) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@465@01 $Snap)
(assert (= $t@465@01 ($Snap.combine ($Snap.first $t@465@01) ($Snap.second $t@465@01))))
(assert (= ($Snap.first $t@465@01) $Snap.unit))
; [eval] 0 <= $unwrap(l$_amount)
; [eval] $unwrap(l$_amount)
(assert (<= 0 ($unwrap<Int> l$_amount@412@01)))
(assert (= ($Snap.second $t@465@01) $Snap.unit))
; [eval] $unwrap(l$_amount) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$_amount)
(assert (<=
  ($unwrap<Int> l$_amount@412@01)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@466@01 $Snap)
(assert (= $t@466@01 ($Snap.combine ($Snap.first $t@466@01) ($Snap.second $t@466@01))))
(assert (= ($Snap.first $t@466@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@415@01 0))))
(assert (= ($Snap.second $t@466@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@415@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@467@01 $Snap)
(assert (= $t@467@01 ($Snap.combine ($Snap.first $t@467@01) ($Snap.second $t@467@01))))
(assert (= ($Snap.first $t@467@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@415@01 1))))
(assert (= ($Snap.second $t@467@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@415@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@468@01 $Snap)
(assert (= $t@468@01 ($Snap.combine ($Snap.first $t@468@01) ($Snap.second $t@468@01))))
(assert (= ($Snap.first $t@468@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@415@01 2))))
(assert (= ($Snap.second $t@468@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@415@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@469@01 $Snap)
(assert (= $t@469@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@415@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@470@01 $Snap)
(assert (= $t@470@01 ($Snap.combine ($Snap.first $t@470@01) ($Snap.second $t@470@01))))
(assert (= ($Snap.first $t@470@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@415@01 4))))
(assert (= ($Snap.second $t@470@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@415@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@471@01 $Snap)
(assert (= $t@471@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@415@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@472@01 $Snap)
(assert (= $t@472@01 ($Snap.combine ($Snap.first $t@472@01) ($Snap.second $t@472@01))))
(assert (= ($Snap.first $t@472@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))))
(assert (= ($Snap.second $t@472@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@473@01 $Snap)
(assert (= $t@473@01 ($Snap.combine ($Snap.first $t@473@01) ($Snap.second $t@473@01))))
(assert (= ($Snap.first $t@473@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@414@01 1))))
(assert (= ($Snap.second $t@473@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@474@01 $Snap)
(assert (= $t@474@01 ($Snap.combine ($Snap.first $t@474@01) ($Snap.second $t@474@01))))
(assert (= ($Snap.first $t@474@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@414@01 2))))
(assert (= ($Snap.second $t@474@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@475@01 $Snap)
(assert (= $t@475@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@476@01 $Snap)
(assert (= $t@476@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $t@477@01 $Snap)
(assert (= $t@477@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $a@478@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@479@01 $Snap)
(assert (= $t@479@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool) == true)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool) == true
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)))
  true)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)))
    true))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 114 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), $struct_get[Int]($struct_loc[Int](msg@414@01, 0))) != True | live]
; [else-branch: 114 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), $struct_get[Int]($struct_loc[Int](msg@414@01, 0))) == True | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 114 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), $struct_get[Int]($struct_loc[Int](msg@414@01, 0))) != True]
(assert (not
  (=
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)))
    true)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 115 | False | dead]
; [else-branch: 115 | True | live]
(push) ; 4
; [else-branch: 115 | True]
(pop) ; 4
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 116 | True | live]
; [else-branch: 116 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 116 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
; [then-branch: 117 | False | dead]
; [else-branch: 117 | True | live]
(push) ; 6
; [else-branch: 117 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 118 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 3)) | live]
; [else-branch: 118 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 3)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 118 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
; [then-branch: 119 | False | live]
; [else-branch: 119 | True | live]
(push) ; 8
; [then-branch: 119 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 119 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 118 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@480@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 120 | !(0 <= q$a@480@01) | live]
; [else-branch: 120 | 0 <= q$a@480@01 | live]
(push) ; 7
; [then-branch: 120 | !(0 <= q$a@480@01)]
(assert (not (<= 0 q$a@480@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 120 | 0 <= q$a@480@01]
(assert (<= 0 q$a@480@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@480@01) (not (<= 0 q$a@480@01))))
(push) ; 6
; [then-branch: 121 | 0 <= q$a@480@01 && q$a@480@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 121 | !(0 <= q$a@480@01 && q$a@480@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 121 | 0 <= q$a@480@01 && q$a@480@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@480@01)
  (<= q$a@480@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 122 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@480@01) | live]
; [else-branch: 122 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@480@01)) | live]
(push) ; 9
; [then-branch: 122 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@480@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
(pop) ; 9
(push) ; 9
; [else-branch: 122 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@480@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01)))
(push) ; 8
; [then-branch: 123 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@480@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@480@01) | live]
; [else-branch: 123 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@480@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@480@01)) | live]
(push) ; 9
; [then-branch: 123 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@480@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@480@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 10
; [then-branch: 124 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 1)) | live]
; [else-branch: 124 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 1)) | live]
(push) ; 11
; [then-branch: 124 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 124 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
(declare-const sm@481@01 $PSF<e$OpenMinter>)
(declare-const s@482@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@483@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@483@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@483@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef1|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@481@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@483@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef2|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@481@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@480@01)) ($SortWrappers.IntTo$Snap q$a@480@01)))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@483@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@483@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef1|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@481@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@483@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef2|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@481@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@480@01)) ($SortWrappers.IntTo$Snap q$a@480@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))))
(pop) ; 9
(push) ; 9
; [else-branch: 123 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@480@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@480@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@483@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@483@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef1|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@481@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@483@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef2|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@481@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@480@01)) ($SortWrappers.IntTo$Snap q$a@480@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 121 | !(0 <= q$a@480@01 && q$a@480@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@480@01)
    (<= q$a@480@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@483@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@483@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef1|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@481@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@483@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef2|)))
(assert (=>
  (and
    (<= 0 q$a@480@01)
    (<= q$a@480@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@480@01)
    (<= q$a@480@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@481@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@480@01)) ($SortWrappers.IntTo$Snap q$a@480@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@480@01)
      (<= q$a@480@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@480@01)
    (<= q$a@480@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@483@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@483@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef1|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@481@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@483@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef2|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@480@01 Int)) (!
  (and
    (or (<= 0 q$a@480@01) (not (<= 0 q$a@480@01)))
    (=>
      (and
        (<= 0 q$a@480@01)
        (<= q$a@480@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@480@01)
        (<= q$a@480@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@481@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@480@01)) ($SortWrappers.IntTo$Snap q$a@480@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01)))))
    (or
      (not
        (and
          (<= 0 q$a@480@01)
          (<= q$a@480@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@480@01)
        (<= q$a@480@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397-aux|)))
(push) ; 5
(assert (not (forall ((q$a@480@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@480@01)
        (<= q$a@480@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@483@01  $PPM) ($SortWrappers.IntTo$Snap q$a@480@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@480@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@480@01)
        (<= q$a@480@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@483@01  $PPM) ($SortWrappers.IntTo$Snap q$a@480@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@480@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@484@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 125 | !(0 <= q$a@484@01) | live]
; [else-branch: 125 | 0 <= q$a@484@01 | live]
(push) ; 7
; [then-branch: 125 | !(0 <= q$a@484@01)]
(assert (not (<= 0 q$a@484@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 125 | 0 <= q$a@484@01]
(assert (<= 0 q$a@484@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@484@01) (not (<= 0 q$a@484@01))))
(push) ; 6
; [then-branch: 126 | 0 <= q$a@484@01 && q$a@484@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 126 | !(0 <= q$a@484@01 && q$a@484@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 126 | 0 <= q$a@484@01 && q$a@484@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@484@01)
  (<= q$a@484@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 127 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@484@01)) | live]
; [else-branch: 127 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@484@01) | live]
(push) ; 9
; [then-branch: 127 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@484@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 127 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@484@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01))))
(push) ; 8
; [then-branch: 128 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@484@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@484@01)) | live]
; [else-branch: 128 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@484@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@484@01))) | live]
(push) ; 9
; [then-branch: 128 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@484@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@484@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 129 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != q$a@484@01 | live]
; [else-branch: 129 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == q$a@484@01 | live]
(push) ; 11
; [then-branch: 129 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != q$a@484@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@484@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 129 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == q$a@484@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@484@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
(declare-const sm@485@01 $PSF<e$CloseMinter>)
(declare-const s@486@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@487@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@487@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@487@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef4|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@485@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@487@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef5|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@485@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@484@01)) ($SortWrappers.IntTo$Snap q$a@484@01)))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@487@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@487@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef4|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@485@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@487@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef5|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@484@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@484@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@485@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@484@01)) ($SortWrappers.IntTo$Snap q$a@484@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@484@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@484@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 128 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@484@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@484@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@487@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@487@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef4|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@485@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@487@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef5|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@484@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@484@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@485@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@484@01)) ($SortWrappers.IntTo$Snap q$a@484@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@484@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@484@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 126 | !(0 <= q$a@484@01 && q$a@484@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@484@01)
    (<= q$a@484@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@487@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@487@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef4|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@485@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@487@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef5|)))
(assert (=>
  (and
    (<= 0 q$a@484@01)
    (<= q$a@484@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@484@01)
    (<= q$a@484@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@484@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@484@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@485@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@484@01)) ($SortWrappers.IntTo$Snap q$a@484@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@484@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@484@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@484@01)
      (<= q$a@484@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@484@01)
    (<= q$a@484@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@487@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@487@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef4|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@485@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@487@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef5|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@484@01 Int)) (!
  (and
    (or (<= 0 q$a@484@01) (not (<= 0 q$a@484@01)))
    (=>
      (and
        (<= 0 q$a@484@01)
        (<= q$a@484@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@484@01)
        (<= q$a@484@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@484@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@484@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@485@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@484@01)) ($SortWrappers.IntTo$Snap q$a@484@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@484@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@484@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01))))))
    (or
      (not
        (and
          (<= 0 q$a@484@01)
          (<= q$a@484@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@484@01)
        (<= q$a@484@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361-aux|)))
(push) ; 5
(assert (not (forall ((q$a@484@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@484@01)
        (<= q$a@484@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@484@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@487@01  $PPM) ($SortWrappers.IntTo$Snap q$a@484@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@484@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@484@01)
        (<= q$a@484@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@484@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@487@01  $PPM) ($SortWrappers.IntTo$Snap q$a@484@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@484@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@488@01 $Snap)
(assert (= $t@488@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@432@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@489@01 $Struct)
(assert (=
  self@489@01
  ($struct_set<$Struct> self@418@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@418@01 11))
    l$havoc@432@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 4
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 114 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), $struct_get[Int]($struct_loc[Int](msg@414@01, 0))) == True]
(assert (=
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)))
  true))
(pop) ; 3
; [eval] !!(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool) == true)
; [eval] !(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool) == true)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool) == true
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)))
    true))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)))
  true)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 130 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), $struct_get[Int]($struct_loc[Int](msg@414@01, 0))) == True | live]
; [else-branch: 130 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), $struct_get[Int]($struct_loc[Int](msg@414@01, 0))) != True | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 130 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), $struct_get[Int]($struct_loc[Int](msg@414@01, 0))) == True]
(assert (=
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)))
  true))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 4
; [then-branch: 131 | False | dead]
; [else-branch: 131 | True | live]
(push) ; 5
; [else-branch: 131 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 132 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 3)) | live]
; [else-branch: 132 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 3)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 132 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 6
; [then-branch: 133 | False | live]
; [else-branch: 133 | True | live]
(push) ; 7
; [then-branch: 133 | False]
(assert false)
(pop) ; 7
(push) ; 7
; [else-branch: 133 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 132 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@490@01 Int)
(push) ; 4
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 5
; [then-branch: 134 | !(0 <= q$a@490@01) | live]
; [else-branch: 134 | 0 <= q$a@490@01 | live]
(push) ; 6
; [then-branch: 134 | !(0 <= q$a@490@01)]
(assert (not (<= 0 q$a@490@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 134 | 0 <= q$a@490@01]
(assert (<= 0 q$a@490@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@490@01) (not (<= 0 q$a@490@01))))
(push) ; 5
; [then-branch: 135 | 0 <= q$a@490@01 && q$a@490@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 135 | !(0 <= q$a@490@01 && q$a@490@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 6
; [then-branch: 135 | 0 <= q$a@490@01 && q$a@490@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@490@01)
  (<= q$a@490@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 7
; [then-branch: 136 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@490@01) | live]
; [else-branch: 136 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@490@01)) | live]
(push) ; 8
; [then-branch: 136 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@490@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
(pop) ; 8
(push) ; 8
; [else-branch: 136 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@490@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01)))
(push) ; 7
; [then-branch: 137 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@490@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@490@01) | live]
; [else-branch: 137 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@490@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@490@01)) | live]
(push) ; 8
; [then-branch: 137 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@490@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@490@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 9
; [then-branch: 138 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 1)) | live]
; [else-branch: 138 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 1)) | live]
(push) ; 10
; [then-branch: 138 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 138 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
(declare-const sm@491@01 $PSF<e$OpenMinter>)
(declare-const s@492@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@493@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@493@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@493@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef7|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@493@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef8|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@490@01)) ($SortWrappers.IntTo$Snap q$a@490@01)))
; [eval] 1 * write
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@493@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@493@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef7|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@493@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef8|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@490@01)) ($SortWrappers.IntTo$Snap q$a@490@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))))
(pop) ; 8
(push) ; 8
; [else-branch: 137 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@490@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@490@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@493@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@493@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef7|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@493@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef8|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@490@01)) ($SortWrappers.IntTo$Snap q$a@490@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 135 | !(0 <= q$a@490@01 && q$a@490@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@490@01)
    (<= q$a@490@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@493@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@493@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef7|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@493@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef8|)))
(assert (=>
  (and
    (<= 0 q$a@490@01)
    (<= q$a@490@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@490@01)
    (<= q$a@490@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@490@01)) ($SortWrappers.IntTo$Snap q$a@490@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@490@01)
      (<= q$a@490@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@490@01)
    (<= q$a@490@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@493@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@493@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef7|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@493@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef8|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@490@01 Int)) (!
  (and
    (or (<= 0 q$a@490@01) (not (<= 0 q$a@490@01)))
    (=>
      (and
        (<= 0 q$a@490@01)
        (<= q$a@490@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@490@01)
        (<= q$a@490@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@490@01)) ($SortWrappers.IntTo$Snap q$a@490@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01)))))
    (or
      (not
        (and
          (<= 0 q$a@490@01)
          (<= q$a@490@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@490@01)
        (<= q$a@490@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1140@11@1140@391-aux|)))
(push) ; 4
(assert (not (forall ((q$a@490@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@490@01)
        (<= q$a@490@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@493@01  $PPM) ($SortWrappers.IntTo$Snap q$a@490@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1140@11@1140@391|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@490@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@490@01)
        (<= q$a@490@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@493@01  $PPM) ($SortWrappers.IntTo$Snap q$a@490@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@490@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1140@11@1140@391|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@494@01 Int)
(push) ; 4
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 5
; [then-branch: 139 | !(0 <= q$a@494@01) | live]
; [else-branch: 139 | 0 <= q$a@494@01 | live]
(push) ; 6
; [then-branch: 139 | !(0 <= q$a@494@01)]
(assert (not (<= 0 q$a@494@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 139 | 0 <= q$a@494@01]
(assert (<= 0 q$a@494@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@494@01) (not (<= 0 q$a@494@01))))
(push) ; 5
; [then-branch: 140 | 0 <= q$a@494@01 && q$a@494@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 140 | !(0 <= q$a@494@01 && q$a@494@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 6
; [then-branch: 140 | 0 <= q$a@494@01 && q$a@494@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@494@01)
  (<= q$a@494@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 7
; [then-branch: 141 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@494@01)) | live]
; [else-branch: 141 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@494@01) | live]
(push) ; 8
; [then-branch: 141 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@494@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 141 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@494@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01))))
(push) ; 7
; [then-branch: 142 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@494@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@494@01)) | live]
; [else-branch: 142 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@494@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@494@01))) | live]
(push) ; 8
; [then-branch: 142 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@494@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@494@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 9
; [then-branch: 143 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != q$a@494@01 | live]
; [else-branch: 143 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == q$a@494@01 | live]
(push) ; 10
; [then-branch: 143 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != q$a@494@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@494@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 143 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == q$a@494@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@494@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
(declare-const sm@495@01 $PSF<e$CloseMinter>)
(declare-const s@496@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@497@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@497@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@497@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef10|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@497@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef11|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@494@01)) ($SortWrappers.IntTo$Snap q$a@494@01)))
; [eval] 1 * write
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@497@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@497@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef10|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@497@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef11|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@494@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@494@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@494@01)) ($SortWrappers.IntTo$Snap q$a@494@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@494@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@494@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 142 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@494@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@494@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@497@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@497@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef10|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@497@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef11|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@494@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@494@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@494@01)) ($SortWrappers.IntTo$Snap q$a@494@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@494@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@494@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 140 | !(0 <= q$a@494@01 && q$a@494@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@494@01)
    (<= q$a@494@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@497@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@497@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef10|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@497@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef11|)))
(assert (=>
  (and
    (<= 0 q$a@494@01)
    (<= q$a@494@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@494@01)
    (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@494@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@494@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@494@01)) ($SortWrappers.IntTo$Snap q$a@494@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@494@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@494@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@494@01)
      (<= q$a@494@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@494@01)
    (<= q$a@494@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@497@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@497@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef10|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@497@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef11|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@494@01 Int)) (!
  (and
    (or (<= 0 q$a@494@01) (not (<= 0 q$a@494@01)))
    (=>
      (and
        (<= 0 q$a@494@01)
        (<= q$a@494@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@494@01)
        (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@494@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@494@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@494@01)) ($SortWrappers.IntTo$Snap q$a@494@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@494@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@494@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01))))))
    (or
      (not
        (and
          (<= 0 q$a@494@01)
          (<= q$a@494@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@494@01)
        (<= q$a@494@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1141@11@1141@355-aux|)))
(push) ; 4
(assert (not (forall ((q$a@494@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@494@01)
        (<= q$a@494@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@494@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@497@01  $PPM) ($SortWrappers.IntTo$Snap q$a@494@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1141@11@1141@355|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@494@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@494@01)
        (<= q$a@494@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@494@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@497@01  $PPM) ($SortWrappers.IntTo$Snap q$a@494@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@494@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1141@11@1141@355|)))
; [exec]
; exhale true &&
;   (forall $arg0: Int, $arg1: Int, $arg2: Int ::
;     { e$Transfer($arg0, $arg1, $arg2) }
;     perm(e$Transfer($arg0, $arg1, $arg2)) > none ==>
;     acc(e$Transfer($arg0, $arg1, $arg2), perm(e$Transfer($arg0, $arg1, $arg2))))
(declare-const $arg0@498@01 Int)
(declare-const $arg1@499@01 Int)
(declare-const $arg2@500@01 Int)
(push) ; 4
; [eval] perm(e$Transfer($arg0, $arg1, $arg2)) > none
; [eval] perm(e$Transfer($arg0, $arg1, $arg2))
(declare-const sm@501@01 $PSF<e$Transfer>)
(declare-const s@502@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@503@01 $PPM)
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef13|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@501@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef14|)))
(assert ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@501@01  $PSF<e$Transfer>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@498@01)
    ($SortWrappers.IntTo$Snap $arg1@499@01))
  ($SortWrappers.IntTo$Snap $arg2@500@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@498@01)
    ($SortWrappers.IntTo$Snap $arg1@499@01))
  ($SortWrappers.IntTo$Snap $arg2@500@01))))
(assert (>
  ($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@498@01)
      ($SortWrappers.IntTo$Snap $arg1@499@01))
    ($SortWrappers.IntTo$Snap $arg2@500@01)))
  $Perm.No))
; [eval] perm(e$Transfer($arg0, $arg1, $arg2))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 4
(declare-fun inv@504@01 (Int Int Int) Int)
(declare-fun img@505@01 (Int Int Int) Bool)
(declare-fun inv@506@01 (Int Int Int) Int)
(declare-fun img@507@01 (Int Int Int) Bool)
(declare-fun inv@508@01 (Int Int Int) Int)
(declare-fun img@509@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef13|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@501@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef14|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@498@01 Int) ($arg1@499@01 Int) ($arg2@500@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@498@01)
          ($SortWrappers.IntTo$Snap $arg1@499@01))
        ($SortWrappers.IntTo$Snap $arg2@500@01)))
      $Perm.No)
    ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@501@01  $PSF<e$Transfer>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@498@01)
        ($SortWrappers.IntTo$Snap $arg1@499@01))
      ($SortWrappers.IntTo$Snap $arg2@500@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@498@01)
        ($SortWrappers.IntTo$Snap $arg1@499@01))
      ($SortWrappers.IntTo$Snap $arg2@500@01))))
  :pattern (($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@501@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@498@01)
      ($SortWrappers.IntTo$Snap $arg1@499@01))
    ($SortWrappers.IntTo$Snap $arg2@500@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@498@01)
      ($SortWrappers.IntTo$Snap $arg1@499@01))
    ($SortWrappers.IntTo$Snap $arg2@500@01))))
  :qid |e$Transfer-aux|)))
(push) ; 4
(assert (not (forall (($arg0@498@01 Int) ($arg1@499@01 Int) ($arg2@500@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@498@01)
          ($SortWrappers.IntTo$Snap $arg1@499@01))
        ($SortWrappers.IntTo$Snap $arg2@500@01)))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@498@01)
            ($SortWrappers.IntTo$Snap $arg1@499@01))
          ($SortWrappers.IntTo$Snap $arg2@500@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@498@01)
            ($SortWrappers.IntTo$Snap $arg1@499@01))
          ($SortWrappers.IntTo$Snap $arg2@500@01))))))
  
  :qid |quant-u-1829|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall (($arg01@498@01 Int) ($arg11@499@01 Int) ($arg21@500@01 Int) ($arg02@498@01 Int) ($arg12@499@01 Int) ($arg22@500@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg01@498@01)
                ($SortWrappers.IntTo$Snap $arg11@499@01))
              ($SortWrappers.IntTo$Snap $arg21@500@01)))
            $Perm.No)
          ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@501@01  $PSF<e$Transfer>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@498@01)
              ($SortWrappers.IntTo$Snap $arg11@499@01))
            ($SortWrappers.IntTo$Snap $arg21@500@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@498@01)
              ($SortWrappers.IntTo$Snap $arg11@499@01))
            ($SortWrappers.IntTo$Snap $arg21@500@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@498@01)
              ($SortWrappers.IntTo$Snap $arg11@499@01))
            ($SortWrappers.IntTo$Snap $arg21@500@01)))))
      (and
        (and
          (>
            ($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg02@498@01)
                ($SortWrappers.IntTo$Snap $arg12@499@01))
              ($SortWrappers.IntTo$Snap $arg22@500@01)))
            $Perm.No)
          ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@501@01  $PSF<e$Transfer>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@498@01)
              ($SortWrappers.IntTo$Snap $arg12@499@01))
            ($SortWrappers.IntTo$Snap $arg22@500@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@498@01)
              ($SortWrappers.IntTo$Snap $arg12@499@01))
            ($SortWrappers.IntTo$Snap $arg22@500@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@498@01)
              ($SortWrappers.IntTo$Snap $arg12@499@01))
            ($SortWrappers.IntTo$Snap $arg22@500@01)))))
      (and
        (and (= $arg01@498@01 $arg02@498@01) (= $arg11@499@01 $arg12@499@01))
        (= $arg21@500@01 $arg22@500@01)))
    (and
      (and (= $arg01@498@01 $arg02@498@01) (= $arg11@499@01 $arg12@499@01))
      (= $arg21@500@01 $arg22@500@01)))
  
  :qid |e$Transfer-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@498@01 Int) ($arg1@499@01 Int) ($arg2@500@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@498@01)
            ($SortWrappers.IntTo$Snap $arg1@499@01))
          ($SortWrappers.IntTo$Snap $arg2@500@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@498@01)
            ($SortWrappers.IntTo$Snap $arg1@499@01))
          ($SortWrappers.IntTo$Snap $arg2@500@01)))))
    (and
      (and
        (= (inv@504@01 $arg0@498@01 $arg1@499@01 $arg2@500@01) $arg0@498@01)
        (= (inv@506@01 $arg0@498@01 $arg1@499@01 $arg2@500@01) $arg1@499@01)
        (= (inv@508@01 $arg0@498@01 $arg1@499@01 $arg2@500@01) $arg2@500@01))
      (and
        (img@505@01 $arg0@498@01 $arg1@499@01 $arg2@500@01)
        (img@507@01 $arg0@498@01 $arg1@499@01 $arg2@500@01)
        (img@509@01 $arg0@498@01 $arg1@499@01 $arg2@500@01))))
  :pattern (($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@501@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@498@01)
      ($SortWrappers.IntTo$Snap $arg1@499@01))
    ($SortWrappers.IntTo$Snap $arg2@500@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@498@01)
      ($SortWrappers.IntTo$Snap $arg1@499@01))
    ($SortWrappers.IntTo$Snap $arg2@500@01))))
  :qid |e$Transfer-invOfFct|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (and
      (and
        (img@505@01 $arg0 $arg1 $arg2)
        (img@507@01 $arg0 $arg1 $arg2)
        (img@509@01 $arg0 $arg1 $arg2))
      (and
        (>
          ($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@504@01 $arg0 $arg1 $arg2))
              ($SortWrappers.IntTo$Snap (inv@506@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@508@01 $arg0 $arg1 $arg2))))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@504@01 $arg0 $arg1 $arg2))
              ($SortWrappers.IntTo$Snap (inv@506@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@508@01 $arg0 $arg1 $arg2)))))))
    (and
      (= (inv@504@01 $arg0 $arg1 $arg2) $arg0)
      (= (inv@506@01 $arg0 $arg1 $arg2) $arg1)
      (= (inv@508@01 $arg0 $arg1 $arg2) $arg2)))
  :pattern ((inv@504@01 $arg0 $arg1 $arg2))
  :pattern ((inv@506@01 $arg0 $arg1 $arg2))
  :pattern ((inv@508@01 $arg0 $arg1 $arg2))
  :qid |e$Transfer-fctOfInv|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@504@01 $arg0 $arg1 $arg2))
          ($SortWrappers.IntTo$Snap (inv@506@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@508@01 $arg0 $arg1 $arg2))))
      $Perm.No)
    ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@501@01  $PSF<e$Transfer>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))))
  :pattern ((inv@504@01 $arg0 $arg1 $arg2) (inv@506@01 $arg0 $arg1 $arg2) (inv@508@01 $arg0 $arg1 $arg2))
  :qid |quant-u-1830|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 4
(assert (not (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@504@01 $arg0 $arg1 $arg2))
            ($SortWrappers.IntTo$Snap (inv@506@01 $arg0 $arg1 $arg2)))
          ($SortWrappers.IntTo$Snap (inv@508@01 $arg0 $arg1 $arg2))))
        $Perm.No)
      (and
        (img@505@01 $arg0 $arg1 $arg2)
        (img@507@01 $arg0 $arg1 $arg2)
        (img@509@01 $arg0 $arg1 $arg2))
      (and
        (= $arg0 (inv@504@01 $arg0 $arg1 $arg2))
        (= $arg1 (inv@506@01 $arg0 $arg1 $arg2))
        (= $arg2 (inv@508@01 $arg0 $arg1 $arg2))))
    (=
      ($PSF.perm_e$Transfer (as pm@503@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@504@01 $arg0 $arg1 $arg2))
          ($SortWrappers.IntTo$Snap (inv@506@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@508@01 $arg0 $arg1 $arg2))))
      $Perm.No))
  
  :qid |quant-u-1831|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; exhale true &&
;   (forall $arg0: Int, $arg1: Int, $arg2: Int ::
;     { e$Approval($arg0, $arg1, $arg2) }
;     perm(e$Approval($arg0, $arg1, $arg2)) > none ==>
;     acc(e$Approval($arg0, $arg1, $arg2), perm(e$Approval($arg0, $arg1, $arg2))))
(declare-const $arg0@510@01 Int)
(declare-const $arg1@511@01 Int)
(declare-const $arg2@512@01 Int)
(push) ; 4
; [eval] perm(e$Approval($arg0, $arg1, $arg2)) > none
; [eval] perm(e$Approval($arg0, $arg1, $arg2))
(declare-const sm@513@01 $PSF<e$Approval>)
(declare-const s@514@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@515@01 $PPM)
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef16|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@513@01  $PSF<e$Approval>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef17|)))
(assert ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@513@01  $PSF<e$Approval>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@510@01)
    ($SortWrappers.IntTo$Snap $arg1@511@01))
  ($SortWrappers.IntTo$Snap $arg2@512@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@510@01)
    ($SortWrappers.IntTo$Snap $arg1@511@01))
  ($SortWrappers.IntTo$Snap $arg2@512@01))))
(assert (>
  ($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@510@01)
      ($SortWrappers.IntTo$Snap $arg1@511@01))
    ($SortWrappers.IntTo$Snap $arg2@512@01)))
  $Perm.No))
; [eval] perm(e$Approval($arg0, $arg1, $arg2))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 4
(declare-fun inv@516@01 (Int Int Int) Int)
(declare-fun img@517@01 (Int Int Int) Bool)
(declare-fun inv@518@01 (Int Int Int) Int)
(declare-fun img@519@01 (Int Int Int) Bool)
(declare-fun inv@520@01 (Int Int Int) Int)
(declare-fun img@521@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef16|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@513@01  $PSF<e$Approval>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef17|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@510@01 Int) ($arg1@511@01 Int) ($arg2@512@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@510@01)
          ($SortWrappers.IntTo$Snap $arg1@511@01))
        ($SortWrappers.IntTo$Snap $arg2@512@01)))
      $Perm.No)
    ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@513@01  $PSF<e$Approval>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@510@01)
        ($SortWrappers.IntTo$Snap $arg1@511@01))
      ($SortWrappers.IntTo$Snap $arg2@512@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@510@01)
        ($SortWrappers.IntTo$Snap $arg1@511@01))
      ($SortWrappers.IntTo$Snap $arg2@512@01))))
  :pattern (($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@513@01  $PSF<e$Approval>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@510@01)
      ($SortWrappers.IntTo$Snap $arg1@511@01))
    ($SortWrappers.IntTo$Snap $arg2@512@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@510@01)
      ($SortWrappers.IntTo$Snap $arg1@511@01))
    ($SortWrappers.IntTo$Snap $arg2@512@01))))
  :qid |e$Approval-aux|)))
(push) ; 4
(assert (not (forall (($arg0@510@01 Int) ($arg1@511@01 Int) ($arg2@512@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@510@01)
          ($SortWrappers.IntTo$Snap $arg1@511@01))
        ($SortWrappers.IntTo$Snap $arg2@512@01)))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@510@01)
            ($SortWrappers.IntTo$Snap $arg1@511@01))
          ($SortWrappers.IntTo$Snap $arg2@512@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@510@01)
            ($SortWrappers.IntTo$Snap $arg1@511@01))
          ($SortWrappers.IntTo$Snap $arg2@512@01))))))
  
  :qid |quant-u-1832|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall (($arg01@510@01 Int) ($arg11@511@01 Int) ($arg21@512@01 Int) ($arg02@510@01 Int) ($arg12@511@01 Int) ($arg22@512@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg01@510@01)
                ($SortWrappers.IntTo$Snap $arg11@511@01))
              ($SortWrappers.IntTo$Snap $arg21@512@01)))
            $Perm.No)
          ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@513@01  $PSF<e$Approval>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@510@01)
              ($SortWrappers.IntTo$Snap $arg11@511@01))
            ($SortWrappers.IntTo$Snap $arg21@512@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@510@01)
              ($SortWrappers.IntTo$Snap $arg11@511@01))
            ($SortWrappers.IntTo$Snap $arg21@512@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@510@01)
              ($SortWrappers.IntTo$Snap $arg11@511@01))
            ($SortWrappers.IntTo$Snap $arg21@512@01)))))
      (and
        (and
          (>
            ($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg02@510@01)
                ($SortWrappers.IntTo$Snap $arg12@511@01))
              ($SortWrappers.IntTo$Snap $arg22@512@01)))
            $Perm.No)
          ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@513@01  $PSF<e$Approval>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@510@01)
              ($SortWrappers.IntTo$Snap $arg12@511@01))
            ($SortWrappers.IntTo$Snap $arg22@512@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@510@01)
              ($SortWrappers.IntTo$Snap $arg12@511@01))
            ($SortWrappers.IntTo$Snap $arg22@512@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@510@01)
              ($SortWrappers.IntTo$Snap $arg12@511@01))
            ($SortWrappers.IntTo$Snap $arg22@512@01)))))
      (and
        (and (= $arg01@510@01 $arg02@510@01) (= $arg11@511@01 $arg12@511@01))
        (= $arg21@512@01 $arg22@512@01)))
    (and
      (and (= $arg01@510@01 $arg02@510@01) (= $arg11@511@01 $arg12@511@01))
      (= $arg21@512@01 $arg22@512@01)))
  
  :qid |e$Approval-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@510@01 Int) ($arg1@511@01 Int) ($arg2@512@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@510@01)
            ($SortWrappers.IntTo$Snap $arg1@511@01))
          ($SortWrappers.IntTo$Snap $arg2@512@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@510@01)
            ($SortWrappers.IntTo$Snap $arg1@511@01))
          ($SortWrappers.IntTo$Snap $arg2@512@01)))))
    (and
      (and
        (= (inv@516@01 $arg0@510@01 $arg1@511@01 $arg2@512@01) $arg0@510@01)
        (= (inv@518@01 $arg0@510@01 $arg1@511@01 $arg2@512@01) $arg1@511@01)
        (= (inv@520@01 $arg0@510@01 $arg1@511@01 $arg2@512@01) $arg2@512@01))
      (and
        (img@517@01 $arg0@510@01 $arg1@511@01 $arg2@512@01)
        (img@519@01 $arg0@510@01 $arg1@511@01 $arg2@512@01)
        (img@521@01 $arg0@510@01 $arg1@511@01 $arg2@512@01))))
  :pattern (($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@513@01  $PSF<e$Approval>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@510@01)
      ($SortWrappers.IntTo$Snap $arg1@511@01))
    ($SortWrappers.IntTo$Snap $arg2@512@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@510@01)
      ($SortWrappers.IntTo$Snap $arg1@511@01))
    ($SortWrappers.IntTo$Snap $arg2@512@01))))
  :qid |e$Approval-invOfFct|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (and
      (and
        (img@517@01 $arg0 $arg1 $arg2)
        (img@519@01 $arg0 $arg1 $arg2)
        (img@521@01 $arg0 $arg1 $arg2))
      (and
        (>
          ($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@516@01 $arg0 $arg1 $arg2))
              ($SortWrappers.IntTo$Snap (inv@518@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@520@01 $arg0 $arg1 $arg2))))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@516@01 $arg0 $arg1 $arg2))
              ($SortWrappers.IntTo$Snap (inv@518@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@520@01 $arg0 $arg1 $arg2)))))))
    (and
      (= (inv@516@01 $arg0 $arg1 $arg2) $arg0)
      (= (inv@518@01 $arg0 $arg1 $arg2) $arg1)
      (= (inv@520@01 $arg0 $arg1 $arg2) $arg2)))
  :pattern ((inv@516@01 $arg0 $arg1 $arg2))
  :pattern ((inv@518@01 $arg0 $arg1 $arg2))
  :pattern ((inv@520@01 $arg0 $arg1 $arg2))
  :qid |e$Approval-fctOfInv|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@516@01 $arg0 $arg1 $arg2))
          ($SortWrappers.IntTo$Snap (inv@518@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@520@01 $arg0 $arg1 $arg2))))
      $Perm.No)
    ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@513@01  $PSF<e$Approval>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))))
  :pattern ((inv@516@01 $arg0 $arg1 $arg2) (inv@518@01 $arg0 $arg1 $arg2) (inv@520@01 $arg0 $arg1 $arg2))
  :qid |quant-u-1833|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 4
(assert (not (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@516@01 $arg0 $arg1 $arg2))
            ($SortWrappers.IntTo$Snap (inv@518@01 $arg0 $arg1 $arg2)))
          ($SortWrappers.IntTo$Snap (inv@520@01 $arg0 $arg1 $arg2))))
        $Perm.No)
      (and
        (img@517@01 $arg0 $arg1 $arg2)
        (img@519@01 $arg0 $arg1 $arg2)
        (img@521@01 $arg0 $arg1 $arg2))
      (and
        (= $arg0 (inv@516@01 $arg0 $arg1 $arg2))
        (= $arg1 (inv@518@01 $arg0 $arg1 $arg2))
        (= $arg2 (inv@520@01 $arg0 $arg1 $arg2))))
    (=
      ($PSF.perm_e$Approval (as pm@515@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@516@01 $arg0 $arg1 $arg2))
          ($SortWrappers.IntTo$Snap (inv@518@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@520@01 $arg0 $arg1 $arg2))))
      $Perm.No))
  
  :qid |quant-u-1834|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; exhale true &&
;   (forall $arg0: Int ::
;     { e$OpenMinter($arg0) }
;     perm(e$OpenMinter($arg0)) > none ==>
;     acc(e$OpenMinter($arg0), perm(e$OpenMinter($arg0))))
(declare-const $arg0@522@01 Int)
(push) ; 4
; [eval] perm(e$OpenMinter($arg0)) > none
; [eval] perm(e$OpenMinter($arg0))
; Definitional axioms for snapshot map values
(declare-const pm@523@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef18|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef19|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0@522@01)) ($SortWrappers.IntTo$Snap $arg0@522@01)))
(assert (>
  ($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@522@01))
  $Perm.No))
; [eval] perm(e$OpenMinter($arg0))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 4
(declare-fun inv@524@01 (Int) Int)
(declare-fun img@525@01 (Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef18|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef19|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@522@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@522@01))
      $Perm.No)
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0@522@01)) ($SortWrappers.IntTo$Snap $arg0@522@01)))
  :pattern (($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0@522@01)) ($SortWrappers.IntTo$Snap $arg0@522@01)))
  :qid |e$OpenMinter-aux|)))
(push) ; 4
(assert (not (forall (($arg0@522@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@522@01))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@522@01))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@522@01)))))
  
  :qid |quant-u-1835|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall (($arg01@522@01 Int) ($arg02@522@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap $arg01@522@01))
            $Perm.No)
          ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg01@522@01)) ($SortWrappers.IntTo$Snap $arg01@522@01)))
        (<
          $Perm.No
          ($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap $arg01@522@01))))
      (and
        (and
          (>
            ($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap $arg02@522@01))
            $Perm.No)
          ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg02@522@01)) ($SortWrappers.IntTo$Snap $arg02@522@01)))
        (<
          $Perm.No
          ($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap $arg02@522@01))))
      (= $arg01@522@01 $arg02@522@01))
    (= $arg01@522@01 $arg02@522@01))
  
  :qid |e$OpenMinter-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@522@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@522@01))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@522@01))))
    (and (= (inv@524@01 $arg0@522@01) $arg0@522@01) (img@525@01 $arg0@522@01)))
  :pattern (($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0@522@01)) ($SortWrappers.IntTo$Snap $arg0@522@01)))
  :qid |e$OpenMinter-invOfFct|)))
(assert (forall (($arg0 Int)) (!
  (=>
    (and
      (img@525@01 $arg0)
      (and
        (>
          ($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap (inv@524@01 $arg0)))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap (inv@524@01 $arg0))))))
    (= (inv@524@01 $arg0) $arg0))
  :pattern ((inv@524@01 $arg0))
  :qid |e$OpenMinter-fctOfInv|)))
(assert (forall (($arg0 Int)) (!
  (=>
    (>
      ($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap (inv@524@01 $arg0)))
      $Perm.No)
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0)))
  :pattern ((inv@524@01 $arg0))
  :qid |quant-u-1836|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 4
(assert (not (forall (($arg0 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap (inv@524@01 $arg0)))
        $Perm.No)
      (img@525@01 $arg0)
      (= $arg0 (inv@524@01 $arg0)))
    (=
      ($PSF.perm_e$OpenMinter (as pm@523@01  $PPM) ($SortWrappers.IntTo$Snap (inv@524@01 $arg0)))
      $Perm.No))
  
  :qid |quant-u-1837|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; exhale true &&
;   (forall $arg0: Int ::
;     { e$CloseMinter($arg0) }
;     perm(e$CloseMinter($arg0)) > none ==>
;     acc(e$CloseMinter($arg0), perm(e$CloseMinter($arg0))))
(declare-const $arg0@526@01 Int)
(push) ; 4
; [eval] perm(e$CloseMinter($arg0)) > none
; [eval] perm(e$CloseMinter($arg0))
; Definitional axioms for snapshot map values
(declare-const pm@527@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef20|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef21|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0@526@01)) ($SortWrappers.IntTo$Snap $arg0@526@01)))
(assert (>
  ($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@526@01))
  $Perm.No))
; [eval] perm(e$CloseMinter($arg0))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 4
(declare-fun inv@528@01 (Int) Int)
(declare-fun img@529@01 (Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef20|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef21|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@526@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@526@01))
      $Perm.No)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0@526@01)) ($SortWrappers.IntTo$Snap $arg0@526@01)))
  :pattern (($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0@526@01)) ($SortWrappers.IntTo$Snap $arg0@526@01)))
  :qid |e$CloseMinter-aux|)))
(push) ; 4
(assert (not (forall (($arg0@526@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@526@01))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@526@01))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@526@01)))))
  
  :qid |quant-u-1838|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall (($arg01@526@01 Int) ($arg02@526@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap $arg01@526@01))
            $Perm.No)
          ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg01@526@01)) ($SortWrappers.IntTo$Snap $arg01@526@01)))
        (<
          $Perm.No
          ($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap $arg01@526@01))))
      (and
        (and
          (>
            ($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap $arg02@526@01))
            $Perm.No)
          ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg02@526@01)) ($SortWrappers.IntTo$Snap $arg02@526@01)))
        (<
          $Perm.No
          ($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap $arg02@526@01))))
      (= $arg01@526@01 $arg02@526@01))
    (= $arg01@526@01 $arg02@526@01))
  
  :qid |e$CloseMinter-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@526@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@526@01))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@526@01))))
    (and (= (inv@528@01 $arg0@526@01) $arg0@526@01) (img@529@01 $arg0@526@01)))
  :pattern (($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0@526@01)) ($SortWrappers.IntTo$Snap $arg0@526@01)))
  :qid |e$CloseMinter-invOfFct|)))
(assert (forall (($arg0 Int)) (!
  (=>
    (and
      (img@529@01 $arg0)
      (and
        (>
          ($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap (inv@528@01 $arg0)))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap (inv@528@01 $arg0))))))
    (= (inv@528@01 $arg0) $arg0))
  :pattern ((inv@528@01 $arg0))
  :qid |e$CloseMinter-fctOfInv|)))
(assert (forall (($arg0 Int)) (!
  (=>
    (>
      ($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap (inv@528@01 $arg0)))
      $Perm.No)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0)))
  :pattern ((inv@528@01 $arg0))
  :qid |quant-u-1839|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 4
(assert (not (forall (($arg0 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap (inv@528@01 $arg0)))
        $Perm.No)
      (img@529@01 $arg0)
      (= $arg0 (inv@528@01 $arg0)))
    (=
      ($PSF.perm_e$CloseMinter (as pm@527@01  $PPM) ($SortWrappers.IntTo$Snap (inv@528@01 $arg0)))
      $Perm.No))
  
  :qid |quant-u-1840|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; inhale -170141183460469231731687303715884105728 <= l$raw_ret &&
;   l$raw_ret <= 170141183460469231731687303715884105727
(declare-const $t@530@01 $Snap)
(assert (= $t@530@01 ($Snap.combine ($Snap.first $t@530@01) ($Snap.second $t@530@01))))
(assert (= ($Snap.first $t@530@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= l$raw_ret
; [eval] -170141183460469231731687303715884105728
(assert (<= (- 0 170141183460469231731687303715884105728) l$raw_ret@428@01))
(assert (= ($Snap.second $t@530@01) $Snap.unit))
; [eval] l$raw_ret <= 170141183460469231731687303715884105727
(assert (<= l$raw_ret@428@01 170141183460469231731687303715884105727))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not l$send_fail@427@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not l$send_fail@427@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 144 | l$send_fail@427@01 | live]
; [else-branch: 144 | !(l$send_fail@427@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 144 | l$send_fail@427@01]
(assert l$send_fail@427@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@531@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 145 | False | dead]
; [else-branch: 145 | True | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 145 | True]
(pop) ; 5
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 146 | True | live]
; [else-branch: 146 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 146 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 6
; [then-branch: 147 | False | dead]
; [else-branch: 147 | True | live]
(push) ; 7
; [else-branch: 147 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 148 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 3)) | live]
; [else-branch: 148 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 3)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 148 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 8
; [then-branch: 149 | False | live]
; [else-branch: 149 | True | live]
(push) ; 9
; [then-branch: 149 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 149 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 148 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@532@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 150 | !(0 <= q$a@532@01) | live]
; [else-branch: 150 | 0 <= q$a@532@01 | live]
(push) ; 8
; [then-branch: 150 | !(0 <= q$a@532@01)]
(assert (not (<= 0 q$a@532@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 150 | 0 <= q$a@532@01]
(assert (<= 0 q$a@532@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@532@01) (not (<= 0 q$a@532@01))))
(push) ; 7
; [then-branch: 151 | 0 <= q$a@532@01 && q$a@532@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 151 | !(0 <= q$a@532@01 && q$a@532@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 151 | 0 <= q$a@532@01 && q$a@532@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@532@01)
  (<= q$a@532@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 152 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@532@01) | live]
; [else-branch: 152 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@532@01)) | live]
(push) ; 10
; [then-branch: 152 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@532@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
(pop) ; 10
(push) ; 10
; [else-branch: 152 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@532@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01)))
(push) ; 9
; [then-branch: 153 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@532@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@532@01) | live]
; [else-branch: 153 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@532@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@532@01)) | live]
(push) ; 10
; [then-branch: 153 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@532@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@532@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 11
; [then-branch: 154 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 1)) | live]
; [else-branch: 154 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 1)) | live]
(push) ; 12
; [then-branch: 154 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))
(pop) ; 12
(push) ; 12
; [else-branch: 154 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@533@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@533@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@533@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef22|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@533@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef23|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@532@01)) ($SortWrappers.IntTo$Snap q$a@532@01)))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@533@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@533@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef22|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@533@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef23|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@532@01)) ($SortWrappers.IntTo$Snap q$a@532@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))))
(pop) ; 10
(push) ; 10
; [else-branch: 153 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@532@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@532@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@533@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@533@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef22|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@533@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef23|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@532@01)) ($SortWrappers.IntTo$Snap q$a@532@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 151 | !(0 <= q$a@532@01 && q$a@532@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@532@01)
    (<= q$a@532@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@533@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@533@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef22|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@533@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef23|)))
(assert (=>
  (and
    (<= 0 q$a@532@01)
    (<= q$a@532@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@532@01)
    (<= q$a@532@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@532@01)) ($SortWrappers.IntTo$Snap q$a@532@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@532@01)
      (<= q$a@532@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@532@01)
    (<= q$a@532@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@533@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@533@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef22|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@533@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef23|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@532@01 Int)) (!
  (and
    (or (<= 0 q$a@532@01) (not (<= 0 q$a@532@01)))
    (=>
      (and
        (<= 0 q$a@532@01)
        (<= q$a@532@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@532@01)
        (<= q$a@532@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@532@01)) ($SortWrappers.IntTo$Snap q$a@532@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01)))))
    (or
      (not
        (and
          (<= 0 q$a@532@01)
          (<= q$a@532@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@532@01)
        (<= q$a@532@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397-aux|)))
(push) ; 6
(assert (not (forall ((q$a@532@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@532@01)
        (<= q$a@532@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@533@01  $PPM) ($SortWrappers.IntTo$Snap q$a@532@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@532@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@532@01)
        (<= q$a@532@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@533@01  $PPM) ($SortWrappers.IntTo$Snap q$a@532@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@532@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@534@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 155 | !(0 <= q$a@534@01) | live]
; [else-branch: 155 | 0 <= q$a@534@01 | live]
(push) ; 8
; [then-branch: 155 | !(0 <= q$a@534@01)]
(assert (not (<= 0 q$a@534@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 155 | 0 <= q$a@534@01]
(assert (<= 0 q$a@534@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@534@01) (not (<= 0 q$a@534@01))))
(push) ; 7
; [then-branch: 156 | 0 <= q$a@534@01 && q$a@534@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 156 | !(0 <= q$a@534@01 && q$a@534@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 156 | 0 <= q$a@534@01 && q$a@534@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@534@01)
  (<= q$a@534@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 157 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@534@01)) | live]
; [else-branch: 157 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@534@01) | live]
(push) ; 10
; [then-branch: 157 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@534@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 157 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@534@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01))))
(push) ; 9
; [then-branch: 158 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@534@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@534@01)) | live]
; [else-branch: 158 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@534@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@534@01))) | live]
(push) ; 10
; [then-branch: 158 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@534@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@534@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 159 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != q$a@534@01 | live]
; [else-branch: 159 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == q$a@534@01 | live]
(push) ; 12
; [then-branch: 159 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != q$a@534@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@534@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 159 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == q$a@534@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@534@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@535@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@535@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@535@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef24|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@535@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef25|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@534@01)) ($SortWrappers.IntTo$Snap q$a@534@01)))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@535@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@535@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef24|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@535@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef25|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@534@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@534@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@534@01)) ($SortWrappers.IntTo$Snap q$a@534@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@534@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@534@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 158 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@534@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@534@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@535@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@535@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef24|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@535@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef25|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@534@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@534@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@534@01)) ($SortWrappers.IntTo$Snap q$a@534@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@534@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@534@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 156 | !(0 <= q$a@534@01 && q$a@534@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@534@01)
    (<= q$a@534@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@535@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@535@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef24|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@535@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef25|)))
(assert (=>
  (and
    (<= 0 q$a@534@01)
    (<= q$a@534@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@534@01)
    (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@534@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@534@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@534@01)) ($SortWrappers.IntTo$Snap q$a@534@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@534@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@534@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@534@01)
      (<= q$a@534@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@534@01)
    (<= q$a@534@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@535@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@535@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef24|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@535@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef25|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@534@01 Int)) (!
  (and
    (or (<= 0 q$a@534@01) (not (<= 0 q$a@534@01)))
    (=>
      (and
        (<= 0 q$a@534@01)
        (<= q$a@534@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@534@01)
        (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@534@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@534@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@534@01)) ($SortWrappers.IntTo$Snap q$a@534@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@534@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@534@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01))))))
    (or
      (not
        (and
          (<= 0 q$a@534@01)
          (<= q$a@534@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@534@01)
        (<= q$a@534@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361-aux|)))
(push) ; 6
(assert (not (forall ((q$a@534@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@534@01)
        (<= q$a@534@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@534@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@535@01  $PPM) ($SortWrappers.IntTo$Snap q$a@534@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@534@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@534@01)
        (<= q$a@534@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@534@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@535@01  $PPM) ($SortWrappers.IntTo$Snap q$a@534@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@534@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@536@01 $Snap)
(assert (= $t@536@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@432@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@537@01 $Struct)
(assert (=
  self@537@01
  ($struct_set<$Struct> self@418@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@418@01 11))
    l$havoc@432@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 5
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 144 | !(l$send_fail@427@01)]
(assert (not l$send_fail@427@01))
(pop) ; 4
; [eval] !l$send_fail
(push) ; 4
(set-option :timeout 10)
(assert (not l$send_fail@427@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not l$send_fail@427@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 160 | !(l$send_fail@427@01) | live]
; [else-branch: 160 | l$send_fail@427@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 160 | !(l$send_fail@427@01)]
(assert (not l$send_fail@427@01))
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
; [then-branch: 161 | False | dead]
; [else-branch: 161 | True | live]
(push) ; 6
; [else-branch: 161 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 162 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 3)) | live]
; [else-branch: 162 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 3)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 162 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
; [then-branch: 163 | False | live]
; [else-branch: 163 | True | live]
(push) ; 8
; [then-branch: 163 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 163 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 162 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@538@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 164 | !(0 <= q$a@538@01) | live]
; [else-branch: 164 | 0 <= q$a@538@01 | live]
(push) ; 7
; [then-branch: 164 | !(0 <= q$a@538@01)]
(assert (not (<= 0 q$a@538@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 164 | 0 <= q$a@538@01]
(assert (<= 0 q$a@538@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@538@01) (not (<= 0 q$a@538@01))))
(push) ; 6
; [then-branch: 165 | 0 <= q$a@538@01 && q$a@538@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 165 | !(0 <= q$a@538@01 && q$a@538@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 165 | 0 <= q$a@538@01 && q$a@538@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@538@01)
  (<= q$a@538@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 166 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@538@01) | live]
; [else-branch: 166 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@538@01)) | live]
(push) ; 9
; [then-branch: 166 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@538@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
(pop) ; 9
(push) ; 9
; [else-branch: 166 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@538@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01)))
(push) ; 8
; [then-branch: 167 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@538@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@538@01) | live]
; [else-branch: 167 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@538@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@538@01)) | live]
(push) ; 9
; [then-branch: 167 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@538@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@538@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 10
; [then-branch: 168 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 1)) | live]
; [else-branch: 168 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 1)) | live]
(push) ; 11
; [then-branch: 168 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 168 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@539@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@539@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@539@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef26|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@539@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef27|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@538@01)) ($SortWrappers.IntTo$Snap q$a@538@01)))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@539@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@539@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef26|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@539@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef27|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@538@01)) ($SortWrappers.IntTo$Snap q$a@538@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))))
(pop) ; 9
(push) ; 9
; [else-branch: 167 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@538@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@538@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@539@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@539@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef26|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@539@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef27|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@538@01)) ($SortWrappers.IntTo$Snap q$a@538@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 165 | !(0 <= q$a@538@01 && q$a@538@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@538@01)
    (<= q$a@538@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@539@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@539@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef26|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@539@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef27|)))
(assert (=>
  (and
    (<= 0 q$a@538@01)
    (<= q$a@538@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@538@01)
    (<= q$a@538@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@538@01)) ($SortWrappers.IntTo$Snap q$a@538@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@538@01)
      (<= q$a@538@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@538@01)
    (<= q$a@538@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@539@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@539@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef26|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@539@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef27|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@538@01 Int)) (!
  (and
    (or (<= 0 q$a@538@01) (not (<= 0 q$a@538@01)))
    (=>
      (and
        (<= 0 q$a@538@01)
        (<= q$a@538@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@538@01)
        (<= q$a@538@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@538@01)) ($SortWrappers.IntTo$Snap q$a@538@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01)))))
    (or
      (not
        (and
          (<= 0 q$a@538@01)
          (<= q$a@538@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@538@01)
        (<= q$a@538@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1159@11@1159@391-aux|)))
(push) ; 5
(assert (not (forall ((q$a@538@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@538@01)
        (<= q$a@538@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@539@01  $PPM) ($SortWrappers.IntTo$Snap q$a@538@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1159@11@1159@391|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@538@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@538@01)
        (<= q$a@538@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@539@01  $PPM) ($SortWrappers.IntTo$Snap q$a@538@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@538@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1159@11@1159@391|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@540@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 169 | !(0 <= q$a@540@01) | live]
; [else-branch: 169 | 0 <= q$a@540@01 | live]
(push) ; 7
; [then-branch: 169 | !(0 <= q$a@540@01)]
(assert (not (<= 0 q$a@540@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 169 | 0 <= q$a@540@01]
(assert (<= 0 q$a@540@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@540@01) (not (<= 0 q$a@540@01))))
(push) ; 6
; [then-branch: 170 | 0 <= q$a@540@01 && q$a@540@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 170 | !(0 <= q$a@540@01 && q$a@540@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 170 | 0 <= q$a@540@01 && q$a@540@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@540@01)
  (<= q$a@540@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 171 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@540@01)) | live]
; [else-branch: 171 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@540@01) | live]
(push) ; 9
; [then-branch: 171 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@540@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 171 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@540@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01))))
(push) ; 8
; [then-branch: 172 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@540@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@540@01)) | live]
; [else-branch: 172 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@540@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@540@01))) | live]
(push) ; 9
; [then-branch: 172 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@540@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@540@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 173 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != q$a@540@01 | live]
; [else-branch: 173 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == q$a@540@01 | live]
(push) ; 11
; [then-branch: 173 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != q$a@540@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@540@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 173 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == q$a@540@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@540@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@541@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@541@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@541@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef28|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@541@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef29|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@540@01)) ($SortWrappers.IntTo$Snap q$a@540@01)))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@541@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@541@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef28|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@541@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef29|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@540@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@540@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@540@01)) ($SortWrappers.IntTo$Snap q$a@540@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@540@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@540@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 172 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@540@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@540@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@541@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@541@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef28|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@541@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef29|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@540@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@540@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@540@01)) ($SortWrappers.IntTo$Snap q$a@540@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@540@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@540@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 170 | !(0 <= q$a@540@01 && q$a@540@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@540@01)
    (<= q$a@540@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@541@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@541@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef28|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@541@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef29|)))
(assert (=>
  (and
    (<= 0 q$a@540@01)
    (<= q$a@540@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@540@01)
    (<= q$a@540@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@540@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@540@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@540@01)) ($SortWrappers.IntTo$Snap q$a@540@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@540@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@540@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@540@01)
      (<= q$a@540@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@540@01)
    (<= q$a@540@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@541@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@541@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef28|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@541@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef29|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@540@01 Int)) (!
  (and
    (or (<= 0 q$a@540@01) (not (<= 0 q$a@540@01)))
    (=>
      (and
        (<= 0 q$a@540@01)
        (<= q$a@540@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@540@01)
        (<= q$a@540@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@540@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@540@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@540@01)) ($SortWrappers.IntTo$Snap q$a@540@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@540@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@540@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01))))))
    (or
      (not
        (and
          (<= 0 q$a@540@01)
          (<= q$a@540@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@540@01)
        (<= q$a@540@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1160@11@1160@355-aux|)))
(push) ; 5
(assert (not (forall ((q$a@540@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@540@01)
        (<= q$a@540@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@540@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@541@01  $PPM) ($SortWrappers.IntTo$Snap q$a@540@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1160@11@1160@355|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@540@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@540@01)
        (<= q$a@540@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@540@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@541@01  $PPM) ($SortWrappers.IntTo$Snap q$a@540@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@540@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1160@11@1160@355|)))
; [exec]
; exhale true &&
;   (forall $arg0: Int, $arg1: Int, $arg2: Int ::
;     { e$Transfer($arg0, $arg1, $arg2) }
;     perm(e$Transfer($arg0, $arg1, $arg2)) > none ==>
;     acc(e$Transfer($arg0, $arg1, $arg2), perm(e$Transfer($arg0, $arg1, $arg2))))
(declare-const $arg0@542@01 Int)
(declare-const $arg1@543@01 Int)
(declare-const $arg2@544@01 Int)
(push) ; 5
; [eval] perm(e$Transfer($arg0, $arg1, $arg2)) > none
; [eval] perm(e$Transfer($arg0, $arg1, $arg2))
; Definitional axioms for snapshot map values
(declare-const pm@545@01 $PPM)
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef30|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@501@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef31|)))
(assert ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@501@01  $PSF<e$Transfer>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@542@01)
    ($SortWrappers.IntTo$Snap $arg1@543@01))
  ($SortWrappers.IntTo$Snap $arg2@544@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@542@01)
    ($SortWrappers.IntTo$Snap $arg1@543@01))
  ($SortWrappers.IntTo$Snap $arg2@544@01))))
(assert (>
  ($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@542@01)
      ($SortWrappers.IntTo$Snap $arg1@543@01))
    ($SortWrappers.IntTo$Snap $arg2@544@01)))
  $Perm.No))
; [eval] perm(e$Transfer($arg0, $arg1, $arg2))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
(declare-fun inv@546@01 (Int Int Int) Int)
(declare-fun img@547@01 (Int Int Int) Bool)
(declare-fun inv@548@01 (Int Int Int) Int)
(declare-fun img@549@01 (Int Int Int) Bool)
(declare-fun inv@550@01 (Int Int Int) Int)
(declare-fun img@551@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef30|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@501@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef31|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@542@01 Int) ($arg1@543@01 Int) ($arg2@544@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@542@01)
          ($SortWrappers.IntTo$Snap $arg1@543@01))
        ($SortWrappers.IntTo$Snap $arg2@544@01)))
      $Perm.No)
    ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@501@01  $PSF<e$Transfer>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@542@01)
        ($SortWrappers.IntTo$Snap $arg1@543@01))
      ($SortWrappers.IntTo$Snap $arg2@544@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@542@01)
        ($SortWrappers.IntTo$Snap $arg1@543@01))
      ($SortWrappers.IntTo$Snap $arg2@544@01))))
  :pattern (($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@501@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@542@01)
      ($SortWrappers.IntTo$Snap $arg1@543@01))
    ($SortWrappers.IntTo$Snap $arg2@544@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@542@01)
      ($SortWrappers.IntTo$Snap $arg1@543@01))
    ($SortWrappers.IntTo$Snap $arg2@544@01))))
  :qid |e$Transfer-aux|)))
(push) ; 5
(assert (not (forall (($arg0@542@01 Int) ($arg1@543@01 Int) ($arg2@544@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@542@01)
          ($SortWrappers.IntTo$Snap $arg1@543@01))
        ($SortWrappers.IntTo$Snap $arg2@544@01)))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@542@01)
            ($SortWrappers.IntTo$Snap $arg1@543@01))
          ($SortWrappers.IntTo$Snap $arg2@544@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@542@01)
            ($SortWrappers.IntTo$Snap $arg1@543@01))
          ($SortWrappers.IntTo$Snap $arg2@544@01))))))
  
  :qid |quant-u-1841|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall (($arg01@542@01 Int) ($arg11@543@01 Int) ($arg21@544@01 Int) ($arg02@542@01 Int) ($arg12@543@01 Int) ($arg22@544@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg01@542@01)
                ($SortWrappers.IntTo$Snap $arg11@543@01))
              ($SortWrappers.IntTo$Snap $arg21@544@01)))
            $Perm.No)
          ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@501@01  $PSF<e$Transfer>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@542@01)
              ($SortWrappers.IntTo$Snap $arg11@543@01))
            ($SortWrappers.IntTo$Snap $arg21@544@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@542@01)
              ($SortWrappers.IntTo$Snap $arg11@543@01))
            ($SortWrappers.IntTo$Snap $arg21@544@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@542@01)
              ($SortWrappers.IntTo$Snap $arg11@543@01))
            ($SortWrappers.IntTo$Snap $arg21@544@01)))))
      (and
        (and
          (>
            ($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg02@542@01)
                ($SortWrappers.IntTo$Snap $arg12@543@01))
              ($SortWrappers.IntTo$Snap $arg22@544@01)))
            $Perm.No)
          ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@501@01  $PSF<e$Transfer>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@542@01)
              ($SortWrappers.IntTo$Snap $arg12@543@01))
            ($SortWrappers.IntTo$Snap $arg22@544@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@542@01)
              ($SortWrappers.IntTo$Snap $arg12@543@01))
            ($SortWrappers.IntTo$Snap $arg22@544@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@542@01)
              ($SortWrappers.IntTo$Snap $arg12@543@01))
            ($SortWrappers.IntTo$Snap $arg22@544@01)))))
      (and
        (and (= $arg01@542@01 $arg02@542@01) (= $arg11@543@01 $arg12@543@01))
        (= $arg21@544@01 $arg22@544@01)))
    (and
      (and (= $arg01@542@01 $arg02@542@01) (= $arg11@543@01 $arg12@543@01))
      (= $arg21@544@01 $arg22@544@01)))
  
  :qid |e$Transfer-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@542@01 Int) ($arg1@543@01 Int) ($arg2@544@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@542@01)
            ($SortWrappers.IntTo$Snap $arg1@543@01))
          ($SortWrappers.IntTo$Snap $arg2@544@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@542@01)
            ($SortWrappers.IntTo$Snap $arg1@543@01))
          ($SortWrappers.IntTo$Snap $arg2@544@01)))))
    (and
      (and
        (= (inv@546@01 $arg0@542@01 $arg1@543@01 $arg2@544@01) $arg0@542@01)
        (= (inv@548@01 $arg0@542@01 $arg1@543@01 $arg2@544@01) $arg1@543@01)
        (= (inv@550@01 $arg0@542@01 $arg1@543@01 $arg2@544@01) $arg2@544@01))
      (and
        (img@547@01 $arg0@542@01 $arg1@543@01 $arg2@544@01)
        (img@549@01 $arg0@542@01 $arg1@543@01 $arg2@544@01)
        (img@551@01 $arg0@542@01 $arg1@543@01 $arg2@544@01))))
  :pattern (($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@501@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@542@01)
      ($SortWrappers.IntTo$Snap $arg1@543@01))
    ($SortWrappers.IntTo$Snap $arg2@544@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@542@01)
      ($SortWrappers.IntTo$Snap $arg1@543@01))
    ($SortWrappers.IntTo$Snap $arg2@544@01))))
  :qid |e$Transfer-invOfFct|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (and
      (and
        (img@547@01 $arg0 $arg1 $arg2)
        (img@549@01 $arg0 $arg1 $arg2)
        (img@551@01 $arg0 $arg1 $arg2))
      (and
        (>
          ($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@546@01 $arg0 $arg1 $arg2))
              ($SortWrappers.IntTo$Snap (inv@548@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@550@01 $arg0 $arg1 $arg2))))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@546@01 $arg0 $arg1 $arg2))
              ($SortWrappers.IntTo$Snap (inv@548@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@550@01 $arg0 $arg1 $arg2)))))))
    (and
      (= (inv@546@01 $arg0 $arg1 $arg2) $arg0)
      (= (inv@548@01 $arg0 $arg1 $arg2) $arg1)
      (= (inv@550@01 $arg0 $arg1 $arg2) $arg2)))
  :pattern ((inv@546@01 $arg0 $arg1 $arg2))
  :pattern ((inv@548@01 $arg0 $arg1 $arg2))
  :pattern ((inv@550@01 $arg0 $arg1 $arg2))
  :qid |e$Transfer-fctOfInv|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@546@01 $arg0 $arg1 $arg2))
          ($SortWrappers.IntTo$Snap (inv@548@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@550@01 $arg0 $arg1 $arg2))))
      $Perm.No)
    ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@501@01  $PSF<e$Transfer>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))))
  :pattern ((inv@546@01 $arg0 $arg1 $arg2) (inv@548@01 $arg0 $arg1 $arg2) (inv@550@01 $arg0 $arg1 $arg2))
  :qid |quant-u-1842|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 5
(assert (not (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@546@01 $arg0 $arg1 $arg2))
            ($SortWrappers.IntTo$Snap (inv@548@01 $arg0 $arg1 $arg2)))
          ($SortWrappers.IntTo$Snap (inv@550@01 $arg0 $arg1 $arg2))))
        $Perm.No)
      (and
        (img@547@01 $arg0 $arg1 $arg2)
        (img@549@01 $arg0 $arg1 $arg2)
        (img@551@01 $arg0 $arg1 $arg2))
      (and
        (= $arg0 (inv@546@01 $arg0 $arg1 $arg2))
        (= $arg1 (inv@548@01 $arg0 $arg1 $arg2))
        (= $arg2 (inv@550@01 $arg0 $arg1 $arg2))))
    (=
      ($PSF.perm_e$Transfer (as pm@545@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@546@01 $arg0 $arg1 $arg2))
          ($SortWrappers.IntTo$Snap (inv@548@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@550@01 $arg0 $arg1 $arg2))))
      $Perm.No))
  
  :qid |quant-u-1843|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; exhale true &&
;   (forall $arg0: Int, $arg1: Int, $arg2: Int ::
;     { e$Approval($arg0, $arg1, $arg2) }
;     perm(e$Approval($arg0, $arg1, $arg2)) > none ==>
;     acc(e$Approval($arg0, $arg1, $arg2), perm(e$Approval($arg0, $arg1, $arg2))))
(declare-const $arg0@552@01 Int)
(declare-const $arg1@553@01 Int)
(declare-const $arg2@554@01 Int)
(push) ; 5
; [eval] perm(e$Approval($arg0, $arg1, $arg2)) > none
; [eval] perm(e$Approval($arg0, $arg1, $arg2))
; Definitional axioms for snapshot map values
(declare-const pm@555@01 $PPM)
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef32|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@513@01  $PSF<e$Approval>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef33|)))
(assert ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@513@01  $PSF<e$Approval>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@552@01)
    ($SortWrappers.IntTo$Snap $arg1@553@01))
  ($SortWrappers.IntTo$Snap $arg2@554@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@552@01)
    ($SortWrappers.IntTo$Snap $arg1@553@01))
  ($SortWrappers.IntTo$Snap $arg2@554@01))))
(assert (>
  ($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@552@01)
      ($SortWrappers.IntTo$Snap $arg1@553@01))
    ($SortWrappers.IntTo$Snap $arg2@554@01)))
  $Perm.No))
; [eval] perm(e$Approval($arg0, $arg1, $arg2))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
(declare-fun inv@556@01 (Int Int Int) Int)
(declare-fun img@557@01 (Int Int Int) Bool)
(declare-fun inv@558@01 (Int Int Int) Int)
(declare-fun img@559@01 (Int Int Int) Bool)
(declare-fun inv@560@01 (Int Int Int) Int)
(declare-fun img@561@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef32|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@513@01  $PSF<e$Approval>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef33|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@552@01 Int) ($arg1@553@01 Int) ($arg2@554@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@552@01)
          ($SortWrappers.IntTo$Snap $arg1@553@01))
        ($SortWrappers.IntTo$Snap $arg2@554@01)))
      $Perm.No)
    ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@513@01  $PSF<e$Approval>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@552@01)
        ($SortWrappers.IntTo$Snap $arg1@553@01))
      ($SortWrappers.IntTo$Snap $arg2@554@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@552@01)
        ($SortWrappers.IntTo$Snap $arg1@553@01))
      ($SortWrappers.IntTo$Snap $arg2@554@01))))
  :pattern (($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@513@01  $PSF<e$Approval>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@552@01)
      ($SortWrappers.IntTo$Snap $arg1@553@01))
    ($SortWrappers.IntTo$Snap $arg2@554@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@552@01)
      ($SortWrappers.IntTo$Snap $arg1@553@01))
    ($SortWrappers.IntTo$Snap $arg2@554@01))))
  :qid |e$Approval-aux|)))
(push) ; 5
(assert (not (forall (($arg0@552@01 Int) ($arg1@553@01 Int) ($arg2@554@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@552@01)
          ($SortWrappers.IntTo$Snap $arg1@553@01))
        ($SortWrappers.IntTo$Snap $arg2@554@01)))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@552@01)
            ($SortWrappers.IntTo$Snap $arg1@553@01))
          ($SortWrappers.IntTo$Snap $arg2@554@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@552@01)
            ($SortWrappers.IntTo$Snap $arg1@553@01))
          ($SortWrappers.IntTo$Snap $arg2@554@01))))))
  
  :qid |quant-u-1844|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall (($arg01@552@01 Int) ($arg11@553@01 Int) ($arg21@554@01 Int) ($arg02@552@01 Int) ($arg12@553@01 Int) ($arg22@554@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg01@552@01)
                ($SortWrappers.IntTo$Snap $arg11@553@01))
              ($SortWrappers.IntTo$Snap $arg21@554@01)))
            $Perm.No)
          ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@513@01  $PSF<e$Approval>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@552@01)
              ($SortWrappers.IntTo$Snap $arg11@553@01))
            ($SortWrappers.IntTo$Snap $arg21@554@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@552@01)
              ($SortWrappers.IntTo$Snap $arg11@553@01))
            ($SortWrappers.IntTo$Snap $arg21@554@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@552@01)
              ($SortWrappers.IntTo$Snap $arg11@553@01))
            ($SortWrappers.IntTo$Snap $arg21@554@01)))))
      (and
        (and
          (>
            ($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg02@552@01)
                ($SortWrappers.IntTo$Snap $arg12@553@01))
              ($SortWrappers.IntTo$Snap $arg22@554@01)))
            $Perm.No)
          ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@513@01  $PSF<e$Approval>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@552@01)
              ($SortWrappers.IntTo$Snap $arg12@553@01))
            ($SortWrappers.IntTo$Snap $arg22@554@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@552@01)
              ($SortWrappers.IntTo$Snap $arg12@553@01))
            ($SortWrappers.IntTo$Snap $arg22@554@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@552@01)
              ($SortWrappers.IntTo$Snap $arg12@553@01))
            ($SortWrappers.IntTo$Snap $arg22@554@01)))))
      (and
        (and (= $arg01@552@01 $arg02@552@01) (= $arg11@553@01 $arg12@553@01))
        (= $arg21@554@01 $arg22@554@01)))
    (and
      (and (= $arg01@552@01 $arg02@552@01) (= $arg11@553@01 $arg12@553@01))
      (= $arg21@554@01 $arg22@554@01)))
  
  :qid |e$Approval-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@552@01 Int) ($arg1@553@01 Int) ($arg2@554@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@552@01)
            ($SortWrappers.IntTo$Snap $arg1@553@01))
          ($SortWrappers.IntTo$Snap $arg2@554@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@552@01)
            ($SortWrappers.IntTo$Snap $arg1@553@01))
          ($SortWrappers.IntTo$Snap $arg2@554@01)))))
    (and
      (and
        (= (inv@556@01 $arg0@552@01 $arg1@553@01 $arg2@554@01) $arg0@552@01)
        (= (inv@558@01 $arg0@552@01 $arg1@553@01 $arg2@554@01) $arg1@553@01)
        (= (inv@560@01 $arg0@552@01 $arg1@553@01 $arg2@554@01) $arg2@554@01))
      (and
        (img@557@01 $arg0@552@01 $arg1@553@01 $arg2@554@01)
        (img@559@01 $arg0@552@01 $arg1@553@01 $arg2@554@01)
        (img@561@01 $arg0@552@01 $arg1@553@01 $arg2@554@01))))
  :pattern (($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@513@01  $PSF<e$Approval>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@552@01)
      ($SortWrappers.IntTo$Snap $arg1@553@01))
    ($SortWrappers.IntTo$Snap $arg2@554@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@552@01)
      ($SortWrappers.IntTo$Snap $arg1@553@01))
    ($SortWrappers.IntTo$Snap $arg2@554@01))))
  :qid |e$Approval-invOfFct|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (and
      (and
        (img@557@01 $arg0 $arg1 $arg2)
        (img@559@01 $arg0 $arg1 $arg2)
        (img@561@01 $arg0 $arg1 $arg2))
      (and
        (>
          ($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@556@01 $arg0 $arg1 $arg2))
              ($SortWrappers.IntTo$Snap (inv@558@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@560@01 $arg0 $arg1 $arg2))))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@556@01 $arg0 $arg1 $arg2))
              ($SortWrappers.IntTo$Snap (inv@558@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@560@01 $arg0 $arg1 $arg2)))))))
    (and
      (= (inv@556@01 $arg0 $arg1 $arg2) $arg0)
      (= (inv@558@01 $arg0 $arg1 $arg2) $arg1)
      (= (inv@560@01 $arg0 $arg1 $arg2) $arg2)))
  :pattern ((inv@556@01 $arg0 $arg1 $arg2))
  :pattern ((inv@558@01 $arg0 $arg1 $arg2))
  :pattern ((inv@560@01 $arg0 $arg1 $arg2))
  :qid |e$Approval-fctOfInv|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@556@01 $arg0 $arg1 $arg2))
          ($SortWrappers.IntTo$Snap (inv@558@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@560@01 $arg0 $arg1 $arg2))))
      $Perm.No)
    ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@513@01  $PSF<e$Approval>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))))
  :pattern ((inv@556@01 $arg0 $arg1 $arg2) (inv@558@01 $arg0 $arg1 $arg2) (inv@560@01 $arg0 $arg1 $arg2))
  :qid |quant-u-1845|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 5
(assert (not (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@556@01 $arg0 $arg1 $arg2))
            ($SortWrappers.IntTo$Snap (inv@558@01 $arg0 $arg1 $arg2)))
          ($SortWrappers.IntTo$Snap (inv@560@01 $arg0 $arg1 $arg2))))
        $Perm.No)
      (and
        (img@557@01 $arg0 $arg1 $arg2)
        (img@559@01 $arg0 $arg1 $arg2)
        (img@561@01 $arg0 $arg1 $arg2))
      (and
        (= $arg0 (inv@556@01 $arg0 $arg1 $arg2))
        (= $arg1 (inv@558@01 $arg0 $arg1 $arg2))
        (= $arg2 (inv@560@01 $arg0 $arg1 $arg2))))
    (=
      ($PSF.perm_e$Approval (as pm@555@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@556@01 $arg0 $arg1 $arg2))
          ($SortWrappers.IntTo$Snap (inv@558@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@560@01 $arg0 $arg1 $arg2))))
      $Perm.No))
  
  :qid |quant-u-1846|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; exhale true &&
;   (forall $arg0: Int ::
;     { e$OpenMinter($arg0) }
;     perm(e$OpenMinter($arg0)) > none ==>
;     acc(e$OpenMinter($arg0), perm(e$OpenMinter($arg0))))
(declare-const $arg0@562@01 Int)
(push) ; 5
; [eval] perm(e$OpenMinter($arg0)) > none
; [eval] perm(e$OpenMinter($arg0))
; Definitional axioms for snapshot map values
(declare-const pm@563@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef34|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef35|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0@562@01)) ($SortWrappers.IntTo$Snap $arg0@562@01)))
(assert (>
  ($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@562@01))
  $Perm.No))
; [eval] perm(e$OpenMinter($arg0))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
(declare-fun inv@564@01 (Int) Int)
(declare-fun img@565@01 (Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef34|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef35|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@562@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@562@01))
      $Perm.No)
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0@562@01)) ($SortWrappers.IntTo$Snap $arg0@562@01)))
  :pattern (($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0@562@01)) ($SortWrappers.IntTo$Snap $arg0@562@01)))
  :qid |e$OpenMinter-aux|)))
(push) ; 5
(assert (not (forall (($arg0@562@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@562@01))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@562@01))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@562@01)))))
  
  :qid |quant-u-1847|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall (($arg01@562@01 Int) ($arg02@562@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap $arg01@562@01))
            $Perm.No)
          ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg01@562@01)) ($SortWrappers.IntTo$Snap $arg01@562@01)))
        (<
          $Perm.No
          ($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap $arg01@562@01))))
      (and
        (and
          (>
            ($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap $arg02@562@01))
            $Perm.No)
          ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg02@562@01)) ($SortWrappers.IntTo$Snap $arg02@562@01)))
        (<
          $Perm.No
          ($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap $arg02@562@01))))
      (= $arg01@562@01 $arg02@562@01))
    (= $arg01@562@01 $arg02@562@01))
  
  :qid |e$OpenMinter-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@562@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@562@01))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@562@01))))
    (and (= (inv@564@01 $arg0@562@01) $arg0@562@01) (img@565@01 $arg0@562@01)))
  :pattern (($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0@562@01)) ($SortWrappers.IntTo$Snap $arg0@562@01)))
  :qid |e$OpenMinter-invOfFct|)))
(assert (forall (($arg0 Int)) (!
  (=>
    (and
      (img@565@01 $arg0)
      (and
        (>
          ($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap (inv@564@01 $arg0)))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap (inv@564@01 $arg0))))))
    (= (inv@564@01 $arg0) $arg0))
  :pattern ((inv@564@01 $arg0))
  :qid |e$OpenMinter-fctOfInv|)))
(assert (forall (($arg0 Int)) (!
  (=>
    (>
      ($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap (inv@564@01 $arg0)))
      $Perm.No)
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0)))
  :pattern ((inv@564@01 $arg0))
  :qid |quant-u-1848|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 5
(assert (not (forall (($arg0 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap (inv@564@01 $arg0)))
        $Perm.No)
      (img@565@01 $arg0)
      (= $arg0 (inv@564@01 $arg0)))
    (=
      ($PSF.perm_e$OpenMinter (as pm@563@01  $PPM) ($SortWrappers.IntTo$Snap (inv@564@01 $arg0)))
      $Perm.No))
  
  :qid |quant-u-1849|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; exhale true &&
;   (forall $arg0: Int ::
;     { e$CloseMinter($arg0) }
;     perm(e$CloseMinter($arg0)) > none ==>
;     acc(e$CloseMinter($arg0), perm(e$CloseMinter($arg0))))
(declare-const $arg0@566@01 Int)
(push) ; 5
; [eval] perm(e$CloseMinter($arg0)) > none
; [eval] perm(e$CloseMinter($arg0))
; Definitional axioms for snapshot map values
(declare-const pm@567@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef36|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef37|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0@566@01)) ($SortWrappers.IntTo$Snap $arg0@566@01)))
(assert (>
  ($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@566@01))
  $Perm.No))
; [eval] perm(e$CloseMinter($arg0))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
(declare-fun inv@568@01 (Int) Int)
(declare-fun img@569@01 (Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef36|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef37|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@566@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@566@01))
      $Perm.No)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0@566@01)) ($SortWrappers.IntTo$Snap $arg0@566@01)))
  :pattern (($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0@566@01)) ($SortWrappers.IntTo$Snap $arg0@566@01)))
  :qid |e$CloseMinter-aux|)))
(push) ; 5
(assert (not (forall (($arg0@566@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@566@01))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@566@01))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@566@01)))))
  
  :qid |quant-u-1850|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall (($arg01@566@01 Int) ($arg02@566@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap $arg01@566@01))
            $Perm.No)
          ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg01@566@01)) ($SortWrappers.IntTo$Snap $arg01@566@01)))
        (<
          $Perm.No
          ($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap $arg01@566@01))))
      (and
        (and
          (>
            ($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap $arg02@566@01))
            $Perm.No)
          ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg02@566@01)) ($SortWrappers.IntTo$Snap $arg02@566@01)))
        (<
          $Perm.No
          ($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap $arg02@566@01))))
      (= $arg01@566@01 $arg02@566@01))
    (= $arg01@566@01 $arg02@566@01))
  
  :qid |e$CloseMinter-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@566@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@566@01))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@566@01))))
    (and (= (inv@568@01 $arg0@566@01) $arg0@566@01) (img@569@01 $arg0@566@01)))
  :pattern (($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0@566@01)) ($SortWrappers.IntTo$Snap $arg0@566@01)))
  :qid |e$CloseMinter-invOfFct|)))
(assert (forall (($arg0 Int)) (!
  (=>
    (and
      (img@569@01 $arg0)
      (and
        (>
          ($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap (inv@568@01 $arg0)))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap (inv@568@01 $arg0))))))
    (= (inv@568@01 $arg0) $arg0))
  :pattern ((inv@568@01 $arg0))
  :qid |e$CloseMinter-fctOfInv|)))
(assert (forall (($arg0 Int)) (!
  (=>
    (>
      ($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap (inv@568@01 $arg0)))
      $Perm.No)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0)))
  :pattern ((inv@568@01 $arg0))
  :qid |quant-u-1851|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 5
(assert (not (forall (($arg0 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap (inv@568@01 $arg0)))
        $Perm.No)
      (img@569@01 $arg0)
      (= $arg0 (inv@568@01 $arg0)))
    (=
      ($PSF.perm_e$CloseMinter (as pm@567@01  $PPM) ($SortWrappers.IntTo$Snap (inv@568@01 $arg0)))
      $Perm.No))
  
  :qid |quant-u-1852|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; inhale -170141183460469231731687303715884105728 <= l$raw_ret$1 &&
;   l$raw_ret$1 <= 170141183460469231731687303715884105727
(declare-const $t@570@01 $Snap)
(assert (= $t@570@01 ($Snap.combine ($Snap.first $t@570@01) ($Snap.second $t@570@01))))
(assert (= ($Snap.first $t@570@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= l$raw_ret$1
; [eval] -170141183460469231731687303715884105728
(assert (<= (- 0 170141183460469231731687303715884105728) l$raw_ret$1@430@01))
(assert (= ($Snap.second $t@570@01) $Snap.unit))
; [eval] l$raw_ret$1 <= 170141183460469231731687303715884105727
(assert (<= l$raw_ret$1@430@01 170141183460469231731687303715884105727))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not l$send_fail$1@429@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not l$send_fail$1@429@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 174 | l$send_fail$1@429@01 | live]
; [else-branch: 174 | !(l$send_fail$1@429@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 174 | l$send_fail$1@429@01]
(assert l$send_fail$1@429@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(msg, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const $t@571@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 175 | False | dead]
; [else-branch: 175 | True | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 175 | True]
(pop) ; 6
; [eval] !$succ
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 176 | True | live]
; [else-branch: 176 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 176 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 7
; [then-branch: 177 | False | dead]
; [else-branch: 177 | True | live]
(push) ; 8
; [else-branch: 177 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 178 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 3)) | live]
; [else-branch: 178 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 3)) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 178 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 9
; [then-branch: 179 | False | live]
; [else-branch: 179 | True | live]
(push) ; 10
; [then-branch: 179 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 179 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 178 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@572@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 180 | !(0 <= q$a@572@01) | live]
; [else-branch: 180 | 0 <= q$a@572@01 | live]
(push) ; 9
; [then-branch: 180 | !(0 <= q$a@572@01)]
(assert (not (<= 0 q$a@572@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 180 | 0 <= q$a@572@01]
(assert (<= 0 q$a@572@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@572@01) (not (<= 0 q$a@572@01))))
(push) ; 8
; [then-branch: 181 | 0 <= q$a@572@01 && q$a@572@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 181 | !(0 <= q$a@572@01 && q$a@572@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 181 | 0 <= q$a@572@01 && q$a@572@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@572@01)
  (<= q$a@572@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 10
; [then-branch: 182 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@572@01) | live]
; [else-branch: 182 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@572@01)) | live]
(push) ; 11
; [then-branch: 182 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@572@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
(pop) ; 11
(push) ; 11
; [else-branch: 182 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@572@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01)))
(push) ; 10
; [then-branch: 183 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@572@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@572@01) | live]
; [else-branch: 183 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@572@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@572@01)) | live]
(push) ; 11
; [then-branch: 183 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@572@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@572@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 12
; [then-branch: 184 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 1)) | live]
; [else-branch: 184 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 1)) | live]
(push) ; 13
; [then-branch: 184 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))
(pop) ; 13
(push) ; 13
; [else-branch: 184 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@573@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@573@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@573@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef38|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@573@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef39|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@572@01)) ($SortWrappers.IntTo$Snap q$a@572@01)))
; [eval] 1 * write
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@573@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@573@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef38|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@573@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef39|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@572@01)) ($SortWrappers.IntTo$Snap q$a@572@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))))
(pop) ; 11
(push) ; 11
; [else-branch: 183 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@572@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@572@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@573@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@573@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef38|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@573@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef39|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@572@01)) ($SortWrappers.IntTo$Snap q$a@572@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 181 | !(0 <= q$a@572@01 && q$a@572@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@572@01)
    (<= q$a@572@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@573@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@573@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef38|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@573@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef39|)))
(assert (=>
  (and
    (<= 0 q$a@572@01)
    (<= q$a@572@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@572@01)
    (<= q$a@572@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@572@01)) ($SortWrappers.IntTo$Snap q$a@572@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@572@01)
      (<= q$a@572@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@572@01)
    (<= q$a@572@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@573@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@573@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef38|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@573@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef39|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@572@01 Int)) (!
  (and
    (or (<= 0 q$a@572@01) (not (<= 0 q$a@572@01)))
    (=>
      (and
        (<= 0 q$a@572@01)
        (<= q$a@572@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@572@01)
        (<= q$a@572@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@572@01)) ($SortWrappers.IntTo$Snap q$a@572@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01)))))
    (or
      (not
        (and
          (<= 0 q$a@572@01)
          (<= q$a@572@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@572@01)
        (<= q$a@572@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397-aux|)))
(push) ; 7
(assert (not (forall ((q$a@572@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@572@01)
        (<= q$a@572@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@573@01  $PPM) ($SortWrappers.IntTo$Snap q$a@572@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@572@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@572@01)
        (<= q$a@572@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@573@01  $PPM) ($SortWrappers.IntTo$Snap q$a@572@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@572@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@574@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 185 | !(0 <= q$a@574@01) | live]
; [else-branch: 185 | 0 <= q$a@574@01 | live]
(push) ; 9
; [then-branch: 185 | !(0 <= q$a@574@01)]
(assert (not (<= 0 q$a@574@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 185 | 0 <= q$a@574@01]
(assert (<= 0 q$a@574@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@574@01) (not (<= 0 q$a@574@01))))
(push) ; 8
; [then-branch: 186 | 0 <= q$a@574@01 && q$a@574@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 186 | !(0 <= q$a@574@01 && q$a@574@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 186 | 0 <= q$a@574@01 && q$a@574@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@574@01)
  (<= q$a@574@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 10
; [then-branch: 187 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@574@01)) | live]
; [else-branch: 187 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@574@01) | live]
(push) ; 11
; [then-branch: 187 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@574@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 187 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@574@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01))))
(push) ; 10
; [then-branch: 188 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@574@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@574@01)) | live]
; [else-branch: 188 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@574@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@574@01))) | live]
(push) ; 11
; [then-branch: 188 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@574@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@574@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 12
; [then-branch: 189 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != q$a@574@01 | live]
; [else-branch: 189 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == q$a@574@01 | live]
(push) ; 13
; [then-branch: 189 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != q$a@574@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@574@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 189 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == q$a@574@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@574@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@575@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@575@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@575@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef40|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@575@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef41|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@574@01)) ($SortWrappers.IntTo$Snap q$a@574@01)))
; [eval] 1 * write
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@575@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@575@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef40|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@575@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef41|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@574@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@574@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@574@01)) ($SortWrappers.IntTo$Snap q$a@574@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@574@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@574@01))))
(pop) ; 11
(push) ; 11
; [else-branch: 188 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@574@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@574@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@575@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@575@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef40|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@575@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef41|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@574@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@574@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@574@01)) ($SortWrappers.IntTo$Snap q$a@574@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@574@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@574@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)))))
(pop) ; 9
(push) ; 9
; [else-branch: 186 | !(0 <= q$a@574@01 && q$a@574@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@574@01)
    (<= q$a@574@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@575@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@575@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef40|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@575@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef41|)))
(assert (=>
  (and
    (<= 0 q$a@574@01)
    (<= q$a@574@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@574@01)
    (<= q$a@574@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@574@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@574@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@574@01)) ($SortWrappers.IntTo$Snap q$a@574@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@574@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@574@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@574@01)
      (<= q$a@574@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@574@01)
    (<= q$a@574@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@575@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@575@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef40|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@575@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef41|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@574@01 Int)) (!
  (and
    (or (<= 0 q$a@574@01) (not (<= 0 q$a@574@01)))
    (=>
      (and
        (<= 0 q$a@574@01)
        (<= q$a@574@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@574@01)
        (<= q$a@574@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@574@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@574@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@574@01)) ($SortWrappers.IntTo$Snap q$a@574@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@574@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@574@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01))))))
    (or
      (not
        (and
          (<= 0 q$a@574@01)
          (<= q$a@574@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@574@01)
        (<= q$a@574@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361-aux|)))
(push) ; 7
(assert (not (forall ((q$a@574@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@574@01)
        (<= q$a@574@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@574@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@575@01  $PPM) ($SortWrappers.IntTo$Snap q$a@574@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@574@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@574@01)
        (<= q$a@574@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@574@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@575@01  $PPM) ($SortWrappers.IntTo$Snap q$a@574@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@574@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@576@01 $Snap)
(assert (= $t@576@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@432@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@577@01 $Struct)
(assert (=
  self@577@01
  ($struct_set<$Struct> self@418@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@418@01 11))
    l$havoc@432@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 6
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 174 | !(l$send_fail$1@429@01)]
(assert (not l$send_fail$1@429@01))
(pop) ; 5
; [eval] !l$send_fail$1
(push) ; 5
(set-option :timeout 10)
(assert (not l$send_fail$1@429@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not l$send_fail$1@429@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 190 | !(l$send_fail$1@429@01) | live]
; [else-branch: 190 | l$send_fail$1@429@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 190 | !(l$send_fail$1@429@01)]
(assert (not l$send_fail$1@429@01))
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [eval] !(l$raw_ret == l$raw_ret$1)
; [eval] l$raw_ret == l$raw_ret$1
(push) ; 6
(set-option :timeout 10)
(assert (not (= l$raw_ret@428@01 l$raw_ret$1@430@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= l$raw_ret@428@01 l$raw_ret$1@430@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 191 | l$raw_ret@428@01 != l$raw_ret$1@430@01 | live]
; [else-branch: 191 | l$raw_ret@428@01 == l$raw_ret$1@430@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 191 | l$raw_ret@428@01 != l$raw_ret$1@430@01]
(assert (not (= l$raw_ret@428@01 l$raw_ret$1@430@01)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 192 | False | dead]
; [else-branch: 192 | True | live]
(push) ; 7
; [else-branch: 192 | True]
(pop) ; 7
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 193 | True | live]
; [else-branch: 193 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 193 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 8
; [then-branch: 194 | False | dead]
; [else-branch: 194 | True | live]
(push) ; 9
; [else-branch: 194 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 195 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 3)) | live]
; [else-branch: 195 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 3)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 195 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 10
; [then-branch: 196 | False | live]
; [else-branch: 196 | True | live]
(push) ; 11
; [then-branch: 196 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 196 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 195 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@578@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 197 | !(0 <= q$a@578@01) | live]
; [else-branch: 197 | 0 <= q$a@578@01 | live]
(push) ; 10
; [then-branch: 197 | !(0 <= q$a@578@01)]
(assert (not (<= 0 q$a@578@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 197 | 0 <= q$a@578@01]
(assert (<= 0 q$a@578@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@578@01) (not (<= 0 q$a@578@01))))
(push) ; 9
; [then-branch: 198 | 0 <= q$a@578@01 && q$a@578@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 198 | !(0 <= q$a@578@01 && q$a@578@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 198 | 0 <= q$a@578@01 && q$a@578@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@578@01)
  (<= q$a@578@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 11
; [then-branch: 199 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@578@01) | live]
; [else-branch: 199 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@578@01)) | live]
(push) ; 12
; [then-branch: 199 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@578@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
(pop) ; 12
(push) ; 12
; [else-branch: 199 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@578@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01)))
(push) ; 11
; [then-branch: 200 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@578@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@578@01) | live]
; [else-branch: 200 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@578@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@578@01)) | live]
(push) ; 12
; [then-branch: 200 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@578@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@578@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 13
; [then-branch: 201 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 1)) | live]
; [else-branch: 201 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 1)) | live]
(push) ; 14
; [then-branch: 201 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))
(pop) ; 14
(push) ; 14
; [else-branch: 201 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@579@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@579@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@579@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef42|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@579@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef43|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@578@01)) ($SortWrappers.IntTo$Snap q$a@578@01)))
; [eval] 1 * write
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@579@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@579@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef42|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@579@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef43|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@578@01)) ($SortWrappers.IntTo$Snap q$a@578@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))))
(pop) ; 12
(push) ; 12
; [else-branch: 200 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@578@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@578@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@579@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@579@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef42|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@579@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef43|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@578@01)) ($SortWrappers.IntTo$Snap q$a@578@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 198 | !(0 <= q$a@578@01 && q$a@578@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@578@01)
    (<= q$a@578@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@579@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@579@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef42|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@579@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef43|)))
(assert (=>
  (and
    (<= 0 q$a@578@01)
    (<= q$a@578@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@578@01)
    (<= q$a@578@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@578@01)) ($SortWrappers.IntTo$Snap q$a@578@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@578@01)
      (<= q$a@578@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@578@01)
    (<= q$a@578@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@579@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@579@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef42|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@579@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef43|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@578@01 Int)) (!
  (and
    (or (<= 0 q$a@578@01) (not (<= 0 q$a@578@01)))
    (=>
      (and
        (<= 0 q$a@578@01)
        (<= q$a@578@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@578@01)
        (<= q$a@578@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@578@01)) ($SortWrappers.IntTo$Snap q$a@578@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01)))))
    (or
      (not
        (and
          (<= 0 q$a@578@01)
          (<= q$a@578@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@578@01)
        (<= q$a@578@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397-aux|)))
(push) ; 8
(assert (not (forall ((q$a@578@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@578@01)
        (<= q$a@578@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@579@01  $PPM) ($SortWrappers.IntTo$Snap q$a@578@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@578@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@578@01)
        (<= q$a@578@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@579@01  $PPM) ($SortWrappers.IntTo$Snap q$a@578@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@578@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@580@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 202 | !(0 <= q$a@580@01) | live]
; [else-branch: 202 | 0 <= q$a@580@01 | live]
(push) ; 10
; [then-branch: 202 | !(0 <= q$a@580@01)]
(assert (not (<= 0 q$a@580@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 202 | 0 <= q$a@580@01]
(assert (<= 0 q$a@580@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@580@01) (not (<= 0 q$a@580@01))))
(push) ; 9
; [then-branch: 203 | 0 <= q$a@580@01 && q$a@580@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 203 | !(0 <= q$a@580@01 && q$a@580@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 203 | 0 <= q$a@580@01 && q$a@580@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@580@01)
  (<= q$a@580@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 11
; [then-branch: 204 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@580@01)) | live]
; [else-branch: 204 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@580@01) | live]
(push) ; 12
; [then-branch: 204 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@580@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 204 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@580@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01))))
(push) ; 11
; [then-branch: 205 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@580@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@580@01)) | live]
; [else-branch: 205 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@580@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@580@01))) | live]
(push) ; 12
; [then-branch: 205 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@580@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@580@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 13
; [then-branch: 206 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != q$a@580@01 | live]
; [else-branch: 206 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == q$a@580@01 | live]
(push) ; 14
; [then-branch: 206 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != q$a@580@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@580@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 206 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == q$a@580@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@580@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@581@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@581@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@581@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef44|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@581@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef45|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@580@01)) ($SortWrappers.IntTo$Snap q$a@580@01)))
; [eval] 1 * write
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@581@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@581@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef44|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@581@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef45|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@580@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@580@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@580@01)) ($SortWrappers.IntTo$Snap q$a@580@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@580@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@580@01))))
(pop) ; 12
(push) ; 12
; [else-branch: 205 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@580@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@580@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@581@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@581@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef44|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@581@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef45|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@580@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@580@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@580@01)) ($SortWrappers.IntTo$Snap q$a@580@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@580@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@580@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)))))
(pop) ; 10
(push) ; 10
; [else-branch: 203 | !(0 <= q$a@580@01 && q$a@580@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@580@01)
    (<= q$a@580@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@581@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@581@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef44|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@581@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef45|)))
(assert (=>
  (and
    (<= 0 q$a@580@01)
    (<= q$a@580@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@580@01)
    (<= q$a@580@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@580@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@580@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@580@01)) ($SortWrappers.IntTo$Snap q$a@580@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@580@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@580@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@580@01)
      (<= q$a@580@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@580@01)
    (<= q$a@580@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@581@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@581@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef44|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@581@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef45|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@580@01 Int)) (!
  (and
    (or (<= 0 q$a@580@01) (not (<= 0 q$a@580@01)))
    (=>
      (and
        (<= 0 q$a@580@01)
        (<= q$a@580@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@580@01)
        (<= q$a@580@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@580@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@580@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@580@01)) ($SortWrappers.IntTo$Snap q$a@580@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@580@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@580@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01))))))
    (or
      (not
        (and
          (<= 0 q$a@580@01)
          (<= q$a@580@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@580@01)
        (<= q$a@580@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361-aux|)))
(push) ; 8
(assert (not (forall ((q$a@580@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@580@01)
        (<= q$a@580@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@580@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@581@01  $PPM) ($SortWrappers.IntTo$Snap q$a@580@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@580@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@580@01)
        (<= q$a@580@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@580@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@581@01  $PPM) ($SortWrappers.IntTo$Snap q$a@580@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@580@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@582@01 $Snap)
(assert (= $t@582@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@432@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@583@01 $Struct)
(assert (=
  self@583@01
  ($struct_set<$Struct> self@418@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@418@01 11))
    l$havoc@432@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 7
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 191 | l$raw_ret@428@01 == l$raw_ret$1@430@01]
(assert (= l$raw_ret@428@01 l$raw_ret$1@430@01))
(pop) ; 6
; [eval] !!(l$raw_ret == l$raw_ret$1)
; [eval] !(l$raw_ret == l$raw_ret$1)
; [eval] l$raw_ret == l$raw_ret$1
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= l$raw_ret@428@01 l$raw_ret$1@430@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= l$raw_ret@428@01 l$raw_ret$1@430@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 207 | l$raw_ret@428@01 == l$raw_ret$1@430@01 | live]
; [else-branch: 207 | l$raw_ret@428@01 != l$raw_ret$1@430@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 207 | l$raw_ret@428@01 == l$raw_ret$1@430@01]
(assert (= l$raw_ret@428@01 l$raw_ret$1@430@01))
; [eval] !(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int) >= $unwrap(l$_amount))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int) >= $unwrap(l$_amount)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_amount)
(push) ; 7
(set-option :timeout 10)
(assert (not (>=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) l$_seller@411@01)
  ($unwrap<Int> l$_amount@412@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) l$_seller@411@01)
    ($unwrap<Int> l$_amount@412@01)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 208 | !($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), l$_seller@411@01) >= $unwrap[Int](l$_amount@412@01)) | live]
; [else-branch: 208 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), l$_seller@411@01) >= $unwrap[Int](l$_amount@412@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 208 | !($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), l$_seller@411@01) >= $unwrap[Int](l$_amount@412@01))]
(assert (not
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) l$_seller@411@01)
    ($unwrap<Int> l$_amount@412@01))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 209 | False | dead]
; [else-branch: 209 | True | live]
(push) ; 8
; [else-branch: 209 | True]
(pop) ; 8
; [eval] !$succ
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 210 | True | live]
; [else-branch: 210 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 210 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
; [then-branch: 211 | False | dead]
; [else-branch: 211 | True | live]
(push) ; 10
; [else-branch: 211 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 212 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 3)) | live]
; [else-branch: 212 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 3)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 212 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 11
; [then-branch: 213 | False | live]
; [else-branch: 213 | True | live]
(push) ; 12
; [then-branch: 213 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 213 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 212 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@584@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 214 | !(0 <= q$a@584@01) | live]
; [else-branch: 214 | 0 <= q$a@584@01 | live]
(push) ; 11
; [then-branch: 214 | !(0 <= q$a@584@01)]
(assert (not (<= 0 q$a@584@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 214 | 0 <= q$a@584@01]
(assert (<= 0 q$a@584@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@584@01) (not (<= 0 q$a@584@01))))
(push) ; 10
; [then-branch: 215 | 0 <= q$a@584@01 && q$a@584@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 215 | !(0 <= q$a@584@01 && q$a@584@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 215 | 0 <= q$a@584@01 && q$a@584@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@584@01)
  (<= q$a@584@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 12
; [then-branch: 216 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@584@01) | live]
; [else-branch: 216 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@584@01)) | live]
(push) ; 13
; [then-branch: 216 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@584@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
(pop) ; 13
(push) ; 13
; [else-branch: 216 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@584@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01)))
(push) ; 12
; [then-branch: 217 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@584@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@584@01) | live]
; [else-branch: 217 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@584@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@584@01)) | live]
(push) ; 13
; [then-branch: 217 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@584@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@584@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 14
; [then-branch: 218 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 1)) | live]
; [else-branch: 218 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 1)) | live]
(push) ; 15
; [then-branch: 218 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))
(pop) ; 15
(push) ; 15
; [else-branch: 218 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@585@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@585@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@585@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef46|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@585@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef47|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@584@01)) ($SortWrappers.IntTo$Snap q$a@584@01)))
; [eval] 1 * write
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@585@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@585@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef46|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@585@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef47|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@584@01)) ($SortWrappers.IntTo$Snap q$a@584@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))))
(pop) ; 13
(push) ; 13
; [else-branch: 217 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@584@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@584@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@585@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@585@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef46|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@585@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef47|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@584@01)) ($SortWrappers.IntTo$Snap q$a@584@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))))
(pop) ; 11
(push) ; 11
; [else-branch: 215 | !(0 <= q$a@584@01 && q$a@584@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@584@01)
    (<= q$a@584@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@585@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@585@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef46|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@585@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef47|)))
(assert (=>
  (and
    (<= 0 q$a@584@01)
    (<= q$a@584@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@584@01)
    (<= q$a@584@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@584@01)) ($SortWrappers.IntTo$Snap q$a@584@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@584@01)
      (<= q$a@584@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@584@01)
    (<= q$a@584@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@585@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@585@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef46|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@585@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef47|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@584@01 Int)) (!
  (and
    (or (<= 0 q$a@584@01) (not (<= 0 q$a@584@01)))
    (=>
      (and
        (<= 0 q$a@584@01)
        (<= q$a@584@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@584@01)
        (<= q$a@584@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@584@01)) ($SortWrappers.IntTo$Snap q$a@584@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01)))))
    (or
      (not
        (and
          (<= 0 q$a@584@01)
          (<= q$a@584@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@584@01)
        (<= q$a@584@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397-aux|)))
(push) ; 9
(assert (not (forall ((q$a@584@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@584@01)
        (<= q$a@584@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@585@01  $PPM) ($SortWrappers.IntTo$Snap q$a@584@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@584@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@584@01)
        (<= q$a@584@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@585@01  $PPM) ($SortWrappers.IntTo$Snap q$a@584@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@584@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@586@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 219 | !(0 <= q$a@586@01) | live]
; [else-branch: 219 | 0 <= q$a@586@01 | live]
(push) ; 11
; [then-branch: 219 | !(0 <= q$a@586@01)]
(assert (not (<= 0 q$a@586@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 219 | 0 <= q$a@586@01]
(assert (<= 0 q$a@586@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@586@01) (not (<= 0 q$a@586@01))))
(push) ; 10
; [then-branch: 220 | 0 <= q$a@586@01 && q$a@586@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 220 | !(0 <= q$a@586@01 && q$a@586@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 220 | 0 <= q$a@586@01 && q$a@586@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@586@01)
  (<= q$a@586@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 12
; [then-branch: 221 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@586@01)) | live]
; [else-branch: 221 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@586@01) | live]
(push) ; 13
; [then-branch: 221 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@586@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 221 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@586@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01))))
(push) ; 12
; [then-branch: 222 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@586@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@586@01)) | live]
; [else-branch: 222 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@586@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@586@01))) | live]
(push) ; 13
; [then-branch: 222 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@586@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@586@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 14
; [then-branch: 223 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != q$a@586@01 | live]
; [else-branch: 223 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == q$a@586@01 | live]
(push) ; 15
; [then-branch: 223 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != q$a@586@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@586@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 223 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == q$a@586@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@586@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@587@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@587@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@587@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef48|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@587@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef49|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@586@01)) ($SortWrappers.IntTo$Snap q$a@586@01)))
; [eval] 1 * write
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@587@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@587@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef48|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@587@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef49|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@586@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@586@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@586@01)) ($SortWrappers.IntTo$Snap q$a@586@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@586@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@586@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 222 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@586@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@586@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@587@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@587@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef48|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@587@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef49|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@586@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@586@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@586@01)) ($SortWrappers.IntTo$Snap q$a@586@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@586@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@586@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 220 | !(0 <= q$a@586@01 && q$a@586@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@586@01)
    (<= q$a@586@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@587@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@587@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef48|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@587@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef49|)))
(assert (=>
  (and
    (<= 0 q$a@586@01)
    (<= q$a@586@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@586@01)
    (<= q$a@586@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@586@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@586@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@586@01)) ($SortWrappers.IntTo$Snap q$a@586@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@586@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@586@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@586@01)
      (<= q$a@586@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@586@01)
    (<= q$a@586@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@587@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@587@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef48|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@587@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef49|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@586@01 Int)) (!
  (and
    (or (<= 0 q$a@586@01) (not (<= 0 q$a@586@01)))
    (=>
      (and
        (<= 0 q$a@586@01)
        (<= q$a@586@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@586@01)
        (<= q$a@586@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@586@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@586@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@586@01)) ($SortWrappers.IntTo$Snap q$a@586@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@586@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@586@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01))))))
    (or
      (not
        (and
          (<= 0 q$a@586@01)
          (<= q$a@586@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@586@01)
        (<= q$a@586@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361-aux|)))
(push) ; 9
(assert (not (forall ((q$a@586@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@586@01)
        (<= q$a@586@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@586@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@587@01  $PPM) ($SortWrappers.IntTo$Snap q$a@586@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@586@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@586@01)
        (<= q$a@586@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@586@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@587@01  $PPM) ($SortWrappers.IntTo$Snap q$a@586@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@586@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@588@01 $Snap)
(assert (= $t@588@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@432@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@589@01 $Struct)
(assert (=
  self@589@01
  ($struct_set<$Struct> self@418@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@418@01 11))
    l$havoc@432@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 8
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 208 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), l$_seller@411@01) >= $unwrap[Int](l$_amount@412@01)]
(assert (>=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) l$_seller@411@01)
  ($unwrap<Int> l$_amount@412@01)))
(pop) ; 7
; [eval] !!(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int) >= $unwrap(l$_amount))
; [eval] !(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int) >= $unwrap(l$_amount))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int) >= $unwrap(l$_amount)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_amount)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) l$_seller@411@01)
    ($unwrap<Int> l$_amount@412@01)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (>=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) l$_seller@411@01)
  ($unwrap<Int> l$_amount@412@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 224 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), l$_seller@411@01) >= $unwrap[Int](l$_amount@412@01) | live]
; [else-branch: 224 | !($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), l$_seller@411@01) >= $unwrap[Int](l$_amount@412@01)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 224 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), l$_seller@411@01) >= $unwrap[Int](l$_amount@412@01)]
(assert (>=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) l$_seller@411@01)
  ($unwrap<Int> l$_amount@412@01)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int))) - $unwrap(l$_amount) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int))) - $unwrap(l$_amount)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_amount)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) l$_seller@411@01)))
      ($unwrap<Int> l$_amount@412@01))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 225 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), l$_seller@411@01))) - $unwrap[Int](l$_amount@412@01) < 0 | dead]
; [else-branch: 225 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), l$_seller@411@01))) - $unwrap[Int](l$_amount@412@01) < 0) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 225 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), l$_seller@411@01))) - $unwrap[Int](l$_amount@412@01) < 0)]
(assert (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) l$_seller@411@01)))
      ($unwrap<Int> l$_amount@412@01))
    0)))
(pop) ; 8
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int))) - $unwrap(l$_amount) < 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int))) - $unwrap(l$_amount) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int))) - $unwrap(l$_amount)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_amount)
(push) ; 8
(set-option :timeout 10)
(assert (not (<
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) l$_seller@411@01)))
    ($unwrap<Int> l$_amount@412@01))
  0)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) l$_seller@411@01)))
      ($unwrap<Int> l$_amount@412@01))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 226 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), l$_seller@411@01))) - $unwrap[Int](l$_amount@412@01) < 0) | live]
; [else-branch: 226 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), l$_seller@411@01))) - $unwrap[Int](l$_amount@412@01) < 0 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 226 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), l$_seller@411@01))) - $unwrap[Int](l$_amount@412@01) < 0)]
(assert (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) l$_seller@411@01)))
      ($unwrap<Int> l$_amount@412@01))
    0)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int))) - $unwrap(l$_amount) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int))) - $unwrap(l$_amount)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_amount)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) l$_seller@411@01)))
      ($unwrap<Int> l$_amount@412@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 227 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), l$_seller@411@01))) - $unwrap[Int](l$_amount@412@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 227 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), l$_seller@411@01))) - $unwrap[Int](l$_amount@412@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 227 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), l$_seller@411@01))) - $unwrap[Int](l$_amount@412@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) l$_seller@411@01)))
      ($unwrap<Int> l$_amount@412@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 9
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int))) - $unwrap(l$_amount) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int))) - $unwrap(l$_amount) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int))) - $unwrap(l$_amount)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_amount)
(push) ; 9
(set-option :timeout 10)
(assert (not (>
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) l$_seller@411@01)))
    ($unwrap<Int> l$_amount@412@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) l$_seller@411@01)))
      ($unwrap<Int> l$_amount@412@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 228 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), l$_seller@411@01))) - $unwrap[Int](l$_amount@412@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 228 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), l$_seller@411@01))) - $unwrap[Int](l$_amount@412@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 228 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), l$_seller@411@01))) - $unwrap[Int](l$_amount@412@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) l$_seller@411@01)))
      ($unwrap<Int> l$_amount@412@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   l$_seller, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   l$_seller): Int))) -
;   $unwrap(l$_amount)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int))) - $unwrap(l$_amount)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int))) - $unwrap(l$_amount)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int))) - $unwrap(l$_amount)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_seller): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_amount)
(declare-const self@590@01 $Struct)
(assert (=
  self@590@01
  ($struct_set<$Struct> self@418@01 8 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) l$_seller@411@01 (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) l$_seller@411@01)))
    ($unwrap<Int> l$_amount@412@01))))))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) - $unwrap(l$_amount) < 0
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) - $unwrap(l$_amount)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 10)): Int))
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
; [eval] $unwrap(l$_amount)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@590@01 10))))
      ($unwrap<Int> l$_amount@412@01))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  (-
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@590@01 10))))
    ($unwrap<Int> l$_amount@412@01))
  0)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 229 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@590@01, 10)))) - $unwrap[Int](l$_amount@412@01) < 0 | live]
; [else-branch: 229 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@590@01, 10)))) - $unwrap[Int](l$_amount@412@01) < 0) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 229 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@590@01, 10)))) - $unwrap[Int](l$_amount@412@01) < 0]
(assert (<
  (-
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@590@01 10))))
    ($unwrap<Int> l$_amount@412@01))
  0))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 230 | False | dead]
; [else-branch: 230 | True | live]
(push) ; 11
; [else-branch: 230 | True]
(pop) ; 11
; [eval] !$succ
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 231 | True | live]
; [else-branch: 231 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 231 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 12
; [then-branch: 232 | False | dead]
; [else-branch: 232 | True | live]
(push) ; 13
; [else-branch: 232 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 233 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 3)) | live]
; [else-branch: 233 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 3)) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 233 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 14
; [then-branch: 234 | False | live]
; [else-branch: 234 | True | live]
(push) ; 15
; [then-branch: 234 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 234 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 233 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@591@01 Int)
(push) ; 12
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 13
; [then-branch: 235 | !(0 <= q$a@591@01) | live]
; [else-branch: 235 | 0 <= q$a@591@01 | live]
(push) ; 14
; [then-branch: 235 | !(0 <= q$a@591@01)]
(assert (not (<= 0 q$a@591@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 235 | 0 <= q$a@591@01]
(assert (<= 0 q$a@591@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@591@01) (not (<= 0 q$a@591@01))))
(push) ; 13
; [then-branch: 236 | 0 <= q$a@591@01 && q$a@591@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 236 | !(0 <= q$a@591@01 && q$a@591@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 14
; [then-branch: 236 | 0 <= q$a@591@01 && q$a@591@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@591@01)
  (<= q$a@591@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 15
; [then-branch: 237 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@591@01) | live]
; [else-branch: 237 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@591@01)) | live]
(push) ; 16
; [then-branch: 237 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@591@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
(pop) ; 16
(push) ; 16
; [else-branch: 237 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@591@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01)))
(push) ; 15
; [then-branch: 238 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@591@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@591@01) | live]
; [else-branch: 238 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@591@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@591@01)) | live]
(push) ; 16
; [then-branch: 238 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@591@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@591@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 17
; [then-branch: 239 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 1)) | live]
; [else-branch: 239 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 1)) | live]
(push) ; 18
; [then-branch: 239 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))
(pop) ; 18
(push) ; 18
; [else-branch: 239 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@592@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@592@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@592@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef50|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@592@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef51|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@591@01)) ($SortWrappers.IntTo$Snap q$a@591@01)))
; [eval] 1 * write
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@592@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@592@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef50|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@592@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef51|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@591@01)) ($SortWrappers.IntTo$Snap q$a@591@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))))
(pop) ; 16
(push) ; 16
; [else-branch: 238 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@591@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@591@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@592@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@592@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef50|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@592@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef51|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@591@01)) ($SortWrappers.IntTo$Snap q$a@591@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))))
(pop) ; 14
(push) ; 14
; [else-branch: 236 | !(0 <= q$a@591@01 && q$a@591@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@591@01)
    (<= q$a@591@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@592@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@592@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef50|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@592@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef51|)))
(assert (=>
  (and
    (<= 0 q$a@591@01)
    (<= q$a@591@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@591@01)
    (<= q$a@591@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@591@01)) ($SortWrappers.IntTo$Snap q$a@591@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@591@01)
      (<= q$a@591@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@591@01)
    (<= q$a@591@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@592@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@592@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef50|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@592@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef51|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@591@01 Int)) (!
  (and
    (or (<= 0 q$a@591@01) (not (<= 0 q$a@591@01)))
    (=>
      (and
        (<= 0 q$a@591@01)
        (<= q$a@591@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@591@01)
        (<= q$a@591@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@591@01)) ($SortWrappers.IntTo$Snap q$a@591@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01)))))
    (or
      (not
        (and
          (<= 0 q$a@591@01)
          (<= q$a@591@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@591@01)
        (<= q$a@591@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397-aux|)))
(push) ; 12
(assert (not (forall ((q$a@591@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@591@01)
        (<= q$a@591@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@592@01  $PPM) ($SortWrappers.IntTo$Snap q$a@591@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@591@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@591@01)
        (<= q$a@591@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@592@01  $PPM) ($SortWrappers.IntTo$Snap q$a@591@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@591@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@593@01 Int)
(push) ; 12
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 13
; [then-branch: 240 | !(0 <= q$a@593@01) | live]
; [else-branch: 240 | 0 <= q$a@593@01 | live]
(push) ; 14
; [then-branch: 240 | !(0 <= q$a@593@01)]
(assert (not (<= 0 q$a@593@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 240 | 0 <= q$a@593@01]
(assert (<= 0 q$a@593@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@593@01) (not (<= 0 q$a@593@01))))
(push) ; 13
; [then-branch: 241 | 0 <= q$a@593@01 && q$a@593@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 241 | !(0 <= q$a@593@01 && q$a@593@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 14
; [then-branch: 241 | 0 <= q$a@593@01 && q$a@593@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@593@01)
  (<= q$a@593@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 15
; [then-branch: 242 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@593@01)) | live]
; [else-branch: 242 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@593@01) | live]
(push) ; 16
; [then-branch: 242 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@593@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 242 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@593@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01))))
(push) ; 15
; [then-branch: 243 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@593@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@593@01)) | live]
; [else-branch: 243 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@593@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@593@01))) | live]
(push) ; 16
; [then-branch: 243 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@593@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@593@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 17
; [then-branch: 244 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != q$a@593@01 | live]
; [else-branch: 244 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == q$a@593@01 | live]
(push) ; 18
; [then-branch: 244 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != q$a@593@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@593@01)))
(pop) ; 18
(push) ; 18
; [else-branch: 244 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == q$a@593@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@593@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@594@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@594@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@594@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef52|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@594@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef53|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@593@01)) ($SortWrappers.IntTo$Snap q$a@593@01)))
; [eval] 1 * write
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@594@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@594@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef52|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@594@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef53|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@593@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@593@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@593@01)) ($SortWrappers.IntTo$Snap q$a@593@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@593@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@593@01))))
(pop) ; 16
(push) ; 16
; [else-branch: 243 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@593@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@593@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@594@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@594@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef52|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@594@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef53|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@593@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@593@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@593@01)) ($SortWrappers.IntTo$Snap q$a@593@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@593@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@593@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)))))
(pop) ; 14
(push) ; 14
; [else-branch: 241 | !(0 <= q$a@593@01 && q$a@593@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@593@01)
    (<= q$a@593@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@594@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@594@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef52|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@594@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef53|)))
(assert (=>
  (and
    (<= 0 q$a@593@01)
    (<= q$a@593@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@593@01)
    (<= q$a@593@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@593@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@593@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@593@01)) ($SortWrappers.IntTo$Snap q$a@593@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@593@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@593@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@593@01)
      (<= q$a@593@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@593@01)
    (<= q$a@593@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@594@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@594@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef52|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@594@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef53|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@593@01 Int)) (!
  (and
    (or (<= 0 q$a@593@01) (not (<= 0 q$a@593@01)))
    (=>
      (and
        (<= 0 q$a@593@01)
        (<= q$a@593@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@593@01)
        (<= q$a@593@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@593@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@593@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@593@01)) ($SortWrappers.IntTo$Snap q$a@593@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@593@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@593@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01))))))
    (or
      (not
        (and
          (<= 0 q$a@593@01)
          (<= q$a@593@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@593@01)
        (<= q$a@593@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361-aux|)))
(push) ; 12
(assert (not (forall ((q$a@593@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@593@01)
        (<= q$a@593@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@593@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@594@01  $PPM) ($SortWrappers.IntTo$Snap q$a@593@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@593@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@593@01)
        (<= q$a@593@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@593@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@594@01  $PPM) ($SortWrappers.IntTo$Snap q$a@593@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@593@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@595@01 $Snap)
(assert (= $t@595@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@432@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@596@01 $Struct)
(assert (=
  self@596@01
  ($struct_set<$Struct> self@418@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@418@01 11))
    l$havoc@432@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 11
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 229 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@590@01, 10)))) - $unwrap[Int](l$_amount@412@01) < 0)]
(assert (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@590@01 10))))
      ($unwrap<Int> l$_amount@412@01))
    0)))
(pop) ; 10
; [eval] !($unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) - $unwrap(l$_amount) < 0)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) - $unwrap(l$_amount) < 0
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) - $unwrap(l$_amount)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 10)): Int))
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
; [eval] $unwrap(l$_amount)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  (-
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@590@01 10))))
    ($unwrap<Int> l$_amount@412@01))
  0)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@590@01 10))))
      ($unwrap<Int> l$_amount@412@01))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 245 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@590@01, 10)))) - $unwrap[Int](l$_amount@412@01) < 0) | live]
; [else-branch: 245 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@590@01, 10)))) - $unwrap[Int](l$_amount@412@01) < 0 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 245 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@590@01, 10)))) - $unwrap[Int](l$_amount@412@01) < 0)]
(assert (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@590@01 10))))
      ($unwrap<Int> l$_amount@412@01))
    0)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) - $unwrap(l$_amount) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) - $unwrap(l$_amount)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 10)): Int))
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
; [eval] $unwrap(l$_amount)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@590@01 10))))
      ($unwrap<Int> l$_amount@412@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 246 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@590@01, 10)))) - $unwrap[Int](l$_amount@412@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 246 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@590@01, 10)))) - $unwrap[Int](l$_amount@412@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 246 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@590@01, 10)))) - $unwrap[Int](l$_amount@412@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@590@01 10))))
      ($unwrap<Int> l$_amount@412@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 11
; [eval] !($unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) - $unwrap(l$_amount) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) - $unwrap(l$_amount) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) - $unwrap(l$_amount)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 10)): Int))
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
; [eval] $unwrap(l$_amount)
(push) ; 11
(set-option :timeout 10)
(assert (not (>
  (-
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@590@01 10))))
    ($unwrap<Int> l$_amount@412@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@590@01 10))))
      ($unwrap<Int> l$_amount@412@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 247 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@590@01, 10)))) - $unwrap[Int](l$_amount@412@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 247 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@590@01, 10)))) - $unwrap[Int](l$_amount@412@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 247 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@590@01, 10)))) - $unwrap[Int](l$_amount@412@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@590@01 10))))
      ($unwrap<Int> l$_amount@412@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 10, $unwrap($wrap(($struct_get($struct_loc(self,
;   10)): Int))) -
;   $unwrap(l$_amount)): $Struct)
; [eval] ($struct_set(self, 10, $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) - $unwrap(l$_amount)): $Struct)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) - $unwrap(l$_amount)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 10)): Int))
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
; [eval] $unwrap(l$_amount)
(declare-const self@597@01 $Struct)
(assert (=
  self@597@01
  ($struct_set<$Struct> self@590@01 10 (-
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@590@01 10))))
    ($unwrap<Int> l$_amount@412@01)))))
; [exec]
; inhale acc(e$Transfer(l$_seller, 0, $unwrap(l$_amount)), write)
; [eval] $unwrap(l$_amount)
(declare-const $t@598@01 $Snap)
(declare-const sm@599@01 $PSF<e$Transfer>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($PSF.lookup_e$Transfer (as sm@599@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap l$_seller@411@01)
      ($SortWrappers.IntTo$Snap 0))
    ($SortWrappers.IntTo$Snap ($unwrap<Int> l$_amount@412@01))))
  $t@598@01))
(assert (<=
  $Perm.No
  (ite
    (and
      (= 0 0)
      (= ($unwrap<Int> l$_amount@412@01) ($unwrap<Int> l$_amount@412@01)))
    $Perm.Write
    $Perm.No)))
; Definitional axioms for snapshot map values
(assert ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@501@01  $PSF<e$Transfer>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap l$_seller@411@01)
    ($SortWrappers.IntTo$Snap 0))
  ($SortWrappers.IntTo$Snap ($unwrap<Int> l$_amount@412@01)))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap l$_seller@411@01)
    ($SortWrappers.IntTo$Snap 0))
  ($SortWrappers.IntTo$Snap ($unwrap<Int> l$_amount@412@01)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label return
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not $out_of_gas@431@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not $out_of_gas@431@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 248 | $out_of_gas@431@01 | live]
; [else-branch: 248 | !($out_of_gas@431@01) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 248 | $out_of_gas@431@01]
(assert $out_of_gas@431@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 249 | False | dead]
; [else-branch: 249 | True | live]
(push) ; 13
; [else-branch: 249 | True]
(pop) ; 13
; [eval] !$succ
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 250 | True | live]
; [else-branch: 250 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 250 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 14
; [then-branch: 251 | False | dead]
; [else-branch: 251 | True | live]
(push) ; 15
; [else-branch: 251 | True]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 252 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 3)) | live]
; [else-branch: 252 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 3)) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 252 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 16
; [then-branch: 253 | False | live]
; [else-branch: 253 | True | live]
(push) ; 17
; [then-branch: 253 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 253 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 252 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@600@01 Int)
(push) ; 14
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 15
; [then-branch: 254 | !(0 <= q$a@600@01) | live]
; [else-branch: 254 | 0 <= q$a@600@01 | live]
(push) ; 16
; [then-branch: 254 | !(0 <= q$a@600@01)]
(assert (not (<= 0 q$a@600@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 254 | 0 <= q$a@600@01]
(assert (<= 0 q$a@600@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@600@01) (not (<= 0 q$a@600@01))))
(push) ; 15
; [then-branch: 255 | 0 <= q$a@600@01 && q$a@600@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 255 | !(0 <= q$a@600@01 && q$a@600@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 16
; [then-branch: 255 | 0 <= q$a@600@01 && q$a@600@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@600@01)
  (<= q$a@600@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 17
; [then-branch: 256 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@600@01) | live]
; [else-branch: 256 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@600@01)) | live]
(push) ; 18
; [then-branch: 256 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@600@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
(pop) ; 18
(push) ; 18
; [else-branch: 256 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@600@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01)))
(push) ; 17
; [then-branch: 257 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@600@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@600@01) | live]
; [else-branch: 257 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@600@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@600@01)) | live]
(push) ; 18
; [then-branch: 257 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@600@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@600@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 19
; [then-branch: 258 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 1)) | live]
; [else-branch: 258 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 1)) | live]
(push) ; 20
; [then-branch: 258 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@418@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))
(pop) ; 20
(push) ; 20
; [else-branch: 258 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@418@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@601@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@601@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@601@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef54|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@601@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef55|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@600@01)) ($SortWrappers.IntTo$Snap q$a@600@01)))
; [eval] 1 * write
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@601@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@601@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef54|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@601@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef55|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@600@01)) ($SortWrappers.IntTo$Snap q$a@600@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))))
(pop) ; 18
(push) ; 18
; [else-branch: 257 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@600@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@600@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@601@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@601@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef54|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@601@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef55|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@600@01)) ($SortWrappers.IntTo$Snap q$a@600@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))))
(pop) ; 16
(push) ; 16
; [else-branch: 255 | !(0 <= q$a@600@01 && q$a@600@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@600@01)
    (<= q$a@600@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@601@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@601@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef54|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@601@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef55|)))
(assert (=>
  (and
    (<= 0 q$a@600@01)
    (<= q$a@600@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@600@01)
    (<= q$a@600@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@600@01)) ($SortWrappers.IntTo$Snap q$a@600@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@600@01)
      (<= q$a@600@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@600@01)
    (<= q$a@600@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 14
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@601@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@601@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef54|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@601@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef55|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@600@01 Int)) (!
  (and
    (or (<= 0 q$a@600@01) (not (<= 0 q$a@600@01)))
    (=>
      (and
        (<= 0 q$a@600@01)
        (<= q$a@600@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@600@01)
        (<= q$a@600@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@600@01)) ($SortWrappers.IntTo$Snap q$a@600@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01)))))
    (or
      (not
        (and
          (<= 0 q$a@600@01)
          (<= q$a@600@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@600@01)
        (<= q$a@600@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397-aux|)))
(push) ; 14
(assert (not (forall ((q$a@600@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@600@01)
        (<= q$a@600@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@601@01  $PPM) ($SortWrappers.IntTo$Snap q$a@600@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397|))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@600@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@600@01)
        (<= q$a@600@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@601@01  $PPM) ($SortWrappers.IntTo$Snap q$a@600@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@600@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1223@17@1223@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@602@01 Int)
(push) ; 14
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 15
; [then-branch: 259 | !(0 <= q$a@602@01) | live]
; [else-branch: 259 | 0 <= q$a@602@01 | live]
(push) ; 16
; [then-branch: 259 | !(0 <= q$a@602@01)]
(assert (not (<= 0 q$a@602@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 259 | 0 <= q$a@602@01]
(assert (<= 0 q$a@602@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@602@01) (not (<= 0 q$a@602@01))))
(push) ; 15
; [then-branch: 260 | 0 <= q$a@602@01 && q$a@602@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 260 | !(0 <= q$a@602@01 && q$a@602@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 16
; [then-branch: 260 | 0 <= q$a@602@01 && q$a@602@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@602@01)
  (<= q$a@602@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 17
; [then-branch: 261 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@602@01)) | live]
; [else-branch: 261 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@602@01) | live]
(push) ; 18
; [then-branch: 261 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@602@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)))
(pop) ; 18
(push) ; 18
; [else-branch: 261 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@602@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01))))
(push) ; 17
; [then-branch: 262 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@602@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@602@01)) | live]
; [else-branch: 262 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@602@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@602@01))) | live]
(push) ; 18
; [then-branch: 262 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@602@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@602@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 19
; [then-branch: 263 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != q$a@602@01 | live]
; [else-branch: 263 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == q$a@602@01 | live]
(push) ; 20
; [then-branch: 263 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != q$a@602@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@602@01)))
(pop) ; 20
(push) ; 20
; [else-branch: 263 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == q$a@602@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@602@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@603@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@603@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@603@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef56|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@603@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef57|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@602@01)) ($SortWrappers.IntTo$Snap q$a@602@01)))
; [eval] 1 * write
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@603@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@603@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef56|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@603@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef57|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@602@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@602@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@602@01)) ($SortWrappers.IntTo$Snap q$a@602@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@602@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@602@01))))
(pop) ; 18
(push) ; 18
; [else-branch: 262 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@602@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@602@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@603@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@603@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef56|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@603@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef57|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@602@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@602@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@602@01)) ($SortWrappers.IntTo$Snap q$a@602@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@602@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@602@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)))))
(pop) ; 16
(push) ; 16
; [else-branch: 260 | !(0 <= q$a@602@01 && q$a@602@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@602@01)
    (<= q$a@602@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@603@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@603@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef56|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@603@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef57|)))
(assert (=>
  (and
    (<= 0 q$a@602@01)
    (<= q$a@602@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@602@01)
    (<= q$a@602@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@602@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@602@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@602@01)) ($SortWrappers.IntTo$Snap q$a@602@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@602@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@602@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@602@01)
      (<= q$a@602@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@602@01)
    (<= q$a@602@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 14
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@603@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@603@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef56|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@603@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef57|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@602@01 Int)) (!
  (and
    (or (<= 0 q$a@602@01) (not (<= 0 q$a@602@01)))
    (=>
      (and
        (<= 0 q$a@602@01)
        (<= q$a@602@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@602@01)
        (<= q$a@602@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@602@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@602@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@602@01)) ($SortWrappers.IntTo$Snap q$a@602@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@602@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@602@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01))))))
    (or
      (not
        (and
          (<= 0 q$a@602@01)
          (<= q$a@602@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@602@01)
        (<= q$a@602@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361-aux|)))
(push) ; 14
(assert (not (forall ((q$a@602@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@602@01)
        (<= q$a@602@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@602@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@603@01  $PPM) ($SortWrappers.IntTo$Snap q$a@602@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361|))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@602@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@602@01)
        (<= q$a@602@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@602@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@603@01  $PPM) ($SortWrappers.IntTo$Snap q$a@602@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@602@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1224@17@1224@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@604@01 $Snap)
(assert (= $t@604@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@432@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@605@01 $Struct)
(assert (=
  self@605@01
  ($struct_set<$Struct> self@418@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@418@01 11))
    l$havoc@432@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 13
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 248 | !($out_of_gas@431@01)]
(assert (not $out_of_gas@431@01))
(pop) ; 12
; [eval] !$out_of_gas
(push) ; 12
(set-option :timeout 10)
(assert (not $out_of_gas@431@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not $out_of_gas@431@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 264 | !($out_of_gas@431@01) | live]
; [else-branch: 264 | $out_of_gas@431@01 | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 264 | !($out_of_gas@431@01)]
(assert (not $out_of_gas@431@01))
; [exec]
; label end
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 265 | True | live]
; [else-branch: 265 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 265 | True]
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@597@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 266 | $struct_get[Int]($struct_loc[Int](self@597@01, 3)) != $struct_get[Int]($struct_loc[Int](self@418@01, 3)) | dead]
; [else-branch: 266 | $struct_get[Int]($struct_loc[Int](self@597@01, 3)) == $struct_get[Int]($struct_loc[Int](self@418@01, 3)) | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 266 | $struct_get[Int]($struct_loc[Int](self@597@01, 3)) == $struct_get[Int]($struct_loc[Int](self@418@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@597@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@597@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 3))))
; [exec]
; assert ($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@597@01 3)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@597@01 3))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 267 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@597@01, 3)) | live]
; [else-branch: 267 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@597@01, 3)) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 267 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@597@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@597@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 16
; [then-branch: 268 | $struct_get[Int]($struct_loc[Int](self@597@01, 1)) != $struct_get[Int]($struct_loc[Int](self@418@01, 1)) | live]
; [else-branch: 268 | $struct_get[Int]($struct_loc[Int](self@597@01, 1)) == $struct_get[Int]($struct_loc[Int](self@418@01, 1)) | live]
(push) ; 17
; [then-branch: 268 | $struct_get[Int]($struct_loc[Int](self@597@01, 1)) != $struct_get[Int]($struct_loc[Int](self@418@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@597@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))))
(pop) ; 17
(push) ; 17
; [else-branch: 268 | $struct_get[Int]($struct_loc[Int](self@597@01, 1)) == $struct_get[Int]($struct_loc[Int](self@418@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@597@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@597@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@597@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))))
(pop) ; 15
(push) ; 15
; [else-branch: 267 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@597@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@597@01 3))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@597@01 3))))
  (and
    (not
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@597@01 3))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> self@597@01 1))
        ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> self@597@01 1))
          ($struct_get<Int> ($struct_loc<Int> self@418@01 1))))))))
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@597@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@597@01 3))))))
(push) ; 14
(assert (not (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@597@01 3))))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@597@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@597@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 0)))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@597@01 3))))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@597@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 1)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@597@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@418@01 0))))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@606@01 Int)
(push) ; 14
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 15
; [then-branch: 269 | !(0 <= q$a@606@01) | live]
; [else-branch: 269 | 0 <= q$a@606@01 | live]
(push) ; 16
; [then-branch: 269 | !(0 <= q$a@606@01)]
(assert (not (<= 0 q$a@606@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 269 | 0 <= q$a@606@01]
(assert (<= 0 q$a@606@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@606@01) (not (<= 0 q$a@606@01))))
(push) ; 15
; [then-branch: 270 | 0 <= q$a@606@01 && q$a@606@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 270 | !(0 <= q$a@606@01 && q$a@606@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 16
; [then-branch: 270 | 0 <= q$a@606@01 && q$a@606@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@606@01)
  (<= q$a@606@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 17
; [then-branch: 271 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@606@01) | live]
; [else-branch: 271 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@606@01)) | live]
(push) ; 18
; [then-branch: 271 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@606@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
(pop) ; 18
(push) ; 18
; [else-branch: 271 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@606@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01)))
(push) ; 17
; [then-branch: 272 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@606@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@597@01, 2)), q$a@606@01) | live]
; [else-branch: 272 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@606@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@597@01, 2)), q$a@606@01)) | live]
(push) ; 18
; [then-branch: 272 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@606@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@597@01, 2)), q$a@606@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 19
; [then-branch: 273 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@597@01, 1)) | live]
; [else-branch: 273 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@597@01, 1)) | live]
(push) ; 20
; [then-branch: 273 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != $struct_get[Int]($struct_loc[Int](self@597@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))))
(pop) ; 20
(push) ; 20
; [else-branch: 273 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == $struct_get[Int]($struct_loc[Int](self@597@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@597@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@607@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@607@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@607@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef58|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@607@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef59|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@606@01)) ($SortWrappers.IntTo$Snap q$a@606@01)))
; [eval] 1 * write
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@607@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@607@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef58|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@607@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef59|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@606@01)) ($SortWrappers.IntTo$Snap q$a@606@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@597@01 1))))))
(pop) ; 18
(push) ; 18
; [else-branch: 272 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@606@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@597@01, 2)), q$a@606@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@607@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@607@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef58|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@607@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef59|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@606@01)) ($SortWrappers.IntTo$Snap q$a@606@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@597@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01))))
(pop) ; 16
(push) ; 16
; [else-branch: 270 | !(0 <= q$a@606@01 && q$a@606@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@606@01)
    (<= q$a@606@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@607@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@607@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef58|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@607@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef59|)))
(assert (=>
  (and
    (<= 0 q$a@606@01)
    (<= q$a@606@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@606@01)
    (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@606@01)) ($SortWrappers.IntTo$Snap q$a@606@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@606@01)
      (<= q$a@606@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@606@01)
    (<= q$a@606@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 14
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@607@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@607@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef58|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@607@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef59|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@606@01 Int)) (!
  (and
    (or (<= 0 q$a@606@01) (not (<= 0 q$a@606@01)))
    (=>
      (and
        (<= 0 q$a@606@01)
        (<= q$a@606@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@606@01)
        (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@606@01)) ($SortWrappers.IntTo$Snap q$a@606@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01)))))
    (or
      (not
        (and
          (<= 0 q$a@606@01)
          (<= q$a@606@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@606@01)
        (<= q$a@606@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1218@13@1218@393-aux|)))
(assert (forall ((q$a@606@01 Int)) (!
  (and
    (or (<= 0 q$a@606@01) (not (<= 0 q$a@606@01)))
    (=>
      (and
        (<= 0 q$a@606@01)
        (<= q$a@606@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@606@01)
        (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@491@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@606@01)) ($SortWrappers.IntTo$Snap q$a@606@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01)))))
    (or
      (not
        (and
          (<= 0 q$a@606@01)
          (<= q$a@606@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@606@01)
        (<= q$a@606@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1218@13@1218@393-aux|)))
(push) ; 14
(assert (not (forall ((q$a@606@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@606@01)
        (<= q$a@606@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@607@01  $PPM) ($SortWrappers.IntTo$Snap q$a@606@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1218@13@1218@393|))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@606@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@606@01)
        (<= q$a@606@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@414@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@597@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@607@01  $PPM) ($SortWrappers.IntTo$Snap q$a@606@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@606@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@606@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1218@13@1218@393|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@608@01 Int)
(push) ; 14
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 15
; [then-branch: 274 | !(0 <= q$a@608@01) | live]
; [else-branch: 274 | 0 <= q$a@608@01 | live]
(push) ; 16
; [then-branch: 274 | !(0 <= q$a@608@01)]
(assert (not (<= 0 q$a@608@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 274 | 0 <= q$a@608@01]
(assert (<= 0 q$a@608@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@608@01) (not (<= 0 q$a@608@01))))
(push) ; 15
; [then-branch: 275 | 0 <= q$a@608@01 && q$a@608@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 275 | !(0 <= q$a@608@01 && q$a@608@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 16
; [then-branch: 275 | 0 <= q$a@608@01 && q$a@608@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@608@01)
  (<= q$a@608@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 17
; [then-branch: 276 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@608@01)) | live]
; [else-branch: 276 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@608@01) | live]
(push) ; 18
; [then-branch: 276 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@608@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)))
(pop) ; 18
(push) ; 18
; [else-branch: 276 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@608@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01))))
(push) ; 17
; [then-branch: 277 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@608@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@597@01, 2)), q$a@608@01)) | live]
; [else-branch: 277 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@608@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@597@01, 2)), q$a@608@01))) | live]
(push) ; 18
; [then-branch: 277 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@608@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@597@01, 2)), q$a@608@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 19
; [then-branch: 278 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != q$a@608@01 | live]
; [else-branch: 278 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == q$a@608@01 | live]
(push) ; 20
; [then-branch: 278 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) != q$a@608@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)))
(pop) ; 20
(push) ; 20
; [else-branch: 278 | $struct_get[Int]($struct_loc[Int](msg@414@01, 0)) == q$a@608@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@609@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@609@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@609@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef60|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@609@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef61|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@608@01)) ($SortWrappers.IntTo$Snap q$a@608@01)))
; [eval] 1 * write
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@609@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@609@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef60|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@609@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef61|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@608@01)) ($SortWrappers.IntTo$Snap q$a@608@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01))))
(pop) ; 18
(push) ; 18
; [else-branch: 277 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), q$a@608@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@597@01, 2)), q$a@608@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01)))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@609@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@609@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef60|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@609@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef61|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@608@01)) ($SortWrappers.IntTo$Snap q$a@608@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01)))))
(pop) ; 16
(push) ; 16
; [else-branch: 275 | !(0 <= q$a@608@01 && q$a@608@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@608@01)
    (<= q$a@608@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@609@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@609@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef60|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@609@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef61|)))
(assert (=>
  (and
    (<= 0 q$a@608@01)
    (<= q$a@608@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@608@01)
    (<= q$a@608@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@608@01)) ($SortWrappers.IntTo$Snap q$a@608@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@608@01)
      (<= q$a@608@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@608@01)
    (<= q$a@608@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 14
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@609@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@609@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef60|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@609@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef61|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@608@01 Int)) (!
  (and
    (or (<= 0 q$a@608@01) (not (<= 0 q$a@608@01)))
    (=>
      (and
        (<= 0 q$a@608@01)
        (<= q$a@608@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@608@01)
        (<= q$a@608@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@608@01)) ($SortWrappers.IntTo$Snap q$a@608@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01))))))
    (or
      (not
        (and
          (<= 0 q$a@608@01)
          (<= q$a@608@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@608@01)
        (<= q$a@608@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1219@13@1219@357-aux|)))
(assert (forall ((q$a@608@01 Int)) (!
  (and
    (or (<= 0 q$a@608@01) (not (<= 0 q$a@608@01)))
    (=>
      (and
        (<= 0 q$a@608@01)
        (<= q$a@608@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@608@01)
        (<= q$a@608@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@495@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@608@01)) ($SortWrappers.IntTo$Snap q$a@608@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01))))))
    (or
      (not
        (and
          (<= 0 q$a@608@01)
          (<= q$a@608@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@608@01)
        (<= q$a@608@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1219@13@1219@357-aux|)))
(push) ; 14
(assert (not (forall ((q$a@608@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@608@01)
        (<= q$a@608@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@609@01  $PPM) ($SortWrappers.IntTo$Snap q$a@608@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1219@13@1219@357|))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@608@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@608@01)
        (<= q$a@608@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)) q$a@608@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@609@01  $PPM) ($SortWrappers.IntTo$Snap q$a@608@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) q$a@608@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@597@01 2)) q$a@608@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1219@13@1219@357|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@610@01 $Snap)
(assert (= $t@610@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@432@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@611@01 $Struct)
(assert (=
  self@611@01
  ($struct_set<$Struct> self@597@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@597@01 11))
    l$havoc@432@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 13
; [eval] !$succ
; [then-branch: 279 | False | dead]
; [else-branch: 279 | True | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 279 | True]
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 264 | $out_of_gas@431@01]
(assert $out_of_gas@431@01)
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 245 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@590@01, 10)))) - $unwrap[Int](l$_amount@412@01) < 0]
(assert (<
  (-
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@590@01 10))))
    ($unwrap<Int> l$_amount@412@01))
  0))
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 224 | !($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@418@01, 8)), l$_seller@411@01) >= $unwrap[Int](l$_amount@412@01))]
(assert (not
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@418@01 8)) l$_seller@411@01)
    ($unwrap<Int> l$_amount@412@01))))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 207 | l$raw_ret@428@01 != l$raw_ret$1@430@01]
(assert (not (= l$raw_ret@428@01 l$raw_ret$1@430@01)))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 190 | l$send_fail$1@429@01]
(assert l$send_fail$1@429@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 160 | l$send_fail@427@01]
(assert l$send_fail@427@01)
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 130 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@418@01, 2)), $struct_get[Int]($struct_loc[Int](msg@414@01, 0))) != True]
(assert (not
  (=
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@418@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@414@01 0)))
    true)))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$mint ----------
(declare-const l$_buyer@612@01 Int)
(declare-const l$_amount@613@01 $Int)
(declare-const $succ@614@01 Bool)
(declare-const l$_buyer@615@01 Int)
(declare-const l$_amount@616@01 $Int)
(declare-const $succ@617@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@618@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@619@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@620@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@621@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@622@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@623@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@624@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@625@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@626@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@627@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@628@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@629@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@630@01 Bool)
; [exec]
; var l$send_fail: Bool
(declare-const l$send_fail@631@01 Bool)
; [exec]
; var l$raw_ret: Int
(declare-const l$raw_ret@632@01 Int)
; [exec]
; var l$send_fail$1: Bool
(declare-const l$send_fail$1@633@01 Bool)
; [exec]
; var l$raw_ret$1: Int
(declare-const l$raw_ret$1@634@01 Int)
; [exec]
; var l$commissionAmount: $Int
(declare-const l$commissionAmount@635@01 $Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@636@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@637@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@638@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@639@01 $Snap)
(assert (= $t@639@01 ($Snap.combine ($Snap.first $t@639@01) ($Snap.second $t@639@01))))
(assert (= ($Snap.first $t@639@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@622@01 0))))
(assert (= ($Snap.second $t@639@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@622@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@640@01 $Snap)
(assert (= $t@640@01 ($Snap.combine ($Snap.first $t@640@01) ($Snap.second $t@640@01))))
(assert (= ($Snap.first $t@640@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))
(assert (= ($Snap.second $t@640@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@622@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@641@01 $Snap)
(assert (= $t@641@01 ($Snap.combine ($Snap.first $t@641@01) ($Snap.second $t@641@01))))
(assert (= ($Snap.first $t@641@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))
(assert (= ($Snap.second $t@641@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
(declare-const $t@642@01 $Snap)
(assert (= $t@642@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 4)): Seq[Int])
; [eval] $struct_loc(self, 4)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@622@01 4))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
(declare-const $t@643@01 $Snap)
(assert (= $t@643@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 5)): Seq[Int])
; [eval] $struct_loc(self, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@622@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@644@01 $Snap)
(assert (= $t@644@01 ($Snap.combine ($Snap.first $t@644@01) ($Snap.second $t@644@01))))
(assert (= ($Snap.first $t@644@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@622@01 6))))
(assert (= ($Snap.second $t@644@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@622@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@645@01 $Snap)
(assert (= $t@645@01 ($Snap.combine ($Snap.first $t@645@01) ($Snap.second $t@645@01))))
(assert (= ($Snap.first $t@645@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@622@01 7))))
(assert (= ($Snap.second $t@645@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@622@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@646@01 $Snap)
(assert (= $t@646@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@647@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 280 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 8)), $q3@647@01)) | live]
; [else-branch: 280 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 8)), $q3@647@01) | live]
(push) ; 5
; [then-branch: 280 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 8)), $q3@647@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) $q3@647@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 280 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 8)), $q3@647@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) $q3@647@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) $q3@647@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) $q3@647@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@647@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) $q3@647@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) $q3@647@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) $q3@647@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1263@11@1263@345-aux|)))
(assert (forall (($q3@647@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) $q3@647@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) $q3@647@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) $q3@647@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1263@11@1263@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@648@01 $Snap)
(assert (= $t@648@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@649@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@649@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) $q3@649@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) $q3@649@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1264@11@1264@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@650@01 $Snap)
(assert (= $t@650@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@651@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@652@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(push) ; 5
; [then-branch: 281 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@622@01, 9)), $q4@651@01), $q5@652@01)) | live]
; [else-branch: 281 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@622@01, 9)), $q4@651@01), $q5@652@01) | live]
(push) ; 6
; [then-branch: 281 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@622@01, 9)), $q4@651@01), $q5@652@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@622@01 9)) $q4@651@01) $q5@652@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 281 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@622@01, 9)), $q4@651@01), $q5@652@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@622@01 9)) $q4@651@01) $q5@652@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@622@01 9)) $q4@651@01) $q5@652@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@622@01 9)) $q4@651@01) $q5@652@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@652@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@622@01 9)) $q4@651@01) $q5@652@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@622@01 9)) $q4@651@01) $q5@652@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@622@01 9)) $q4@651@01) $q5@652@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1265@131@1265@597-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@651@01 Int)) (!
  (forall (($q5@652@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@622@01 9)) $q4@651@01) $q5@652@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@622@01 9)) $q4@651@01) $q5@652@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@622@01 9)) $q4@651@01) $q5@652@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1265@131@1265@597-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@622@01 9)) $q4@651@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1265@11@1265@598-aux|)))
(assert (forall (($q4@651@01 Int)) (!
  (forall (($q5@652@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@622@01 9)) $q4@651@01) $q5@652@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@622@01 9)) $q4@651@01) $q5@652@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@622@01 9)) $q4@651@01) $q5@652@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1265@131@1265@597|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@622@01 9)) $q4@651@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1265@11@1265@598|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@653@01 $Snap)
(assert (= $t@653@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@654@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@655@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@654@01 Int)) (!
  (forall (($q5@655@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@622@01 9)) $q4@654@01) $q5@655@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@622@01 9)) $q4@654@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@622@01 9)) $q4@654@01) $q5@655@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1266@131@1266@505|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@622@01 9)) $q4@654@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1266@11@1266@506|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 10)): Int) &&
;   ($struct_get($struct_loc(self, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@656@01 $Snap)
(assert (= $t@656@01 ($Snap.combine ($Snap.first $t@656@01) ($Snap.second $t@656@01))))
(assert (= ($Snap.first $t@656@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 10)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@622@01 10))))
(assert (= ($Snap.second $t@656@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@622@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 11)): Int) &&
;   ($struct_get($struct_loc(self, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@657@01 $Snap)
(assert (= $t@657@01 ($Snap.combine ($Snap.first $t@657@01) ($Snap.second $t@657@01))))
(assert (= ($Snap.first $t@657@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 11)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@622@01 11))))
(assert (= ($Snap.second $t@657@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@622@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 12)): Int) &&
;   ($struct_get($struct_loc(self, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@658@01 $Snap)
(assert (= $t@658@01 ($Snap.combine ($Snap.first $t@658@01) ($Snap.second $t@658@01))))
(assert (= ($Snap.first $t@658@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@622@01 12))))
(assert (= ($Snap.second $t@658@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@622@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@659@01 $Snap)
(assert (= $t@659@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@660@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(push) ; 4
; [then-branch: 282 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 14)), $q6@660@01)) | live]
; [else-branch: 282 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 14)), $q6@660@01) | live]
(push) ; 5
; [then-branch: 282 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 14)), $q6@660@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 14)) $q6@660@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 282 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 14)), $q6@660@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 14)) $q6@660@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 14)) $q6@660@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 14)) $q6@660@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@660@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 14)) $q6@660@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 14)) $q6@660@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 14)) $q6@660@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1270@11@1270@348-aux|)))
(assert (forall (($q6@660@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 14)) $q6@660@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 14)) $q6@660@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 14)) $q6@660@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1270@11@1270@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $t@661@01 $Snap)
(assert (= $t@661@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $q6@662@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@662@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 14)) $q6@662@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 14)) $q6@662@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1271@11@1271@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@663@01 $Snap)
(assert (= $t@663@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@664@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(push) ; 4
; [then-branch: 283 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 15)), $q7@664@01)) | live]
; [else-branch: 283 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 15)), $q7@664@01) | live]
(push) ; 5
; [then-branch: 283 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 15)), $q7@664@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 15)) $q7@664@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 283 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 15)), $q7@664@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 15)) $q7@664@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 15)) $q7@664@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 15)) $q7@664@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@664@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 15)) $q7@664@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 15)) $q7@664@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 15)) $q7@664@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1272@11@1272@348-aux|)))
(assert (forall (($q7@664@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 15)) $q7@664@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 15)) $q7@664@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 15)) $q7@664@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1272@11@1272@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $t@665@01 $Snap)
(assert (= $t@665@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $q7@666@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
; [eval] ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@666@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 15)) $q7@666@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 15)) $q7@666@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1273@11@1273@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@667@01 $Snap)
(assert (= $t@667@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@622@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@668@01 $Snap)
(assert (= $t@668@01 ($Snap.combine ($Snap.first $t@668@01) ($Snap.second $t@668@01))))
(assert (= ($Snap.first $t@668@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@668@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$_buyer &&
;   l$_buyer <= 1461501637330902918203684832716283019655932542975
(declare-const $t@669@01 $Snap)
(assert (= $t@669@01 ($Snap.combine ($Snap.first $t@669@01) ($Snap.second $t@669@01))))
(assert (= ($Snap.first $t@669@01) $Snap.unit))
; [eval] 0 <= l$_buyer
(assert (<= 0 l$_buyer@615@01))
(assert (= ($Snap.second $t@669@01) $Snap.unit))
; [eval] l$_buyer <= 1461501637330902918203684832716283019655932542975
(assert (<= l$_buyer@615@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $unwrap(l$_amount) &&
;   $unwrap(l$_amount) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@670@01 $Snap)
(assert (= $t@670@01 ($Snap.combine ($Snap.first $t@670@01) ($Snap.second $t@670@01))))
(assert (= ($Snap.first $t@670@01) $Snap.unit))
; [eval] 0 <= $unwrap(l$_amount)
; [eval] $unwrap(l$_amount)
(assert (<= 0 ($unwrap<Int> l$_amount@616@01)))
(assert (= ($Snap.second $t@670@01) $Snap.unit))
; [eval] $unwrap(l$_amount) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$_amount)
(assert (<=
  ($unwrap<Int> l$_amount@616@01)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@671@01 $Snap)
(assert (= $t@671@01 ($Snap.combine ($Snap.first $t@671@01) ($Snap.second $t@671@01))))
(assert (= ($Snap.first $t@671@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@619@01 0))))
(assert (= ($Snap.second $t@671@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@619@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@672@01 $Snap)
(assert (= $t@672@01 ($Snap.combine ($Snap.first $t@672@01) ($Snap.second $t@672@01))))
(assert (= ($Snap.first $t@672@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@619@01 1))))
(assert (= ($Snap.second $t@672@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@619@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@673@01 $Snap)
(assert (= $t@673@01 ($Snap.combine ($Snap.first $t@673@01) ($Snap.second $t@673@01))))
(assert (= ($Snap.first $t@673@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@619@01 2))))
(assert (= ($Snap.second $t@673@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@619@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@674@01 $Snap)
(assert (= $t@674@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@619@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@675@01 $Snap)
(assert (= $t@675@01 ($Snap.combine ($Snap.first $t@675@01) ($Snap.second $t@675@01))))
(assert (= ($Snap.first $t@675@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@619@01 4))))
(assert (= ($Snap.second $t@675@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@619@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@676@01 $Snap)
(assert (= $t@676@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@619@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@677@01 $Snap)
(assert (= $t@677@01 ($Snap.combine ($Snap.first $t@677@01) ($Snap.second $t@677@01))))
(assert (= ($Snap.first $t@677@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))))
(assert (= ($Snap.second $t@677@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@678@01 $Snap)
(assert (= $t@678@01 ($Snap.combine ($Snap.first $t@678@01) ($Snap.second $t@678@01))))
(assert (= ($Snap.first $t@678@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@618@01 1))))
(assert (= ($Snap.second $t@678@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@679@01 $Snap)
(assert (= $t@679@01 ($Snap.combine ($Snap.first $t@679@01) ($Snap.second $t@679@01))))
(assert (= ($Snap.first $t@679@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@618@01 2))))
(assert (= ($Snap.second $t@679@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@680@01 $Snap)
(assert (= $t@680@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@681@01 $Snap)
(assert (= $t@681@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $t@682@01 $Snap)
(assert (= $t@682@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $a@683@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@684@01 $Snap)
(assert (= $t@684@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool) == true)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool) == true
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)))
  true)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)))
    true))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 284 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), $struct_get[Int]($struct_loc[Int](msg@618@01, 0))) != True | live]
; [else-branch: 284 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), $struct_get[Int]($struct_loc[Int](msg@618@01, 0))) == True | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 284 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), $struct_get[Int]($struct_loc[Int](msg@618@01, 0))) != True]
(assert (not
  (=
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)))
    true)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 285 | False | dead]
; [else-branch: 285 | True | live]
(push) ; 4
; [else-branch: 285 | True]
(pop) ; 4
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 286 | True | live]
; [else-branch: 286 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 286 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
; [then-branch: 287 | False | dead]
; [else-branch: 287 | True | live]
(push) ; 6
; [else-branch: 287 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 288 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
; [else-branch: 288 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 288 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
; [then-branch: 289 | False | live]
; [else-branch: 289 | True | live]
(push) ; 8
; [then-branch: 289 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 289 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 288 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@685@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 290 | !(0 <= q$a@685@01) | live]
; [else-branch: 290 | 0 <= q$a@685@01 | live]
(push) ; 7
; [then-branch: 290 | !(0 <= q$a@685@01)]
(assert (not (<= 0 q$a@685@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 290 | 0 <= q$a@685@01]
(assert (<= 0 q$a@685@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@685@01) (not (<= 0 q$a@685@01))))
(push) ; 6
; [then-branch: 291 | 0 <= q$a@685@01 && q$a@685@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 291 | !(0 <= q$a@685@01 && q$a@685@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 291 | 0 <= q$a@685@01 && q$a@685@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@685@01)
  (<= q$a@685@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 292 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@685@01) | live]
; [else-branch: 292 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@685@01)) | live]
(push) ; 9
; [then-branch: 292 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@685@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
(pop) ; 9
(push) ; 9
; [else-branch: 292 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@685@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01)))
(push) ; 8
; [then-branch: 293 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@685@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@685@01) | live]
; [else-branch: 293 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@685@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@685@01)) | live]
(push) ; 9
; [then-branch: 293 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@685@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@685@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 10
; [then-branch: 294 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
; [else-branch: 294 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
(push) ; 11
; [then-branch: 294 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 294 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
(declare-const sm@686@01 $PSF<e$OpenMinter>)
(declare-const s@687@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@688@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@688@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@688@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef63|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@686@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@688@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef64|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@686@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@685@01)) ($SortWrappers.IntTo$Snap q$a@685@01)))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@688@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@688@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef63|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@686@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@688@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef64|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@686@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@685@01)) ($SortWrappers.IntTo$Snap q$a@685@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))
(pop) ; 9
(push) ; 9
; [else-branch: 293 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@685@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@685@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@688@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@688@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef63|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@686@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@688@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef64|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@686@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@685@01)) ($SortWrappers.IntTo$Snap q$a@685@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 291 | !(0 <= q$a@685@01 && q$a@685@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@685@01)
    (<= q$a@685@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@688@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@688@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef63|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@686@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@688@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef64|)))
(assert (=>
  (and
    (<= 0 q$a@685@01)
    (<= q$a@685@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@685@01)
    (<= q$a@685@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@686@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@685@01)) ($SortWrappers.IntTo$Snap q$a@685@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@685@01)
      (<= q$a@685@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@685@01)
    (<= q$a@685@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@688@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@688@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef63|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@686@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@688@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef64|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@685@01 Int)) (!
  (and
    (or (<= 0 q$a@685@01) (not (<= 0 q$a@685@01)))
    (=>
      (and
        (<= 0 q$a@685@01)
        (<= q$a@685@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@685@01)
        (<= q$a@685@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@686@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@685@01)) ($SortWrappers.IntTo$Snap q$a@685@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01)))))
    (or
      (not
        (and
          (<= 0 q$a@685@01)
          (<= q$a@685@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@685@01)
        (<= q$a@685@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397-aux|)))
(push) ; 5
(assert (not (forall ((q$a@685@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@685@01)
        (<= q$a@685@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@688@01  $PPM) ($SortWrappers.IntTo$Snap q$a@685@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@685@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@685@01)
        (<= q$a@685@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@688@01  $PPM) ($SortWrappers.IntTo$Snap q$a@685@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@685@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@689@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 295 | !(0 <= q$a@689@01) | live]
; [else-branch: 295 | 0 <= q$a@689@01 | live]
(push) ; 7
; [then-branch: 295 | !(0 <= q$a@689@01)]
(assert (not (<= 0 q$a@689@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 295 | 0 <= q$a@689@01]
(assert (<= 0 q$a@689@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@689@01) (not (<= 0 q$a@689@01))))
(push) ; 6
; [then-branch: 296 | 0 <= q$a@689@01 && q$a@689@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 296 | !(0 <= q$a@689@01 && q$a@689@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 296 | 0 <= q$a@689@01 && q$a@689@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@689@01)
  (<= q$a@689@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 297 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@689@01)) | live]
; [else-branch: 297 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@689@01) | live]
(push) ; 9
; [then-branch: 297 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@689@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 297 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@689@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01))))
(push) ; 8
; [then-branch: 298 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@689@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@689@01)) | live]
; [else-branch: 298 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@689@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@689@01))) | live]
(push) ; 9
; [then-branch: 298 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@689@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@689@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 299 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@689@01 | live]
; [else-branch: 299 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@689@01 | live]
(push) ; 11
; [then-branch: 299 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@689@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@689@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 299 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@689@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@689@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
(declare-const sm@690@01 $PSF<e$CloseMinter>)
(declare-const s@691@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@692@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@692@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@692@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef66|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@690@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@692@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef67|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@690@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@689@01)) ($SortWrappers.IntTo$Snap q$a@689@01)))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@692@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@692@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef66|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@690@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@692@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef67|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@689@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@689@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@690@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@689@01)) ($SortWrappers.IntTo$Snap q$a@689@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@689@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@689@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 298 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@689@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@689@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@692@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@692@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef66|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@690@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@692@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef67|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@689@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@689@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@690@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@689@01)) ($SortWrappers.IntTo$Snap q$a@689@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@689@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@689@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 296 | !(0 <= q$a@689@01 && q$a@689@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@689@01)
    (<= q$a@689@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@692@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@692@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef66|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@690@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@692@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef67|)))
(assert (=>
  (and
    (<= 0 q$a@689@01)
    (<= q$a@689@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@689@01)
    (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@689@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@689@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@690@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@689@01)) ($SortWrappers.IntTo$Snap q$a@689@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@689@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@689@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@689@01)
      (<= q$a@689@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@689@01)
    (<= q$a@689@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@692@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@692@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef66|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@690@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@692@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef67|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@689@01 Int)) (!
  (and
    (or (<= 0 q$a@689@01) (not (<= 0 q$a@689@01)))
    (=>
      (and
        (<= 0 q$a@689@01)
        (<= q$a@689@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@689@01)
        (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@689@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@689@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@690@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@689@01)) ($SortWrappers.IntTo$Snap q$a@689@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@689@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@689@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01))))))
    (or
      (not
        (and
          (<= 0 q$a@689@01)
          (<= q$a@689@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@689@01)
        (<= q$a@689@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361-aux|)))
(push) ; 5
(assert (not (forall ((q$a@689@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@689@01)
        (<= q$a@689@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@689@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@692@01  $PPM) ($SortWrappers.IntTo$Snap q$a@689@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@689@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@689@01)
        (<= q$a@689@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@689@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@692@01  $PPM) ($SortWrappers.IntTo$Snap q$a@689@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@689@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@693@01 $Snap)
(assert (= $t@693@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@637@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@694@01 $Struct)
(assert (=
  self@694@01
  ($struct_set<$Struct> self@622@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@622@01 11))
    l$havoc@637@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 4
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 284 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), $struct_get[Int]($struct_loc[Int](msg@618@01, 0))) == True]
(assert (=
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)))
  true))
(pop) ; 3
; [eval] !!(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool) == true)
; [eval] !(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool) == true)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool) == true
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)))
    true))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)))
  true)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 300 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), $struct_get[Int]($struct_loc[Int](msg@618@01, 0))) == True | live]
; [else-branch: 300 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), $struct_get[Int]($struct_loc[Int](msg@618@01, 0))) != True | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 300 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), $struct_get[Int]($struct_loc[Int](msg@618@01, 0))) == True]
(assert (=
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)))
  true))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 4
; [then-branch: 301 | False | dead]
; [else-branch: 301 | True | live]
(push) ; 5
; [else-branch: 301 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 302 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
; [else-branch: 302 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 302 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 6
; [then-branch: 303 | False | live]
; [else-branch: 303 | True | live]
(push) ; 7
; [then-branch: 303 | False]
(assert false)
(pop) ; 7
(push) ; 7
; [else-branch: 303 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 302 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@695@01 Int)
(push) ; 4
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 5
; [then-branch: 304 | !(0 <= q$a@695@01) | live]
; [else-branch: 304 | 0 <= q$a@695@01 | live]
(push) ; 6
; [then-branch: 304 | !(0 <= q$a@695@01)]
(assert (not (<= 0 q$a@695@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 304 | 0 <= q$a@695@01]
(assert (<= 0 q$a@695@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@695@01) (not (<= 0 q$a@695@01))))
(push) ; 5
; [then-branch: 305 | 0 <= q$a@695@01 && q$a@695@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 305 | !(0 <= q$a@695@01 && q$a@695@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 6
; [then-branch: 305 | 0 <= q$a@695@01 && q$a@695@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@695@01)
  (<= q$a@695@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 7
; [then-branch: 306 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@695@01) | live]
; [else-branch: 306 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@695@01)) | live]
(push) ; 8
; [then-branch: 306 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@695@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
(pop) ; 8
(push) ; 8
; [else-branch: 306 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@695@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01)))
(push) ; 7
; [then-branch: 307 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@695@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@695@01) | live]
; [else-branch: 307 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@695@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@695@01)) | live]
(push) ; 8
; [then-branch: 307 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@695@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@695@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 9
; [then-branch: 308 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
; [else-branch: 308 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
(push) ; 10
; [then-branch: 308 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 308 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
(declare-const sm@696@01 $PSF<e$OpenMinter>)
(declare-const s@697@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@698@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@698@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@698@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef69|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@698@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef70|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@695@01)) ($SortWrappers.IntTo$Snap q$a@695@01)))
; [eval] 1 * write
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@698@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@698@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef69|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@698@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef70|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@695@01)) ($SortWrappers.IntTo$Snap q$a@695@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))
(pop) ; 8
(push) ; 8
; [else-branch: 307 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@695@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@695@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@698@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@698@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef69|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@698@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef70|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@695@01)) ($SortWrappers.IntTo$Snap q$a@695@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 305 | !(0 <= q$a@695@01 && q$a@695@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@695@01)
    (<= q$a@695@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@698@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@698@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef69|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@698@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef70|)))
(assert (=>
  (and
    (<= 0 q$a@695@01)
    (<= q$a@695@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@695@01)
    (<= q$a@695@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@695@01)) ($SortWrappers.IntTo$Snap q$a@695@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@695@01)
      (<= q$a@695@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@695@01)
    (<= q$a@695@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@698@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@698@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef69|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@698@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef70|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@695@01 Int)) (!
  (and
    (or (<= 0 q$a@695@01) (not (<= 0 q$a@695@01)))
    (=>
      (and
        (<= 0 q$a@695@01)
        (<= q$a@695@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@695@01)
        (<= q$a@695@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@695@01)) ($SortWrappers.IntTo$Snap q$a@695@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01)))))
    (or
      (not
        (and
          (<= 0 q$a@695@01)
          (<= q$a@695@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@695@01)
        (<= q$a@695@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1311@11@1311@391-aux|)))
(push) ; 4
(assert (not (forall ((q$a@695@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@695@01)
        (<= q$a@695@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@698@01  $PPM) ($SortWrappers.IntTo$Snap q$a@695@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1311@11@1311@391|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@695@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@695@01)
        (<= q$a@695@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@698@01  $PPM) ($SortWrappers.IntTo$Snap q$a@695@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@695@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1311@11@1311@391|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@699@01 Int)
(push) ; 4
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 5
; [then-branch: 309 | !(0 <= q$a@699@01) | live]
; [else-branch: 309 | 0 <= q$a@699@01 | live]
(push) ; 6
; [then-branch: 309 | !(0 <= q$a@699@01)]
(assert (not (<= 0 q$a@699@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 309 | 0 <= q$a@699@01]
(assert (<= 0 q$a@699@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@699@01) (not (<= 0 q$a@699@01))))
(push) ; 5
; [then-branch: 310 | 0 <= q$a@699@01 && q$a@699@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 310 | !(0 <= q$a@699@01 && q$a@699@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 6
; [then-branch: 310 | 0 <= q$a@699@01 && q$a@699@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@699@01)
  (<= q$a@699@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 7
; [then-branch: 311 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@699@01)) | live]
; [else-branch: 311 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@699@01) | live]
(push) ; 8
; [then-branch: 311 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@699@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 311 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@699@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01))))
(push) ; 7
; [then-branch: 312 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@699@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@699@01)) | live]
; [else-branch: 312 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@699@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@699@01))) | live]
(push) ; 8
; [then-branch: 312 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@699@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@699@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 9
; [then-branch: 313 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@699@01 | live]
; [else-branch: 313 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@699@01 | live]
(push) ; 10
; [then-branch: 313 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@699@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@699@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 313 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@699@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@699@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
(declare-const sm@700@01 $PSF<e$CloseMinter>)
(declare-const s@701@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@702@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@702@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@702@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef72|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@702@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef73|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@699@01)) ($SortWrappers.IntTo$Snap q$a@699@01)))
; [eval] 1 * write
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@702@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@702@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef72|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@702@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef73|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@699@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@699@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@699@01)) ($SortWrappers.IntTo$Snap q$a@699@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@699@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@699@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 312 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@699@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@699@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@702@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@702@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef72|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@702@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef73|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@699@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@699@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@699@01)) ($SortWrappers.IntTo$Snap q$a@699@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@699@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@699@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 310 | !(0 <= q$a@699@01 && q$a@699@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@699@01)
    (<= q$a@699@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@702@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@702@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef72|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@702@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef73|)))
(assert (=>
  (and
    (<= 0 q$a@699@01)
    (<= q$a@699@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@699@01)
    (<= q$a@699@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@699@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@699@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@699@01)) ($SortWrappers.IntTo$Snap q$a@699@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@699@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@699@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@699@01)
      (<= q$a@699@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@699@01)
    (<= q$a@699@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@702@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@702@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef72|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@702@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef73|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@699@01 Int)) (!
  (and
    (or (<= 0 q$a@699@01) (not (<= 0 q$a@699@01)))
    (=>
      (and
        (<= 0 q$a@699@01)
        (<= q$a@699@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@699@01)
        (<= q$a@699@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@699@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@699@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@699@01)) ($SortWrappers.IntTo$Snap q$a@699@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@699@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@699@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01))))))
    (or
      (not
        (and
          (<= 0 q$a@699@01)
          (<= q$a@699@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@699@01)
        (<= q$a@699@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1312@11@1312@355-aux|)))
(push) ; 4
(assert (not (forall ((q$a@699@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@699@01)
        (<= q$a@699@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@699@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@702@01  $PPM) ($SortWrappers.IntTo$Snap q$a@699@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1312@11@1312@355|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@699@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@699@01)
        (<= q$a@699@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@699@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@702@01  $PPM) ($SortWrappers.IntTo$Snap q$a@699@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@699@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1312@11@1312@355|)))
; [exec]
; exhale true &&
;   (forall $arg0: Int, $arg1: Int, $arg2: Int ::
;     { e$Transfer($arg0, $arg1, $arg2) }
;     perm(e$Transfer($arg0, $arg1, $arg2)) > none ==>
;     acc(e$Transfer($arg0, $arg1, $arg2), perm(e$Transfer($arg0, $arg1, $arg2))))
(declare-const $arg0@703@01 Int)
(declare-const $arg1@704@01 Int)
(declare-const $arg2@705@01 Int)
(push) ; 4
; [eval] perm(e$Transfer($arg0, $arg1, $arg2)) > none
; [eval] perm(e$Transfer($arg0, $arg1, $arg2))
(declare-const sm@706@01 $PSF<e$Transfer>)
(declare-const s@707@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@708@01 $PPM)
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef75|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@706@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef76|)))
(assert ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@706@01  $PSF<e$Transfer>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@703@01)
    ($SortWrappers.IntTo$Snap $arg1@704@01))
  ($SortWrappers.IntTo$Snap $arg2@705@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@703@01)
    ($SortWrappers.IntTo$Snap $arg1@704@01))
  ($SortWrappers.IntTo$Snap $arg2@705@01))))
(assert (>
  ($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@703@01)
      ($SortWrappers.IntTo$Snap $arg1@704@01))
    ($SortWrappers.IntTo$Snap $arg2@705@01)))
  $Perm.No))
; [eval] perm(e$Transfer($arg0, $arg1, $arg2))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 4
(declare-fun inv@709@01 (Int Int Int) Int)
(declare-fun img@710@01 (Int Int Int) Bool)
(declare-fun inv@711@01 (Int Int Int) Int)
(declare-fun img@712@01 (Int Int Int) Bool)
(declare-fun inv@713@01 (Int Int Int) Int)
(declare-fun img@714@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef75|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@706@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef76|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@703@01 Int) ($arg1@704@01 Int) ($arg2@705@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@703@01)
          ($SortWrappers.IntTo$Snap $arg1@704@01))
        ($SortWrappers.IntTo$Snap $arg2@705@01)))
      $Perm.No)
    ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@706@01  $PSF<e$Transfer>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@703@01)
        ($SortWrappers.IntTo$Snap $arg1@704@01))
      ($SortWrappers.IntTo$Snap $arg2@705@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@703@01)
        ($SortWrappers.IntTo$Snap $arg1@704@01))
      ($SortWrappers.IntTo$Snap $arg2@705@01))))
  :pattern (($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@706@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@703@01)
      ($SortWrappers.IntTo$Snap $arg1@704@01))
    ($SortWrappers.IntTo$Snap $arg2@705@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@703@01)
      ($SortWrappers.IntTo$Snap $arg1@704@01))
    ($SortWrappers.IntTo$Snap $arg2@705@01))))
  :qid |e$Transfer-aux|)))
(push) ; 4
(assert (not (forall (($arg0@703@01 Int) ($arg1@704@01 Int) ($arg2@705@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@703@01)
          ($SortWrappers.IntTo$Snap $arg1@704@01))
        ($SortWrappers.IntTo$Snap $arg2@705@01)))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@703@01)
            ($SortWrappers.IntTo$Snap $arg1@704@01))
          ($SortWrappers.IntTo$Snap $arg2@705@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@703@01)
            ($SortWrappers.IntTo$Snap $arg1@704@01))
          ($SortWrappers.IntTo$Snap $arg2@705@01))))))
  
  :qid |quant-u-1853|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall (($arg01@703@01 Int) ($arg11@704@01 Int) ($arg21@705@01 Int) ($arg02@703@01 Int) ($arg12@704@01 Int) ($arg22@705@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg01@703@01)
                ($SortWrappers.IntTo$Snap $arg11@704@01))
              ($SortWrappers.IntTo$Snap $arg21@705@01)))
            $Perm.No)
          ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@706@01  $PSF<e$Transfer>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@703@01)
              ($SortWrappers.IntTo$Snap $arg11@704@01))
            ($SortWrappers.IntTo$Snap $arg21@705@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@703@01)
              ($SortWrappers.IntTo$Snap $arg11@704@01))
            ($SortWrappers.IntTo$Snap $arg21@705@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@703@01)
              ($SortWrappers.IntTo$Snap $arg11@704@01))
            ($SortWrappers.IntTo$Snap $arg21@705@01)))))
      (and
        (and
          (>
            ($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg02@703@01)
                ($SortWrappers.IntTo$Snap $arg12@704@01))
              ($SortWrappers.IntTo$Snap $arg22@705@01)))
            $Perm.No)
          ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@706@01  $PSF<e$Transfer>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@703@01)
              ($SortWrappers.IntTo$Snap $arg12@704@01))
            ($SortWrappers.IntTo$Snap $arg22@705@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@703@01)
              ($SortWrappers.IntTo$Snap $arg12@704@01))
            ($SortWrappers.IntTo$Snap $arg22@705@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@703@01)
              ($SortWrappers.IntTo$Snap $arg12@704@01))
            ($SortWrappers.IntTo$Snap $arg22@705@01)))))
      (and
        (and (= $arg01@703@01 $arg02@703@01) (= $arg11@704@01 $arg12@704@01))
        (= $arg21@705@01 $arg22@705@01)))
    (and
      (and (= $arg01@703@01 $arg02@703@01) (= $arg11@704@01 $arg12@704@01))
      (= $arg21@705@01 $arg22@705@01)))
  
  :qid |e$Transfer-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@703@01 Int) ($arg1@704@01 Int) ($arg2@705@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@703@01)
            ($SortWrappers.IntTo$Snap $arg1@704@01))
          ($SortWrappers.IntTo$Snap $arg2@705@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@703@01)
            ($SortWrappers.IntTo$Snap $arg1@704@01))
          ($SortWrappers.IntTo$Snap $arg2@705@01)))))
    (and
      (and
        (= (inv@709@01 $arg0@703@01 $arg1@704@01 $arg2@705@01) $arg0@703@01)
        (= (inv@711@01 $arg0@703@01 $arg1@704@01 $arg2@705@01) $arg1@704@01)
        (= (inv@713@01 $arg0@703@01 $arg1@704@01 $arg2@705@01) $arg2@705@01))
      (and
        (img@710@01 $arg0@703@01 $arg1@704@01 $arg2@705@01)
        (img@712@01 $arg0@703@01 $arg1@704@01 $arg2@705@01)
        (img@714@01 $arg0@703@01 $arg1@704@01 $arg2@705@01))))
  :pattern (($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@706@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@703@01)
      ($SortWrappers.IntTo$Snap $arg1@704@01))
    ($SortWrappers.IntTo$Snap $arg2@705@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@703@01)
      ($SortWrappers.IntTo$Snap $arg1@704@01))
    ($SortWrappers.IntTo$Snap $arg2@705@01))))
  :qid |e$Transfer-invOfFct|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (and
      (and
        (img@710@01 $arg0 $arg1 $arg2)
        (img@712@01 $arg0 $arg1 $arg2)
        (img@714@01 $arg0 $arg1 $arg2))
      (and
        (>
          ($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@709@01 $arg0 $arg1 $arg2))
              ($SortWrappers.IntTo$Snap (inv@711@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@713@01 $arg0 $arg1 $arg2))))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@709@01 $arg0 $arg1 $arg2))
              ($SortWrappers.IntTo$Snap (inv@711@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@713@01 $arg0 $arg1 $arg2)))))))
    (and
      (= (inv@709@01 $arg0 $arg1 $arg2) $arg0)
      (= (inv@711@01 $arg0 $arg1 $arg2) $arg1)
      (= (inv@713@01 $arg0 $arg1 $arg2) $arg2)))
  :pattern ((inv@709@01 $arg0 $arg1 $arg2))
  :pattern ((inv@711@01 $arg0 $arg1 $arg2))
  :pattern ((inv@713@01 $arg0 $arg1 $arg2))
  :qid |e$Transfer-fctOfInv|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@709@01 $arg0 $arg1 $arg2))
          ($SortWrappers.IntTo$Snap (inv@711@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@713@01 $arg0 $arg1 $arg2))))
      $Perm.No)
    ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@706@01  $PSF<e$Transfer>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))))
  :pattern ((inv@709@01 $arg0 $arg1 $arg2) (inv@711@01 $arg0 $arg1 $arg2) (inv@713@01 $arg0 $arg1 $arg2))
  :qid |quant-u-1854|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 4
(assert (not (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@709@01 $arg0 $arg1 $arg2))
            ($SortWrappers.IntTo$Snap (inv@711@01 $arg0 $arg1 $arg2)))
          ($SortWrappers.IntTo$Snap (inv@713@01 $arg0 $arg1 $arg2))))
        $Perm.No)
      (and
        (img@710@01 $arg0 $arg1 $arg2)
        (img@712@01 $arg0 $arg1 $arg2)
        (img@714@01 $arg0 $arg1 $arg2))
      (and
        (= $arg0 (inv@709@01 $arg0 $arg1 $arg2))
        (= $arg1 (inv@711@01 $arg0 $arg1 $arg2))
        (= $arg2 (inv@713@01 $arg0 $arg1 $arg2))))
    (=
      ($PSF.perm_e$Transfer (as pm@708@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@709@01 $arg0 $arg1 $arg2))
          ($SortWrappers.IntTo$Snap (inv@711@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@713@01 $arg0 $arg1 $arg2))))
      $Perm.No))
  
  :qid |quant-u-1855|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; exhale true &&
;   (forall $arg0: Int, $arg1: Int, $arg2: Int ::
;     { e$Approval($arg0, $arg1, $arg2) }
;     perm(e$Approval($arg0, $arg1, $arg2)) > none ==>
;     acc(e$Approval($arg0, $arg1, $arg2), perm(e$Approval($arg0, $arg1, $arg2))))
(declare-const $arg0@715@01 Int)
(declare-const $arg1@716@01 Int)
(declare-const $arg2@717@01 Int)
(push) ; 4
; [eval] perm(e$Approval($arg0, $arg1, $arg2)) > none
; [eval] perm(e$Approval($arg0, $arg1, $arg2))
(declare-const sm@718@01 $PSF<e$Approval>)
(declare-const s@719@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@720@01 $PPM)
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef78|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@718@01  $PSF<e$Approval>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef79|)))
(assert ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@718@01  $PSF<e$Approval>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@715@01)
    ($SortWrappers.IntTo$Snap $arg1@716@01))
  ($SortWrappers.IntTo$Snap $arg2@717@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@715@01)
    ($SortWrappers.IntTo$Snap $arg1@716@01))
  ($SortWrappers.IntTo$Snap $arg2@717@01))))
(assert (>
  ($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@715@01)
      ($SortWrappers.IntTo$Snap $arg1@716@01))
    ($SortWrappers.IntTo$Snap $arg2@717@01)))
  $Perm.No))
; [eval] perm(e$Approval($arg0, $arg1, $arg2))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 4
(declare-fun inv@721@01 (Int Int Int) Int)
(declare-fun img@722@01 (Int Int Int) Bool)
(declare-fun inv@723@01 (Int Int Int) Int)
(declare-fun img@724@01 (Int Int Int) Bool)
(declare-fun inv@725@01 (Int Int Int) Int)
(declare-fun img@726@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef78|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@718@01  $PSF<e$Approval>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef79|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@715@01 Int) ($arg1@716@01 Int) ($arg2@717@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@715@01)
          ($SortWrappers.IntTo$Snap $arg1@716@01))
        ($SortWrappers.IntTo$Snap $arg2@717@01)))
      $Perm.No)
    ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@718@01  $PSF<e$Approval>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@715@01)
        ($SortWrappers.IntTo$Snap $arg1@716@01))
      ($SortWrappers.IntTo$Snap $arg2@717@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@715@01)
        ($SortWrappers.IntTo$Snap $arg1@716@01))
      ($SortWrappers.IntTo$Snap $arg2@717@01))))
  :pattern (($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@718@01  $PSF<e$Approval>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@715@01)
      ($SortWrappers.IntTo$Snap $arg1@716@01))
    ($SortWrappers.IntTo$Snap $arg2@717@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@715@01)
      ($SortWrappers.IntTo$Snap $arg1@716@01))
    ($SortWrappers.IntTo$Snap $arg2@717@01))))
  :qid |e$Approval-aux|)))
(push) ; 4
(assert (not (forall (($arg0@715@01 Int) ($arg1@716@01 Int) ($arg2@717@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@715@01)
          ($SortWrappers.IntTo$Snap $arg1@716@01))
        ($SortWrappers.IntTo$Snap $arg2@717@01)))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@715@01)
            ($SortWrappers.IntTo$Snap $arg1@716@01))
          ($SortWrappers.IntTo$Snap $arg2@717@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@715@01)
            ($SortWrappers.IntTo$Snap $arg1@716@01))
          ($SortWrappers.IntTo$Snap $arg2@717@01))))))
  
  :qid |quant-u-1856|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall (($arg01@715@01 Int) ($arg11@716@01 Int) ($arg21@717@01 Int) ($arg02@715@01 Int) ($arg12@716@01 Int) ($arg22@717@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg01@715@01)
                ($SortWrappers.IntTo$Snap $arg11@716@01))
              ($SortWrappers.IntTo$Snap $arg21@717@01)))
            $Perm.No)
          ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@718@01  $PSF<e$Approval>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@715@01)
              ($SortWrappers.IntTo$Snap $arg11@716@01))
            ($SortWrappers.IntTo$Snap $arg21@717@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@715@01)
              ($SortWrappers.IntTo$Snap $arg11@716@01))
            ($SortWrappers.IntTo$Snap $arg21@717@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@715@01)
              ($SortWrappers.IntTo$Snap $arg11@716@01))
            ($SortWrappers.IntTo$Snap $arg21@717@01)))))
      (and
        (and
          (>
            ($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg02@715@01)
                ($SortWrappers.IntTo$Snap $arg12@716@01))
              ($SortWrappers.IntTo$Snap $arg22@717@01)))
            $Perm.No)
          ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@718@01  $PSF<e$Approval>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@715@01)
              ($SortWrappers.IntTo$Snap $arg12@716@01))
            ($SortWrappers.IntTo$Snap $arg22@717@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@715@01)
              ($SortWrappers.IntTo$Snap $arg12@716@01))
            ($SortWrappers.IntTo$Snap $arg22@717@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@715@01)
              ($SortWrappers.IntTo$Snap $arg12@716@01))
            ($SortWrappers.IntTo$Snap $arg22@717@01)))))
      (and
        (and (= $arg01@715@01 $arg02@715@01) (= $arg11@716@01 $arg12@716@01))
        (= $arg21@717@01 $arg22@717@01)))
    (and
      (and (= $arg01@715@01 $arg02@715@01) (= $arg11@716@01 $arg12@716@01))
      (= $arg21@717@01 $arg22@717@01)))
  
  :qid |e$Approval-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@715@01 Int) ($arg1@716@01 Int) ($arg2@717@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@715@01)
            ($SortWrappers.IntTo$Snap $arg1@716@01))
          ($SortWrappers.IntTo$Snap $arg2@717@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@715@01)
            ($SortWrappers.IntTo$Snap $arg1@716@01))
          ($SortWrappers.IntTo$Snap $arg2@717@01)))))
    (and
      (and
        (= (inv@721@01 $arg0@715@01 $arg1@716@01 $arg2@717@01) $arg0@715@01)
        (= (inv@723@01 $arg0@715@01 $arg1@716@01 $arg2@717@01) $arg1@716@01)
        (= (inv@725@01 $arg0@715@01 $arg1@716@01 $arg2@717@01) $arg2@717@01))
      (and
        (img@722@01 $arg0@715@01 $arg1@716@01 $arg2@717@01)
        (img@724@01 $arg0@715@01 $arg1@716@01 $arg2@717@01)
        (img@726@01 $arg0@715@01 $arg1@716@01 $arg2@717@01))))
  :pattern (($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@718@01  $PSF<e$Approval>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@715@01)
      ($SortWrappers.IntTo$Snap $arg1@716@01))
    ($SortWrappers.IntTo$Snap $arg2@717@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@715@01)
      ($SortWrappers.IntTo$Snap $arg1@716@01))
    ($SortWrappers.IntTo$Snap $arg2@717@01))))
  :qid |e$Approval-invOfFct|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (and
      (and
        (img@722@01 $arg0 $arg1 $arg2)
        (img@724@01 $arg0 $arg1 $arg2)
        (img@726@01 $arg0 $arg1 $arg2))
      (and
        (>
          ($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@721@01 $arg0 $arg1 $arg2))
              ($SortWrappers.IntTo$Snap (inv@723@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@725@01 $arg0 $arg1 $arg2))))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@721@01 $arg0 $arg1 $arg2))
              ($SortWrappers.IntTo$Snap (inv@723@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@725@01 $arg0 $arg1 $arg2)))))))
    (and
      (= (inv@721@01 $arg0 $arg1 $arg2) $arg0)
      (= (inv@723@01 $arg0 $arg1 $arg2) $arg1)
      (= (inv@725@01 $arg0 $arg1 $arg2) $arg2)))
  :pattern ((inv@721@01 $arg0 $arg1 $arg2))
  :pattern ((inv@723@01 $arg0 $arg1 $arg2))
  :pattern ((inv@725@01 $arg0 $arg1 $arg2))
  :qid |e$Approval-fctOfInv|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@721@01 $arg0 $arg1 $arg2))
          ($SortWrappers.IntTo$Snap (inv@723@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@725@01 $arg0 $arg1 $arg2))))
      $Perm.No)
    ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@718@01  $PSF<e$Approval>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))))
  :pattern ((inv@721@01 $arg0 $arg1 $arg2) (inv@723@01 $arg0 $arg1 $arg2) (inv@725@01 $arg0 $arg1 $arg2))
  :qid |quant-u-1857|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 4
(assert (not (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@721@01 $arg0 $arg1 $arg2))
            ($SortWrappers.IntTo$Snap (inv@723@01 $arg0 $arg1 $arg2)))
          ($SortWrappers.IntTo$Snap (inv@725@01 $arg0 $arg1 $arg2))))
        $Perm.No)
      (and
        (img@722@01 $arg0 $arg1 $arg2)
        (img@724@01 $arg0 $arg1 $arg2)
        (img@726@01 $arg0 $arg1 $arg2))
      (and
        (= $arg0 (inv@721@01 $arg0 $arg1 $arg2))
        (= $arg1 (inv@723@01 $arg0 $arg1 $arg2))
        (= $arg2 (inv@725@01 $arg0 $arg1 $arg2))))
    (=
      ($PSF.perm_e$Approval (as pm@720@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@721@01 $arg0 $arg1 $arg2))
          ($SortWrappers.IntTo$Snap (inv@723@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@725@01 $arg0 $arg1 $arg2))))
      $Perm.No))
  
  :qid |quant-u-1858|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; exhale true &&
;   (forall $arg0: Int ::
;     { e$OpenMinter($arg0) }
;     perm(e$OpenMinter($arg0)) > none ==>
;     acc(e$OpenMinter($arg0), perm(e$OpenMinter($arg0))))
(declare-const $arg0@727@01 Int)
(push) ; 4
; [eval] perm(e$OpenMinter($arg0)) > none
; [eval] perm(e$OpenMinter($arg0))
; Definitional axioms for snapshot map values
(declare-const pm@728@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef80|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef81|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0@727@01)) ($SortWrappers.IntTo$Snap $arg0@727@01)))
(assert (>
  ($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@727@01))
  $Perm.No))
; [eval] perm(e$OpenMinter($arg0))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 4
(declare-fun inv@729@01 (Int) Int)
(declare-fun img@730@01 (Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef80|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef81|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@727@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@727@01))
      $Perm.No)
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0@727@01)) ($SortWrappers.IntTo$Snap $arg0@727@01)))
  :pattern (($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0@727@01)) ($SortWrappers.IntTo$Snap $arg0@727@01)))
  :qid |e$OpenMinter-aux|)))
(push) ; 4
(assert (not (forall (($arg0@727@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@727@01))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@727@01))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@727@01)))))
  
  :qid |quant-u-1859|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall (($arg01@727@01 Int) ($arg02@727@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap $arg01@727@01))
            $Perm.No)
          ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg01@727@01)) ($SortWrappers.IntTo$Snap $arg01@727@01)))
        (<
          $Perm.No
          ($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap $arg01@727@01))))
      (and
        (and
          (>
            ($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap $arg02@727@01))
            $Perm.No)
          ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg02@727@01)) ($SortWrappers.IntTo$Snap $arg02@727@01)))
        (<
          $Perm.No
          ($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap $arg02@727@01))))
      (= $arg01@727@01 $arg02@727@01))
    (= $arg01@727@01 $arg02@727@01))
  
  :qid |e$OpenMinter-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@727@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@727@01))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@727@01))))
    (and (= (inv@729@01 $arg0@727@01) $arg0@727@01) (img@730@01 $arg0@727@01)))
  :pattern (($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0@727@01)) ($SortWrappers.IntTo$Snap $arg0@727@01)))
  :qid |e$OpenMinter-invOfFct|)))
(assert (forall (($arg0 Int)) (!
  (=>
    (and
      (img@730@01 $arg0)
      (and
        (>
          ($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap (inv@729@01 $arg0)))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap (inv@729@01 $arg0))))))
    (= (inv@729@01 $arg0) $arg0))
  :pattern ((inv@729@01 $arg0))
  :qid |e$OpenMinter-fctOfInv|)))
(assert (forall (($arg0 Int)) (!
  (=>
    (>
      ($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap (inv@729@01 $arg0)))
      $Perm.No)
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0)))
  :pattern ((inv@729@01 $arg0))
  :qid |quant-u-1860|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 4
(assert (not (forall (($arg0 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap (inv@729@01 $arg0)))
        $Perm.No)
      (img@730@01 $arg0)
      (= $arg0 (inv@729@01 $arg0)))
    (=
      ($PSF.perm_e$OpenMinter (as pm@728@01  $PPM) ($SortWrappers.IntTo$Snap (inv@729@01 $arg0)))
      $Perm.No))
  
  :qid |quant-u-1861|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; exhale true &&
;   (forall $arg0: Int ::
;     { e$CloseMinter($arg0) }
;     perm(e$CloseMinter($arg0)) > none ==>
;     acc(e$CloseMinter($arg0), perm(e$CloseMinter($arg0))))
(declare-const $arg0@731@01 Int)
(push) ; 4
; [eval] perm(e$CloseMinter($arg0)) > none
; [eval] perm(e$CloseMinter($arg0))
; Definitional axioms for snapshot map values
(declare-const pm@732@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef82|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef83|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0@731@01)) ($SortWrappers.IntTo$Snap $arg0@731@01)))
(assert (>
  ($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@731@01))
  $Perm.No))
; [eval] perm(e$CloseMinter($arg0))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 4
(declare-fun inv@733@01 (Int) Int)
(declare-fun img@734@01 (Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef82|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef83|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@731@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@731@01))
      $Perm.No)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0@731@01)) ($SortWrappers.IntTo$Snap $arg0@731@01)))
  :pattern (($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0@731@01)) ($SortWrappers.IntTo$Snap $arg0@731@01)))
  :qid |e$CloseMinter-aux|)))
(push) ; 4
(assert (not (forall (($arg0@731@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@731@01))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@731@01))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@731@01)))))
  
  :qid |quant-u-1862|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall (($arg01@731@01 Int) ($arg02@731@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap $arg01@731@01))
            $Perm.No)
          ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg01@731@01)) ($SortWrappers.IntTo$Snap $arg01@731@01)))
        (<
          $Perm.No
          ($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap $arg01@731@01))))
      (and
        (and
          (>
            ($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap $arg02@731@01))
            $Perm.No)
          ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg02@731@01)) ($SortWrappers.IntTo$Snap $arg02@731@01)))
        (<
          $Perm.No
          ($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap $arg02@731@01))))
      (= $arg01@731@01 $arg02@731@01))
    (= $arg01@731@01 $arg02@731@01))
  
  :qid |e$CloseMinter-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@731@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@731@01))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@731@01))))
    (and (= (inv@733@01 $arg0@731@01) $arg0@731@01) (img@734@01 $arg0@731@01)))
  :pattern (($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0@731@01)) ($SortWrappers.IntTo$Snap $arg0@731@01)))
  :qid |e$CloseMinter-invOfFct|)))
(assert (forall (($arg0 Int)) (!
  (=>
    (and
      (img@734@01 $arg0)
      (and
        (>
          ($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap (inv@733@01 $arg0)))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap (inv@733@01 $arg0))))))
    (= (inv@733@01 $arg0) $arg0))
  :pattern ((inv@733@01 $arg0))
  :qid |e$CloseMinter-fctOfInv|)))
(assert (forall (($arg0 Int)) (!
  (=>
    (>
      ($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap (inv@733@01 $arg0)))
      $Perm.No)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0)))
  :pattern ((inv@733@01 $arg0))
  :qid |quant-u-1863|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 4
(assert (not (forall (($arg0 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap (inv@733@01 $arg0)))
        $Perm.No)
      (img@734@01 $arg0)
      (= $arg0 (inv@733@01 $arg0)))
    (=
      ($PSF.perm_e$CloseMinter (as pm@732@01  $PPM) ($SortWrappers.IntTo$Snap (inv@733@01 $arg0)))
      $Perm.No))
  
  :qid |quant-u-1864|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; inhale -170141183460469231731687303715884105728 <= l$raw_ret &&
;   l$raw_ret <= 170141183460469231731687303715884105727
(declare-const $t@735@01 $Snap)
(assert (= $t@735@01 ($Snap.combine ($Snap.first $t@735@01) ($Snap.second $t@735@01))))
(assert (= ($Snap.first $t@735@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= l$raw_ret
; [eval] -170141183460469231731687303715884105728
(assert (<= (- 0 170141183460469231731687303715884105728) l$raw_ret@632@01))
(assert (= ($Snap.second $t@735@01) $Snap.unit))
; [eval] l$raw_ret <= 170141183460469231731687303715884105727
(assert (<= l$raw_ret@632@01 170141183460469231731687303715884105727))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not l$send_fail@631@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not l$send_fail@631@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 314 | l$send_fail@631@01 | live]
; [else-branch: 314 | !(l$send_fail@631@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 314 | l$send_fail@631@01]
(assert l$send_fail@631@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@736@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 315 | False | dead]
; [else-branch: 315 | True | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 315 | True]
(pop) ; 5
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 316 | True | live]
; [else-branch: 316 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 316 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 6
; [then-branch: 317 | False | dead]
; [else-branch: 317 | True | live]
(push) ; 7
; [else-branch: 317 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 318 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
; [else-branch: 318 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 318 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 8
; [then-branch: 319 | False | live]
; [else-branch: 319 | True | live]
(push) ; 9
; [then-branch: 319 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 319 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 318 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@737@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 320 | !(0 <= q$a@737@01) | live]
; [else-branch: 320 | 0 <= q$a@737@01 | live]
(push) ; 8
; [then-branch: 320 | !(0 <= q$a@737@01)]
(assert (not (<= 0 q$a@737@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 320 | 0 <= q$a@737@01]
(assert (<= 0 q$a@737@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@737@01) (not (<= 0 q$a@737@01))))
(push) ; 7
; [then-branch: 321 | 0 <= q$a@737@01 && q$a@737@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 321 | !(0 <= q$a@737@01 && q$a@737@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 321 | 0 <= q$a@737@01 && q$a@737@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@737@01)
  (<= q$a@737@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 322 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@737@01) | live]
; [else-branch: 322 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@737@01)) | live]
(push) ; 10
; [then-branch: 322 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@737@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
(pop) ; 10
(push) ; 10
; [else-branch: 322 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@737@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01)))
(push) ; 9
; [then-branch: 323 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@737@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@737@01) | live]
; [else-branch: 323 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@737@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@737@01)) | live]
(push) ; 10
; [then-branch: 323 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@737@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@737@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 11
; [then-branch: 324 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
; [else-branch: 324 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
(push) ; 12
; [then-branch: 324 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))
(pop) ; 12
(push) ; 12
; [else-branch: 324 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@738@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@738@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@738@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef84|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@738@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef85|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@737@01)) ($SortWrappers.IntTo$Snap q$a@737@01)))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@738@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@738@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef84|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@738@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef85|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@737@01)) ($SortWrappers.IntTo$Snap q$a@737@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))
(pop) ; 10
(push) ; 10
; [else-branch: 323 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@737@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@737@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@738@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@738@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef84|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@738@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef85|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@737@01)) ($SortWrappers.IntTo$Snap q$a@737@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 321 | !(0 <= q$a@737@01 && q$a@737@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@737@01)
    (<= q$a@737@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@738@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@738@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef84|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@738@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef85|)))
(assert (=>
  (and
    (<= 0 q$a@737@01)
    (<= q$a@737@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@737@01)
    (<= q$a@737@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@737@01)) ($SortWrappers.IntTo$Snap q$a@737@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@737@01)
      (<= q$a@737@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@737@01)
    (<= q$a@737@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@738@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@738@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef84|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@738@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef85|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@737@01 Int)) (!
  (and
    (or (<= 0 q$a@737@01) (not (<= 0 q$a@737@01)))
    (=>
      (and
        (<= 0 q$a@737@01)
        (<= q$a@737@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@737@01)
        (<= q$a@737@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@737@01)) ($SortWrappers.IntTo$Snap q$a@737@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01)))))
    (or
      (not
        (and
          (<= 0 q$a@737@01)
          (<= q$a@737@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@737@01)
        (<= q$a@737@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397-aux|)))
(push) ; 6
(assert (not (forall ((q$a@737@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@737@01)
        (<= q$a@737@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@738@01  $PPM) ($SortWrappers.IntTo$Snap q$a@737@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@737@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@737@01)
        (<= q$a@737@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@738@01  $PPM) ($SortWrappers.IntTo$Snap q$a@737@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@737@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@739@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 325 | !(0 <= q$a@739@01) | live]
; [else-branch: 325 | 0 <= q$a@739@01 | live]
(push) ; 8
; [then-branch: 325 | !(0 <= q$a@739@01)]
(assert (not (<= 0 q$a@739@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 325 | 0 <= q$a@739@01]
(assert (<= 0 q$a@739@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@739@01) (not (<= 0 q$a@739@01))))
(push) ; 7
; [then-branch: 326 | 0 <= q$a@739@01 && q$a@739@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 326 | !(0 <= q$a@739@01 && q$a@739@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 326 | 0 <= q$a@739@01 && q$a@739@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@739@01)
  (<= q$a@739@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 327 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@739@01)) | live]
; [else-branch: 327 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@739@01) | live]
(push) ; 10
; [then-branch: 327 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@739@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 327 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@739@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01))))
(push) ; 9
; [then-branch: 328 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@739@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@739@01)) | live]
; [else-branch: 328 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@739@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@739@01))) | live]
(push) ; 10
; [then-branch: 328 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@739@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@739@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 329 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@739@01 | live]
; [else-branch: 329 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@739@01 | live]
(push) ; 12
; [then-branch: 329 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@739@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@739@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 329 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@739@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@739@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@740@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@740@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@740@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef86|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@740@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef87|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@739@01)) ($SortWrappers.IntTo$Snap q$a@739@01)))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@740@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@740@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef86|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@740@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef87|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@739@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@739@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@739@01)) ($SortWrappers.IntTo$Snap q$a@739@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@739@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@739@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 328 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@739@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@739@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@740@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@740@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef86|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@740@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef87|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@739@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@739@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@739@01)) ($SortWrappers.IntTo$Snap q$a@739@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@739@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@739@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 326 | !(0 <= q$a@739@01 && q$a@739@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@739@01)
    (<= q$a@739@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@740@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@740@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef86|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@740@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef87|)))
(assert (=>
  (and
    (<= 0 q$a@739@01)
    (<= q$a@739@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@739@01)
    (<= q$a@739@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@739@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@739@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@739@01)) ($SortWrappers.IntTo$Snap q$a@739@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@739@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@739@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@739@01)
      (<= q$a@739@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@739@01)
    (<= q$a@739@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@740@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@740@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef86|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@740@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef87|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@739@01 Int)) (!
  (and
    (or (<= 0 q$a@739@01) (not (<= 0 q$a@739@01)))
    (=>
      (and
        (<= 0 q$a@739@01)
        (<= q$a@739@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@739@01)
        (<= q$a@739@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@739@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@739@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@739@01)) ($SortWrappers.IntTo$Snap q$a@739@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@739@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@739@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01))))))
    (or
      (not
        (and
          (<= 0 q$a@739@01)
          (<= q$a@739@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@739@01)
        (<= q$a@739@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361-aux|)))
(push) ; 6
(assert (not (forall ((q$a@739@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@739@01)
        (<= q$a@739@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@739@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@740@01  $PPM) ($SortWrappers.IntTo$Snap q$a@739@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@739@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@739@01)
        (<= q$a@739@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@739@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@740@01  $PPM) ($SortWrappers.IntTo$Snap q$a@739@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@739@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@741@01 $Snap)
(assert (= $t@741@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@637@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@742@01 $Struct)
(assert (=
  self@742@01
  ($struct_set<$Struct> self@622@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@622@01 11))
    l$havoc@637@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 5
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 314 | !(l$send_fail@631@01)]
(assert (not l$send_fail@631@01))
(pop) ; 4
; [eval] !l$send_fail
(push) ; 4
(set-option :timeout 10)
(assert (not l$send_fail@631@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not l$send_fail@631@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 330 | !(l$send_fail@631@01) | live]
; [else-branch: 330 | l$send_fail@631@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 330 | !(l$send_fail@631@01)]
(assert (not l$send_fail@631@01))
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
; [then-branch: 331 | False | dead]
; [else-branch: 331 | True | live]
(push) ; 6
; [else-branch: 331 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 332 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
; [else-branch: 332 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 332 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
; [then-branch: 333 | False | live]
; [else-branch: 333 | True | live]
(push) ; 8
; [then-branch: 333 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 333 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 332 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@743@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 334 | !(0 <= q$a@743@01) | live]
; [else-branch: 334 | 0 <= q$a@743@01 | live]
(push) ; 7
; [then-branch: 334 | !(0 <= q$a@743@01)]
(assert (not (<= 0 q$a@743@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 334 | 0 <= q$a@743@01]
(assert (<= 0 q$a@743@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@743@01) (not (<= 0 q$a@743@01))))
(push) ; 6
; [then-branch: 335 | 0 <= q$a@743@01 && q$a@743@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 335 | !(0 <= q$a@743@01 && q$a@743@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 335 | 0 <= q$a@743@01 && q$a@743@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@743@01)
  (<= q$a@743@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 336 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@743@01) | live]
; [else-branch: 336 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@743@01)) | live]
(push) ; 9
; [then-branch: 336 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@743@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
(pop) ; 9
(push) ; 9
; [else-branch: 336 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@743@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01)))
(push) ; 8
; [then-branch: 337 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@743@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@743@01) | live]
; [else-branch: 337 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@743@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@743@01)) | live]
(push) ; 9
; [then-branch: 337 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@743@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@743@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 10
; [then-branch: 338 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
; [else-branch: 338 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
(push) ; 11
; [then-branch: 338 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 338 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@744@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@744@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@744@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef88|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@744@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef89|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@743@01)) ($SortWrappers.IntTo$Snap q$a@743@01)))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@744@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@744@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef88|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@744@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef89|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@743@01)) ($SortWrappers.IntTo$Snap q$a@743@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))
(pop) ; 9
(push) ; 9
; [else-branch: 337 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@743@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@743@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@744@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@744@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef88|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@744@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef89|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@743@01)) ($SortWrappers.IntTo$Snap q$a@743@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 335 | !(0 <= q$a@743@01 && q$a@743@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@743@01)
    (<= q$a@743@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@744@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@744@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef88|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@744@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef89|)))
(assert (=>
  (and
    (<= 0 q$a@743@01)
    (<= q$a@743@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@743@01)
    (<= q$a@743@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@743@01)) ($SortWrappers.IntTo$Snap q$a@743@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@743@01)
      (<= q$a@743@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@743@01)
    (<= q$a@743@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@744@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@744@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef88|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@744@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef89|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@743@01 Int)) (!
  (and
    (or (<= 0 q$a@743@01) (not (<= 0 q$a@743@01)))
    (=>
      (and
        (<= 0 q$a@743@01)
        (<= q$a@743@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@743@01)
        (<= q$a@743@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@743@01)) ($SortWrappers.IntTo$Snap q$a@743@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01)))))
    (or
      (not
        (and
          (<= 0 q$a@743@01)
          (<= q$a@743@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@743@01)
        (<= q$a@743@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1330@11@1330@391-aux|)))
(push) ; 5
(assert (not (forall ((q$a@743@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@743@01)
        (<= q$a@743@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@744@01  $PPM) ($SortWrappers.IntTo$Snap q$a@743@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1330@11@1330@391|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@743@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@743@01)
        (<= q$a@743@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@744@01  $PPM) ($SortWrappers.IntTo$Snap q$a@743@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@743@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1330@11@1330@391|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@745@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 339 | !(0 <= q$a@745@01) | live]
; [else-branch: 339 | 0 <= q$a@745@01 | live]
(push) ; 7
; [then-branch: 339 | !(0 <= q$a@745@01)]
(assert (not (<= 0 q$a@745@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 339 | 0 <= q$a@745@01]
(assert (<= 0 q$a@745@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@745@01) (not (<= 0 q$a@745@01))))
(push) ; 6
; [then-branch: 340 | 0 <= q$a@745@01 && q$a@745@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 340 | !(0 <= q$a@745@01 && q$a@745@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 340 | 0 <= q$a@745@01 && q$a@745@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@745@01)
  (<= q$a@745@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 341 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@745@01)) | live]
; [else-branch: 341 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@745@01) | live]
(push) ; 9
; [then-branch: 341 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@745@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 341 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@745@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01))))
(push) ; 8
; [then-branch: 342 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@745@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@745@01)) | live]
; [else-branch: 342 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@745@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@745@01))) | live]
(push) ; 9
; [then-branch: 342 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@745@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@745@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 343 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@745@01 | live]
; [else-branch: 343 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@745@01 | live]
(push) ; 11
; [then-branch: 343 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@745@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@745@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 343 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@745@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@745@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@746@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@746@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@746@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef90|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@746@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef91|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@745@01)) ($SortWrappers.IntTo$Snap q$a@745@01)))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@746@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@746@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef90|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@746@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef91|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@745@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@745@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@745@01)) ($SortWrappers.IntTo$Snap q$a@745@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@745@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@745@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 342 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@745@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@745@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@746@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@746@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef90|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@746@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef91|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@745@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@745@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@745@01)) ($SortWrappers.IntTo$Snap q$a@745@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@745@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@745@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 340 | !(0 <= q$a@745@01 && q$a@745@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@745@01)
    (<= q$a@745@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@746@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@746@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef90|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@746@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef91|)))
(assert (=>
  (and
    (<= 0 q$a@745@01)
    (<= q$a@745@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@745@01)
    (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@745@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@745@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@745@01)) ($SortWrappers.IntTo$Snap q$a@745@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@745@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@745@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@745@01)
      (<= q$a@745@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@745@01)
    (<= q$a@745@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@746@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@746@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef90|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@746@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef91|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@745@01 Int)) (!
  (and
    (or (<= 0 q$a@745@01) (not (<= 0 q$a@745@01)))
    (=>
      (and
        (<= 0 q$a@745@01)
        (<= q$a@745@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@745@01)
        (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@745@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@745@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@745@01)) ($SortWrappers.IntTo$Snap q$a@745@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@745@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@745@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01))))))
    (or
      (not
        (and
          (<= 0 q$a@745@01)
          (<= q$a@745@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@745@01)
        (<= q$a@745@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1331@11@1331@355-aux|)))
(push) ; 5
(assert (not (forall ((q$a@745@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@745@01)
        (<= q$a@745@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@745@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@746@01  $PPM) ($SortWrappers.IntTo$Snap q$a@745@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1331@11@1331@355|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@745@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@745@01)
        (<= q$a@745@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@745@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@746@01  $PPM) ($SortWrappers.IntTo$Snap q$a@745@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@745@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1331@11@1331@355|)))
; [exec]
; exhale true &&
;   (forall $arg0: Int, $arg1: Int, $arg2: Int ::
;     { e$Transfer($arg0, $arg1, $arg2) }
;     perm(e$Transfer($arg0, $arg1, $arg2)) > none ==>
;     acc(e$Transfer($arg0, $arg1, $arg2), perm(e$Transfer($arg0, $arg1, $arg2))))
(declare-const $arg0@747@01 Int)
(declare-const $arg1@748@01 Int)
(declare-const $arg2@749@01 Int)
(push) ; 5
; [eval] perm(e$Transfer($arg0, $arg1, $arg2)) > none
; [eval] perm(e$Transfer($arg0, $arg1, $arg2))
; Definitional axioms for snapshot map values
(declare-const pm@750@01 $PPM)
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef92|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@706@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef93|)))
(assert ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@706@01  $PSF<e$Transfer>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@747@01)
    ($SortWrappers.IntTo$Snap $arg1@748@01))
  ($SortWrappers.IntTo$Snap $arg2@749@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@747@01)
    ($SortWrappers.IntTo$Snap $arg1@748@01))
  ($SortWrappers.IntTo$Snap $arg2@749@01))))
(assert (>
  ($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@747@01)
      ($SortWrappers.IntTo$Snap $arg1@748@01))
    ($SortWrappers.IntTo$Snap $arg2@749@01)))
  $Perm.No))
; [eval] perm(e$Transfer($arg0, $arg1, $arg2))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
(declare-fun inv@751@01 (Int Int Int) Int)
(declare-fun img@752@01 (Int Int Int) Bool)
(declare-fun inv@753@01 (Int Int Int) Int)
(declare-fun img@754@01 (Int Int Int) Bool)
(declare-fun inv@755@01 (Int Int Int) Int)
(declare-fun img@756@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef92|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@706@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef93|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@747@01 Int) ($arg1@748@01 Int) ($arg2@749@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@747@01)
          ($SortWrappers.IntTo$Snap $arg1@748@01))
        ($SortWrappers.IntTo$Snap $arg2@749@01)))
      $Perm.No)
    ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@706@01  $PSF<e$Transfer>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@747@01)
        ($SortWrappers.IntTo$Snap $arg1@748@01))
      ($SortWrappers.IntTo$Snap $arg2@749@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@747@01)
        ($SortWrappers.IntTo$Snap $arg1@748@01))
      ($SortWrappers.IntTo$Snap $arg2@749@01))))
  :pattern (($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@706@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@747@01)
      ($SortWrappers.IntTo$Snap $arg1@748@01))
    ($SortWrappers.IntTo$Snap $arg2@749@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@747@01)
      ($SortWrappers.IntTo$Snap $arg1@748@01))
    ($SortWrappers.IntTo$Snap $arg2@749@01))))
  :qid |e$Transfer-aux|)))
(push) ; 5
(assert (not (forall (($arg0@747@01 Int) ($arg1@748@01 Int) ($arg2@749@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@747@01)
          ($SortWrappers.IntTo$Snap $arg1@748@01))
        ($SortWrappers.IntTo$Snap $arg2@749@01)))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@747@01)
            ($SortWrappers.IntTo$Snap $arg1@748@01))
          ($SortWrappers.IntTo$Snap $arg2@749@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@747@01)
            ($SortWrappers.IntTo$Snap $arg1@748@01))
          ($SortWrappers.IntTo$Snap $arg2@749@01))))))
  
  :qid |quant-u-1865|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall (($arg01@747@01 Int) ($arg11@748@01 Int) ($arg21@749@01 Int) ($arg02@747@01 Int) ($arg12@748@01 Int) ($arg22@749@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg01@747@01)
                ($SortWrappers.IntTo$Snap $arg11@748@01))
              ($SortWrappers.IntTo$Snap $arg21@749@01)))
            $Perm.No)
          ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@706@01  $PSF<e$Transfer>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@747@01)
              ($SortWrappers.IntTo$Snap $arg11@748@01))
            ($SortWrappers.IntTo$Snap $arg21@749@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@747@01)
              ($SortWrappers.IntTo$Snap $arg11@748@01))
            ($SortWrappers.IntTo$Snap $arg21@749@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@747@01)
              ($SortWrappers.IntTo$Snap $arg11@748@01))
            ($SortWrappers.IntTo$Snap $arg21@749@01)))))
      (and
        (and
          (>
            ($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg02@747@01)
                ($SortWrappers.IntTo$Snap $arg12@748@01))
              ($SortWrappers.IntTo$Snap $arg22@749@01)))
            $Perm.No)
          ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@706@01  $PSF<e$Transfer>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@747@01)
              ($SortWrappers.IntTo$Snap $arg12@748@01))
            ($SortWrappers.IntTo$Snap $arg22@749@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@747@01)
              ($SortWrappers.IntTo$Snap $arg12@748@01))
            ($SortWrappers.IntTo$Snap $arg22@749@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@747@01)
              ($SortWrappers.IntTo$Snap $arg12@748@01))
            ($SortWrappers.IntTo$Snap $arg22@749@01)))))
      (and
        (and (= $arg01@747@01 $arg02@747@01) (= $arg11@748@01 $arg12@748@01))
        (= $arg21@749@01 $arg22@749@01)))
    (and
      (and (= $arg01@747@01 $arg02@747@01) (= $arg11@748@01 $arg12@748@01))
      (= $arg21@749@01 $arg22@749@01)))
  
  :qid |e$Transfer-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@747@01 Int) ($arg1@748@01 Int) ($arg2@749@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@747@01)
            ($SortWrappers.IntTo$Snap $arg1@748@01))
          ($SortWrappers.IntTo$Snap $arg2@749@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@747@01)
            ($SortWrappers.IntTo$Snap $arg1@748@01))
          ($SortWrappers.IntTo$Snap $arg2@749@01)))))
    (and
      (and
        (= (inv@751@01 $arg0@747@01 $arg1@748@01 $arg2@749@01) $arg0@747@01)
        (= (inv@753@01 $arg0@747@01 $arg1@748@01 $arg2@749@01) $arg1@748@01)
        (= (inv@755@01 $arg0@747@01 $arg1@748@01 $arg2@749@01) $arg2@749@01))
      (and
        (img@752@01 $arg0@747@01 $arg1@748@01 $arg2@749@01)
        (img@754@01 $arg0@747@01 $arg1@748@01 $arg2@749@01)
        (img@756@01 $arg0@747@01 $arg1@748@01 $arg2@749@01))))
  :pattern (($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@706@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@747@01)
      ($SortWrappers.IntTo$Snap $arg1@748@01))
    ($SortWrappers.IntTo$Snap $arg2@749@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@747@01)
      ($SortWrappers.IntTo$Snap $arg1@748@01))
    ($SortWrappers.IntTo$Snap $arg2@749@01))))
  :qid |e$Transfer-invOfFct|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (and
      (and
        (img@752@01 $arg0 $arg1 $arg2)
        (img@754@01 $arg0 $arg1 $arg2)
        (img@756@01 $arg0 $arg1 $arg2))
      (and
        (>
          ($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@751@01 $arg0 $arg1 $arg2))
              ($SortWrappers.IntTo$Snap (inv@753@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@755@01 $arg0 $arg1 $arg2))))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@751@01 $arg0 $arg1 $arg2))
              ($SortWrappers.IntTo$Snap (inv@753@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@755@01 $arg0 $arg1 $arg2)))))))
    (and
      (= (inv@751@01 $arg0 $arg1 $arg2) $arg0)
      (= (inv@753@01 $arg0 $arg1 $arg2) $arg1)
      (= (inv@755@01 $arg0 $arg1 $arg2) $arg2)))
  :pattern ((inv@751@01 $arg0 $arg1 $arg2))
  :pattern ((inv@753@01 $arg0 $arg1 $arg2))
  :pattern ((inv@755@01 $arg0 $arg1 $arg2))
  :qid |e$Transfer-fctOfInv|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@751@01 $arg0 $arg1 $arg2))
          ($SortWrappers.IntTo$Snap (inv@753@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@755@01 $arg0 $arg1 $arg2))))
      $Perm.No)
    ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@706@01  $PSF<e$Transfer>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))))
  :pattern ((inv@751@01 $arg0 $arg1 $arg2) (inv@753@01 $arg0 $arg1 $arg2) (inv@755@01 $arg0 $arg1 $arg2))
  :qid |quant-u-1866|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 5
(assert (not (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@751@01 $arg0 $arg1 $arg2))
            ($SortWrappers.IntTo$Snap (inv@753@01 $arg0 $arg1 $arg2)))
          ($SortWrappers.IntTo$Snap (inv@755@01 $arg0 $arg1 $arg2))))
        $Perm.No)
      (and
        (img@752@01 $arg0 $arg1 $arg2)
        (img@754@01 $arg0 $arg1 $arg2)
        (img@756@01 $arg0 $arg1 $arg2))
      (and
        (= $arg0 (inv@751@01 $arg0 $arg1 $arg2))
        (= $arg1 (inv@753@01 $arg0 $arg1 $arg2))
        (= $arg2 (inv@755@01 $arg0 $arg1 $arg2))))
    (=
      ($PSF.perm_e$Transfer (as pm@750@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@751@01 $arg0 $arg1 $arg2))
          ($SortWrappers.IntTo$Snap (inv@753@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@755@01 $arg0 $arg1 $arg2))))
      $Perm.No))
  
  :qid |quant-u-1867|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; exhale true &&
;   (forall $arg0: Int, $arg1: Int, $arg2: Int ::
;     { e$Approval($arg0, $arg1, $arg2) }
;     perm(e$Approval($arg0, $arg1, $arg2)) > none ==>
;     acc(e$Approval($arg0, $arg1, $arg2), perm(e$Approval($arg0, $arg1, $arg2))))
(declare-const $arg0@757@01 Int)
(declare-const $arg1@758@01 Int)
(declare-const $arg2@759@01 Int)
(push) ; 5
; [eval] perm(e$Approval($arg0, $arg1, $arg2)) > none
; [eval] perm(e$Approval($arg0, $arg1, $arg2))
; Definitional axioms for snapshot map values
(declare-const pm@760@01 $PPM)
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef94|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@718@01  $PSF<e$Approval>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef95|)))
(assert ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@718@01  $PSF<e$Approval>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@757@01)
    ($SortWrappers.IntTo$Snap $arg1@758@01))
  ($SortWrappers.IntTo$Snap $arg2@759@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@757@01)
    ($SortWrappers.IntTo$Snap $arg1@758@01))
  ($SortWrappers.IntTo$Snap $arg2@759@01))))
(assert (>
  ($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@757@01)
      ($SortWrappers.IntTo$Snap $arg1@758@01))
    ($SortWrappers.IntTo$Snap $arg2@759@01)))
  $Perm.No))
; [eval] perm(e$Approval($arg0, $arg1, $arg2))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
(declare-fun inv@761@01 (Int Int Int) Int)
(declare-fun img@762@01 (Int Int Int) Bool)
(declare-fun inv@763@01 (Int Int Int) Int)
(declare-fun img@764@01 (Int Int Int) Bool)
(declare-fun inv@765@01 (Int Int Int) Int)
(declare-fun img@766@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef94|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@718@01  $PSF<e$Approval>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.IntTo$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef95|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@757@01 Int) ($arg1@758@01 Int) ($arg2@759@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@757@01)
          ($SortWrappers.IntTo$Snap $arg1@758@01))
        ($SortWrappers.IntTo$Snap $arg2@759@01)))
      $Perm.No)
    ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@718@01  $PSF<e$Approval>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@757@01)
        ($SortWrappers.IntTo$Snap $arg1@758@01))
      ($SortWrappers.IntTo$Snap $arg2@759@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@757@01)
        ($SortWrappers.IntTo$Snap $arg1@758@01))
      ($SortWrappers.IntTo$Snap $arg2@759@01))))
  :pattern (($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@718@01  $PSF<e$Approval>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@757@01)
      ($SortWrappers.IntTo$Snap $arg1@758@01))
    ($SortWrappers.IntTo$Snap $arg2@759@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@757@01)
      ($SortWrappers.IntTo$Snap $arg1@758@01))
    ($SortWrappers.IntTo$Snap $arg2@759@01))))
  :qid |e$Approval-aux|)))
(push) ; 5
(assert (not (forall (($arg0@757@01 Int) ($arg1@758@01 Int) ($arg2@759@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@757@01)
          ($SortWrappers.IntTo$Snap $arg1@758@01))
        ($SortWrappers.IntTo$Snap $arg2@759@01)))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@757@01)
            ($SortWrappers.IntTo$Snap $arg1@758@01))
          ($SortWrappers.IntTo$Snap $arg2@759@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@757@01)
            ($SortWrappers.IntTo$Snap $arg1@758@01))
          ($SortWrappers.IntTo$Snap $arg2@759@01))))))
  
  :qid |quant-u-1868|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall (($arg01@757@01 Int) ($arg11@758@01 Int) ($arg21@759@01 Int) ($arg02@757@01 Int) ($arg12@758@01 Int) ($arg22@759@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg01@757@01)
                ($SortWrappers.IntTo$Snap $arg11@758@01))
              ($SortWrappers.IntTo$Snap $arg21@759@01)))
            $Perm.No)
          ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@718@01  $PSF<e$Approval>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@757@01)
              ($SortWrappers.IntTo$Snap $arg11@758@01))
            ($SortWrappers.IntTo$Snap $arg21@759@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@757@01)
              ($SortWrappers.IntTo$Snap $arg11@758@01))
            ($SortWrappers.IntTo$Snap $arg21@759@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@757@01)
              ($SortWrappers.IntTo$Snap $arg11@758@01))
            ($SortWrappers.IntTo$Snap $arg21@759@01)))))
      (and
        (and
          (>
            ($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg02@757@01)
                ($SortWrappers.IntTo$Snap $arg12@758@01))
              ($SortWrappers.IntTo$Snap $arg22@759@01)))
            $Perm.No)
          ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@718@01  $PSF<e$Approval>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@757@01)
              ($SortWrappers.IntTo$Snap $arg12@758@01))
            ($SortWrappers.IntTo$Snap $arg22@759@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@757@01)
              ($SortWrappers.IntTo$Snap $arg12@758@01))
            ($SortWrappers.IntTo$Snap $arg22@759@01))))
        (<
          $Perm.No
          ($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@757@01)
              ($SortWrappers.IntTo$Snap $arg12@758@01))
            ($SortWrappers.IntTo$Snap $arg22@759@01)))))
      (and
        (and (= $arg01@757@01 $arg02@757@01) (= $arg11@758@01 $arg12@758@01))
        (= $arg21@759@01 $arg22@759@01)))
    (and
      (and (= $arg01@757@01 $arg02@757@01) (= $arg11@758@01 $arg12@758@01))
      (= $arg21@759@01 $arg22@759@01)))
  
  :qid |e$Approval-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@757@01 Int) ($arg1@758@01 Int) ($arg2@759@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@757@01)
            ($SortWrappers.IntTo$Snap $arg1@758@01))
          ($SortWrappers.IntTo$Snap $arg2@759@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@757@01)
            ($SortWrappers.IntTo$Snap $arg1@758@01))
          ($SortWrappers.IntTo$Snap $arg2@759@01)))))
    (and
      (and
        (= (inv@761@01 $arg0@757@01 $arg1@758@01 $arg2@759@01) $arg0@757@01)
        (= (inv@763@01 $arg0@757@01 $arg1@758@01 $arg2@759@01) $arg1@758@01)
        (= (inv@765@01 $arg0@757@01 $arg1@758@01 $arg2@759@01) $arg2@759@01))
      (and
        (img@762@01 $arg0@757@01 $arg1@758@01 $arg2@759@01)
        (img@764@01 $arg0@757@01 $arg1@758@01 $arg2@759@01)
        (img@766@01 $arg0@757@01 $arg1@758@01 $arg2@759@01))))
  :pattern (($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@718@01  $PSF<e$Approval>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@757@01)
      ($SortWrappers.IntTo$Snap $arg1@758@01))
    ($SortWrappers.IntTo$Snap $arg2@759@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@757@01)
      ($SortWrappers.IntTo$Snap $arg1@758@01))
    ($SortWrappers.IntTo$Snap $arg2@759@01))))
  :qid |e$Approval-invOfFct|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (and
      (and
        (img@762@01 $arg0 $arg1 $arg2)
        (img@764@01 $arg0 $arg1 $arg2)
        (img@766@01 $arg0 $arg1 $arg2))
      (and
        (>
          ($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@761@01 $arg0 $arg1 $arg2))
              ($SortWrappers.IntTo$Snap (inv@763@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@765@01 $arg0 $arg1 $arg2))))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@761@01 $arg0 $arg1 $arg2))
              ($SortWrappers.IntTo$Snap (inv@763@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@765@01 $arg0 $arg1 $arg2)))))))
    (and
      (= (inv@761@01 $arg0 $arg1 $arg2) $arg0)
      (= (inv@763@01 $arg0 $arg1 $arg2) $arg1)
      (= (inv@765@01 $arg0 $arg1 $arg2) $arg2)))
  :pattern ((inv@761@01 $arg0 $arg1 $arg2))
  :pattern ((inv@763@01 $arg0 $arg1 $arg2))
  :pattern ((inv@765@01 $arg0 $arg1 $arg2))
  :qid |e$Approval-fctOfInv|)))
(assert (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (>
      ($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@761@01 $arg0 $arg1 $arg2))
          ($SortWrappers.IntTo$Snap (inv@763@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@765@01 $arg0 $arg1 $arg2))))
      $Perm.No)
    ($PSF.loc_e$Approval ($PSF.lookup_e$Approval (as sm@718@01  $PSF<e$Approval>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.IntTo$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))))
  :pattern ((inv@761@01 $arg0 $arg1 $arg2) (inv@763@01 $arg0 $arg1 $arg2) (inv@765@01 $arg0 $arg1 $arg2))
  :qid |quant-u-1869|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 5
(assert (not (forall (($arg0 Int) ($arg1 Int) ($arg2 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@761@01 $arg0 $arg1 $arg2))
            ($SortWrappers.IntTo$Snap (inv@763@01 $arg0 $arg1 $arg2)))
          ($SortWrappers.IntTo$Snap (inv@765@01 $arg0 $arg1 $arg2))))
        $Perm.No)
      (and
        (img@762@01 $arg0 $arg1 $arg2)
        (img@764@01 $arg0 $arg1 $arg2)
        (img@766@01 $arg0 $arg1 $arg2))
      (and
        (= $arg0 (inv@761@01 $arg0 $arg1 $arg2))
        (= $arg1 (inv@763@01 $arg0 $arg1 $arg2))
        (= $arg2 (inv@765@01 $arg0 $arg1 $arg2))))
    (=
      ($PSF.perm_e$Approval (as pm@760@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@761@01 $arg0 $arg1 $arg2))
          ($SortWrappers.IntTo$Snap (inv@763@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@765@01 $arg0 $arg1 $arg2))))
      $Perm.No))
  
  :qid |quant-u-1870|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; exhale true &&
;   (forall $arg0: Int ::
;     { e$OpenMinter($arg0) }
;     perm(e$OpenMinter($arg0)) > none ==>
;     acc(e$OpenMinter($arg0), perm(e$OpenMinter($arg0))))
(declare-const $arg0@767@01 Int)
(push) ; 5
; [eval] perm(e$OpenMinter($arg0)) > none
; [eval] perm(e$OpenMinter($arg0))
; Definitional axioms for snapshot map values
(declare-const pm@768@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef96|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef97|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0@767@01)) ($SortWrappers.IntTo$Snap $arg0@767@01)))
(assert (>
  ($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@767@01))
  $Perm.No))
; [eval] perm(e$OpenMinter($arg0))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
(declare-fun inv@769@01 (Int) Int)
(declare-fun img@770@01 (Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef96|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef97|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@767@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@767@01))
      $Perm.No)
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0@767@01)) ($SortWrappers.IntTo$Snap $arg0@767@01)))
  :pattern (($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0@767@01)) ($SortWrappers.IntTo$Snap $arg0@767@01)))
  :qid |e$OpenMinter-aux|)))
(push) ; 5
(assert (not (forall (($arg0@767@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@767@01))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@767@01))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@767@01)))))
  
  :qid |quant-u-1871|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall (($arg01@767@01 Int) ($arg02@767@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap $arg01@767@01))
            $Perm.No)
          ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg01@767@01)) ($SortWrappers.IntTo$Snap $arg01@767@01)))
        (<
          $Perm.No
          ($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap $arg01@767@01))))
      (and
        (and
          (>
            ($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap $arg02@767@01))
            $Perm.No)
          ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg02@767@01)) ($SortWrappers.IntTo$Snap $arg02@767@01)))
        (<
          $Perm.No
          ($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap $arg02@767@01))))
      (= $arg01@767@01 $arg02@767@01))
    (= $arg01@767@01 $arg02@767@01))
  
  :qid |e$OpenMinter-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@767@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@767@01))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@767@01))))
    (and (= (inv@769@01 $arg0@767@01) $arg0@767@01) (img@770@01 $arg0@767@01)))
  :pattern (($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0@767@01)) ($SortWrappers.IntTo$Snap $arg0@767@01)))
  :qid |e$OpenMinter-invOfFct|)))
(assert (forall (($arg0 Int)) (!
  (=>
    (and
      (img@770@01 $arg0)
      (and
        (>
          ($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap (inv@769@01 $arg0)))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap (inv@769@01 $arg0))))))
    (= (inv@769@01 $arg0) $arg0))
  :pattern ((inv@769@01 $arg0))
  :qid |e$OpenMinter-fctOfInv|)))
(assert (forall (($arg0 Int)) (!
  (=>
    (>
      ($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap (inv@769@01 $arg0)))
      $Perm.No)
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0)))
  :pattern ((inv@769@01 $arg0))
  :qid |quant-u-1872|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 5
(assert (not (forall (($arg0 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap (inv@769@01 $arg0)))
        $Perm.No)
      (img@770@01 $arg0)
      (= $arg0 (inv@769@01 $arg0)))
    (=
      ($PSF.perm_e$OpenMinter (as pm@768@01  $PPM) ($SortWrappers.IntTo$Snap (inv@769@01 $arg0)))
      $Perm.No))
  
  :qid |quant-u-1873|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; exhale true &&
;   (forall $arg0: Int ::
;     { e$CloseMinter($arg0) }
;     perm(e$CloseMinter($arg0)) > none ==>
;     acc(e$CloseMinter($arg0), perm(e$CloseMinter($arg0))))
(declare-const $arg0@771@01 Int)
(push) ; 5
; [eval] perm(e$CloseMinter($arg0)) > none
; [eval] perm(e$CloseMinter($arg0))
; Definitional axioms for snapshot map values
(declare-const pm@772@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef98|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef99|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0@771@01)) ($SortWrappers.IntTo$Snap $arg0@771@01)))
(assert (>
  ($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@771@01))
  $Perm.No))
; [eval] perm(e$CloseMinter($arg0))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
(declare-fun inv@773@01 (Int) Int)
(declare-fun img@774@01 (Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef98|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef99|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@771@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@771@01))
      $Perm.No)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0@771@01)) ($SortWrappers.IntTo$Snap $arg0@771@01)))
  :pattern (($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0@771@01)) ($SortWrappers.IntTo$Snap $arg0@771@01)))
  :qid |e$CloseMinter-aux|)))
(push) ; 5
(assert (not (forall (($arg0@771@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@771@01))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@771@01))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@771@01)))))
  
  :qid |quant-u-1874|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall (($arg01@771@01 Int) ($arg02@771@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap $arg01@771@01))
            $Perm.No)
          ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg01@771@01)) ($SortWrappers.IntTo$Snap $arg01@771@01)))
        (<
          $Perm.No
          ($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap $arg01@771@01))))
      (and
        (and
          (>
            ($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap $arg02@771@01))
            $Perm.No)
          ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg02@771@01)) ($SortWrappers.IntTo$Snap $arg02@771@01)))
        (<
          $Perm.No
          ($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap $arg02@771@01))))
      (= $arg01@771@01 $arg02@771@01))
    (= $arg01@771@01 $arg02@771@01))
  
  :qid |e$CloseMinter-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@771@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@771@01))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap $arg0@771@01))))
    (and (= (inv@773@01 $arg0@771@01) $arg0@771@01) (img@774@01 $arg0@771@01)))
  :pattern (($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0@771@01)) ($SortWrappers.IntTo$Snap $arg0@771@01)))
  :qid |e$CloseMinter-invOfFct|)))
(assert (forall (($arg0 Int)) (!
  (=>
    (and
      (img@774@01 $arg0)
      (and
        (>
          ($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap (inv@773@01 $arg0)))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap (inv@773@01 $arg0))))))
    (= (inv@773@01 $arg0) $arg0))
  :pattern ((inv@773@01 $arg0))
  :qid |e$CloseMinter-fctOfInv|)))
(assert (forall (($arg0 Int)) (!
  (=>
    (>
      ($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap (inv@773@01 $arg0)))
      $Perm.No)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0)))
  :pattern ((inv@773@01 $arg0))
  :qid |quant-u-1875|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 5
(assert (not (forall (($arg0 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap (inv@773@01 $arg0)))
        $Perm.No)
      (img@774@01 $arg0)
      (= $arg0 (inv@773@01 $arg0)))
    (=
      ($PSF.perm_e$CloseMinter (as pm@772@01  $PPM) ($SortWrappers.IntTo$Snap (inv@773@01 $arg0)))
      $Perm.No))
  
  :qid |quant-u-1876|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; inhale -170141183460469231731687303715884105728 <= l$raw_ret$1 &&
;   l$raw_ret$1 <= 170141183460469231731687303715884105727
(declare-const $t@775@01 $Snap)
(assert (= $t@775@01 ($Snap.combine ($Snap.first $t@775@01) ($Snap.second $t@775@01))))
(assert (= ($Snap.first $t@775@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= l$raw_ret$1
; [eval] -170141183460469231731687303715884105728
(assert (<= (- 0 170141183460469231731687303715884105728) l$raw_ret$1@634@01))
(assert (= ($Snap.second $t@775@01) $Snap.unit))
; [eval] l$raw_ret$1 <= 170141183460469231731687303715884105727
(assert (<= l$raw_ret$1@634@01 170141183460469231731687303715884105727))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not l$send_fail$1@633@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not l$send_fail$1@633@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 344 | l$send_fail$1@633@01 | live]
; [else-branch: 344 | !(l$send_fail$1@633@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 344 | l$send_fail$1@633@01]
(assert l$send_fail$1@633@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(msg, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const $t@776@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 345 | False | dead]
; [else-branch: 345 | True | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 345 | True]
(pop) ; 6
; [eval] !$succ
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 346 | True | live]
; [else-branch: 346 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 346 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 7
; [then-branch: 347 | False | dead]
; [else-branch: 347 | True | live]
(push) ; 8
; [else-branch: 347 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 348 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
; [else-branch: 348 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 348 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 9
; [then-branch: 349 | False | live]
; [else-branch: 349 | True | live]
(push) ; 10
; [then-branch: 349 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 349 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 348 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@777@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 350 | !(0 <= q$a@777@01) | live]
; [else-branch: 350 | 0 <= q$a@777@01 | live]
(push) ; 9
; [then-branch: 350 | !(0 <= q$a@777@01)]
(assert (not (<= 0 q$a@777@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 350 | 0 <= q$a@777@01]
(assert (<= 0 q$a@777@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@777@01) (not (<= 0 q$a@777@01))))
(push) ; 8
; [then-branch: 351 | 0 <= q$a@777@01 && q$a@777@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 351 | !(0 <= q$a@777@01 && q$a@777@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 351 | 0 <= q$a@777@01 && q$a@777@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@777@01)
  (<= q$a@777@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 10
; [then-branch: 352 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@777@01) | live]
; [else-branch: 352 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@777@01)) | live]
(push) ; 11
; [then-branch: 352 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@777@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
(pop) ; 11
(push) ; 11
; [else-branch: 352 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@777@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01)))
(push) ; 10
; [then-branch: 353 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@777@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@777@01) | live]
; [else-branch: 353 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@777@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@777@01)) | live]
(push) ; 11
; [then-branch: 353 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@777@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@777@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 12
; [then-branch: 354 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
; [else-branch: 354 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
(push) ; 13
; [then-branch: 354 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))
(pop) ; 13
(push) ; 13
; [else-branch: 354 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@778@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@778@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@778@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef100|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@778@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef101|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@777@01)) ($SortWrappers.IntTo$Snap q$a@777@01)))
; [eval] 1 * write
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@778@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@778@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef100|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@778@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef101|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@777@01)) ($SortWrappers.IntTo$Snap q$a@777@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))
(pop) ; 11
(push) ; 11
; [else-branch: 353 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@777@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@777@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@778@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@778@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef100|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@778@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef101|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@777@01)) ($SortWrappers.IntTo$Snap q$a@777@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 351 | !(0 <= q$a@777@01 && q$a@777@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@777@01)
    (<= q$a@777@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@778@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@778@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef100|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@778@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef101|)))
(assert (=>
  (and
    (<= 0 q$a@777@01)
    (<= q$a@777@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@777@01)
    (<= q$a@777@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@777@01)) ($SortWrappers.IntTo$Snap q$a@777@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@777@01)
      (<= q$a@777@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@777@01)
    (<= q$a@777@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@778@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@778@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef100|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@778@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef101|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@777@01 Int)) (!
  (and
    (or (<= 0 q$a@777@01) (not (<= 0 q$a@777@01)))
    (=>
      (and
        (<= 0 q$a@777@01)
        (<= q$a@777@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@777@01)
        (<= q$a@777@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@777@01)) ($SortWrappers.IntTo$Snap q$a@777@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01)))))
    (or
      (not
        (and
          (<= 0 q$a@777@01)
          (<= q$a@777@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@777@01)
        (<= q$a@777@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397-aux|)))
(push) ; 7
(assert (not (forall ((q$a@777@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@777@01)
        (<= q$a@777@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@778@01  $PPM) ($SortWrappers.IntTo$Snap q$a@777@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@777@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@777@01)
        (<= q$a@777@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@778@01  $PPM) ($SortWrappers.IntTo$Snap q$a@777@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@777@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@779@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 355 | !(0 <= q$a@779@01) | live]
; [else-branch: 355 | 0 <= q$a@779@01 | live]
(push) ; 9
; [then-branch: 355 | !(0 <= q$a@779@01)]
(assert (not (<= 0 q$a@779@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 355 | 0 <= q$a@779@01]
(assert (<= 0 q$a@779@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@779@01) (not (<= 0 q$a@779@01))))
(push) ; 8
; [then-branch: 356 | 0 <= q$a@779@01 && q$a@779@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 356 | !(0 <= q$a@779@01 && q$a@779@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 356 | 0 <= q$a@779@01 && q$a@779@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@779@01)
  (<= q$a@779@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 10
; [then-branch: 357 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@779@01)) | live]
; [else-branch: 357 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@779@01) | live]
(push) ; 11
; [then-branch: 357 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@779@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 357 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@779@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01))))
(push) ; 10
; [then-branch: 358 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@779@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@779@01)) | live]
; [else-branch: 358 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@779@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@779@01))) | live]
(push) ; 11
; [then-branch: 358 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@779@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@779@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 12
; [then-branch: 359 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@779@01 | live]
; [else-branch: 359 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@779@01 | live]
(push) ; 13
; [then-branch: 359 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@779@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@779@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 359 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@779@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@779@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@780@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@780@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@780@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef102|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@780@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef103|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@779@01)) ($SortWrappers.IntTo$Snap q$a@779@01)))
; [eval] 1 * write
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@780@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@780@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef102|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@780@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef103|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@779@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@779@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@779@01)) ($SortWrappers.IntTo$Snap q$a@779@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@779@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@779@01))))
(pop) ; 11
(push) ; 11
; [else-branch: 358 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@779@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@779@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@780@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@780@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef102|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@780@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef103|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@779@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@779@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@779@01)) ($SortWrappers.IntTo$Snap q$a@779@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@779@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@779@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)))))
(pop) ; 9
(push) ; 9
; [else-branch: 356 | !(0 <= q$a@779@01 && q$a@779@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@779@01)
    (<= q$a@779@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@780@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@780@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef102|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@780@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef103|)))
(assert (=>
  (and
    (<= 0 q$a@779@01)
    (<= q$a@779@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@779@01)
    (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@779@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@779@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@779@01)) ($SortWrappers.IntTo$Snap q$a@779@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@779@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@779@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@779@01)
      (<= q$a@779@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@779@01)
    (<= q$a@779@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@780@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@780@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef102|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@780@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef103|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@779@01 Int)) (!
  (and
    (or (<= 0 q$a@779@01) (not (<= 0 q$a@779@01)))
    (=>
      (and
        (<= 0 q$a@779@01)
        (<= q$a@779@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@779@01)
        (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@779@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@779@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@779@01)) ($SortWrappers.IntTo$Snap q$a@779@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@779@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@779@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01))))))
    (or
      (not
        (and
          (<= 0 q$a@779@01)
          (<= q$a@779@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@779@01)
        (<= q$a@779@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361-aux|)))
(push) ; 7
(assert (not (forall ((q$a@779@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@779@01)
        (<= q$a@779@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@779@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@780@01  $PPM) ($SortWrappers.IntTo$Snap q$a@779@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@779@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@779@01)
        (<= q$a@779@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@779@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@780@01  $PPM) ($SortWrappers.IntTo$Snap q$a@779@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@779@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@781@01 $Snap)
(assert (= $t@781@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@637@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@782@01 $Struct)
(assert (=
  self@782@01
  ($struct_set<$Struct> self@622@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@622@01 11))
    l$havoc@637@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 6
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 344 | !(l$send_fail$1@633@01)]
(assert (not l$send_fail$1@633@01))
(pop) ; 5
; [eval] !l$send_fail$1
(push) ; 5
(set-option :timeout 10)
(assert (not l$send_fail$1@633@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not l$send_fail$1@633@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 360 | !(l$send_fail$1@633@01) | live]
; [else-branch: 360 | l$send_fail$1@633@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 360 | !(l$send_fail$1@633@01)]
(assert (not l$send_fail$1@633@01))
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [eval] !(l$raw_ret == l$raw_ret$1)
; [eval] l$raw_ret == l$raw_ret$1
(push) ; 6
(set-option :timeout 10)
(assert (not (= l$raw_ret@632@01 l$raw_ret$1@634@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= l$raw_ret@632@01 l$raw_ret$1@634@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 361 | l$raw_ret@632@01 != l$raw_ret$1@634@01 | live]
; [else-branch: 361 | l$raw_ret@632@01 == l$raw_ret$1@634@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 361 | l$raw_ret@632@01 != l$raw_ret$1@634@01]
(assert (not (= l$raw_ret@632@01 l$raw_ret$1@634@01)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 362 | False | dead]
; [else-branch: 362 | True | live]
(push) ; 7
; [else-branch: 362 | True]
(pop) ; 7
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 363 | True | live]
; [else-branch: 363 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 363 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 8
; [then-branch: 364 | False | dead]
; [else-branch: 364 | True | live]
(push) ; 9
; [else-branch: 364 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 365 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
; [else-branch: 365 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 365 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 10
; [then-branch: 366 | False | live]
; [else-branch: 366 | True | live]
(push) ; 11
; [then-branch: 366 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 366 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 365 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@783@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 367 | !(0 <= q$a@783@01) | live]
; [else-branch: 367 | 0 <= q$a@783@01 | live]
(push) ; 10
; [then-branch: 367 | !(0 <= q$a@783@01)]
(assert (not (<= 0 q$a@783@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 367 | 0 <= q$a@783@01]
(assert (<= 0 q$a@783@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@783@01) (not (<= 0 q$a@783@01))))
(push) ; 9
; [then-branch: 368 | 0 <= q$a@783@01 && q$a@783@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 368 | !(0 <= q$a@783@01 && q$a@783@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 368 | 0 <= q$a@783@01 && q$a@783@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@783@01)
  (<= q$a@783@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 11
; [then-branch: 369 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@783@01) | live]
; [else-branch: 369 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@783@01)) | live]
(push) ; 12
; [then-branch: 369 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@783@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
(pop) ; 12
(push) ; 12
; [else-branch: 369 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@783@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01)))
(push) ; 11
; [then-branch: 370 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@783@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@783@01) | live]
; [else-branch: 370 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@783@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@783@01)) | live]
(push) ; 12
; [then-branch: 370 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@783@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@783@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 13
; [then-branch: 371 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
; [else-branch: 371 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
(push) ; 14
; [then-branch: 371 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))
(pop) ; 14
(push) ; 14
; [else-branch: 371 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@784@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@784@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@784@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef104|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@784@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef105|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@783@01)) ($SortWrappers.IntTo$Snap q$a@783@01)))
; [eval] 1 * write
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@784@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@784@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef104|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@784@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef105|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@783@01)) ($SortWrappers.IntTo$Snap q$a@783@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))
(pop) ; 12
(push) ; 12
; [else-branch: 370 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@783@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@783@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@784@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@784@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef104|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@784@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef105|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@783@01)) ($SortWrappers.IntTo$Snap q$a@783@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 368 | !(0 <= q$a@783@01 && q$a@783@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@783@01)
    (<= q$a@783@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@784@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@784@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef104|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@784@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef105|)))
(assert (=>
  (and
    (<= 0 q$a@783@01)
    (<= q$a@783@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@783@01)
    (<= q$a@783@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@783@01)) ($SortWrappers.IntTo$Snap q$a@783@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@783@01)
      (<= q$a@783@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@783@01)
    (<= q$a@783@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@784@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@784@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef104|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@784@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef105|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@783@01 Int)) (!
  (and
    (or (<= 0 q$a@783@01) (not (<= 0 q$a@783@01)))
    (=>
      (and
        (<= 0 q$a@783@01)
        (<= q$a@783@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@783@01)
        (<= q$a@783@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@783@01)) ($SortWrappers.IntTo$Snap q$a@783@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01)))))
    (or
      (not
        (and
          (<= 0 q$a@783@01)
          (<= q$a@783@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@783@01)
        (<= q$a@783@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397-aux|)))
(push) ; 8
(assert (not (forall ((q$a@783@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@783@01)
        (<= q$a@783@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@784@01  $PPM) ($SortWrappers.IntTo$Snap q$a@783@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@783@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@783@01)
        (<= q$a@783@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@784@01  $PPM) ($SortWrappers.IntTo$Snap q$a@783@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@783@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@785@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 372 | !(0 <= q$a@785@01) | live]
; [else-branch: 372 | 0 <= q$a@785@01 | live]
(push) ; 10
; [then-branch: 372 | !(0 <= q$a@785@01)]
(assert (not (<= 0 q$a@785@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 372 | 0 <= q$a@785@01]
(assert (<= 0 q$a@785@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@785@01) (not (<= 0 q$a@785@01))))
(push) ; 9
; [then-branch: 373 | 0 <= q$a@785@01 && q$a@785@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 373 | !(0 <= q$a@785@01 && q$a@785@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 373 | 0 <= q$a@785@01 && q$a@785@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@785@01)
  (<= q$a@785@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 11
; [then-branch: 374 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@785@01)) | live]
; [else-branch: 374 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@785@01) | live]
(push) ; 12
; [then-branch: 374 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@785@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 374 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@785@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01))))
(push) ; 11
; [then-branch: 375 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@785@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@785@01)) | live]
; [else-branch: 375 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@785@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@785@01))) | live]
(push) ; 12
; [then-branch: 375 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@785@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@785@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 13
; [then-branch: 376 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@785@01 | live]
; [else-branch: 376 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@785@01 | live]
(push) ; 14
; [then-branch: 376 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@785@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@785@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 376 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@785@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@785@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@786@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@786@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@786@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef106|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@786@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef107|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@785@01)) ($SortWrappers.IntTo$Snap q$a@785@01)))
; [eval] 1 * write
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@786@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@786@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef106|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@786@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef107|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@785@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@785@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@785@01)) ($SortWrappers.IntTo$Snap q$a@785@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@785@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@785@01))))
(pop) ; 12
(push) ; 12
; [else-branch: 375 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@785@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@785@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@786@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@786@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef106|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@786@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef107|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@785@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@785@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@785@01)) ($SortWrappers.IntTo$Snap q$a@785@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@785@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@785@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)))))
(pop) ; 10
(push) ; 10
; [else-branch: 373 | !(0 <= q$a@785@01 && q$a@785@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@785@01)
    (<= q$a@785@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@786@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@786@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef106|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@786@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef107|)))
(assert (=>
  (and
    (<= 0 q$a@785@01)
    (<= q$a@785@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@785@01)
    (<= q$a@785@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@785@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@785@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@785@01)) ($SortWrappers.IntTo$Snap q$a@785@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@785@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@785@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@785@01)
      (<= q$a@785@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@785@01)
    (<= q$a@785@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@786@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@786@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef106|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@786@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef107|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@785@01 Int)) (!
  (and
    (or (<= 0 q$a@785@01) (not (<= 0 q$a@785@01)))
    (=>
      (and
        (<= 0 q$a@785@01)
        (<= q$a@785@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@785@01)
        (<= q$a@785@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@785@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@785@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@785@01)) ($SortWrappers.IntTo$Snap q$a@785@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@785@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@785@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01))))))
    (or
      (not
        (and
          (<= 0 q$a@785@01)
          (<= q$a@785@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@785@01)
        (<= q$a@785@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361-aux|)))
(push) ; 8
(assert (not (forall ((q$a@785@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@785@01)
        (<= q$a@785@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@785@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@786@01  $PPM) ($SortWrappers.IntTo$Snap q$a@785@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@785@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@785@01)
        (<= q$a@785@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@785@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@786@01  $PPM) ($SortWrappers.IntTo$Snap q$a@785@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@785@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@787@01 $Snap)
(assert (= $t@787@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@637@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@788@01 $Struct)
(assert (=
  self@788@01
  ($struct_set<$Struct> self@622@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@622@01 11))
    l$havoc@637@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 7
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 361 | l$raw_ret@632@01 == l$raw_ret$1@634@01]
(assert (= l$raw_ret@632@01 l$raw_ret$1@634@01))
(pop) ; 6
; [eval] !!(l$raw_ret == l$raw_ret$1)
; [eval] !(l$raw_ret == l$raw_ret$1)
; [eval] l$raw_ret == l$raw_ret$1
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= l$raw_ret@632@01 l$raw_ret$1@634@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= l$raw_ret@632@01 l$raw_ret$1@634@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 377 | l$raw_ret@632@01 == l$raw_ret$1@634@01 | live]
; [else-branch: 377 | l$raw_ret@632@01 != l$raw_ret$1@634@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 377 | l$raw_ret@632@01 == l$raw_ret$1@634@01]
(assert (= l$raw_ret@632@01 l$raw_ret$1@634@01))
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) < 0
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int))))
; [eval] $w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 378 | $unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) < 0 | dead]
; [else-branch: 378 | !($unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) < 0) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 378 | !($unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) < 0)]
(assert (not
  (<
    ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
    0)))
(pop) ; 7
; [eval] !($unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) < 0)
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) < 0
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int))))
; [eval] $w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 379 | !($unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) < 0) | live]
; [else-branch: 379 | $unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) < 0 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 379 | !($unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) < 0)]
(assert (not
  (<
    ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
    0)))
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int))))
; [eval] $w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (>
  ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 380 | $unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 380 | !($unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 380 | $unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 381 | False | dead]
; [else-branch: 381 | True | live]
(push) ; 9
; [else-branch: 381 | True]
(pop) ; 9
; [eval] !$succ
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 382 | True | live]
; [else-branch: 382 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 382 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 10
; [then-branch: 383 | False | dead]
; [else-branch: 383 | True | live]
(push) ; 11
; [else-branch: 383 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 384 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
; [else-branch: 384 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 384 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 12
; [then-branch: 385 | False | live]
; [else-branch: 385 | True | live]
(push) ; 13
; [then-branch: 385 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 385 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 384 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@789@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 386 | !(0 <= q$a@789@01) | live]
; [else-branch: 386 | 0 <= q$a@789@01 | live]
(push) ; 12
; [then-branch: 386 | !(0 <= q$a@789@01)]
(assert (not (<= 0 q$a@789@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 386 | 0 <= q$a@789@01]
(assert (<= 0 q$a@789@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@789@01) (not (<= 0 q$a@789@01))))
(push) ; 11
; [then-branch: 387 | 0 <= q$a@789@01 && q$a@789@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 387 | !(0 <= q$a@789@01 && q$a@789@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 387 | 0 <= q$a@789@01 && q$a@789@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@789@01)
  (<= q$a@789@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 13
; [then-branch: 388 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@789@01) | live]
; [else-branch: 388 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@789@01)) | live]
(push) ; 14
; [then-branch: 388 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@789@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
(pop) ; 14
(push) ; 14
; [else-branch: 388 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@789@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01)))
(push) ; 13
; [then-branch: 389 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@789@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@789@01) | live]
; [else-branch: 389 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@789@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@789@01)) | live]
(push) ; 14
; [then-branch: 389 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@789@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@789@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 15
; [then-branch: 390 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
; [else-branch: 390 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
(push) ; 16
; [then-branch: 390 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))
(pop) ; 16
(push) ; 16
; [else-branch: 390 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@790@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@790@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@790@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef108|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@790@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef109|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@789@01)) ($SortWrappers.IntTo$Snap q$a@789@01)))
; [eval] 1 * write
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@790@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@790@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef108|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@790@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef109|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@789@01)) ($SortWrappers.IntTo$Snap q$a@789@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))
(pop) ; 14
(push) ; 14
; [else-branch: 389 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@789@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@789@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@790@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@790@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef108|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@790@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef109|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@789@01)) ($SortWrappers.IntTo$Snap q$a@789@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))))
(pop) ; 12
(push) ; 12
; [else-branch: 387 | !(0 <= q$a@789@01 && q$a@789@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@789@01)
    (<= q$a@789@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@790@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@790@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef108|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@790@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef109|)))
(assert (=>
  (and
    (<= 0 q$a@789@01)
    (<= q$a@789@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@789@01)
    (<= q$a@789@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@789@01)) ($SortWrappers.IntTo$Snap q$a@789@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@789@01)
      (<= q$a@789@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@789@01)
    (<= q$a@789@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@790@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@790@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef108|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@790@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef109|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@789@01 Int)) (!
  (and
    (or (<= 0 q$a@789@01) (not (<= 0 q$a@789@01)))
    (=>
      (and
        (<= 0 q$a@789@01)
        (<= q$a@789@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@789@01)
        (<= q$a@789@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@789@01)) ($SortWrappers.IntTo$Snap q$a@789@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01)))))
    (or
      (not
        (and
          (<= 0 q$a@789@01)
          (<= q$a@789@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@789@01)
        (<= q$a@789@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397-aux|)))
(push) ; 10
(assert (not (forall ((q$a@789@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@789@01)
        (<= q$a@789@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@790@01  $PPM) ($SortWrappers.IntTo$Snap q$a@789@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@789@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@789@01)
        (<= q$a@789@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@790@01  $PPM) ($SortWrappers.IntTo$Snap q$a@789@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@789@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@791@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 391 | !(0 <= q$a@791@01) | live]
; [else-branch: 391 | 0 <= q$a@791@01 | live]
(push) ; 12
; [then-branch: 391 | !(0 <= q$a@791@01)]
(assert (not (<= 0 q$a@791@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 391 | 0 <= q$a@791@01]
(assert (<= 0 q$a@791@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@791@01) (not (<= 0 q$a@791@01))))
(push) ; 11
; [then-branch: 392 | 0 <= q$a@791@01 && q$a@791@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 392 | !(0 <= q$a@791@01 && q$a@791@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 392 | 0 <= q$a@791@01 && q$a@791@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@791@01)
  (<= q$a@791@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 13
; [then-branch: 393 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@791@01)) | live]
; [else-branch: 393 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@791@01) | live]
(push) ; 14
; [then-branch: 393 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@791@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 393 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@791@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01))))
(push) ; 13
; [then-branch: 394 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@791@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@791@01)) | live]
; [else-branch: 394 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@791@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@791@01))) | live]
(push) ; 14
; [then-branch: 394 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@791@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@791@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 15
; [then-branch: 395 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@791@01 | live]
; [else-branch: 395 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@791@01 | live]
(push) ; 16
; [then-branch: 395 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@791@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@791@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 395 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@791@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@791@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@792@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@792@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@792@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef110|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@792@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef111|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@791@01)) ($SortWrappers.IntTo$Snap q$a@791@01)))
; [eval] 1 * write
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@792@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@792@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef110|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@792@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef111|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@791@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@791@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@791@01)) ($SortWrappers.IntTo$Snap q$a@791@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@791@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@791@01))))
(pop) ; 14
(push) ; 14
; [else-branch: 394 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@791@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@791@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@792@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@792@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef110|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@792@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef111|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@791@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@791@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@791@01)) ($SortWrappers.IntTo$Snap q$a@791@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@791@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@791@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)))))
(pop) ; 12
(push) ; 12
; [else-branch: 392 | !(0 <= q$a@791@01 && q$a@791@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@791@01)
    (<= q$a@791@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@792@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@792@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef110|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@792@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef111|)))
(assert (=>
  (and
    (<= 0 q$a@791@01)
    (<= q$a@791@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@791@01)
    (<= q$a@791@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@791@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@791@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@791@01)) ($SortWrappers.IntTo$Snap q$a@791@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@791@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@791@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@791@01)
      (<= q$a@791@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@791@01)
    (<= q$a@791@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@792@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@792@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef110|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@792@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef111|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@791@01 Int)) (!
  (and
    (or (<= 0 q$a@791@01) (not (<= 0 q$a@791@01)))
    (=>
      (and
        (<= 0 q$a@791@01)
        (<= q$a@791@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@791@01)
        (<= q$a@791@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@791@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@791@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@791@01)) ($SortWrappers.IntTo$Snap q$a@791@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@791@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@791@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01))))))
    (or
      (not
        (and
          (<= 0 q$a@791@01)
          (<= q$a@791@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@791@01)
        (<= q$a@791@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361-aux|)))
(push) ; 10
(assert (not (forall ((q$a@791@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@791@01)
        (<= q$a@791@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@791@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@792@01  $PPM) ($SortWrappers.IntTo$Snap q$a@791@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@791@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@791@01)
        (<= q$a@791@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@791@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@792@01  $PPM) ($SortWrappers.IntTo$Snap q$a@791@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@791@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@793@01 $Snap)
(assert (= $t@793@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@637@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@794@01 $Struct)
(assert (=
  self@794@01
  ($struct_set<$Struct> self@622@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@622@01 11))
    l$havoc@637@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 9
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 380 | !($unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 8
; [eval] !($unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int))))
; [eval] $w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 8
(set-option :timeout 10)
(assert (not (>
  ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 396 | !($unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 396 | $unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 396 | !($unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] 10000 == 0
; [then-branch: 397 | False | dead]
; [else-branch: 397 | True | live]
(push) ; 9
; [else-branch: 397 | True]
(pop) ; 9
; [eval] !(10000 == 0)
; [eval] 10000 == 0
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 398 | True | live]
; [else-branch: 398 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 398 | True]
; [eval] $div($unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))), 10000, $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) \ 10000) < 0
; [eval] $div($unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))), 10000, $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) \ 10000)
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int))))
; [eval] $w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) \ 10000
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int))))
; [eval] $w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (<
    ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7))))) 10000 (div
      ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
      10000))
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 399 | $div[Int]($unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))), 10000, $unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) / 10000) < 0 | dead]
; [else-branch: 399 | !($div[Int]($unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))), 10000, $unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) / 10000) < 0) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 399 | !($div[Int]($unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))), 10000, $unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) / 10000) < 0)]
(assert (not
  (<
    ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7))))) 10000 (div
      ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
      10000))
    0)))
(pop) ; 10
; [eval] !($div($unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))), 10000, $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) \ 10000) < 0)
; [eval] $div($unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))), 10000, $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) \ 10000) < 0
; [eval] $div($unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))), 10000, $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) \ 10000)
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int))))
; [eval] $w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) \ 10000
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int))))
; [eval] $w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7))))) 10000 (div
    ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
    10000))
  0)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (<
    ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7))))) 10000 (div
      ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
      10000))
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 400 | !($div[Int]($unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))), 10000, $unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) / 10000) < 0) | live]
; [else-branch: 400 | $div[Int]($unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))), 10000, $unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) / 10000) < 0 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 400 | !($div[Int]($unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))), 10000, $unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) / 10000) < 0)]
(assert (not
  (<
    ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7))))) 10000 (div
      ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
      10000))
    0)))
; [eval] $div($unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))), 10000, $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) \ 10000) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $div($unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))), 10000, $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) \ 10000)
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int))))
; [eval] $w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) \ 10000
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int))))
; [eval] $w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7))))) 10000 (div
      ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
      10000))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 401 | $div[Int]($unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))), 10000, $unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) / 10000) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 401 | !($div[Int]($unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))), 10000, $unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) / 10000) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 401 | !($div[Int]($unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))), 10000, $unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) / 10000) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7))))) 10000 (div
      ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
      10000))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 11
; [eval] !($div($unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))), 10000, $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) \ 10000) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $div($unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))), 10000, $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) \ 10000) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $div($unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))), 10000, $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) \ 10000)
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int))))
; [eval] $w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) \ 10000
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int))))
; [eval] $w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 11
(set-option :timeout 10)
(assert (not (>
  ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7))))) 10000 (div
    ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
    10000))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7))))) 10000 (div
      ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
      10000))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 402 | !($div[Int]($unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))), 10000, $unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) / 10000) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 402 | $div[Int]($unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))), 10000, $unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) / 10000) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 402 | !($div[Int]($unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))), 10000, $unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) / 10000) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7))))) 10000 (div
      ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
      10000))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; l$commissionAmount := $wrap($div($unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self,
;   7)): Int)))), 10000, $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self,
;   7)): Int)))) \
;   10000))
; [eval] $wrap($div($unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))), 10000, $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) \ 10000))
; [eval] $div($unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))), 10000, $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) \ 10000)
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int))))
; [eval] $w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))) \ 10000
; [eval] $unwrap($w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int))))
; [eval] $w_mul(l$_amount, $wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const l$commissionAmount@795@01 $Int)
(assert (=
  l$commissionAmount@795@01
  ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7))))) 10000 (div
    ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
    10000)))))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap(l$commissionAmount) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap(l$commissionAmount)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] $unwrap(l$commissionAmount)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
      ($unwrap<Int> l$commissionAmount@795@01))
    0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 403 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 8)), $struct_get[Int]($struct_loc[Int](self@622@01, 3))))) + $unwrap[Int](l$commissionAmount@795@01) < 0 | dead]
; [else-branch: 403 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 8)), $struct_get[Int]($struct_loc[Int](self@622@01, 3))))) + $unwrap[Int](l$commissionAmount@795@01) < 0) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 403 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 8)), $struct_get[Int]($struct_loc[Int](self@622@01, 3))))) + $unwrap[Int](l$commissionAmount@795@01) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
      ($unwrap<Int> l$commissionAmount@795@01))
    0)))
(pop) ; 12
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap(l$commissionAmount) < 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap(l$commissionAmount) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap(l$commissionAmount)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] $unwrap(l$commissionAmount)
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
    ($unwrap<Int> l$commissionAmount@795@01))
  0)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
      ($unwrap<Int> l$commissionAmount@795@01))
    0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 404 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 8)), $struct_get[Int]($struct_loc[Int](self@622@01, 3))))) + $unwrap[Int](l$commissionAmount@795@01) < 0) | live]
; [else-branch: 404 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 8)), $struct_get[Int]($struct_loc[Int](self@622@01, 3))))) + $unwrap[Int](l$commissionAmount@795@01) < 0 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 404 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 8)), $struct_get[Int]($struct_loc[Int](self@622@01, 3))))) + $unwrap[Int](l$commissionAmount@795@01) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
      ($unwrap<Int> l$commissionAmount@795@01))
    0)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap(l$commissionAmount) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap(l$commissionAmount)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] $unwrap(l$commissionAmount)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
      ($unwrap<Int> l$commissionAmount@795@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
    ($unwrap<Int> l$commissionAmount@795@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 405 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 8)), $struct_get[Int]($struct_loc[Int](self@622@01, 3))))) + $unwrap[Int](l$commissionAmount@795@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 405 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 8)), $struct_get[Int]($struct_loc[Int](self@622@01, 3))))) + $unwrap[Int](l$commissionAmount@795@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 405 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 8)), $struct_get[Int]($struct_loc[Int](self@622@01, 3))))) + $unwrap[Int](l$commissionAmount@795@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
    ($unwrap<Int> l$commissionAmount@795@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 406 | False | dead]
; [else-branch: 406 | True | live]
(push) ; 14
; [else-branch: 406 | True]
(pop) ; 14
; [eval] !$succ
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 407 | True | live]
; [else-branch: 407 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 407 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 15
; [then-branch: 408 | False | dead]
; [else-branch: 408 | True | live]
(push) ; 16
; [else-branch: 408 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 409 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
; [else-branch: 409 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 409 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 17
; [then-branch: 410 | False | live]
; [else-branch: 410 | True | live]
(push) ; 18
; [then-branch: 410 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 410 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(push) ; 16
; [else-branch: 409 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@796@01 Int)
(push) ; 15
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 16
; [then-branch: 411 | !(0 <= q$a@796@01) | live]
; [else-branch: 411 | 0 <= q$a@796@01 | live]
(push) ; 17
; [then-branch: 411 | !(0 <= q$a@796@01)]
(assert (not (<= 0 q$a@796@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 411 | 0 <= q$a@796@01]
(assert (<= 0 q$a@796@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@796@01) (not (<= 0 q$a@796@01))))
(push) ; 16
; [then-branch: 412 | 0 <= q$a@796@01 && q$a@796@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 412 | !(0 <= q$a@796@01 && q$a@796@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 17
; [then-branch: 412 | 0 <= q$a@796@01 && q$a@796@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@796@01)
  (<= q$a@796@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 18
; [then-branch: 413 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@796@01) | live]
; [else-branch: 413 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@796@01)) | live]
(push) ; 19
; [then-branch: 413 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@796@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
(pop) ; 19
(push) ; 19
; [else-branch: 413 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@796@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01)))
(push) ; 18
; [then-branch: 414 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@796@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@796@01) | live]
; [else-branch: 414 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@796@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@796@01)) | live]
(push) ; 19
; [then-branch: 414 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@796@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@796@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 20
; [then-branch: 415 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
; [else-branch: 415 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
(push) ; 21
; [then-branch: 415 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))
(pop) ; 21
(push) ; 21
; [else-branch: 415 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@797@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@797@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@797@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef112|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@797@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef113|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@796@01)) ($SortWrappers.IntTo$Snap q$a@796@01)))
; [eval] 1 * write
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@797@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@797@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef112|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@797@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef113|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@796@01)) ($SortWrappers.IntTo$Snap q$a@796@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))
(pop) ; 19
(push) ; 19
; [else-branch: 414 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@796@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@796@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@797@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@797@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef112|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@797@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef113|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@796@01)) ($SortWrappers.IntTo$Snap q$a@796@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))))
(pop) ; 17
(push) ; 17
; [else-branch: 412 | !(0 <= q$a@796@01 && q$a@796@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@796@01)
    (<= q$a@796@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@797@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@797@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef112|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@797@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef113|)))
(assert (=>
  (and
    (<= 0 q$a@796@01)
    (<= q$a@796@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@796@01)
    (<= q$a@796@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@796@01)) ($SortWrappers.IntTo$Snap q$a@796@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@796@01)
      (<= q$a@796@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@796@01)
    (<= q$a@796@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 15
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@797@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@797@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef112|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@797@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef113|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@796@01 Int)) (!
  (and
    (or (<= 0 q$a@796@01) (not (<= 0 q$a@796@01)))
    (=>
      (and
        (<= 0 q$a@796@01)
        (<= q$a@796@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@796@01)
        (<= q$a@796@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@796@01)) ($SortWrappers.IntTo$Snap q$a@796@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01)))))
    (or
      (not
        (and
          (<= 0 q$a@796@01)
          (<= q$a@796@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@796@01)
        (<= q$a@796@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397-aux|)))
(push) ; 15
(assert (not (forall ((q$a@796@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@796@01)
        (<= q$a@796@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@797@01  $PPM) ($SortWrappers.IntTo$Snap q$a@796@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@796@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@796@01)
        (<= q$a@796@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@797@01  $PPM) ($SortWrappers.IntTo$Snap q$a@796@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@796@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@798@01 Int)
(push) ; 15
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 16
; [then-branch: 416 | !(0 <= q$a@798@01) | live]
; [else-branch: 416 | 0 <= q$a@798@01 | live]
(push) ; 17
; [then-branch: 416 | !(0 <= q$a@798@01)]
(assert (not (<= 0 q$a@798@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 416 | 0 <= q$a@798@01]
(assert (<= 0 q$a@798@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@798@01) (not (<= 0 q$a@798@01))))
(push) ; 16
; [then-branch: 417 | 0 <= q$a@798@01 && q$a@798@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 417 | !(0 <= q$a@798@01 && q$a@798@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 17
; [then-branch: 417 | 0 <= q$a@798@01 && q$a@798@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@798@01)
  (<= q$a@798@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 18
; [then-branch: 418 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@798@01)) | live]
; [else-branch: 418 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@798@01) | live]
(push) ; 19
; [then-branch: 418 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@798@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)))
(pop) ; 19
(push) ; 19
; [else-branch: 418 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@798@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01))))
(push) ; 18
; [then-branch: 419 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@798@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@798@01)) | live]
; [else-branch: 419 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@798@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@798@01))) | live]
(push) ; 19
; [then-branch: 419 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@798@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@798@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 20
; [then-branch: 420 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@798@01 | live]
; [else-branch: 420 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@798@01 | live]
(push) ; 21
; [then-branch: 420 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@798@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@798@01)))
(pop) ; 21
(push) ; 21
; [else-branch: 420 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@798@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@798@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@799@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@799@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@799@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef114|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@799@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef115|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@798@01)) ($SortWrappers.IntTo$Snap q$a@798@01)))
; [eval] 1 * write
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@799@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@799@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef114|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@799@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef115|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@798@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@798@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@798@01)) ($SortWrappers.IntTo$Snap q$a@798@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@798@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@798@01))))
(pop) ; 19
(push) ; 19
; [else-branch: 419 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@798@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@798@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@799@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@799@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef114|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@799@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef115|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@798@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@798@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@798@01)) ($SortWrappers.IntTo$Snap q$a@798@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@798@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@798@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)))))
(pop) ; 17
(push) ; 17
; [else-branch: 417 | !(0 <= q$a@798@01 && q$a@798@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@798@01)
    (<= q$a@798@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@799@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@799@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef114|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@799@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef115|)))
(assert (=>
  (and
    (<= 0 q$a@798@01)
    (<= q$a@798@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@798@01)
    (<= q$a@798@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@798@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@798@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@798@01)) ($SortWrappers.IntTo$Snap q$a@798@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@798@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@798@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@798@01)
      (<= q$a@798@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@798@01)
    (<= q$a@798@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 15
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@799@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@799@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef114|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@799@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef115|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@798@01 Int)) (!
  (and
    (or (<= 0 q$a@798@01) (not (<= 0 q$a@798@01)))
    (=>
      (and
        (<= 0 q$a@798@01)
        (<= q$a@798@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@798@01)
        (<= q$a@798@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@798@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@798@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@798@01)) ($SortWrappers.IntTo$Snap q$a@798@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@798@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@798@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01))))))
    (or
      (not
        (and
          (<= 0 q$a@798@01)
          (<= q$a@798@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@798@01)
        (<= q$a@798@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361-aux|)))
(push) ; 15
(assert (not (forall ((q$a@798@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@798@01)
        (<= q$a@798@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@798@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@799@01  $PPM) ($SortWrappers.IntTo$Snap q$a@798@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@798@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@798@01)
        (<= q$a@798@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@798@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@799@01  $PPM) ($SortWrappers.IntTo$Snap q$a@798@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@798@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@800@01 $Snap)
(assert (= $t@800@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@637@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@801@01 $Struct)
(assert (=
  self@801@01
  ($struct_set<$Struct> self@622@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@622@01 11))
    l$havoc@637@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 14
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 405 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 8)), $struct_get[Int]($struct_loc[Int](self@622@01, 3))))) + $unwrap[Int](l$commissionAmount@795@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
      ($unwrap<Int> l$commissionAmount@795@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 13
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap(l$commissionAmount) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap(l$commissionAmount) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap(l$commissionAmount)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] $unwrap(l$commissionAmount)
(push) ; 13
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
    ($unwrap<Int> l$commissionAmount@795@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
      ($unwrap<Int> l$commissionAmount@795@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 421 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 8)), $struct_get[Int]($struct_loc[Int](self@622@01, 3))))) + $unwrap[Int](l$commissionAmount@795@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 421 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 8)), $struct_get[Int]($struct_loc[Int](self@622@01, 3))))) + $unwrap[Int](l$commissionAmount@795@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 421 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 8)), $struct_get[Int]($struct_loc[Int](self@622@01, 3))))) + $unwrap[Int](l$commissionAmount@795@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
      ($unwrap<Int> l$commissionAmount@795@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 3)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self,
;   8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) +
;   $unwrap(l$commissionAmount)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap(l$commissionAmount)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap(l$commissionAmount)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap(l$commissionAmount)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] $unwrap(l$commissionAmount)
(declare-const self@802@01 $Struct)
(assert (=
  self@802@01
  ($struct_set<$Struct> self@622@01 8 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) ($struct_get<Int> ($struct_loc<Int> self@622@01 3)) (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
    ($unwrap<Int> l$commissionAmount@795@01))))))
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount) < 0
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount)
; [eval] $unwrap(l$_amount)
; [eval] $unwrap(l$commissionAmount)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (<
    (- ($unwrap<Int> l$_amount@616@01) ($unwrap<Int> l$commissionAmount@795@01))
    0))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (<
  (- ($unwrap<Int> l$_amount@616@01) ($unwrap<Int> l$commissionAmount@795@01))
  0)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 422 | $unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) < 0 | live]
; [else-branch: 422 | !($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) < 0) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 422 | $unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) < 0]
(assert (<
  (- ($unwrap<Int> l$_amount@616@01) ($unwrap<Int> l$commissionAmount@795@01))
  0))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 423 | False | dead]
; [else-branch: 423 | True | live]
(push) ; 15
; [else-branch: 423 | True]
(pop) ; 15
; [eval] !$succ
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 424 | True | live]
; [else-branch: 424 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 424 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 16
; [then-branch: 425 | False | dead]
; [else-branch: 425 | True | live]
(push) ; 17
; [else-branch: 425 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 426 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
; [else-branch: 426 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 426 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 18
; [then-branch: 427 | False | live]
; [else-branch: 427 | True | live]
(push) ; 19
; [then-branch: 427 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 427 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 426 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@803@01 Int)
(push) ; 16
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 17
; [then-branch: 428 | !(0 <= q$a@803@01) | live]
; [else-branch: 428 | 0 <= q$a@803@01 | live]
(push) ; 18
; [then-branch: 428 | !(0 <= q$a@803@01)]
(assert (not (<= 0 q$a@803@01)))
(pop) ; 18
(push) ; 18
; [else-branch: 428 | 0 <= q$a@803@01]
(assert (<= 0 q$a@803@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@803@01) (not (<= 0 q$a@803@01))))
(push) ; 17
; [then-branch: 429 | 0 <= q$a@803@01 && q$a@803@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 429 | !(0 <= q$a@803@01 && q$a@803@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 18
; [then-branch: 429 | 0 <= q$a@803@01 && q$a@803@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@803@01)
  (<= q$a@803@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 19
; [then-branch: 430 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@803@01) | live]
; [else-branch: 430 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@803@01)) | live]
(push) ; 20
; [then-branch: 430 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@803@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
(pop) ; 20
(push) ; 20
; [else-branch: 430 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@803@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01)))
(push) ; 19
; [then-branch: 431 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@803@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@803@01) | live]
; [else-branch: 431 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@803@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@803@01)) | live]
(push) ; 20
; [then-branch: 431 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@803@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@803@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 21
; [then-branch: 432 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
; [else-branch: 432 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
(push) ; 22
; [then-branch: 432 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))
(pop) ; 22
(push) ; 22
; [else-branch: 432 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@804@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@804@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@804@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef116|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@804@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef117|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@803@01)) ($SortWrappers.IntTo$Snap q$a@803@01)))
; [eval] 1 * write
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@804@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@804@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef116|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@804@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef117|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@803@01)) ($SortWrappers.IntTo$Snap q$a@803@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))
(pop) ; 20
(push) ; 20
; [else-branch: 431 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@803@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@803@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))))
(pop) ; 20
(pop) ; 19
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@804@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@804@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef116|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@804@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef117|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@803@01)) ($SortWrappers.IntTo$Snap q$a@803@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))))
(pop) ; 18
(push) ; 18
; [else-branch: 429 | !(0 <= q$a@803@01 && q$a@803@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@803@01)
    (<= q$a@803@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@804@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@804@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef116|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@804@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef117|)))
(assert (=>
  (and
    (<= 0 q$a@803@01)
    (<= q$a@803@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@803@01)
    (<= q$a@803@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@803@01)) ($SortWrappers.IntTo$Snap q$a@803@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@803@01)
      (<= q$a@803@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@803@01)
    (<= q$a@803@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 16
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@804@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@804@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef116|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@804@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef117|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@803@01 Int)) (!
  (and
    (or (<= 0 q$a@803@01) (not (<= 0 q$a@803@01)))
    (=>
      (and
        (<= 0 q$a@803@01)
        (<= q$a@803@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@803@01)
        (<= q$a@803@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@803@01)) ($SortWrappers.IntTo$Snap q$a@803@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01)))))
    (or
      (not
        (and
          (<= 0 q$a@803@01)
          (<= q$a@803@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@803@01)
        (<= q$a@803@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397-aux|)))
(push) ; 16
(assert (not (forall ((q$a@803@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@803@01)
        (<= q$a@803@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@804@01  $PPM) ($SortWrappers.IntTo$Snap q$a@803@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397|))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@803@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@803@01)
        (<= q$a@803@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@804@01  $PPM) ($SortWrappers.IntTo$Snap q$a@803@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@803@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@805@01 Int)
(push) ; 16
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 17
; [then-branch: 433 | !(0 <= q$a@805@01) | live]
; [else-branch: 433 | 0 <= q$a@805@01 | live]
(push) ; 18
; [then-branch: 433 | !(0 <= q$a@805@01)]
(assert (not (<= 0 q$a@805@01)))
(pop) ; 18
(push) ; 18
; [else-branch: 433 | 0 <= q$a@805@01]
(assert (<= 0 q$a@805@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@805@01) (not (<= 0 q$a@805@01))))
(push) ; 17
; [then-branch: 434 | 0 <= q$a@805@01 && q$a@805@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 434 | !(0 <= q$a@805@01 && q$a@805@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 18
; [then-branch: 434 | 0 <= q$a@805@01 && q$a@805@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@805@01)
  (<= q$a@805@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 19
; [then-branch: 435 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@805@01)) | live]
; [else-branch: 435 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@805@01) | live]
(push) ; 20
; [then-branch: 435 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@805@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)))
(pop) ; 20
(push) ; 20
; [else-branch: 435 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@805@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01))))
(push) ; 19
; [then-branch: 436 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@805@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@805@01)) | live]
; [else-branch: 436 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@805@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@805@01))) | live]
(push) ; 20
; [then-branch: 436 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@805@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@805@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 21
; [then-branch: 437 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@805@01 | live]
; [else-branch: 437 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@805@01 | live]
(push) ; 22
; [then-branch: 437 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@805@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@805@01)))
(pop) ; 22
(push) ; 22
; [else-branch: 437 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@805@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@805@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@806@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@806@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@806@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef118|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@806@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef119|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@805@01)) ($SortWrappers.IntTo$Snap q$a@805@01)))
; [eval] 1 * write
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@806@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@806@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef118|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@806@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef119|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@805@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@805@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@805@01)) ($SortWrappers.IntTo$Snap q$a@805@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@805@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@805@01))))
(pop) ; 20
(push) ; 20
; [else-branch: 436 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@805@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@805@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)))))
(pop) ; 20
(pop) ; 19
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@806@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@806@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef118|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@806@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef119|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@805@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@805@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@805@01)) ($SortWrappers.IntTo$Snap q$a@805@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@805@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@805@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)))))
(pop) ; 18
(push) ; 18
; [else-branch: 434 | !(0 <= q$a@805@01 && q$a@805@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@805@01)
    (<= q$a@805@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@806@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@806@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef118|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@806@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef119|)))
(assert (=>
  (and
    (<= 0 q$a@805@01)
    (<= q$a@805@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@805@01)
    (<= q$a@805@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@805@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@805@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@805@01)) ($SortWrappers.IntTo$Snap q$a@805@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@805@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@805@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@805@01)
      (<= q$a@805@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@805@01)
    (<= q$a@805@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 16
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@806@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@806@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef118|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@806@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef119|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@805@01 Int)) (!
  (and
    (or (<= 0 q$a@805@01) (not (<= 0 q$a@805@01)))
    (=>
      (and
        (<= 0 q$a@805@01)
        (<= q$a@805@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@805@01)
        (<= q$a@805@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@805@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@805@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@805@01)) ($SortWrappers.IntTo$Snap q$a@805@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@805@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@805@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01))))))
    (or
      (not
        (and
          (<= 0 q$a@805@01)
          (<= q$a@805@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@805@01)
        (<= q$a@805@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361-aux|)))
(push) ; 16
(assert (not (forall ((q$a@805@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@805@01)
        (<= q$a@805@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@805@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@806@01  $PPM) ($SortWrappers.IntTo$Snap q$a@805@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361|))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@805@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@805@01)
        (<= q$a@805@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@805@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@806@01  $PPM) ($SortWrappers.IntTo$Snap q$a@805@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@805@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@807@01 $Snap)
(assert (= $t@807@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@637@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@808@01 $Struct)
(assert (=
  self@808@01
  ($struct_set<$Struct> self@622@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@622@01 11))
    l$havoc@637@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 15
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 422 | !($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) < 0)]
(assert (not
  (<
    (- ($unwrap<Int> l$_amount@616@01) ($unwrap<Int> l$commissionAmount@795@01))
    0)))
(pop) ; 14
; [eval] !($unwrap(l$_amount) - $unwrap(l$commissionAmount) < 0)
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount) < 0
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount)
; [eval] $unwrap(l$_amount)
; [eval] $unwrap(l$commissionAmount)
(push) ; 14
(set-option :timeout 10)
(assert (not (<
  (- ($unwrap<Int> l$_amount@616@01) ($unwrap<Int> l$commissionAmount@795@01))
  0)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (<
    (- ($unwrap<Int> l$_amount@616@01) ($unwrap<Int> l$commissionAmount@795@01))
    0))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 438 | !($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) < 0) | live]
; [else-branch: 438 | $unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) < 0 | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 438 | !($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) < 0)]
(assert (not
  (<
    (- ($unwrap<Int> l$_amount@616@01) ($unwrap<Int> l$commissionAmount@795@01))
    0)))
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount)
; [eval] $unwrap(l$_amount)
; [eval] $unwrap(l$commissionAmount)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (>
    (- ($unwrap<Int> l$_amount@616@01) ($unwrap<Int> l$commissionAmount@795@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 439 | $unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 439 | !($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 439 | !($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (- ($unwrap<Int> l$_amount@616@01) ($unwrap<Int> l$commissionAmount@795@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 15
; [eval] !($unwrap(l$_amount) - $unwrap(l$commissionAmount) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount)
; [eval] $unwrap(l$_amount)
; [eval] $unwrap(l$commissionAmount)
(push) ; 15
(set-option :timeout 10)
(assert (not (>
  (- ($unwrap<Int> l$_amount@616@01) ($unwrap<Int> l$commissionAmount@795@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (>
    (- ($unwrap<Int> l$_amount@616@01) ($unwrap<Int> l$commissionAmount@795@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 440 | !($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 440 | $unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 440 | !($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (- ($unwrap<Int> l$_amount@616@01) ($unwrap<Int> l$commissionAmount@795@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int))) + $unwrap($wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount))) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int))) + $unwrap($wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap($wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount)))
; [eval] $wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount))
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount)
; [eval] $unwrap(l$_amount)
; [eval] $unwrap(l$commissionAmount)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@802@01 8)) l$_buyer@615@01)))
      ($unwrap<Int> ($wrap<$Int> (-
        ($unwrap<Int> l$_amount@616@01)
        ($unwrap<Int> l$commissionAmount@795@01)))))
    0))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 441 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@802@01, 8)), l$_buyer@615@01))) + $unwrap[Int]($wrap[$Int]($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01))) < 0 | dead]
; [else-branch: 441 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@802@01, 8)), l$_buyer@615@01))) + $unwrap[Int]($wrap[$Int]($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01))) < 0) | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 441 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@802@01, 8)), l$_buyer@615@01))) + $unwrap[Int]($wrap[$Int]($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01))) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@802@01 8)) l$_buyer@615@01)))
      ($unwrap<Int> ($wrap<$Int> (-
        ($unwrap<Int> l$_amount@616@01)
        ($unwrap<Int> l$commissionAmount@795@01)))))
    0)))
(pop) ; 16
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int))) + $unwrap($wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount))) < 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int))) + $unwrap($wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount))) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int))) + $unwrap($wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap($wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount)))
; [eval] $wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount))
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount)
; [eval] $unwrap(l$_amount)
; [eval] $unwrap(l$commissionAmount)
(push) ; 16
(set-option :timeout 10)
(assert (not (<
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@802@01 8)) l$_buyer@615@01)))
    ($unwrap<Int> ($wrap<$Int> (-
      ($unwrap<Int> l$_amount@616@01)
      ($unwrap<Int> l$commissionAmount@795@01)))))
  0)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@802@01 8)) l$_buyer@615@01)))
      ($unwrap<Int> ($wrap<$Int> (-
        ($unwrap<Int> l$_amount@616@01)
        ($unwrap<Int> l$commissionAmount@795@01)))))
    0))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 442 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@802@01, 8)), l$_buyer@615@01))) + $unwrap[Int]($wrap[$Int]($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01))) < 0) | live]
; [else-branch: 442 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@802@01, 8)), l$_buyer@615@01))) + $unwrap[Int]($wrap[$Int]($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01))) < 0 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 442 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@802@01, 8)), l$_buyer@615@01))) + $unwrap[Int]($wrap[$Int]($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01))) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@802@01 8)) l$_buyer@615@01)))
      ($unwrap<Int> ($wrap<$Int> (-
        ($unwrap<Int> l$_amount@616@01)
        ($unwrap<Int> l$commissionAmount@795@01)))))
    0)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int))) + $unwrap($wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int))) + $unwrap($wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap($wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount)))
; [eval] $wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount))
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount)
; [eval] $unwrap(l$_amount)
; [eval] $unwrap(l$commissionAmount)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@802@01 8)) l$_buyer@615@01)))
      ($unwrap<Int> ($wrap<$Int> (-
        ($unwrap<Int> l$_amount@616@01)
        ($unwrap<Int> l$commissionAmount@795@01)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@802@01 8)) l$_buyer@615@01)))
    ($unwrap<Int> ($wrap<$Int> (-
      ($unwrap<Int> l$_amount@616@01)
      ($unwrap<Int> l$commissionAmount@795@01)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 443 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@802@01, 8)), l$_buyer@615@01))) + $unwrap[Int]($wrap[$Int]($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 443 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@802@01, 8)), l$_buyer@615@01))) + $unwrap[Int]($wrap[$Int]($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 443 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@802@01, 8)), l$_buyer@615@01))) + $unwrap[Int]($wrap[$Int]($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@802@01 8)) l$_buyer@615@01)))
    ($unwrap<Int> ($wrap<$Int> (-
      ($unwrap<Int> l$_amount@616@01)
      ($unwrap<Int> l$commissionAmount@795@01)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 444 | False | dead]
; [else-branch: 444 | True | live]
(push) ; 18
; [else-branch: 444 | True]
(pop) ; 18
; [eval] !$succ
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 445 | True | live]
; [else-branch: 445 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 445 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 19
; [then-branch: 446 | False | dead]
; [else-branch: 446 | True | live]
(push) ; 20
; [else-branch: 446 | True]
(pop) ; 20
(pop) ; 19
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 19
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 447 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
; [else-branch: 447 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 447 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 21
; [then-branch: 448 | False | live]
; [else-branch: 448 | True | live]
(push) ; 22
; [then-branch: 448 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 448 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(push) ; 20
; [else-branch: 447 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@809@01 Int)
(push) ; 19
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 20
; [then-branch: 449 | !(0 <= q$a@809@01) | live]
; [else-branch: 449 | 0 <= q$a@809@01 | live]
(push) ; 21
; [then-branch: 449 | !(0 <= q$a@809@01)]
(assert (not (<= 0 q$a@809@01)))
(pop) ; 21
(push) ; 21
; [else-branch: 449 | 0 <= q$a@809@01]
(assert (<= 0 q$a@809@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@809@01) (not (<= 0 q$a@809@01))))
(push) ; 20
; [then-branch: 450 | 0 <= q$a@809@01 && q$a@809@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 450 | !(0 <= q$a@809@01 && q$a@809@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 21
; [then-branch: 450 | 0 <= q$a@809@01 && q$a@809@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@809@01)
  (<= q$a@809@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 22
; [then-branch: 451 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@809@01) | live]
; [else-branch: 451 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@809@01)) | live]
(push) ; 23
; [then-branch: 451 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@809@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
(pop) ; 23
(push) ; 23
; [else-branch: 451 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@809@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01)))
(push) ; 22
; [then-branch: 452 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@809@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@809@01) | live]
; [else-branch: 452 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@809@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@809@01)) | live]
(push) ; 23
; [then-branch: 452 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@809@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@809@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 24
; [then-branch: 453 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
; [else-branch: 453 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
(push) ; 25
; [then-branch: 453 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))
(pop) ; 25
(push) ; 25
; [else-branch: 453 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@810@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@810@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@810@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef120|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@810@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef121|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@809@01)) ($SortWrappers.IntTo$Snap q$a@809@01)))
; [eval] 1 * write
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@810@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@810@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef120|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@810@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef121|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@809@01)) ($SortWrappers.IntTo$Snap q$a@809@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))
(pop) ; 23
(push) ; 23
; [else-branch: 452 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@809@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@809@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@810@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@810@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef120|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@810@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef121|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@809@01)) ($SortWrappers.IntTo$Snap q$a@809@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))))
(pop) ; 21
(push) ; 21
; [else-branch: 450 | !(0 <= q$a@809@01 && q$a@809@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@809@01)
    (<= q$a@809@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@810@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@810@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef120|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@810@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef121|)))
(assert (=>
  (and
    (<= 0 q$a@809@01)
    (<= q$a@809@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@809@01)
    (<= q$a@809@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@809@01)) ($SortWrappers.IntTo$Snap q$a@809@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@809@01)
      (<= q$a@809@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@809@01)
    (<= q$a@809@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 19
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@810@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@810@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef120|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@810@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef121|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@809@01 Int)) (!
  (and
    (or (<= 0 q$a@809@01) (not (<= 0 q$a@809@01)))
    (=>
      (and
        (<= 0 q$a@809@01)
        (<= q$a@809@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@809@01)
        (<= q$a@809@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@809@01)) ($SortWrappers.IntTo$Snap q$a@809@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01)))))
    (or
      (not
        (and
          (<= 0 q$a@809@01)
          (<= q$a@809@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@809@01)
        (<= q$a@809@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397-aux|)))
(push) ; 19
(assert (not (forall ((q$a@809@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@809@01)
        (<= q$a@809@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@810@01  $PPM) ($SortWrappers.IntTo$Snap q$a@809@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397|))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@809@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@809@01)
        (<= q$a@809@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@810@01  $PPM) ($SortWrappers.IntTo$Snap q$a@809@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@809@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@811@01 Int)
(push) ; 19
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 20
; [then-branch: 454 | !(0 <= q$a@811@01) | live]
; [else-branch: 454 | 0 <= q$a@811@01 | live]
(push) ; 21
; [then-branch: 454 | !(0 <= q$a@811@01)]
(assert (not (<= 0 q$a@811@01)))
(pop) ; 21
(push) ; 21
; [else-branch: 454 | 0 <= q$a@811@01]
(assert (<= 0 q$a@811@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@811@01) (not (<= 0 q$a@811@01))))
(push) ; 20
; [then-branch: 455 | 0 <= q$a@811@01 && q$a@811@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 455 | !(0 <= q$a@811@01 && q$a@811@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 21
; [then-branch: 455 | 0 <= q$a@811@01 && q$a@811@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@811@01)
  (<= q$a@811@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 22
; [then-branch: 456 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@811@01)) | live]
; [else-branch: 456 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@811@01) | live]
(push) ; 23
; [then-branch: 456 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@811@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)))
(pop) ; 23
(push) ; 23
; [else-branch: 456 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@811@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01))))
(push) ; 22
; [then-branch: 457 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@811@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@811@01)) | live]
; [else-branch: 457 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@811@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@811@01))) | live]
(push) ; 23
; [then-branch: 457 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@811@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@811@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 24
; [then-branch: 458 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@811@01 | live]
; [else-branch: 458 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@811@01 | live]
(push) ; 25
; [then-branch: 458 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@811@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@811@01)))
(pop) ; 25
(push) ; 25
; [else-branch: 458 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@811@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@811@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@812@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@812@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@812@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef122|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@812@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef123|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@811@01)) ($SortWrappers.IntTo$Snap q$a@811@01)))
; [eval] 1 * write
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@812@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@812@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef122|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@812@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef123|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@811@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@811@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@811@01)) ($SortWrappers.IntTo$Snap q$a@811@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@811@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@811@01))))
(pop) ; 23
(push) ; 23
; [else-branch: 457 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@811@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@811@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@812@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@812@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef122|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@812@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef123|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@811@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@811@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@811@01)) ($SortWrappers.IntTo$Snap q$a@811@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@811@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@811@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)))))
(pop) ; 21
(push) ; 21
; [else-branch: 455 | !(0 <= q$a@811@01 && q$a@811@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@811@01)
    (<= q$a@811@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@812@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@812@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef122|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@812@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef123|)))
(assert (=>
  (and
    (<= 0 q$a@811@01)
    (<= q$a@811@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@811@01)
    (<= q$a@811@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@811@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@811@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@811@01)) ($SortWrappers.IntTo$Snap q$a@811@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@811@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@811@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@811@01)
      (<= q$a@811@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@811@01)
    (<= q$a@811@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 19
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@812@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@812@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef122|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@812@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef123|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@811@01 Int)) (!
  (and
    (or (<= 0 q$a@811@01) (not (<= 0 q$a@811@01)))
    (=>
      (and
        (<= 0 q$a@811@01)
        (<= q$a@811@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@811@01)
        (<= q$a@811@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@811@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@811@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@811@01)) ($SortWrappers.IntTo$Snap q$a@811@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@811@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@811@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01))))))
    (or
      (not
        (and
          (<= 0 q$a@811@01)
          (<= q$a@811@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@811@01)
        (<= q$a@811@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361-aux|)))
(push) ; 19
(assert (not (forall ((q$a@811@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@811@01)
        (<= q$a@811@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@811@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@812@01  $PPM) ($SortWrappers.IntTo$Snap q$a@811@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361|))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@811@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@811@01)
        (<= q$a@811@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@811@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@812@01  $PPM) ($SortWrappers.IntTo$Snap q$a@811@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@811@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@813@01 $Snap)
(assert (= $t@813@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@637@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@814@01 $Struct)
(assert (=
  self@814@01
  ($struct_set<$Struct> self@622@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@622@01 11))
    l$havoc@637@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 18
(pop) ; 17
(set-option :timeout 0)
(push) ; 17
; [else-branch: 443 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@802@01, 8)), l$_buyer@615@01))) + $unwrap[Int]($wrap[$Int]($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@802@01 8)) l$_buyer@615@01)))
      ($unwrap<Int> ($wrap<$Int> (-
        ($unwrap<Int> l$_amount@616@01)
        ($unwrap<Int> l$commissionAmount@795@01)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 17
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int))) + $unwrap($wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int))) + $unwrap($wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int))) + $unwrap($wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap($wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount)))
; [eval] $wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount))
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount)
; [eval] $unwrap(l$_amount)
; [eval] $unwrap(l$commissionAmount)
(push) ; 17
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@802@01 8)) l$_buyer@615@01)))
    ($unwrap<Int> ($wrap<$Int> (-
      ($unwrap<Int> l$_amount@616@01)
      ($unwrap<Int> l$commissionAmount@795@01)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@802@01 8)) l$_buyer@615@01)))
      ($unwrap<Int> ($wrap<$Int> (-
        ($unwrap<Int> l$_amount@616@01)
        ($unwrap<Int> l$commissionAmount@795@01)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 459 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@802@01, 8)), l$_buyer@615@01))) + $unwrap[Int]($wrap[$Int]($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 459 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@802@01, 8)), l$_buyer@615@01))) + $unwrap[Int]($wrap[$Int]($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 459 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@802@01, 8)), l$_buyer@615@01))) + $unwrap[Int]($wrap[$Int]($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@802@01 8)) l$_buyer@615@01)))
      ($unwrap<Int> ($wrap<$Int> (-
        ($unwrap<Int> l$_amount@616@01)
        ($unwrap<Int> l$commissionAmount@795@01)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   l$_buyer, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   l$_buyer): Int))) +
;   $unwrap($wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount)))): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int))) + $unwrap($wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount)))): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int))) + $unwrap($wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount)))): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int))) + $unwrap($wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_buyer): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap($wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount)))
; [eval] $wrap($unwrap(l$_amount) - $unwrap(l$commissionAmount))
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount)
; [eval] $unwrap(l$_amount)
; [eval] $unwrap(l$commissionAmount)
(declare-const self@815@01 $Struct)
(assert (=
  self@815@01
  ($struct_set<$Struct> self@802@01 8 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@802@01 8)) l$_buyer@615@01 (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@802@01 8)) l$_buyer@615@01)))
    ($unwrap<Int> ($wrap<$Int> (-
      ($unwrap<Int> l$_amount@616@01)
      ($unwrap<Int> l$commissionAmount@795@01)))))))))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) + $unwrap(l$_amount) < 0
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) + $unwrap(l$_amount)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 10)): Int))
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
; [eval] $unwrap(l$_amount)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@815@01 10))))
      ($unwrap<Int> l$_amount@616@01))
    0))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 460 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@815@01, 10)))) + $unwrap[Int](l$_amount@616@01) < 0 | dead]
; [else-branch: 460 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@815@01, 10)))) + $unwrap[Int](l$_amount@616@01) < 0) | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 460 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@815@01, 10)))) + $unwrap[Int](l$_amount@616@01) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@815@01 10))))
      ($unwrap<Int> l$_amount@616@01))
    0)))
(pop) ; 18
; [eval] !($unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) + $unwrap(l$_amount) < 0)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) + $unwrap(l$_amount) < 0
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) + $unwrap(l$_amount)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 10)): Int))
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
; [eval] $unwrap(l$_amount)
(push) ; 18
(set-option :timeout 10)
(assert (not (<
  (+
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@815@01 10))))
    ($unwrap<Int> l$_amount@616@01))
  0)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@815@01 10))))
      ($unwrap<Int> l$_amount@616@01))
    0))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 461 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@815@01, 10)))) + $unwrap[Int](l$_amount@616@01) < 0) | live]
; [else-branch: 461 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@815@01, 10)))) + $unwrap[Int](l$_amount@616@01) < 0 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 461 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@815@01, 10)))) + $unwrap[Int](l$_amount@616@01) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@815@01 10))))
      ($unwrap<Int> l$_amount@616@01))
    0)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) + $unwrap(l$_amount) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) + $unwrap(l$_amount)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 10)): Int))
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
; [eval] $unwrap(l$_amount)
(push) ; 19
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@815@01 10))))
      ($unwrap<Int> l$_amount@616@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@815@01 10))))
    ($unwrap<Int> l$_amount@616@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 462 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@815@01, 10)))) + $unwrap[Int](l$_amount@616@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 462 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@815@01, 10)))) + $unwrap[Int](l$_amount@616@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 462 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@815@01, 10)))) + $unwrap[Int](l$_amount@616@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@815@01 10))))
    ($unwrap<Int> l$_amount@616@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 463 | False | dead]
; [else-branch: 463 | True | live]
(push) ; 20
; [else-branch: 463 | True]
(pop) ; 20
; [eval] !$succ
(push) ; 20
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 464 | True | live]
; [else-branch: 464 | False | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 464 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 21
; [then-branch: 465 | False | dead]
; [else-branch: 465 | True | live]
(push) ; 22
; [else-branch: 465 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 466 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
; [else-branch: 466 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 466 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 23
; [then-branch: 467 | False | live]
; [else-branch: 467 | True | live]
(push) ; 24
; [then-branch: 467 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 467 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(push) ; 22
; [else-branch: 466 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@816@01 Int)
(push) ; 21
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 22
; [then-branch: 468 | !(0 <= q$a@816@01) | live]
; [else-branch: 468 | 0 <= q$a@816@01 | live]
(push) ; 23
; [then-branch: 468 | !(0 <= q$a@816@01)]
(assert (not (<= 0 q$a@816@01)))
(pop) ; 23
(push) ; 23
; [else-branch: 468 | 0 <= q$a@816@01]
(assert (<= 0 q$a@816@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@816@01) (not (<= 0 q$a@816@01))))
(push) ; 22
; [then-branch: 469 | 0 <= q$a@816@01 && q$a@816@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 469 | !(0 <= q$a@816@01 && q$a@816@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 23
; [then-branch: 469 | 0 <= q$a@816@01 && q$a@816@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@816@01)
  (<= q$a@816@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 24
; [then-branch: 470 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@816@01) | live]
; [else-branch: 470 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@816@01)) | live]
(push) ; 25
; [then-branch: 470 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@816@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
(pop) ; 25
(push) ; 25
; [else-branch: 470 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@816@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01)))
(push) ; 24
; [then-branch: 471 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@816@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@816@01) | live]
; [else-branch: 471 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@816@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@816@01)) | live]
(push) ; 25
; [then-branch: 471 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@816@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@816@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 26
; [then-branch: 472 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
; [else-branch: 472 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
(push) ; 27
; [then-branch: 472 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))
(pop) ; 27
(push) ; 27
; [else-branch: 472 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@817@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@817@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@817@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef124|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@817@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef125|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@816@01)) ($SortWrappers.IntTo$Snap q$a@816@01)))
; [eval] 1 * write
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@817@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@817@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef124|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@817@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef125|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@816@01)) ($SortWrappers.IntTo$Snap q$a@816@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))
(pop) ; 25
(push) ; 25
; [else-branch: 471 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@816@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@816@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@817@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@817@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef124|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@817@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef125|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@816@01)) ($SortWrappers.IntTo$Snap q$a@816@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))))
(pop) ; 23
(push) ; 23
; [else-branch: 469 | !(0 <= q$a@816@01 && q$a@816@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@816@01)
    (<= q$a@816@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@817@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@817@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef124|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@817@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef125|)))
(assert (=>
  (and
    (<= 0 q$a@816@01)
    (<= q$a@816@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@816@01)
    (<= q$a@816@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@816@01)) ($SortWrappers.IntTo$Snap q$a@816@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@816@01)
      (<= q$a@816@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@816@01)
    (<= q$a@816@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 21
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@817@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@817@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef124|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@817@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef125|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@816@01 Int)) (!
  (and
    (or (<= 0 q$a@816@01) (not (<= 0 q$a@816@01)))
    (=>
      (and
        (<= 0 q$a@816@01)
        (<= q$a@816@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@816@01)
        (<= q$a@816@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@816@01)) ($SortWrappers.IntTo$Snap q$a@816@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01)))))
    (or
      (not
        (and
          (<= 0 q$a@816@01)
          (<= q$a@816@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@816@01)
        (<= q$a@816@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397-aux|)))
(push) ; 21
(assert (not (forall ((q$a@816@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@816@01)
        (<= q$a@816@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@817@01  $PPM) ($SortWrappers.IntTo$Snap q$a@816@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397|))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@816@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@816@01)
        (<= q$a@816@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@817@01  $PPM) ($SortWrappers.IntTo$Snap q$a@816@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@816@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@818@01 Int)
(push) ; 21
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 22
; [then-branch: 473 | !(0 <= q$a@818@01) | live]
; [else-branch: 473 | 0 <= q$a@818@01 | live]
(push) ; 23
; [then-branch: 473 | !(0 <= q$a@818@01)]
(assert (not (<= 0 q$a@818@01)))
(pop) ; 23
(push) ; 23
; [else-branch: 473 | 0 <= q$a@818@01]
(assert (<= 0 q$a@818@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@818@01) (not (<= 0 q$a@818@01))))
(push) ; 22
; [then-branch: 474 | 0 <= q$a@818@01 && q$a@818@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 474 | !(0 <= q$a@818@01 && q$a@818@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 23
; [then-branch: 474 | 0 <= q$a@818@01 && q$a@818@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@818@01)
  (<= q$a@818@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 24
; [then-branch: 475 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@818@01)) | live]
; [else-branch: 475 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@818@01) | live]
(push) ; 25
; [then-branch: 475 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@818@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)))
(pop) ; 25
(push) ; 25
; [else-branch: 475 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@818@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01))))
(push) ; 24
; [then-branch: 476 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@818@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@818@01)) | live]
; [else-branch: 476 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@818@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@818@01))) | live]
(push) ; 25
; [then-branch: 476 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@818@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@818@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 26
; [then-branch: 477 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@818@01 | live]
; [else-branch: 477 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@818@01 | live]
(push) ; 27
; [then-branch: 477 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@818@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@818@01)))
(pop) ; 27
(push) ; 27
; [else-branch: 477 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@818@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@818@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@819@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@819@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@819@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef126|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@819@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef127|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@818@01)) ($SortWrappers.IntTo$Snap q$a@818@01)))
; [eval] 1 * write
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@819@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@819@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef126|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@819@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef127|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@818@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@818@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@818@01)) ($SortWrappers.IntTo$Snap q$a@818@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@818@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@818@01))))
(pop) ; 25
(push) ; 25
; [else-branch: 476 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@818@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@818@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@819@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@819@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef126|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@819@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef127|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@818@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@818@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@818@01)) ($SortWrappers.IntTo$Snap q$a@818@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@818@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@818@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)))))
(pop) ; 23
(push) ; 23
; [else-branch: 474 | !(0 <= q$a@818@01 && q$a@818@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@818@01)
    (<= q$a@818@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@819@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@819@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef126|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@819@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef127|)))
(assert (=>
  (and
    (<= 0 q$a@818@01)
    (<= q$a@818@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@818@01)
    (<= q$a@818@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@818@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@818@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@818@01)) ($SortWrappers.IntTo$Snap q$a@818@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@818@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@818@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@818@01)
      (<= q$a@818@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@818@01)
    (<= q$a@818@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 21
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@819@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@819@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef126|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@819@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef127|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@818@01 Int)) (!
  (and
    (or (<= 0 q$a@818@01) (not (<= 0 q$a@818@01)))
    (=>
      (and
        (<= 0 q$a@818@01)
        (<= q$a@818@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@818@01)
        (<= q$a@818@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@818@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@818@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@818@01)) ($SortWrappers.IntTo$Snap q$a@818@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@818@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@818@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01))))))
    (or
      (not
        (and
          (<= 0 q$a@818@01)
          (<= q$a@818@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@818@01)
        (<= q$a@818@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361-aux|)))
(push) ; 21
(assert (not (forall ((q$a@818@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@818@01)
        (<= q$a@818@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@818@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@819@01  $PPM) ($SortWrappers.IntTo$Snap q$a@818@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361|))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@818@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@818@01)
        (<= q$a@818@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@818@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@819@01  $PPM) ($SortWrappers.IntTo$Snap q$a@818@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@818@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@820@01 $Snap)
(assert (= $t@820@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@637@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@821@01 $Struct)
(assert (=
  self@821@01
  ($struct_set<$Struct> self@622@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@622@01 11))
    l$havoc@637@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 20
(pop) ; 19
(set-option :timeout 0)
(push) ; 19
; [else-branch: 462 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@815@01, 10)))) + $unwrap[Int](l$_amount@616@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@815@01 10))))
      ($unwrap<Int> l$_amount@616@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 19
; [eval] !($unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) + $unwrap(l$_amount) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) + $unwrap(l$_amount) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) + $unwrap(l$_amount)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 10)): Int))
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
; [eval] $unwrap(l$_amount)
(push) ; 19
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@815@01 10))))
    ($unwrap<Int> l$_amount@616@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@815@01 10))))
      ($unwrap<Int> l$_amount@616@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 478 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@815@01, 10)))) + $unwrap[Int](l$_amount@616@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 478 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@815@01, 10)))) + $unwrap[Int](l$_amount@616@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 478 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@815@01, 10)))) + $unwrap[Int](l$_amount@616@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@815@01 10))))
      ($unwrap<Int> l$_amount@616@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 10, $unwrap($wrap(($struct_get($struct_loc(self,
;   10)): Int))) +
;   $unwrap(l$_amount)): $Struct)
; [eval] ($struct_set(self, 10, $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) + $unwrap(l$_amount)): $Struct)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int))) + $unwrap(l$_amount)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 10)): Int))
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
; [eval] $unwrap(l$_amount)
(declare-const self@822@01 $Struct)
(assert (=
  self@822@01
  ($struct_set<$Struct> self@815@01 10 (+
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@815@01 10))))
    ($unwrap<Int> l$_amount@616@01)))))
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount) < 0
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount)
; [eval] $unwrap(l$_amount)
; [eval] $unwrap(l$commissionAmount)
; [then-branch: 479 | $unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) < 0 | dead]
; [else-branch: 479 | !($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) < 0) | live]
(push) ; 20
; [else-branch: 479 | !($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) < 0)]
(pop) ; 20
; [eval] !($unwrap(l$_amount) - $unwrap(l$commissionAmount) < 0)
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount) < 0
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount)
; [eval] $unwrap(l$_amount)
; [eval] $unwrap(l$commissionAmount)
(push) ; 20
(set-option :timeout 10)
(assert (not (<
  (- ($unwrap<Int> l$_amount@616@01) ($unwrap<Int> l$commissionAmount@795@01))
  0)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 480 | !($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) < 0) | live]
; [else-branch: 480 | $unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) < 0 | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 480 | !($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) < 0)]
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount)
; [eval] $unwrap(l$_amount)
; [eval] $unwrap(l$commissionAmount)
; [then-branch: 481 | $unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 481 | !($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 21
; [else-branch: 481 | !($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(pop) ; 21
; [eval] !($unwrap(l$_amount) - $unwrap(l$commissionAmount) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount)
; [eval] $unwrap(l$_amount)
; [eval] $unwrap(l$commissionAmount)
(push) ; 21
(set-option :timeout 10)
(assert (not (>
  (- ($unwrap<Int> l$_amount@616@01) ($unwrap<Int> l$commissionAmount@795@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 482 | !($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 482 | $unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 482 | !($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
; [exec]
; inhale acc(e$Transfer(0, l$_buyer, $unwrap(l$_amount) -
;   $unwrap(l$commissionAmount)), write)
; [eval] $unwrap(l$_amount) - $unwrap(l$commissionAmount)
; [eval] $unwrap(l$_amount)
; [eval] $unwrap(l$commissionAmount)
(declare-const $t@823@01 $Snap)
(declare-const sm@824@01 $PSF<e$Transfer>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($PSF.lookup_e$Transfer (as sm@824@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 0)
      ($SortWrappers.IntTo$Snap l$_buyer@615@01))
    ($SortWrappers.IntTo$Snap (-
      ($unwrap<Int> l$_amount@616@01)
      ($unwrap<Int> l$commissionAmount@795@01)))))
  $t@823@01))
(assert (<=
  $Perm.No
  (ite
    (and
      (= 0 0)
      (=
        (-
          ($unwrap<Int> l$_amount@616@01)
          ($unwrap<Int> l$commissionAmount@795@01))
        (-
          ($unwrap<Int> l$_amount@616@01)
          ($unwrap<Int> l$commissionAmount@795@01))))
    $Perm.Write
    $Perm.No)))
; Definitional axioms for snapshot map values
(assert ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@706@01  $PSF<e$Transfer>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 0)
    ($SortWrappers.IntTo$Snap l$_buyer@615@01))
  ($SortWrappers.IntTo$Snap (-
    ($unwrap<Int> l$_amount@616@01)
    ($unwrap<Int> l$commissionAmount@795@01))))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 0)
    ($SortWrappers.IntTo$Snap l$_buyer@615@01))
  ($SortWrappers.IntTo$Snap (-
    ($unwrap<Int> l$_amount@616@01)
    ($unwrap<Int> l$commissionAmount@795@01))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(e$Transfer(0, ($struct_get($struct_loc(self, 3)): Int), $unwrap(l$commissionAmount)), write)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] $unwrap(l$commissionAmount)
(declare-const $t@825@01 $Snap)
(declare-const sm@826@01 $PSF<e$Transfer>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($PSF.lookup_e$Transfer (as sm@826@01  $PSF<e$Transfer>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 0)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> self@822@01 3))))
    ($SortWrappers.IntTo$Snap ($unwrap<Int> l$commissionAmount@795@01))))
  $t@825@01))
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and
  (and
    (and
      (= 0 0)
      (=
        ($struct_get<Int> ($struct_loc<Int> self@822@01 3))
        ($struct_get<Int> ($struct_loc<Int> self@822@01 3)))
      (=
        ($unwrap<Int> l$commissionAmount@795@01)
        ($unwrap<Int> l$commissionAmount@795@01)))
    (and
      (= 0 0)
      (=
        (-
          ($unwrap<Int> l$_amount@616@01)
          ($unwrap<Int> l$commissionAmount@795@01))
        (-
          ($unwrap<Int> l$_amount@616@01)
          ($unwrap<Int> l$commissionAmount@795@01)))))
  (and
    (= ($struct_get<Int> ($struct_loc<Int> self@822@01 3)) l$_buyer@615@01)
    (=
      ($unwrap<Int> l$commissionAmount@795@01)
      (-
        ($unwrap<Int> l$_amount@616@01)
        ($unwrap<Int> l$commissionAmount@795@01)))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (ite
    (and
      (= 0 0)
      (=
        ($struct_get<Int> ($struct_loc<Int> self@822@01 3))
        ($struct_get<Int> ($struct_loc<Int> self@822@01 3)))
      (=
        ($unwrap<Int> l$commissionAmount@795@01)
        ($unwrap<Int> l$commissionAmount@795@01)))
    $Perm.Write
    $Perm.No)))
; Definitional axioms for snapshot map values
(assert ($PSF.loc_e$Transfer ($PSF.lookup_e$Transfer (as sm@706@01  $PSF<e$Transfer>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 0)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> self@822@01 3))))
  ($SortWrappers.IntTo$Snap ($unwrap<Int> l$commissionAmount@795@01)))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 0)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> self@822@01 3))))
  ($SortWrappers.IntTo$Snap ($unwrap<Int> l$commissionAmount@795@01)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label return
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not $out_of_gas@636@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not $out_of_gas@636@01))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 483 | $out_of_gas@636@01 | live]
; [else-branch: 483 | !($out_of_gas@636@01) | live]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 483 | $out_of_gas@636@01]
(assert $out_of_gas@636@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 484 | False | dead]
; [else-branch: 484 | True | live]
(push) ; 23
; [else-branch: 484 | True]
(pop) ; 23
; [eval] !$succ
(push) ; 23
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 485 | True | live]
; [else-branch: 485 | False | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 485 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 24
; [then-branch: 486 | False | dead]
; [else-branch: 486 | True | live]
(push) ; 25
; [else-branch: 486 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 487 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
; [else-branch: 487 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 487 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 26
; [then-branch: 488 | False | live]
; [else-branch: 488 | True | live]
(push) ; 27
; [then-branch: 488 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 488 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(push) ; 25
; [else-branch: 487 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@827@01 Int)
(push) ; 24
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 25
; [then-branch: 489 | !(0 <= q$a@827@01) | live]
; [else-branch: 489 | 0 <= q$a@827@01 | live]
(push) ; 26
; [then-branch: 489 | !(0 <= q$a@827@01)]
(assert (not (<= 0 q$a@827@01)))
(pop) ; 26
(push) ; 26
; [else-branch: 489 | 0 <= q$a@827@01]
(assert (<= 0 q$a@827@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@827@01) (not (<= 0 q$a@827@01))))
(push) ; 25
; [then-branch: 490 | 0 <= q$a@827@01 && q$a@827@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 490 | !(0 <= q$a@827@01 && q$a@827@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 26
; [then-branch: 490 | 0 <= q$a@827@01 && q$a@827@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@827@01)
  (<= q$a@827@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 27
; [then-branch: 491 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@827@01) | live]
; [else-branch: 491 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@827@01)) | live]
(push) ; 28
; [then-branch: 491 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@827@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
(pop) ; 28
(push) ; 28
; [else-branch: 491 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@827@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01)))
(push) ; 27
; [then-branch: 492 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@827@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@827@01) | live]
; [else-branch: 492 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@827@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@827@01)) | live]
(push) ; 28
; [then-branch: 492 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@827@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@827@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 29
; [then-branch: 493 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
; [else-branch: 493 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
(push) ; 30
; [then-branch: 493 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))
(pop) ; 30
(push) ; 30
; [else-branch: 493 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@828@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@828@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@828@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef128|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@828@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef129|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@827@01)) ($SortWrappers.IntTo$Snap q$a@827@01)))
; [eval] 1 * write
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@828@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@828@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef128|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@828@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef129|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@827@01)) ($SortWrappers.IntTo$Snap q$a@827@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))
(pop) ; 28
(push) ; 28
; [else-branch: 492 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@827@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@827@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@828@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@828@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef128|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@828@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef129|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@827@01)) ($SortWrappers.IntTo$Snap q$a@827@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))))
(pop) ; 26
(push) ; 26
; [else-branch: 490 | !(0 <= q$a@827@01 && q$a@827@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@827@01)
    (<= q$a@827@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@828@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@828@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef128|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@828@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef129|)))
(assert (=>
  (and
    (<= 0 q$a@827@01)
    (<= q$a@827@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@827@01)
    (<= q$a@827@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@827@01)) ($SortWrappers.IntTo$Snap q$a@827@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@827@01)
      (<= q$a@827@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@827@01)
    (<= q$a@827@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 24
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@828@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@828@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef128|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@828@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef129|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@827@01 Int)) (!
  (and
    (or (<= 0 q$a@827@01) (not (<= 0 q$a@827@01)))
    (=>
      (and
        (<= 0 q$a@827@01)
        (<= q$a@827@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@827@01)
        (<= q$a@827@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@827@01)) ($SortWrappers.IntTo$Snap q$a@827@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01)))))
    (or
      (not
        (and
          (<= 0 q$a@827@01)
          (<= q$a@827@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@827@01)
        (<= q$a@827@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397-aux|)))
(push) ; 24
(assert (not (forall ((q$a@827@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@827@01)
        (<= q$a@827@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@828@01  $PPM) ($SortWrappers.IntTo$Snap q$a@827@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397|))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@827@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@827@01)
        (<= q$a@827@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@828@01  $PPM) ($SortWrappers.IntTo$Snap q$a@827@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@827@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1433@17@1433@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@829@01 Int)
(push) ; 24
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 25
; [then-branch: 494 | !(0 <= q$a@829@01) | live]
; [else-branch: 494 | 0 <= q$a@829@01 | live]
(push) ; 26
; [then-branch: 494 | !(0 <= q$a@829@01)]
(assert (not (<= 0 q$a@829@01)))
(pop) ; 26
(push) ; 26
; [else-branch: 494 | 0 <= q$a@829@01]
(assert (<= 0 q$a@829@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@829@01) (not (<= 0 q$a@829@01))))
(push) ; 25
; [then-branch: 495 | 0 <= q$a@829@01 && q$a@829@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 495 | !(0 <= q$a@829@01 && q$a@829@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 26
; [then-branch: 495 | 0 <= q$a@829@01 && q$a@829@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@829@01)
  (<= q$a@829@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 27
; [then-branch: 496 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@829@01)) | live]
; [else-branch: 496 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@829@01) | live]
(push) ; 28
; [then-branch: 496 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@829@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)))
(pop) ; 28
(push) ; 28
; [else-branch: 496 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@829@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01))))
(push) ; 27
; [then-branch: 497 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@829@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@829@01)) | live]
; [else-branch: 497 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@829@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@829@01))) | live]
(push) ; 28
; [then-branch: 497 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@829@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@829@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 29
; [then-branch: 498 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@829@01 | live]
; [else-branch: 498 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@829@01 | live]
(push) ; 30
; [then-branch: 498 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@829@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@829@01)))
(pop) ; 30
(push) ; 30
; [else-branch: 498 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@829@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@829@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@830@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@830@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@830@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef130|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@830@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef131|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@829@01)) ($SortWrappers.IntTo$Snap q$a@829@01)))
; [eval] 1 * write
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@830@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@830@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef130|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@830@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef131|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@829@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@829@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@829@01)) ($SortWrappers.IntTo$Snap q$a@829@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@829@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@829@01))))
(pop) ; 28
(push) ; 28
; [else-branch: 497 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@829@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@829@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)))))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@830@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@830@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef130|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@830@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef131|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@829@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@829@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@829@01)) ($SortWrappers.IntTo$Snap q$a@829@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@829@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@829@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)))))
(pop) ; 26
(push) ; 26
; [else-branch: 495 | !(0 <= q$a@829@01 && q$a@829@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@829@01)
    (<= q$a@829@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@830@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@830@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef130|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@830@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef131|)))
(assert (=>
  (and
    (<= 0 q$a@829@01)
    (<= q$a@829@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@829@01)
    (<= q$a@829@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@829@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@829@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@829@01)) ($SortWrappers.IntTo$Snap q$a@829@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@829@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@829@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@829@01)
      (<= q$a@829@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@829@01)
    (<= q$a@829@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 24
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@830@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@830@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef130|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@830@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef131|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@829@01 Int)) (!
  (and
    (or (<= 0 q$a@829@01) (not (<= 0 q$a@829@01)))
    (=>
      (and
        (<= 0 q$a@829@01)
        (<= q$a@829@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@829@01)
        (<= q$a@829@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@829@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@829@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@829@01)) ($SortWrappers.IntTo$Snap q$a@829@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@829@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@829@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01))))))
    (or
      (not
        (and
          (<= 0 q$a@829@01)
          (<= q$a@829@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@829@01)
        (<= q$a@829@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361-aux|)))
(push) ; 24
(assert (not (forall ((q$a@829@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@829@01)
        (<= q$a@829@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@829@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@830@01  $PPM) ($SortWrappers.IntTo$Snap q$a@829@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361|))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@829@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@829@01)
        (<= q$a@829@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@829@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@830@01  $PPM) ($SortWrappers.IntTo$Snap q$a@829@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@829@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1434@17@1434@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@831@01 $Snap)
(assert (= $t@831@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@637@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@832@01 $Struct)
(assert (=
  self@832@01
  ($struct_set<$Struct> self@622@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@622@01 11))
    l$havoc@637@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 23
(pop) ; 22
(set-option :timeout 0)
(push) ; 22
; [else-branch: 483 | !($out_of_gas@636@01)]
(assert (not $out_of_gas@636@01))
(pop) ; 22
; [eval] !$out_of_gas
(push) ; 22
(set-option :timeout 10)
(assert (not $out_of_gas@636@01))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not $out_of_gas@636@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 499 | !($out_of_gas@636@01) | live]
; [else-branch: 499 | $out_of_gas@636@01 | live]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 499 | !($out_of_gas@636@01)]
(assert (not $out_of_gas@636@01))
; [exec]
; label end
(push) ; 23
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 500 | True | live]
; [else-branch: 500 | False | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 500 | True]
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@822@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 501 | $struct_get[Int]($struct_loc[Int](self@822@01, 3)) != $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | dead]
; [else-branch: 501 | $struct_get[Int]($struct_loc[Int](self@822@01, 3)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3)) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 501 | $struct_get[Int]($struct_loc[Int](self@822@01, 3)) == $struct_get[Int]($struct_loc[Int](self@622@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@822@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@822@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 3))))
; [exec]
; assert ($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@822@01 3)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@822@01 3))))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 502 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@822@01, 3)) | live]
; [else-branch: 502 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@822@01, 3)) | live]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 502 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@822@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@822@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 26
; [then-branch: 503 | $struct_get[Int]($struct_loc[Int](self@822@01, 1)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
; [else-branch: 503 | $struct_get[Int]($struct_loc[Int](self@822@01, 1)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1)) | live]
(push) ; 27
; [then-branch: 503 | $struct_get[Int]($struct_loc[Int](self@822@01, 1)) != $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@822@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))))
(pop) ; 27
(push) ; 27
; [else-branch: 503 | $struct_get[Int]($struct_loc[Int](self@822@01, 1)) == $struct_get[Int]($struct_loc[Int](self@622@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@822@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@822@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@822@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))
(pop) ; 25
(push) ; 25
; [else-branch: 502 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@822@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@822@01 3))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@822@01 3))))
  (and
    (not
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@822@01 3))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> self@822@01 1))
        ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> self@822@01 1))
          ($struct_get<Int> ($struct_loc<Int> self@622@01 1))))))))
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@822@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@822@01 3))))))
(push) ; 24
(assert (not (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@822@01 3))))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@822@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@822@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 0)))))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@822@01 3))))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@822@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 1)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@822@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@622@01 0))))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@833@01 Int)
(push) ; 24
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 25
; [then-branch: 504 | !(0 <= q$a@833@01) | live]
; [else-branch: 504 | 0 <= q$a@833@01 | live]
(push) ; 26
; [then-branch: 504 | !(0 <= q$a@833@01)]
(assert (not (<= 0 q$a@833@01)))
(pop) ; 26
(push) ; 26
; [else-branch: 504 | 0 <= q$a@833@01]
(assert (<= 0 q$a@833@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@833@01) (not (<= 0 q$a@833@01))))
(push) ; 25
; [then-branch: 505 | 0 <= q$a@833@01 && q$a@833@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 505 | !(0 <= q$a@833@01 && q$a@833@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 26
; [then-branch: 505 | 0 <= q$a@833@01 && q$a@833@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@833@01)
  (<= q$a@833@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 27
; [then-branch: 506 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@833@01) | live]
; [else-branch: 506 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@833@01)) | live]
(push) ; 28
; [then-branch: 506 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@833@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
(pop) ; 28
(push) ; 28
; [else-branch: 506 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@833@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01)))
(push) ; 27
; [then-branch: 507 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@833@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@822@01, 2)), q$a@833@01) | live]
; [else-branch: 507 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@833@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@822@01, 2)), q$a@833@01)) | live]
(push) ; 28
; [then-branch: 507 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@833@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@822@01, 2)), q$a@833@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 29
; [then-branch: 508 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@822@01, 1)) | live]
; [else-branch: 508 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@822@01, 1)) | live]
(push) ; 30
; [then-branch: 508 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != $struct_get[Int]($struct_loc[Int](self@822@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))))
(pop) ; 30
(push) ; 30
; [else-branch: 508 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == $struct_get[Int]($struct_loc[Int](self@822@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@822@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@834@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@834@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@834@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef132|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@834@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef133|)))
(assert ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@833@01)) ($SortWrappers.IntTo$Snap q$a@833@01)))
; [eval] 1 * write
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@834@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@834@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef132|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@834@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef133|)))
(assert (=>
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))
    ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@833@01)) ($SortWrappers.IntTo$Snap q$a@833@01)))))
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@822@01 1))))))
(pop) ; 28
(push) ; 28
; [else-branch: 507 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@833@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@822@01, 2)), q$a@833@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01))))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@834@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@834@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef132|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@834@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef133|)))
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01)
    (=>
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))
        ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@833@01)) ($SortWrappers.IntTo$Snap q$a@833@01))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@822@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01))))
(pop) ; 26
(push) ; 26
; [else-branch: 505 | !(0 <= q$a@833@01 && q$a@833@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@833@01)
    (<= q$a@833@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@834@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@834@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef132|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@834@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef133|)))
(assert (=>
  (and
    (<= 0 q$a@833@01)
    (<= q$a@833@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@833@01)
    (<= q$a@833@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01)
        (=>
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))
            ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@833@01)) ($SortWrappers.IntTo$Snap q$a@833@01))))
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@833@01)
      (<= q$a@833@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@833@01)
    (<= q$a@833@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 24
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$OpenMinter (as pm@834@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$OpenMinter (as pm@834@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef132|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$OpenMinter (as pm@834@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef133|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@833@01 Int)) (!
  (and
    (or (<= 0 q$a@833@01) (not (<= 0 q$a@833@01)))
    (=>
      (and
        (<= 0 q$a@833@01)
        (<= q$a@833@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@833@01)
        (<= q$a@833@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@833@01)) ($SortWrappers.IntTo$Snap q$a@833@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01)))))
    (or
      (not
        (and
          (<= 0 q$a@833@01)
          (<= q$a@833@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@833@01)
        (<= q$a@833@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1428@13@1428@393-aux|)))
(assert (forall ((q$a@833@01 Int)) (!
  (and
    (or (<= 0 q$a@833@01) (not (<= 0 q$a@833@01)))
    (=>
      (and
        (<= 0 q$a@833@01)
        (<= q$a@833@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@833@01)
        (<= q$a@833@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01)
            (=>
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))
                ($PSF.loc_e$OpenMinter ($PSF.lookup_e$OpenMinter (as sm@696@01  $PSF<e$OpenMinter>) ($SortWrappers.IntTo$Snap q$a@833@01)) ($SortWrappers.IntTo$Snap q$a@833@01))))
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01)))))
    (or
      (not
        (and
          (<= 0 q$a@833@01)
          (<= q$a@833@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@833@01)
        (<= q$a@833@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1428@13@1428@393-aux|)))
(push) ; 24
(assert (not (forall ((q$a@833@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@833@01)
        (<= q$a@833@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@834@01  $PPM) ($SortWrappers.IntTo$Snap q$a@833@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1428@13@1428@393|))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@833@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@833@01)
        (<= q$a@833@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@618@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@822@01 1)))
      (=
        ($PSF.perm_e$OpenMinter (as pm@834@01  $PPM) ($SortWrappers.IntTo$Snap q$a@833@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@833@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@833@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1428@13@1428@393|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@835@01 Int)
(push) ; 24
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 25
; [then-branch: 509 | !(0 <= q$a@835@01) | live]
; [else-branch: 509 | 0 <= q$a@835@01 | live]
(push) ; 26
; [then-branch: 509 | !(0 <= q$a@835@01)]
(assert (not (<= 0 q$a@835@01)))
(pop) ; 26
(push) ; 26
; [else-branch: 509 | 0 <= q$a@835@01]
(assert (<= 0 q$a@835@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@835@01) (not (<= 0 q$a@835@01))))
(push) ; 25
; [then-branch: 510 | 0 <= q$a@835@01 && q$a@835@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 510 | !(0 <= q$a@835@01 && q$a@835@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 26
; [then-branch: 510 | 0 <= q$a@835@01 && q$a@835@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@835@01)
  (<= q$a@835@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 27
; [then-branch: 511 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@835@01)) | live]
; [else-branch: 511 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@835@01) | live]
(push) ; 28
; [then-branch: 511 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@835@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)))
(pop) ; 28
(push) ; 28
; [else-branch: 511 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@835@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01))))
(push) ; 27
; [then-branch: 512 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@835@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@822@01, 2)), q$a@835@01)) | live]
; [else-branch: 512 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@835@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@822@01, 2)), q$a@835@01))) | live]
(push) ; 28
; [then-branch: 512 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@835@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@822@01, 2)), q$a@835@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 29
; [then-branch: 513 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@835@01 | live]
; [else-branch: 513 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@835@01 | live]
(push) ; 30
; [then-branch: 513 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) != q$a@835@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)))
(pop) ; 30
(push) ; 30
; [else-branch: 513 | $struct_get[Int]($struct_loc[Int](msg@618@01, 0)) == q$a@835@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; Definitional axioms for snapshot map values
(declare-const pm@836@01 $PPM)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@836@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@836@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef134|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@836@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef135|)))
(assert ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@835@01)) ($SortWrappers.IntTo$Snap q$a@835@01)))
; [eval] 1 * write
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@836@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@836@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef134|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@836@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef135|)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)
  (and
    (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)
    ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@835@01)) ($SortWrappers.IntTo$Snap q$a@835@01)))))
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01))))
(pop) ; 28
(push) ; 28
; [else-branch: 512 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), q$a@835@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@822@01, 2)), q$a@835@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01)))))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@836@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@836@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef134|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@836@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef135|)))
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01))
    (=>
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)
      (and
        (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)
        ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@835@01)) ($SortWrappers.IntTo$Snap q$a@835@01))))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01)))))
(pop) ; 26
(push) ; 26
; [else-branch: 510 | !(0 <= q$a@835@01 && q$a@835@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@835@01)
    (<= q$a@835@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@836@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@836@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef134|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@836@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef135|)))
(assert (=>
  (and
    (<= 0 q$a@835@01)
    (<= q$a@835@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@835@01)
    (<= q$a@835@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01))
        (=>
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)
          (and
            (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)
            ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@835@01)) ($SortWrappers.IntTo$Snap q$a@835@01))))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@835@01)
      (<= q$a@835@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@835@01)
    (<= q$a@835@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 24
; Nested auxiliary terms: globals (aux)
(assert (forall (($arg0 Int)) (!
  (=
    ($PSF.perm_e$CloseMinter (as pm@836@01  $PPM) ($SortWrappers.IntTo$Snap $arg0))
    $Perm.No)
  :pattern (($PSF.perm_e$CloseMinter (as pm@836@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resPrmSumDef134|)))
(assert (forall (($arg0 Int)) (!
  ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap $arg0)) ($SortWrappers.IntTo$Snap $arg0))
  :pattern (($PSF.perm_e$CloseMinter (as pm@836@01  $PPM) ($SortWrappers.IntTo$Snap $arg0)))
  :qid |qp.resTrgDef135|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@835@01 Int)) (!
  (and
    (or (<= 0 q$a@835@01) (not (<= 0 q$a@835@01)))
    (=>
      (and
        (<= 0 q$a@835@01)
        (<= q$a@835@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@835@01)
        (<= q$a@835@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@835@01)) ($SortWrappers.IntTo$Snap q$a@835@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01))))))
    (or
      (not
        (and
          (<= 0 q$a@835@01)
          (<= q$a@835@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@835@01)
        (<= q$a@835@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1429@13@1429@357-aux|)))
(assert (forall ((q$a@835@01 Int)) (!
  (and
    (or (<= 0 q$a@835@01) (not (<= 0 q$a@835@01)))
    (=>
      (and
        (<= 0 q$a@835@01)
        (<= q$a@835@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@835@01)
        (<= q$a@835@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01))
            (=>
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)
              (and
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)
                ($PSF.loc_e$CloseMinter ($PSF.lookup_e$CloseMinter (as sm@700@01  $PSF<e$CloseMinter>) ($SortWrappers.IntTo$Snap q$a@835@01)) ($SortWrappers.IntTo$Snap q$a@835@01))))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01))))))
    (or
      (not
        (and
          (<= 0 q$a@835@01)
          (<= q$a@835@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@835@01)
        (<= q$a@835@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1429@13@1429@357-aux|)))
(push) ; 24
(assert (not (forall ((q$a@835@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@835@01)
        (<= q$a@835@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@836@01  $PPM) ($SortWrappers.IntTo$Snap q$a@835@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1429@13@1429@357|))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@835@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@835@01)
        (<= q$a@835@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)) q$a@835@01)
      (=
        ($PSF.perm_e$CloseMinter (as pm@836@01  $PPM) ($SortWrappers.IntTo$Snap q$a@835@01))
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) q$a@835@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@822@01 2)) q$a@835@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1429@13@1429@357|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@837@01 $Snap)
(assert (= $t@837@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@637@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@838@01 $Struct)
(assert (=
  self@838@01
  ($struct_set<$Struct> self@822@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@822@01 11))
    l$havoc@637@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 23
; [eval] !$succ
; [then-branch: 514 | False | dead]
; [else-branch: 514 | True | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 514 | True]
(pop) ; 23
(pop) ; 22
(push) ; 22
; [else-branch: 499 | $out_of_gas@636@01]
(assert $out_of_gas@636@01)
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 478 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@815@01, 10)))) + $unwrap[Int](l$_amount@616@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@815@01 10))))
    ($unwrap<Int> l$_amount@616@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 19
(pop) ; 18
(pop) ; 17
(push) ; 17
; [else-branch: 459 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@802@01, 8)), l$_buyer@615@01))) + $unwrap[Int]($wrap[$Int]($unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@802@01 8)) l$_buyer@615@01)))
    ($unwrap<Int> ($wrap<$Int> (-
      ($unwrap<Int> l$_amount@616@01)
      ($unwrap<Int> l$commissionAmount@795@01)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 438 | $unwrap[Int](l$_amount@616@01) - $unwrap[Int](l$commissionAmount@795@01) < 0]
(assert (<
  (- ($unwrap<Int> l$_amount@616@01) ($unwrap<Int> l$commissionAmount@795@01))
  0))
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 421 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@622@01, 8)), $struct_get[Int]($struct_loc[Int](self@622@01, 3))))) + $unwrap[Int](l$commissionAmount@795@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@622@01 8)) ($struct_get<Int> ($struct_loc<Int> self@622@01 3)))))
    ($unwrap<Int> l$commissionAmount@795@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 396 | $unwrap[Int]($w_mul[$Int](l$_amount@616@01, $wrap[$Int]($struct_get[Int]($struct_loc[Int](self@622@01, 7))))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  ($unwrap<Int> ($w_mul<$Int> l$_amount@616@01 ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@622@01 7)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 377 | l$raw_ret@632@01 != l$raw_ret$1@634@01]
(assert (not (= l$raw_ret@632@01 l$raw_ret$1@634@01)))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 360 | l$send_fail$1@633@01]
(assert l$send_fail$1@633@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 330 | l$send_fail@631@01]
(assert l$send_fail@631@01)
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 300 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@622@01, 2)), $struct_get[Int]($struct_loc[Int](msg@618@01, 0))) != True]
(assert (not
  (=
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@622@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@618@01 0)))
    true)))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$setGovernorAddress ----------
(declare-const l$_address@839@01 Int)
(declare-const $succ@840@01 Bool)
(declare-const l$_address@841@01 Int)
(declare-const $succ@842@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@843@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@844@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@845@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@846@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@847@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@848@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@849@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@850@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@851@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@852@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@853@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@854@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@855@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@856@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@857@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@858@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@859@01 $Snap)
(assert (= $t@859@01 ($Snap.combine ($Snap.first $t@859@01) ($Snap.second $t@859@01))))
(assert (= ($Snap.first $t@859@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@847@01 0))))
(assert (= ($Snap.second $t@859@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@847@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@860@01 $Snap)
(assert (= $t@860@01 ($Snap.combine ($Snap.first $t@860@01) ($Snap.second $t@860@01))))
(assert (= ($Snap.first $t@860@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@847@01 1))))
(assert (= ($Snap.second $t@860@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@847@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@861@01 $Snap)
(assert (= $t@861@01 ($Snap.combine ($Snap.first $t@861@01) ($Snap.second $t@861@01))))
(assert (= ($Snap.first $t@861@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@847@01 3))))
(assert (= ($Snap.second $t@861@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@847@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
(declare-const $t@862@01 $Snap)
(assert (= $t@862@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 4)): Seq[Int])
; [eval] $struct_loc(self, 4)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@847@01 4))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
(declare-const $t@863@01 $Snap)
(assert (= $t@863@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 5)): Seq[Int])
; [eval] $struct_loc(self, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@847@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@864@01 $Snap)
(assert (= $t@864@01 ($Snap.combine ($Snap.first $t@864@01) ($Snap.second $t@864@01))))
(assert (= ($Snap.first $t@864@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@847@01 6))))
(assert (= ($Snap.second $t@864@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@847@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@865@01 $Snap)
(assert (= $t@865@01 ($Snap.combine ($Snap.first $t@865@01) ($Snap.second $t@865@01))))
(assert (= ($Snap.first $t@865@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@847@01 7))))
(assert (= ($Snap.second $t@865@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@847@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@866@01 $Snap)
(assert (= $t@866@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@867@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 515 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@847@01, 8)), $q3@867@01)) | live]
; [else-branch: 515 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@847@01, 8)), $q3@867@01) | live]
(push) ; 5
; [then-branch: 515 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@847@01, 8)), $q3@867@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 8)) $q3@867@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 515 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@847@01, 8)), $q3@867@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 8)) $q3@867@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 8)) $q3@867@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 8)) $q3@867@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@867@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 8)) $q3@867@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 8)) $q3@867@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 8)) $q3@867@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1468@11@1468@345-aux|)))
(assert (forall (($q3@867@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 8)) $q3@867@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 8)) $q3@867@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 8)) $q3@867@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1468@11@1468@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@868@01 $Snap)
(assert (= $t@868@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@869@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@869@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 8)) $q3@869@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 8)) $q3@869@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1469@11@1469@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@870@01 $Snap)
(assert (= $t@870@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@871@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@872@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(push) ; 5
; [then-branch: 516 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@847@01, 9)), $q4@871@01), $q5@872@01)) | live]
; [else-branch: 516 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@847@01, 9)), $q4@871@01), $q5@872@01) | live]
(push) ; 6
; [then-branch: 516 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@847@01, 9)), $q4@871@01), $q5@872@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@847@01 9)) $q4@871@01) $q5@872@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 516 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@847@01, 9)), $q4@871@01), $q5@872@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@847@01 9)) $q4@871@01) $q5@872@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@847@01 9)) $q4@871@01) $q5@872@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@847@01 9)) $q4@871@01) $q5@872@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@872@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@847@01 9)) $q4@871@01) $q5@872@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@847@01 9)) $q4@871@01) $q5@872@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@847@01 9)) $q4@871@01) $q5@872@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1470@131@1470@597-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@871@01 Int)) (!
  (forall (($q5@872@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@847@01 9)) $q4@871@01) $q5@872@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@847@01 9)) $q4@871@01) $q5@872@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@847@01 9)) $q4@871@01) $q5@872@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1470@131@1470@597-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@847@01 9)) $q4@871@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1470@11@1470@598-aux|)))
(assert (forall (($q4@871@01 Int)) (!
  (forall (($q5@872@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@847@01 9)) $q4@871@01) $q5@872@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@847@01 9)) $q4@871@01) $q5@872@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@847@01 9)) $q4@871@01) $q5@872@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1470@131@1470@597|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@847@01 9)) $q4@871@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1470@11@1470@598|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@873@01 $Snap)
(assert (= $t@873@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@874@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@875@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@874@01 Int)) (!
  (forall (($q5@875@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@847@01 9)) $q4@874@01) $q5@875@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@847@01 9)) $q4@874@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@847@01 9)) $q4@874@01) $q5@875@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1471@131@1471@505|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@847@01 9)) $q4@874@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1471@11@1471@506|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 10)): Int) &&
;   ($struct_get($struct_loc(self, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@876@01 $Snap)
(assert (= $t@876@01 ($Snap.combine ($Snap.first $t@876@01) ($Snap.second $t@876@01))))
(assert (= ($Snap.first $t@876@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 10)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@847@01 10))))
(assert (= ($Snap.second $t@876@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@847@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 11)): Int) &&
;   ($struct_get($struct_loc(self, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@877@01 $Snap)
(assert (= $t@877@01 ($Snap.combine ($Snap.first $t@877@01) ($Snap.second $t@877@01))))
(assert (= ($Snap.first $t@877@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 11)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@847@01 11))))
(assert (= ($Snap.second $t@877@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@847@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 12)): Int) &&
;   ($struct_get($struct_loc(self, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@878@01 $Snap)
(assert (= $t@878@01 ($Snap.combine ($Snap.first $t@878@01) ($Snap.second $t@878@01))))
(assert (= ($Snap.first $t@878@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@847@01 12))))
(assert (= ($Snap.second $t@878@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@847@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@879@01 $Snap)
(assert (= $t@879@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@880@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(push) ; 4
; [then-branch: 517 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@847@01, 14)), $q6@880@01)) | live]
; [else-branch: 517 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@847@01, 14)), $q6@880@01) | live]
(push) ; 5
; [then-branch: 517 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@847@01, 14)), $q6@880@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 14)) $q6@880@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 517 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@847@01, 14)), $q6@880@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 14)) $q6@880@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 14)) $q6@880@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 14)) $q6@880@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@880@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 14)) $q6@880@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 14)) $q6@880@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 14)) $q6@880@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1475@11@1475@348-aux|)))
(assert (forall (($q6@880@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 14)) $q6@880@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 14)) $q6@880@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 14)) $q6@880@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1475@11@1475@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $t@881@01 $Snap)
(assert (= $t@881@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $q6@882@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@882@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 14)) $q6@882@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 14)) $q6@882@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1476@11@1476@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@883@01 $Snap)
(assert (= $t@883@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@884@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(push) ; 4
; [then-branch: 518 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@847@01, 15)), $q7@884@01)) | live]
; [else-branch: 518 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@847@01, 15)), $q7@884@01) | live]
(push) ; 5
; [then-branch: 518 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@847@01, 15)), $q7@884@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 15)) $q7@884@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 518 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@847@01, 15)), $q7@884@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 15)) $q7@884@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 15)) $q7@884@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 15)) $q7@884@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@884@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 15)) $q7@884@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 15)) $q7@884@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 15)) $q7@884@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1477@11@1477@348-aux|)))
(assert (forall (($q7@884@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 15)) $q7@884@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 15)) $q7@884@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 15)) $q7@884@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1477@11@1477@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $t@885@01 $Snap)
(assert (= $t@885@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $q7@886@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
; [eval] ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@886@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 15)) $q7@886@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@847@01 15)) $q7@886@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1478@11@1478@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@887@01 $Snap)
(assert (= $t@887@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@847@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@888@01 $Snap)
(assert (= $t@888@01 ($Snap.combine ($Snap.first $t@888@01) ($Snap.second $t@888@01))))
(assert (= ($Snap.first $t@888@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@888@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$_address &&
;   l$_address <= 1461501637330902918203684832716283019655932542975
(declare-const $t@889@01 $Snap)
(assert (= $t@889@01 ($Snap.combine ($Snap.first $t@889@01) ($Snap.second $t@889@01))))
(assert (= ($Snap.first $t@889@01) $Snap.unit))
; [eval] 0 <= l$_address
(assert (<= 0 l$_address@841@01))
(assert (= ($Snap.second $t@889@01) $Snap.unit))
; [eval] l$_address <= 1461501637330902918203684832716283019655932542975
(assert (<= l$_address@841@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@890@01 $Snap)
(assert (= $t@890@01 ($Snap.combine ($Snap.first $t@890@01) ($Snap.second $t@890@01))))
(assert (= ($Snap.first $t@890@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@844@01 0))))
(assert (= ($Snap.second $t@890@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@844@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@891@01 $Snap)
(assert (= $t@891@01 ($Snap.combine ($Snap.first $t@891@01) ($Snap.second $t@891@01))))
(assert (= ($Snap.first $t@891@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@844@01 1))))
(assert (= ($Snap.second $t@891@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@844@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@892@01 $Snap)
(assert (= $t@892@01 ($Snap.combine ($Snap.first $t@892@01) ($Snap.second $t@892@01))))
(assert (= ($Snap.first $t@892@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@844@01 2))))
(assert (= ($Snap.second $t@892@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@844@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@893@01 $Snap)
(assert (= $t@893@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@844@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@894@01 $Snap)
(assert (= $t@894@01 ($Snap.combine ($Snap.first $t@894@01) ($Snap.second $t@894@01))))
(assert (= ($Snap.first $t@894@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@844@01 4))))
(assert (= ($Snap.second $t@894@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@844@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@895@01 $Snap)
(assert (= $t@895@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@844@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@896@01 $Snap)
(assert (= $t@896@01 ($Snap.combine ($Snap.first $t@896@01) ($Snap.second $t@896@01))))
(assert (= ($Snap.first $t@896@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))))
(assert (= ($Snap.second $t@896@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@897@01 $Snap)
(assert (= $t@897@01 ($Snap.combine ($Snap.first $t@897@01) ($Snap.second $t@897@01))))
(assert (= ($Snap.first $t@897@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@843@01 1))))
(assert (= ($Snap.second $t@897@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@843@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@898@01 $Snap)
(assert (= $t@898@01 ($Snap.combine ($Snap.first $t@898@01) ($Snap.second $t@898@01))))
(assert (= ($Snap.first $t@898@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@843@01 2))))
(assert (= ($Snap.second $t@898@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@843@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@899@01 $Snap)
(assert (= $t@899@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@843@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@900@01 $Snap)
(assert (= $t@900@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $t@901@01 $Snap)
(assert (= $t@901@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $a@902@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@903@01 $Snap)
(assert (= $t@903@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@847@01 3)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@847@01 3))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 519 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) != $struct_get[Int]($struct_loc[Int](self@847@01, 3)) | live]
; [else-branch: 519 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == $struct_get[Int]($struct_loc[Int](self@847@01, 3)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 519 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) != $struct_get[Int]($struct_loc[Int](self@847@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@847@01 3)))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 520 | False | dead]
; [else-branch: 520 | True | live]
(push) ; 4
; [else-branch: 520 | True]
(pop) ; 4
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 521 | True | live]
; [else-branch: 521 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 521 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
; [then-branch: 522 | False | dead]
; [else-branch: 522 | True | live]
(push) ; 6
; [else-branch: 522 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@847@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 523 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) != $struct_get[Int]($struct_loc[Int](self@847@01, 3)) | live]
; [else-branch: 523 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == $struct_get[Int]($struct_loc[Int](self@847@01, 3)) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 523 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) != $struct_get[Int]($struct_loc[Int](self@847@01, 3))]
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
; [then-branch: 524 | False | live]
; [else-branch: 524 | True | live]
(push) ; 8
; [then-branch: 524 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 524 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@904@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 525 | !(0 <= q$a@904@01) | live]
; [else-branch: 525 | 0 <= q$a@904@01 | live]
(push) ; 7
; [then-branch: 525 | !(0 <= q$a@904@01)]
(assert (not (<= 0 q$a@904@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 525 | 0 <= q$a@904@01]
(assert (<= 0 q$a@904@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@904@01) (not (<= 0 q$a@904@01))))
(push) ; 6
; [then-branch: 526 | 0 <= q$a@904@01 && q$a@904@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 526 | !(0 <= q$a@904@01 && q$a@904@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 526 | 0 <= q$a@904@01 && q$a@904@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@904@01)
  (<= q$a@904@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 527 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@904@01) | live]
; [else-branch: 527 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@904@01)) | live]
(push) ; 9
; [then-branch: 527 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@904@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
(pop) ; 9
(push) ; 9
; [else-branch: 527 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@904@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01)))
(push) ; 8
; [then-branch: 528 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@904@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@904@01) | live]
; [else-branch: 528 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@904@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@904@01)) | live]
(push) ; 9
; [then-branch: 528 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@904@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@904@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 10
; [then-branch: 529 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) != $struct_get[Int]($struct_loc[Int](self@847@01, 1)) | live]
; [else-branch: 529 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == $struct_get[Int]($struct_loc[Int](self@847@01, 1)) | live]
(push) ; 11
; [then-branch: 529 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) != $struct_get[Int]($struct_loc[Int](self@847@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@847@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 529 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == $struct_get[Int]($struct_loc[Int](self@847@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@847@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@847@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@847@01 1))))))
(pop) ; 9
(push) ; 9
; [else-branch: 528 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@904@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@904@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@847@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@847@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 526 | !(0 <= q$a@904@01 && q$a@904@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@904@01)
    (<= q$a@904@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@904@01)
    (<= q$a@904@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@904@01)
    (<= q$a@904@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@847@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@847@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@904@01)
      (<= q$a@904@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@904@01)
    (<= q$a@904@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@904@01 Int)) (!
  (and
    (or (<= 0 q$a@904@01) (not (<= 0 q$a@904@01)))
    (=>
      (and
        (<= 0 q$a@904@01)
        (<= q$a@904@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@904@01)
        (<= q$a@904@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@847@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@847@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01)))))
    (or
      (not
        (and
          (<= 0 q$a@904@01)
          (<= q$a@904@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@904@01)
        (<= q$a@904@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1537@17@1537@397-aux|)))
(push) ; 5
(assert (not (forall ((q$a@904@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@904@01)
        (<= q$a@904@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1537@17@1537@397|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@904@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@904@01)
        (<= q$a@904@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@904@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1537@17@1537@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@905@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 530 | !(0 <= q$a@905@01) | live]
; [else-branch: 530 | 0 <= q$a@905@01 | live]
(push) ; 7
; [then-branch: 530 | !(0 <= q$a@905@01)]
(assert (not (<= 0 q$a@905@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 530 | 0 <= q$a@905@01]
(assert (<= 0 q$a@905@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@905@01) (not (<= 0 q$a@905@01))))
(push) ; 6
; [then-branch: 531 | 0 <= q$a@905@01 && q$a@905@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 531 | !(0 <= q$a@905@01 && q$a@905@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 531 | 0 <= q$a@905@01 && q$a@905@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@905@01)
  (<= q$a@905@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 532 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@905@01)) | live]
; [else-branch: 532 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@905@01) | live]
(push) ; 9
; [then-branch: 532 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@905@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 532 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@905@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01))))
(push) ; 8
; [then-branch: 533 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@905@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@905@01)) | live]
; [else-branch: 533 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@905@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@905@01))) | live]
(push) ; 9
; [then-branch: 533 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@905@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@905@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 534 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) != q$a@905@01 | live]
; [else-branch: 534 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == q$a@905@01 | live]
(push) ; 11
; [then-branch: 534 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) != q$a@905@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@905@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 534 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == q$a@905@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@905@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@905@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@905@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 533 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@905@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@905@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@905@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@905@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 531 | !(0 <= q$a@905@01 && q$a@905@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@905@01)
    (<= q$a@905@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@905@01)
    (<= q$a@905@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@905@01)
    (<= q$a@905@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@905@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@905@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@905@01)
      (<= q$a@905@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@905@01)
    (<= q$a@905@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@905@01 Int)) (!
  (and
    (or (<= 0 q$a@905@01) (not (<= 0 q$a@905@01)))
    (=>
      (and
        (<= 0 q$a@905@01)
        (<= q$a@905@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@905@01)
        (<= q$a@905@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@905@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@905@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01))))))
    (or
      (not
        (and
          (<= 0 q$a@905@01)
          (<= q$a@905@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@905@01)
        (<= q$a@905@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1538@17@1538@361-aux|)))
(push) ; 5
(assert (not (forall ((q$a@905@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@905@01)
        (<= q$a@905@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1538@17@1538@361|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@905@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@905@01)
        (<= q$a@905@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@905@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1538@17@1538@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@906@01 $Snap)
(assert (= $t@906@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@857@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@907@01 $Struct)
(assert (=
  self@907@01
  ($struct_set<$Struct> self@847@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@847@01 11))
    l$havoc@857@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 4
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 519 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == $struct_get[Int]($struct_loc[Int](self@847@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@847@01 3))))
(pop) ; 3
; [eval] !!(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int))
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@847@01 3))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@847@01 3)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 535 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == $struct_get[Int]($struct_loc[Int](self@847@01, 3)) | live]
; [else-branch: 535 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) != $struct_get[Int]($struct_loc[Int](self@847@01, 3)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 535 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == $struct_get[Int]($struct_loc[Int](self@847@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@847@01 3))))
; [exec]
; self := ($struct_set(self, 0, l$_address): $Struct)
; [eval] ($struct_set(self, 0, l$_address): $Struct)
(declare-const self@908@01 $Struct)
(assert (= self@908@01 ($struct_set<$Struct> self@847@01 0 l$_address@841@01)))
; [exec]
; label return
(push) ; 4
(set-option :timeout 10)
(assert (not (not $out_of_gas@856@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not $out_of_gas@856@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 536 | $out_of_gas@856@01 | live]
; [else-branch: 536 | !($out_of_gas@856@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 536 | $out_of_gas@856@01]
(assert $out_of_gas@856@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 537 | False | dead]
; [else-branch: 537 | True | live]
(push) ; 5
; [else-branch: 537 | True]
(pop) ; 5
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 538 | True | live]
; [else-branch: 538 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 538 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 6
; [then-branch: 539 | False | dead]
; [else-branch: 539 | True | live]
(push) ; 7
; [else-branch: 539 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
; [then-branch: 540 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) != $struct_get[Int]($struct_loc[Int](self@847@01, 3)) | dead]
; [else-branch: 540 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == $struct_get[Int]($struct_loc[Int](self@847@01, 3)) | live]
(push) ; 7
; [else-branch: 540 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == $struct_get[Int]($struct_loc[Int](self@847@01, 3))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@909@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 541 | !(0 <= q$a@909@01) | live]
; [else-branch: 541 | 0 <= q$a@909@01 | live]
(push) ; 8
; [then-branch: 541 | !(0 <= q$a@909@01)]
(assert (not (<= 0 q$a@909@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 541 | 0 <= q$a@909@01]
(assert (<= 0 q$a@909@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@909@01) (not (<= 0 q$a@909@01))))
(push) ; 7
; [then-branch: 542 | 0 <= q$a@909@01 && q$a@909@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 542 | !(0 <= q$a@909@01 && q$a@909@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 542 | 0 <= q$a@909@01 && q$a@909@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@909@01)
  (<= q$a@909@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 543 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@909@01) | live]
; [else-branch: 543 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@909@01)) | live]
(push) ; 10
; [then-branch: 543 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@909@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
(pop) ; 10
(push) ; 10
; [else-branch: 543 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@909@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01)))
(push) ; 9
; [then-branch: 544 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@909@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@909@01) | live]
; [else-branch: 544 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@909@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@909@01)) | live]
(push) ; 10
; [then-branch: 544 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@909@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@909@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 11
; [then-branch: 545 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) != $struct_get[Int]($struct_loc[Int](self@847@01, 1)) | live]
; [else-branch: 545 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == $struct_get[Int]($struct_loc[Int](self@847@01, 1)) | live]
(push) ; 12
; [then-branch: 545 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) != $struct_get[Int]($struct_loc[Int](self@847@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@847@01 1)))))
(pop) ; 12
(push) ; 12
; [else-branch: 545 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == $struct_get[Int]($struct_loc[Int](self@847@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@847@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@847@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@847@01 1))))))
(pop) ; 10
(push) ; 10
; [else-branch: 544 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@909@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@909@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@847@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@847@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 542 | !(0 <= q$a@909@01 && q$a@909@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@909@01)
    (<= q$a@909@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@909@01)
    (<= q$a@909@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@909@01)
    (<= q$a@909@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@847@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@847@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@909@01)
      (<= q$a@909@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@909@01)
    (<= q$a@909@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@909@01 Int)) (!
  (and
    (or (<= 0 q$a@909@01) (not (<= 0 q$a@909@01)))
    (=>
      (and
        (<= 0 q$a@909@01)
        (<= q$a@909@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@909@01)
        (<= q$a@909@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@847@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@847@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01)))))
    (or
      (not
        (and
          (<= 0 q$a@909@01)
          (<= q$a@909@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@909@01)
        (<= q$a@909@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1537@17@1537@397-aux|)))
(push) ; 6
(assert (not (forall ((q$a@909@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@909@01)
        (<= q$a@909@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1537@17@1537@397|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@909@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@909@01)
        (<= q$a@909@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@909@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1537@17@1537@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@910@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 546 | !(0 <= q$a@910@01) | live]
; [else-branch: 546 | 0 <= q$a@910@01 | live]
(push) ; 8
; [then-branch: 546 | !(0 <= q$a@910@01)]
(assert (not (<= 0 q$a@910@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 546 | 0 <= q$a@910@01]
(assert (<= 0 q$a@910@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@910@01) (not (<= 0 q$a@910@01))))
(push) ; 7
; [then-branch: 547 | 0 <= q$a@910@01 && q$a@910@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 547 | !(0 <= q$a@910@01 && q$a@910@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 547 | 0 <= q$a@910@01 && q$a@910@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@910@01)
  (<= q$a@910@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 548 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@910@01)) | live]
; [else-branch: 548 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@910@01) | live]
(push) ; 10
; [then-branch: 548 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@910@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 548 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@910@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01))))
(push) ; 9
; [then-branch: 549 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@910@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@910@01)) | live]
; [else-branch: 549 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@910@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@910@01))) | live]
(push) ; 10
; [then-branch: 549 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@910@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@910@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 550 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) != q$a@910@01 | live]
; [else-branch: 550 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == q$a@910@01 | live]
(push) ; 12
; [then-branch: 550 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) != q$a@910@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@910@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 550 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == q$a@910@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@910@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@910@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@910@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 549 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@910@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@910@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@910@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@910@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 547 | !(0 <= q$a@910@01 && q$a@910@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@910@01)
    (<= q$a@910@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@910@01)
    (<= q$a@910@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@910@01)
    (<= q$a@910@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@910@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@910@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@910@01)
      (<= q$a@910@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@910@01)
    (<= q$a@910@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@910@01 Int)) (!
  (and
    (or (<= 0 q$a@910@01) (not (<= 0 q$a@910@01)))
    (=>
      (and
        (<= 0 q$a@910@01)
        (<= q$a@910@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@910@01)
        (<= q$a@910@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@910@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@910@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01))))))
    (or
      (not
        (and
          (<= 0 q$a@910@01)
          (<= q$a@910@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@910@01)
        (<= q$a@910@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1538@17@1538@361-aux|)))
(push) ; 6
(assert (not (forall ((q$a@910@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@910@01)
        (<= q$a@910@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1538@17@1538@361|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@910@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@910@01)
        (<= q$a@910@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@910@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1538@17@1538@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@911@01 $Snap)
(assert (= $t@911@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@857@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@912@01 $Struct)
(assert (=
  self@912@01
  ($struct_set<$Struct> self@847@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@847@01 11))
    l$havoc@857@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 5
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 536 | !($out_of_gas@856@01)]
(assert (not $out_of_gas@856@01))
(pop) ; 4
; [eval] !$out_of_gas
(push) ; 4
(set-option :timeout 10)
(assert (not $out_of_gas@856@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not $out_of_gas@856@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 551 | !($out_of_gas@856@01) | live]
; [else-branch: 551 | $out_of_gas@856@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 551 | !($out_of_gas@856@01)]
(assert (not $out_of_gas@856@01))
; [exec]
; label end
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 552 | True | live]
; [else-branch: 552 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 552 | True]
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@908@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@847@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 553 | $struct_get[Int]($struct_loc[Int](self@908@01, 3)) != $struct_get[Int]($struct_loc[Int](self@847@01, 3)) | dead]
; [else-branch: 553 | $struct_get[Int]($struct_loc[Int](self@908@01, 3)) == $struct_get[Int]($struct_loc[Int](self@847@01, 3)) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 553 | $struct_get[Int]($struct_loc[Int](self@908@01, 3)) == $struct_get[Int]($struct_loc[Int](self@847@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@908@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@847@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@908@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@847@01 3))))
; [exec]
; assert ($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@908@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 554 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) != $struct_get[Int]($struct_loc[Int](self@908@01, 3)) | dead]
; [else-branch: 554 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == $struct_get[Int]($struct_loc[Int](self@908@01, 3)) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 554 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == $struct_get[Int]($struct_loc[Int](self@908@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@908@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@908@01 3))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@913@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 555 | !(0 <= q$a@913@01) | live]
; [else-branch: 555 | 0 <= q$a@913@01 | live]
(push) ; 8
; [then-branch: 555 | !(0 <= q$a@913@01)]
(assert (not (<= 0 q$a@913@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 555 | 0 <= q$a@913@01]
(assert (<= 0 q$a@913@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@913@01) (not (<= 0 q$a@913@01))))
(push) ; 7
; [then-branch: 556 | 0 <= q$a@913@01 && q$a@913@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 556 | !(0 <= q$a@913@01 && q$a@913@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 556 | 0 <= q$a@913@01 && q$a@913@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@913@01)
  (<= q$a@913@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 557 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@913@01) | live]
; [else-branch: 557 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@913@01)) | live]
(push) ; 10
; [then-branch: 557 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@913@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
(pop) ; 10
(push) ; 10
; [else-branch: 557 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@913@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01)))
(push) ; 9
; [then-branch: 558 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@913@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@908@01, 2)), q$a@913@01) | live]
; [else-branch: 558 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@913@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@908@01, 2)), q$a@913@01)) | live]
(push) ; 10
; [then-branch: 558 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@913@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@908@01, 2)), q$a@913@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 11
; [then-branch: 559 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) != $struct_get[Int]($struct_loc[Int](self@908@01, 1)) | live]
; [else-branch: 559 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == $struct_get[Int]($struct_loc[Int](self@908@01, 1)) | live]
(push) ; 12
; [then-branch: 559 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) != $struct_get[Int]($struct_loc[Int](self@908@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@908@01 1)))))
(pop) ; 12
(push) ; 12
; [else-branch: 559 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == $struct_get[Int]($struct_loc[Int](self@908@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@908@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@908@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@908@01 1))))))
(pop) ; 10
(push) ; 10
; [else-branch: 558 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@913@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@908@01, 2)), q$a@913@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@908@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@908@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 556 | !(0 <= q$a@913@01 && q$a@913@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@913@01)
    (<= q$a@913@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@913@01)
    (<= q$a@913@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@913@01)
    (<= q$a@913@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@908@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@908@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@913@01)
      (<= q$a@913@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@913@01)
    (<= q$a@913@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@913@01 Int)) (!
  (and
    (or (<= 0 q$a@913@01) (not (<= 0 q$a@913@01)))
    (=>
      (and
        (<= 0 q$a@913@01)
        (<= q$a@913@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@913@01)
        (<= q$a@913@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@908@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@908@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01)))))
    (or
      (not
        (and
          (<= 0 q$a@913@01)
          (<= q$a@913@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@913@01)
        (<= q$a@913@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1532@13@1532@393-aux|)))
(assert (forall ((q$a@913@01 Int)) (!
  (and
    (or (<= 0 q$a@913@01) (not (<= 0 q$a@913@01)))
    (=>
      (and
        (<= 0 q$a@913@01)
        (<= q$a@913@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@913@01)
        (<= q$a@913@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@908@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@908@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01)))))
    (or
      (not
        (and
          (<= 0 q$a@913@01)
          (<= q$a@913@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@913@01)
        (<= q$a@913@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1532@13@1532@393-aux|)))
(push) ; 6
(assert (not (forall ((q$a@913@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@913@01)
        (<= q$a@913@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1532@13@1532@393|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@913@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@913@01)
        (<= q$a@913@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@913@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@913@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1532@13@1532@393|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@914@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 560 | !(0 <= q$a@914@01) | live]
; [else-branch: 560 | 0 <= q$a@914@01 | live]
(push) ; 8
; [then-branch: 560 | !(0 <= q$a@914@01)]
(assert (not (<= 0 q$a@914@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 560 | 0 <= q$a@914@01]
(assert (<= 0 q$a@914@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@914@01) (not (<= 0 q$a@914@01))))
(push) ; 7
; [then-branch: 561 | 0 <= q$a@914@01 && q$a@914@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 561 | !(0 <= q$a@914@01 && q$a@914@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 561 | 0 <= q$a@914@01 && q$a@914@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@914@01)
  (<= q$a@914@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 562 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@914@01)) | live]
; [else-branch: 562 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@914@01) | live]
(push) ; 10
; [then-branch: 562 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@914@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 562 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@914@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01))))
(push) ; 9
; [then-branch: 563 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@914@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@908@01, 2)), q$a@914@01)) | live]
; [else-branch: 563 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@914@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@908@01, 2)), q$a@914@01))) | live]
(push) ; 10
; [then-branch: 563 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@914@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@908@01, 2)), q$a@914@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 564 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) != q$a@914@01 | live]
; [else-branch: 564 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == q$a@914@01 | live]
(push) ; 12
; [then-branch: 564 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) != q$a@914@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@914@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 564 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) == q$a@914@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@914@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@914@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@914@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 563 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@847@01, 2)), q$a@914@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@908@01, 2)), q$a@914@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@914@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@914@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 561 | !(0 <= q$a@914@01 && q$a@914@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@914@01)
    (<= q$a@914@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@914@01)
    (<= q$a@914@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@914@01)
    (<= q$a@914@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@914@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@914@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@914@01)
      (<= q$a@914@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@914@01)
    (<= q$a@914@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@914@01 Int)) (!
  (and
    (or (<= 0 q$a@914@01) (not (<= 0 q$a@914@01)))
    (=>
      (and
        (<= 0 q$a@914@01)
        (<= q$a@914@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@914@01)
        (<= q$a@914@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@914@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@914@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01))))))
    (or
      (not
        (and
          (<= 0 q$a@914@01)
          (<= q$a@914@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@914@01)
        (<= q$a@914@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1533@13@1533@357-aux|)))
(assert (forall ((q$a@914@01 Int)) (!
  (and
    (or (<= 0 q$a@914@01) (not (<= 0 q$a@914@01)))
    (=>
      (and
        (<= 0 q$a@914@01)
        (<= q$a@914@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@914@01)
        (<= q$a@914@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@914@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@843@01 0)) q$a@914@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01))))))
    (or
      (not
        (and
          (<= 0 q$a@914@01)
          (<= q$a@914@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@914@01)
        (<= q$a@914@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1533@13@1533@357-aux|)))
(push) ; 6
(assert (not (forall ((q$a@914@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@914@01)
        (<= q$a@914@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1533@13@1533@357|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@914@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@914@01)
        (<= q$a@914@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@847@01 2)) q$a@914@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@908@01 2)) q$a@914@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1533@13@1533@357|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@915@01 $Snap)
(assert (= $t@915@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@857@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@916@01 $Struct)
(assert (=
  self@916@01
  ($struct_set<$Struct> self@908@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@908@01 11))
    l$havoc@857@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 5
; [eval] !$succ
; [then-branch: 565 | False | dead]
; [else-branch: 565 | True | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 565 | True]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 551 | $out_of_gas@856@01]
(assert $out_of_gas@856@01)
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 535 | $struct_get[Int]($struct_loc[Int](msg@843@01, 0)) != $struct_get[Int]($struct_loc[Int](self@847@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@843@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@847@01 3)))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$setFactoryAddress ----------
(declare-const l$_address@917@01 Int)
(declare-const $succ@918@01 Bool)
(declare-const l$_address@919@01 Int)
(declare-const $succ@920@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@921@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@922@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@923@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@924@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@925@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@926@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@927@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@928@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@929@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@930@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@931@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@932@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@933@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@934@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@935@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@936@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@937@01 $Snap)
(assert (= $t@937@01 ($Snap.combine ($Snap.first $t@937@01) ($Snap.second $t@937@01))))
(assert (= ($Snap.first $t@937@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@925@01 0))))
(assert (= ($Snap.second $t@937@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@925@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@938@01 $Snap)
(assert (= $t@938@01 ($Snap.combine ($Snap.first $t@938@01) ($Snap.second $t@938@01))))
(assert (= ($Snap.first $t@938@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@925@01 1))))
(assert (= ($Snap.second $t@938@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@925@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@939@01 $Snap)
(assert (= $t@939@01 ($Snap.combine ($Snap.first $t@939@01) ($Snap.second $t@939@01))))
(assert (= ($Snap.first $t@939@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@925@01 3))))
(assert (= ($Snap.second $t@939@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@925@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
(declare-const $t@940@01 $Snap)
(assert (= $t@940@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 4)): Seq[Int])
; [eval] $struct_loc(self, 4)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@925@01 4))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
(declare-const $t@941@01 $Snap)
(assert (= $t@941@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 5)): Seq[Int])
; [eval] $struct_loc(self, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@925@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@942@01 $Snap)
(assert (= $t@942@01 ($Snap.combine ($Snap.first $t@942@01) ($Snap.second $t@942@01))))
(assert (= ($Snap.first $t@942@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@925@01 6))))
(assert (= ($Snap.second $t@942@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@925@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@943@01 $Snap)
(assert (= $t@943@01 ($Snap.combine ($Snap.first $t@943@01) ($Snap.second $t@943@01))))
(assert (= ($Snap.first $t@943@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@925@01 7))))
(assert (= ($Snap.second $t@943@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@925@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@944@01 $Snap)
(assert (= $t@944@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@945@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 566 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@925@01, 8)), $q3@945@01)) | live]
; [else-branch: 566 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@925@01, 8)), $q3@945@01) | live]
(push) ; 5
; [then-branch: 566 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@925@01, 8)), $q3@945@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 8)) $q3@945@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 566 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@925@01, 8)), $q3@945@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 8)) $q3@945@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 8)) $q3@945@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 8)) $q3@945@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@945@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 8)) $q3@945@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 8)) $q3@945@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 8)) $q3@945@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1572@11@1572@345-aux|)))
(assert (forall (($q3@945@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 8)) $q3@945@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 8)) $q3@945@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 8)) $q3@945@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1572@11@1572@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@946@01 $Snap)
(assert (= $t@946@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@947@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@947@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 8)) $q3@947@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 8)) $q3@947@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1573@11@1573@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@948@01 $Snap)
(assert (= $t@948@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@949@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@950@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(push) ; 5
; [then-branch: 567 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@925@01, 9)), $q4@949@01), $q5@950@01)) | live]
; [else-branch: 567 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@925@01, 9)), $q4@949@01), $q5@950@01) | live]
(push) ; 6
; [then-branch: 567 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@925@01, 9)), $q4@949@01), $q5@950@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@925@01 9)) $q4@949@01) $q5@950@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 567 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@925@01, 9)), $q4@949@01), $q5@950@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@925@01 9)) $q4@949@01) $q5@950@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@925@01 9)) $q4@949@01) $q5@950@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@925@01 9)) $q4@949@01) $q5@950@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@950@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@925@01 9)) $q4@949@01) $q5@950@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@925@01 9)) $q4@949@01) $q5@950@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@925@01 9)) $q4@949@01) $q5@950@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1574@131@1574@597-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@949@01 Int)) (!
  (forall (($q5@950@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@925@01 9)) $q4@949@01) $q5@950@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@925@01 9)) $q4@949@01) $q5@950@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@925@01 9)) $q4@949@01) $q5@950@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1574@131@1574@597-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@925@01 9)) $q4@949@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1574@11@1574@598-aux|)))
(assert (forall (($q4@949@01 Int)) (!
  (forall (($q5@950@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@925@01 9)) $q4@949@01) $q5@950@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@925@01 9)) $q4@949@01) $q5@950@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@925@01 9)) $q4@949@01) $q5@950@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1574@131@1574@597|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@925@01 9)) $q4@949@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1574@11@1574@598|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@951@01 $Snap)
(assert (= $t@951@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@952@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@953@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@952@01 Int)) (!
  (forall (($q5@953@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@925@01 9)) $q4@952@01) $q5@953@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@925@01 9)) $q4@952@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@925@01 9)) $q4@952@01) $q5@953@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1575@131@1575@505|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@925@01 9)) $q4@952@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1575@11@1575@506|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 10)): Int) &&
;   ($struct_get($struct_loc(self, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@954@01 $Snap)
(assert (= $t@954@01 ($Snap.combine ($Snap.first $t@954@01) ($Snap.second $t@954@01))))
(assert (= ($Snap.first $t@954@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 10)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@925@01 10))))
(assert (= ($Snap.second $t@954@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@925@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 11)): Int) &&
;   ($struct_get($struct_loc(self, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@955@01 $Snap)
(assert (= $t@955@01 ($Snap.combine ($Snap.first $t@955@01) ($Snap.second $t@955@01))))
(assert (= ($Snap.first $t@955@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 11)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@925@01 11))))
(assert (= ($Snap.second $t@955@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@925@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 12)): Int) &&
;   ($struct_get($struct_loc(self, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@956@01 $Snap)
(assert (= $t@956@01 ($Snap.combine ($Snap.first $t@956@01) ($Snap.second $t@956@01))))
(assert (= ($Snap.first $t@956@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@925@01 12))))
(assert (= ($Snap.second $t@956@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@925@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@957@01 $Snap)
(assert (= $t@957@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@958@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(push) ; 4
; [then-branch: 568 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@925@01, 14)), $q6@958@01)) | live]
; [else-branch: 568 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@925@01, 14)), $q6@958@01) | live]
(push) ; 5
; [then-branch: 568 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@925@01, 14)), $q6@958@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 14)) $q6@958@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 568 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@925@01, 14)), $q6@958@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 14)) $q6@958@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 14)) $q6@958@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 14)) $q6@958@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@958@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 14)) $q6@958@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 14)) $q6@958@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 14)) $q6@958@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1579@11@1579@348-aux|)))
(assert (forall (($q6@958@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 14)) $q6@958@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 14)) $q6@958@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 14)) $q6@958@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1579@11@1579@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $t@959@01 $Snap)
(assert (= $t@959@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $q6@960@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@960@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 14)) $q6@960@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 14)) $q6@960@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1580@11@1580@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@961@01 $Snap)
(assert (= $t@961@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@962@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(push) ; 4
; [then-branch: 569 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@925@01, 15)), $q7@962@01)) | live]
; [else-branch: 569 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@925@01, 15)), $q7@962@01) | live]
(push) ; 5
; [then-branch: 569 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@925@01, 15)), $q7@962@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 15)) $q7@962@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 569 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@925@01, 15)), $q7@962@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 15)) $q7@962@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 15)) $q7@962@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 15)) $q7@962@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@962@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 15)) $q7@962@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 15)) $q7@962@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 15)) $q7@962@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1581@11@1581@348-aux|)))
(assert (forall (($q7@962@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 15)) $q7@962@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 15)) $q7@962@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 15)) $q7@962@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1581@11@1581@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $t@963@01 $Snap)
(assert (= $t@963@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $q7@964@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
; [eval] ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@964@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 15)) $q7@964@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@925@01 15)) $q7@964@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1582@11@1582@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@965@01 $Snap)
(assert (= $t@965@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@925@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@966@01 $Snap)
(assert (= $t@966@01 ($Snap.combine ($Snap.first $t@966@01) ($Snap.second $t@966@01))))
(assert (= ($Snap.first $t@966@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@966@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$_address &&
;   l$_address <= 1461501637330902918203684832716283019655932542975
(declare-const $t@967@01 $Snap)
(assert (= $t@967@01 ($Snap.combine ($Snap.first $t@967@01) ($Snap.second $t@967@01))))
(assert (= ($Snap.first $t@967@01) $Snap.unit))
; [eval] 0 <= l$_address
(assert (<= 0 l$_address@919@01))
(assert (= ($Snap.second $t@967@01) $Snap.unit))
; [eval] l$_address <= 1461501637330902918203684832716283019655932542975
(assert (<= l$_address@919@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@968@01 $Snap)
(assert (= $t@968@01 ($Snap.combine ($Snap.first $t@968@01) ($Snap.second $t@968@01))))
(assert (= ($Snap.first $t@968@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@922@01 0))))
(assert (= ($Snap.second $t@968@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@922@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@969@01 $Snap)
(assert (= $t@969@01 ($Snap.combine ($Snap.first $t@969@01) ($Snap.second $t@969@01))))
(assert (= ($Snap.first $t@969@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@922@01 1))))
(assert (= ($Snap.second $t@969@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@922@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@970@01 $Snap)
(assert (= $t@970@01 ($Snap.combine ($Snap.first $t@970@01) ($Snap.second $t@970@01))))
(assert (= ($Snap.first $t@970@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@922@01 2))))
(assert (= ($Snap.second $t@970@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@922@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@971@01 $Snap)
(assert (= $t@971@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@922@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@972@01 $Snap)
(assert (= $t@972@01 ($Snap.combine ($Snap.first $t@972@01) ($Snap.second $t@972@01))))
(assert (= ($Snap.first $t@972@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@922@01 4))))
(assert (= ($Snap.second $t@972@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@922@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@973@01 $Snap)
(assert (= $t@973@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@922@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@974@01 $Snap)
(assert (= $t@974@01 ($Snap.combine ($Snap.first $t@974@01) ($Snap.second $t@974@01))))
(assert (= ($Snap.first $t@974@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))))
(assert (= ($Snap.second $t@974@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@975@01 $Snap)
(assert (= $t@975@01 ($Snap.combine ($Snap.first $t@975@01) ($Snap.second $t@975@01))))
(assert (= ($Snap.first $t@975@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@921@01 1))))
(assert (= ($Snap.second $t@975@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@921@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@976@01 $Snap)
(assert (= $t@976@01 ($Snap.combine ($Snap.first $t@976@01) ($Snap.second $t@976@01))))
(assert (= ($Snap.first $t@976@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@921@01 2))))
(assert (= ($Snap.second $t@976@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@921@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@977@01 $Snap)
(assert (= $t@977@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@921@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@978@01 $Snap)
(assert (= $t@978@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $t@979@01 $Snap)
(assert (= $t@979@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $a@980@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@981@01 $Snap)
(assert (= $t@981@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@925@01 3)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@925@01 3))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 570 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) != $struct_get[Int]($struct_loc[Int](self@925@01, 3)) | live]
; [else-branch: 570 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == $struct_get[Int]($struct_loc[Int](self@925@01, 3)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 570 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) != $struct_get[Int]($struct_loc[Int](self@925@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@925@01 3)))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 571 | False | dead]
; [else-branch: 571 | True | live]
(push) ; 4
; [else-branch: 571 | True]
(pop) ; 4
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 572 | True | live]
; [else-branch: 572 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 572 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
; [then-branch: 573 | False | dead]
; [else-branch: 573 | True | live]
(push) ; 6
; [else-branch: 573 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@925@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 574 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) != $struct_get[Int]($struct_loc[Int](self@925@01, 3)) | live]
; [else-branch: 574 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == $struct_get[Int]($struct_loc[Int](self@925@01, 3)) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 574 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) != $struct_get[Int]($struct_loc[Int](self@925@01, 3))]
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
; [then-branch: 575 | False | live]
; [else-branch: 575 | True | live]
(push) ; 8
; [then-branch: 575 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 575 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@982@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 576 | !(0 <= q$a@982@01) | live]
; [else-branch: 576 | 0 <= q$a@982@01 | live]
(push) ; 7
; [then-branch: 576 | !(0 <= q$a@982@01)]
(assert (not (<= 0 q$a@982@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 576 | 0 <= q$a@982@01]
(assert (<= 0 q$a@982@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@982@01) (not (<= 0 q$a@982@01))))
(push) ; 6
; [then-branch: 577 | 0 <= q$a@982@01 && q$a@982@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 577 | !(0 <= q$a@982@01 && q$a@982@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 577 | 0 <= q$a@982@01 && q$a@982@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@982@01)
  (<= q$a@982@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 578 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@982@01) | live]
; [else-branch: 578 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@982@01)) | live]
(push) ; 9
; [then-branch: 578 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@982@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
(pop) ; 9
(push) ; 9
; [else-branch: 578 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@982@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01)))
(push) ; 8
; [then-branch: 579 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@982@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@982@01) | live]
; [else-branch: 579 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@982@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@982@01)) | live]
(push) ; 9
; [then-branch: 579 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@982@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@982@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 10
; [then-branch: 580 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) != $struct_get[Int]($struct_loc[Int](self@925@01, 1)) | live]
; [else-branch: 580 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == $struct_get[Int]($struct_loc[Int](self@925@01, 1)) | live]
(push) ; 11
; [then-branch: 580 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) != $struct_get[Int]($struct_loc[Int](self@925@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@925@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 580 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == $struct_get[Int]($struct_loc[Int](self@925@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@925@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@925@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@925@01 1))))))
(pop) ; 9
(push) ; 9
; [else-branch: 579 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@982@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@982@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@925@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@925@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 577 | !(0 <= q$a@982@01 && q$a@982@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@982@01)
    (<= q$a@982@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@982@01)
    (<= q$a@982@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@982@01)
    (<= q$a@982@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@925@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@925@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@982@01)
      (<= q$a@982@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@982@01)
    (<= q$a@982@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@982@01 Int)) (!
  (and
    (or (<= 0 q$a@982@01) (not (<= 0 q$a@982@01)))
    (=>
      (and
        (<= 0 q$a@982@01)
        (<= q$a@982@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@982@01)
        (<= q$a@982@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@925@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@925@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01)))))
    (or
      (not
        (and
          (<= 0 q$a@982@01)
          (<= q$a@982@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@982@01)
        (<= q$a@982@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1641@17@1641@397-aux|)))
(push) ; 5
(assert (not (forall ((q$a@982@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@982@01)
        (<= q$a@982@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1641@17@1641@397|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@982@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@982@01)
        (<= q$a@982@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@982@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1641@17@1641@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@983@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 581 | !(0 <= q$a@983@01) | live]
; [else-branch: 581 | 0 <= q$a@983@01 | live]
(push) ; 7
; [then-branch: 581 | !(0 <= q$a@983@01)]
(assert (not (<= 0 q$a@983@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 581 | 0 <= q$a@983@01]
(assert (<= 0 q$a@983@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@983@01) (not (<= 0 q$a@983@01))))
(push) ; 6
; [then-branch: 582 | 0 <= q$a@983@01 && q$a@983@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 582 | !(0 <= q$a@983@01 && q$a@983@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 582 | 0 <= q$a@983@01 && q$a@983@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@983@01)
  (<= q$a@983@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 583 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@983@01)) | live]
; [else-branch: 583 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@983@01) | live]
(push) ; 9
; [then-branch: 583 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@983@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 583 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@983@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01))))
(push) ; 8
; [then-branch: 584 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@983@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@983@01)) | live]
; [else-branch: 584 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@983@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@983@01))) | live]
(push) ; 9
; [then-branch: 584 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@983@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@983@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 585 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) != q$a@983@01 | live]
; [else-branch: 585 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == q$a@983@01 | live]
(push) ; 11
; [then-branch: 585 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) != q$a@983@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@983@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 585 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == q$a@983@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@983@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@983@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@983@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 584 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@983@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@983@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@983@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@983@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 582 | !(0 <= q$a@983@01 && q$a@983@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@983@01)
    (<= q$a@983@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@983@01)
    (<= q$a@983@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@983@01)
    (<= q$a@983@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@983@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@983@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@983@01)
      (<= q$a@983@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@983@01)
    (<= q$a@983@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@983@01 Int)) (!
  (and
    (or (<= 0 q$a@983@01) (not (<= 0 q$a@983@01)))
    (=>
      (and
        (<= 0 q$a@983@01)
        (<= q$a@983@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@983@01)
        (<= q$a@983@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@983@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@983@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01))))))
    (or
      (not
        (and
          (<= 0 q$a@983@01)
          (<= q$a@983@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@983@01)
        (<= q$a@983@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1642@17@1642@361-aux|)))
(push) ; 5
(assert (not (forall ((q$a@983@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@983@01)
        (<= q$a@983@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1642@17@1642@361|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@983@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@983@01)
        (<= q$a@983@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@983@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1642@17@1642@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@984@01 $Snap)
(assert (= $t@984@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@935@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@985@01 $Struct)
(assert (=
  self@985@01
  ($struct_set<$Struct> self@925@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@925@01 11))
    l$havoc@935@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 4
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 570 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == $struct_get[Int]($struct_loc[Int](self@925@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@925@01 3))))
(pop) ; 3
; [eval] !!(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int))
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@925@01 3))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@925@01 3)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 586 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == $struct_get[Int]($struct_loc[Int](self@925@01, 3)) | live]
; [else-branch: 586 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) != $struct_get[Int]($struct_loc[Int](self@925@01, 3)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 586 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == $struct_get[Int]($struct_loc[Int](self@925@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@925@01 3))))
; [exec]
; self := ($struct_set(self, 1, l$_address): $Struct)
; [eval] ($struct_set(self, 1, l$_address): $Struct)
(declare-const self@986@01 $Struct)
(assert (= self@986@01 ($struct_set<$Struct> self@925@01 1 l$_address@919@01)))
; [exec]
; label return
(push) ; 4
(set-option :timeout 10)
(assert (not (not $out_of_gas@934@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not $out_of_gas@934@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 587 | $out_of_gas@934@01 | live]
; [else-branch: 587 | !($out_of_gas@934@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 587 | $out_of_gas@934@01]
(assert $out_of_gas@934@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 588 | False | dead]
; [else-branch: 588 | True | live]
(push) ; 5
; [else-branch: 588 | True]
(pop) ; 5
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 589 | True | live]
; [else-branch: 589 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 589 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 6
; [then-branch: 590 | False | dead]
; [else-branch: 590 | True | live]
(push) ; 7
; [else-branch: 590 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
; [then-branch: 591 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) != $struct_get[Int]($struct_loc[Int](self@925@01, 3)) | dead]
; [else-branch: 591 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == $struct_get[Int]($struct_loc[Int](self@925@01, 3)) | live]
(push) ; 7
; [else-branch: 591 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == $struct_get[Int]($struct_loc[Int](self@925@01, 3))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@987@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 592 | !(0 <= q$a@987@01) | live]
; [else-branch: 592 | 0 <= q$a@987@01 | live]
(push) ; 8
; [then-branch: 592 | !(0 <= q$a@987@01)]
(assert (not (<= 0 q$a@987@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 592 | 0 <= q$a@987@01]
(assert (<= 0 q$a@987@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@987@01) (not (<= 0 q$a@987@01))))
(push) ; 7
; [then-branch: 593 | 0 <= q$a@987@01 && q$a@987@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 593 | !(0 <= q$a@987@01 && q$a@987@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 593 | 0 <= q$a@987@01 && q$a@987@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@987@01)
  (<= q$a@987@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 594 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@987@01) | live]
; [else-branch: 594 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@987@01)) | live]
(push) ; 10
; [then-branch: 594 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@987@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
(pop) ; 10
(push) ; 10
; [else-branch: 594 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@987@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01)))
(push) ; 9
; [then-branch: 595 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@987@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@987@01) | live]
; [else-branch: 595 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@987@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@987@01)) | live]
(push) ; 10
; [then-branch: 595 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@987@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@987@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 11
; [then-branch: 596 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) != $struct_get[Int]($struct_loc[Int](self@925@01, 1)) | live]
; [else-branch: 596 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == $struct_get[Int]($struct_loc[Int](self@925@01, 1)) | live]
(push) ; 12
; [then-branch: 596 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) != $struct_get[Int]($struct_loc[Int](self@925@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@925@01 1)))))
(pop) ; 12
(push) ; 12
; [else-branch: 596 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == $struct_get[Int]($struct_loc[Int](self@925@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@925@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@925@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@925@01 1))))))
(pop) ; 10
(push) ; 10
; [else-branch: 595 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@987@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@987@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@925@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@925@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 593 | !(0 <= q$a@987@01 && q$a@987@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@987@01)
    (<= q$a@987@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@987@01)
    (<= q$a@987@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@987@01)
    (<= q$a@987@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@925@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@925@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@987@01)
      (<= q$a@987@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@987@01)
    (<= q$a@987@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@987@01 Int)) (!
  (and
    (or (<= 0 q$a@987@01) (not (<= 0 q$a@987@01)))
    (=>
      (and
        (<= 0 q$a@987@01)
        (<= q$a@987@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@987@01)
        (<= q$a@987@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@925@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@925@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01)))))
    (or
      (not
        (and
          (<= 0 q$a@987@01)
          (<= q$a@987@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@987@01)
        (<= q$a@987@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1641@17@1641@397-aux|)))
(push) ; 6
(assert (not (forall ((q$a@987@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@987@01)
        (<= q$a@987@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1641@17@1641@397|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@987@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@987@01)
        (<= q$a@987@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@987@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1641@17@1641@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@988@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 597 | !(0 <= q$a@988@01) | live]
; [else-branch: 597 | 0 <= q$a@988@01 | live]
(push) ; 8
; [then-branch: 597 | !(0 <= q$a@988@01)]
(assert (not (<= 0 q$a@988@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 597 | 0 <= q$a@988@01]
(assert (<= 0 q$a@988@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@988@01) (not (<= 0 q$a@988@01))))
(push) ; 7
; [then-branch: 598 | 0 <= q$a@988@01 && q$a@988@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 598 | !(0 <= q$a@988@01 && q$a@988@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 598 | 0 <= q$a@988@01 && q$a@988@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@988@01)
  (<= q$a@988@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 599 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@988@01)) | live]
; [else-branch: 599 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@988@01) | live]
(push) ; 10
; [then-branch: 599 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@988@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 599 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@988@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01))))
(push) ; 9
; [then-branch: 600 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@988@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@988@01)) | live]
; [else-branch: 600 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@988@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@988@01))) | live]
(push) ; 10
; [then-branch: 600 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@988@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@988@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 601 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) != q$a@988@01 | live]
; [else-branch: 601 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == q$a@988@01 | live]
(push) ; 12
; [then-branch: 601 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) != q$a@988@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@988@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 601 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == q$a@988@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@988@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@988@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@988@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 600 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@988@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@988@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@988@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@988@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 598 | !(0 <= q$a@988@01 && q$a@988@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@988@01)
    (<= q$a@988@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@988@01)
    (<= q$a@988@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@988@01)
    (<= q$a@988@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@988@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@988@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@988@01)
      (<= q$a@988@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@988@01)
    (<= q$a@988@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@988@01 Int)) (!
  (and
    (or (<= 0 q$a@988@01) (not (<= 0 q$a@988@01)))
    (=>
      (and
        (<= 0 q$a@988@01)
        (<= q$a@988@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@988@01)
        (<= q$a@988@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@988@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@988@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01))))))
    (or
      (not
        (and
          (<= 0 q$a@988@01)
          (<= q$a@988@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@988@01)
        (<= q$a@988@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1642@17@1642@361-aux|)))
(push) ; 6
(assert (not (forall ((q$a@988@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@988@01)
        (<= q$a@988@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1642@17@1642@361|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@988@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@988@01)
        (<= q$a@988@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@988@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1642@17@1642@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@989@01 $Snap)
(assert (= $t@989@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@935@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@990@01 $Struct)
(assert (=
  self@990@01
  ($struct_set<$Struct> self@925@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@925@01 11))
    l$havoc@935@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 5
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 587 | !($out_of_gas@934@01)]
(assert (not $out_of_gas@934@01))
(pop) ; 4
; [eval] !$out_of_gas
(push) ; 4
(set-option :timeout 10)
(assert (not $out_of_gas@934@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not $out_of_gas@934@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 602 | !($out_of_gas@934@01) | live]
; [else-branch: 602 | $out_of_gas@934@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 602 | !($out_of_gas@934@01)]
(assert (not $out_of_gas@934@01))
; [exec]
; label end
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 603 | True | live]
; [else-branch: 603 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 603 | True]
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@986@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@925@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 604 | $struct_get[Int]($struct_loc[Int](self@986@01, 3)) != $struct_get[Int]($struct_loc[Int](self@925@01, 3)) | dead]
; [else-branch: 604 | $struct_get[Int]($struct_loc[Int](self@986@01, 3)) == $struct_get[Int]($struct_loc[Int](self@925@01, 3)) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 604 | $struct_get[Int]($struct_loc[Int](self@986@01, 3)) == $struct_get[Int]($struct_loc[Int](self@925@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@986@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@925@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@986@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@925@01 3))))
; [exec]
; assert ($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@986@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 605 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) != $struct_get[Int]($struct_loc[Int](self@986@01, 3)) | dead]
; [else-branch: 605 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == $struct_get[Int]($struct_loc[Int](self@986@01, 3)) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 605 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == $struct_get[Int]($struct_loc[Int](self@986@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@991@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 606 | !(0 <= q$a@991@01) | live]
; [else-branch: 606 | 0 <= q$a@991@01 | live]
(push) ; 8
; [then-branch: 606 | !(0 <= q$a@991@01)]
(assert (not (<= 0 q$a@991@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 606 | 0 <= q$a@991@01]
(assert (<= 0 q$a@991@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@991@01) (not (<= 0 q$a@991@01))))
(push) ; 7
; [then-branch: 607 | 0 <= q$a@991@01 && q$a@991@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 607 | !(0 <= q$a@991@01 && q$a@991@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 607 | 0 <= q$a@991@01 && q$a@991@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@991@01)
  (<= q$a@991@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 608 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@991@01) | live]
; [else-branch: 608 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@991@01)) | live]
(push) ; 10
; [then-branch: 608 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@991@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
(pop) ; 10
(push) ; 10
; [else-branch: 608 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@991@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01)))
(push) ; 9
; [then-branch: 609 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@991@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@986@01, 2)), q$a@991@01) | live]
; [else-branch: 609 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@991@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@986@01, 2)), q$a@991@01)) | live]
(push) ; 10
; [then-branch: 609 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@991@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@986@01, 2)), q$a@991@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 11
; [then-branch: 610 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) != $struct_get[Int]($struct_loc[Int](self@986@01, 1)) | live]
; [else-branch: 610 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == $struct_get[Int]($struct_loc[Int](self@986@01, 1)) | live]
(push) ; 12
; [then-branch: 610 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) != $struct_get[Int]($struct_loc[Int](self@986@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@986@01 1)))))
(pop) ; 12
(push) ; 12
; [else-branch: 610 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == $struct_get[Int]($struct_loc[Int](self@986@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@986@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@986@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@986@01 1))))))
(pop) ; 10
(push) ; 10
; [else-branch: 609 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@991@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@986@01, 2)), q$a@991@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@986@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@986@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 607 | !(0 <= q$a@991@01 && q$a@991@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@991@01)
    (<= q$a@991@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@991@01)
    (<= q$a@991@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@991@01)
    (<= q$a@991@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@986@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@986@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@991@01)
      (<= q$a@991@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@991@01)
    (<= q$a@991@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@991@01 Int)) (!
  (and
    (or (<= 0 q$a@991@01) (not (<= 0 q$a@991@01)))
    (=>
      (and
        (<= 0 q$a@991@01)
        (<= q$a@991@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@991@01)
        (<= q$a@991@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@986@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@986@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01)))))
    (or
      (not
        (and
          (<= 0 q$a@991@01)
          (<= q$a@991@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@991@01)
        (<= q$a@991@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1636@13@1636@393-aux|)))
(assert (forall ((q$a@991@01 Int)) (!
  (and
    (or (<= 0 q$a@991@01) (not (<= 0 q$a@991@01)))
    (=>
      (and
        (<= 0 q$a@991@01)
        (<= q$a@991@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@991@01)
        (<= q$a@991@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@986@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@986@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01)))))
    (or
      (not
        (and
          (<= 0 q$a@991@01)
          (<= q$a@991@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@991@01)
        (<= q$a@991@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1636@13@1636@393-aux|)))
(push) ; 6
(assert (not (forall ((q$a@991@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@991@01)
        (<= q$a@991@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1636@13@1636@393|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@991@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@991@01)
        (<= q$a@991@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@991@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@991@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1636@13@1636@393|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@992@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 611 | !(0 <= q$a@992@01) | live]
; [else-branch: 611 | 0 <= q$a@992@01 | live]
(push) ; 8
; [then-branch: 611 | !(0 <= q$a@992@01)]
(assert (not (<= 0 q$a@992@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 611 | 0 <= q$a@992@01]
(assert (<= 0 q$a@992@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@992@01) (not (<= 0 q$a@992@01))))
(push) ; 7
; [then-branch: 612 | 0 <= q$a@992@01 && q$a@992@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 612 | !(0 <= q$a@992@01 && q$a@992@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 612 | 0 <= q$a@992@01 && q$a@992@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@992@01)
  (<= q$a@992@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 613 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@992@01)) | live]
; [else-branch: 613 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@992@01) | live]
(push) ; 10
; [then-branch: 613 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@992@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 613 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@992@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01))))
(push) ; 9
; [then-branch: 614 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@992@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@986@01, 2)), q$a@992@01)) | live]
; [else-branch: 614 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@992@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@986@01, 2)), q$a@992@01))) | live]
(push) ; 10
; [then-branch: 614 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@992@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@986@01, 2)), q$a@992@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 615 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) != q$a@992@01 | live]
; [else-branch: 615 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == q$a@992@01 | live]
(push) ; 12
; [then-branch: 615 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) != q$a@992@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@992@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 615 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) == q$a@992@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@992@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@992@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@992@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 614 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@925@01, 2)), q$a@992@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@986@01, 2)), q$a@992@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@992@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@992@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 612 | !(0 <= q$a@992@01 && q$a@992@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@992@01)
    (<= q$a@992@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@992@01)
    (<= q$a@992@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@992@01)
    (<= q$a@992@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@992@01)
          (not (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@992@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@992@01)
      (<= q$a@992@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@992@01)
    (<= q$a@992@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@992@01 Int)) (!
  (and
    (or (<= 0 q$a@992@01) (not (<= 0 q$a@992@01)))
    (=>
      (and
        (<= 0 q$a@992@01)
        (<= q$a@992@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@992@01)
        (<= q$a@992@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@992@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@992@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01))))))
    (or
      (not
        (and
          (<= 0 q$a@992@01)
          (<= q$a@992@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@992@01)
        (<= q$a@992@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1637@13@1637@357-aux|)))
(assert (forall ((q$a@992@01 Int)) (!
  (and
    (or (<= 0 q$a@992@01) (not (<= 0 q$a@992@01)))
    (=>
      (and
        (<= 0 q$a@992@01)
        (<= q$a@992@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@992@01)
        (<= q$a@992@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@992@01)
              (not
                (= ($struct_get<Int> ($struct_loc<Int> msg@921@01 0)) q$a@992@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01))))))
    (or
      (not
        (and
          (<= 0 q$a@992@01)
          (<= q$a@992@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@992@01)
        (<= q$a@992@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1637@13@1637@357-aux|)))
(push) ; 6
(assert (not (forall ((q$a@992@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@992@01)
        (<= q$a@992@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1637@13@1637@357|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@992@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@992@01)
        (<= q$a@992@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@925@01 2)) q$a@992@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@986@01 2)) q$a@992@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1637@13@1637@357|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@993@01 $Snap)
(assert (= $t@993@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@935@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@994@01 $Struct)
(assert (=
  self@994@01
  ($struct_set<$Struct> self@986@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@986@01 11))
    l$havoc@935@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 5
; [eval] !$succ
; [then-branch: 616 | False | dead]
; [else-branch: 616 | True | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 616 | True]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 602 | $out_of_gas@934@01]
(assert $out_of_gas@934@01)
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 586 | $struct_get[Int]($struct_loc[Int](msg@921@01, 0)) != $struct_get[Int]($struct_loc[Int](self@925@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@921@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@925@01 3)))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$setMinterAddress ----------
(declare-const l$_new_issuer@995@01 Int)
(declare-const $succ@996@01 Bool)
(declare-const l$_new_issuer@997@01 Int)
(declare-const $succ@998@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@999@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@1000@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@1001@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@1002@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@1003@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@1004@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@1005@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@1006@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@1007@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@1008@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@1009@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@1010@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@1011@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@1012@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@1013@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@1014@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1015@01 $Snap)
(assert (= $t@1015@01 ($Snap.combine ($Snap.first $t@1015@01) ($Snap.second $t@1015@01))))
(assert (= ($Snap.first $t@1015@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1003@01 0))))
(assert (= ($Snap.second $t@1015@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1016@01 $Snap)
(assert (= $t@1016@01 ($Snap.combine ($Snap.first $t@1016@01) ($Snap.second $t@1016@01))))
(assert (= ($Snap.first $t@1016@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1003@01 1))))
(assert (= ($Snap.second $t@1016@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1017@01 $Snap)
(assert (= $t@1017@01 ($Snap.combine ($Snap.first $t@1017@01) ($Snap.second $t@1017@01))))
(assert (= ($Snap.first $t@1017@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1003@01 3))))
(assert (= ($Snap.second $t@1017@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
(declare-const $t@1018@01 $Snap)
(assert (= $t@1018@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 4)): Seq[Int])
; [eval] $struct_loc(self, 4)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1003@01 4))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
(declare-const $t@1019@01 $Snap)
(assert (= $t@1019@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 5)): Seq[Int])
; [eval] $struct_loc(self, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1003@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1020@01 $Snap)
(assert (= $t@1020@01 ($Snap.combine ($Snap.first $t@1020@01) ($Snap.second $t@1020@01))))
(assert (= ($Snap.first $t@1020@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1003@01 6))))
(assert (= ($Snap.second $t@1020@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1021@01 $Snap)
(assert (= $t@1021@01 ($Snap.combine ($Snap.first $t@1021@01) ($Snap.second $t@1021@01))))
(assert (= ($Snap.first $t@1021@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1003@01 7))))
(assert (= ($Snap.second $t@1021@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1022@01 $Snap)
(assert (= $t@1022@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@1023@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 617 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1003@01, 8)), $q3@1023@01)) | live]
; [else-branch: 617 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1003@01, 8)), $q3@1023@01) | live]
(push) ; 5
; [then-branch: 617 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1003@01, 8)), $q3@1023@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 8)) $q3@1023@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 617 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1003@01, 8)), $q3@1023@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 8)) $q3@1023@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 8)) $q3@1023@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 8)) $q3@1023@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1023@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 8)) $q3@1023@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 8)) $q3@1023@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 8)) $q3@1023@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1676@11@1676@345-aux|)))
(assert (forall (($q3@1023@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 8)) $q3@1023@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 8)) $q3@1023@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 8)) $q3@1023@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1676@11@1676@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@1024@01 $Snap)
(assert (= $t@1024@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@1025@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1025@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 8)) $q3@1025@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 8)) $q3@1025@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1677@11@1677@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@1026@01 $Snap)
(assert (= $t@1026@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@1027@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@1028@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(push) ; 5
; [then-branch: 618 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1003@01, 9)), $q4@1027@01), $q5@1028@01)) | live]
; [else-branch: 618 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1003@01, 9)), $q4@1027@01), $q5@1028@01) | live]
(push) ; 6
; [then-branch: 618 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1003@01, 9)), $q4@1027@01), $q5@1028@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1003@01 9)) $q4@1027@01) $q5@1028@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 618 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1003@01, 9)), $q4@1027@01), $q5@1028@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1003@01 9)) $q4@1027@01) $q5@1028@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1003@01 9)) $q4@1027@01) $q5@1028@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1003@01 9)) $q4@1027@01) $q5@1028@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@1028@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1003@01 9)) $q4@1027@01) $q5@1028@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1003@01 9)) $q4@1027@01) $q5@1028@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1003@01 9)) $q4@1027@01) $q5@1028@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1678@131@1678@597-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1027@01 Int)) (!
  (forall (($q5@1028@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1003@01 9)) $q4@1027@01) $q5@1028@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1003@01 9)) $q4@1027@01) $q5@1028@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1003@01 9)) $q4@1027@01) $q5@1028@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1678@131@1678@597-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1003@01 9)) $q4@1027@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1678@11@1678@598-aux|)))
(assert (forall (($q4@1027@01 Int)) (!
  (forall (($q5@1028@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1003@01 9)) $q4@1027@01) $q5@1028@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1003@01 9)) $q4@1027@01) $q5@1028@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1003@01 9)) $q4@1027@01) $q5@1028@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1678@131@1678@597|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1003@01 9)) $q4@1027@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1678@11@1678@598|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@1029@01 $Snap)
(assert (= $t@1029@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@1030@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@1031@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1030@01 Int)) (!
  (forall (($q5@1031@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1003@01 9)) $q4@1030@01) $q5@1031@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1003@01 9)) $q4@1030@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1003@01 9)) $q4@1030@01) $q5@1031@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1679@131@1679@505|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1003@01 9)) $q4@1030@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1679@11@1679@506|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 10)): Int) &&
;   ($struct_get($struct_loc(self, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1032@01 $Snap)
(assert (= $t@1032@01 ($Snap.combine ($Snap.first $t@1032@01) ($Snap.second $t@1032@01))))
(assert (= ($Snap.first $t@1032@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 10)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1003@01 10))))
(assert (= ($Snap.second $t@1032@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 11)): Int) &&
;   ($struct_get($struct_loc(self, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1033@01 $Snap)
(assert (= $t@1033@01 ($Snap.combine ($Snap.first $t@1033@01) ($Snap.second $t@1033@01))))
(assert (= ($Snap.first $t@1033@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 11)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1003@01 11))))
(assert (= ($Snap.second $t@1033@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 12)): Int) &&
;   ($struct_get($struct_loc(self, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1034@01 $Snap)
(assert (= $t@1034@01 ($Snap.combine ($Snap.first $t@1034@01) ($Snap.second $t@1034@01))))
(assert (= ($Snap.first $t@1034@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 12))))
(assert (= ($Snap.second $t@1034@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1035@01 $Snap)
(assert (= $t@1035@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@1036@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(push) ; 4
; [then-branch: 619 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1003@01, 14)), $q6@1036@01)) | live]
; [else-branch: 619 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1003@01, 14)), $q6@1036@01) | live]
(push) ; 5
; [then-branch: 619 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1003@01, 14)), $q6@1036@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 14)) $q6@1036@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 619 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1003@01, 14)), $q6@1036@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 14)) $q6@1036@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 14)) $q6@1036@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 14)) $q6@1036@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1036@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 14)) $q6@1036@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 14)) $q6@1036@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 14)) $q6@1036@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1683@11@1683@348-aux|)))
(assert (forall (($q6@1036@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 14)) $q6@1036@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 14)) $q6@1036@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 14)) $q6@1036@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1683@11@1683@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $t@1037@01 $Snap)
(assert (= $t@1037@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $q6@1038@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1038@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 14)) $q6@1038@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 14)) $q6@1038@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1684@11@1684@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1039@01 $Snap)
(assert (= $t@1039@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@1040@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(push) ; 4
; [then-branch: 620 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1003@01, 15)), $q7@1040@01)) | live]
; [else-branch: 620 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1003@01, 15)), $q7@1040@01) | live]
(push) ; 5
; [then-branch: 620 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1003@01, 15)), $q7@1040@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 15)) $q7@1040@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 620 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1003@01, 15)), $q7@1040@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 15)) $q7@1040@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 15)) $q7@1040@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 15)) $q7@1040@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1040@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 15)) $q7@1040@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 15)) $q7@1040@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 15)) $q7@1040@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1685@11@1685@348-aux|)))
(assert (forall (($q7@1040@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 15)) $q7@1040@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 15)) $q7@1040@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 15)) $q7@1040@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1685@11@1685@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $t@1041@01 $Snap)
(assert (= $t@1041@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $q7@1042@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
; [eval] ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1042@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 15)) $q7@1042@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1003@01 15)) $q7@1042@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1686@11@1686@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@1043@01 $Snap)
(assert (= $t@1043@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1044@01 $Snap)
(assert (= $t@1044@01 ($Snap.combine ($Snap.first $t@1044@01) ($Snap.second $t@1044@01))))
(assert (= ($Snap.first $t@1044@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@1044@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$_new_issuer &&
;   l$_new_issuer <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1045@01 $Snap)
(assert (= $t@1045@01 ($Snap.combine ($Snap.first $t@1045@01) ($Snap.second $t@1045@01))))
(assert (= ($Snap.first $t@1045@01) $Snap.unit))
; [eval] 0 <= l$_new_issuer
(assert (<= 0 l$_new_issuer@997@01))
(assert (= ($Snap.second $t@1045@01) $Snap.unit))
; [eval] l$_new_issuer <= 1461501637330902918203684832716283019655932542975
(assert (<= l$_new_issuer@997@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1046@01 $Snap)
(assert (= $t@1046@01 ($Snap.combine ($Snap.first $t@1046@01) ($Snap.second $t@1046@01))))
(assert (= ($Snap.first $t@1046@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1000@01 0))))
(assert (= ($Snap.second $t@1046@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1000@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1047@01 $Snap)
(assert (= $t@1047@01 ($Snap.combine ($Snap.first $t@1047@01) ($Snap.second $t@1047@01))))
(assert (= ($Snap.first $t@1047@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1000@01 1))))
(assert (= ($Snap.second $t@1047@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1000@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1048@01 $Snap)
(assert (= $t@1048@01 ($Snap.combine ($Snap.first $t@1048@01) ($Snap.second $t@1048@01))))
(assert (= ($Snap.first $t@1048@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1000@01 2))))
(assert (= ($Snap.second $t@1048@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1000@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@1049@01 $Snap)
(assert (= $t@1049@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@1000@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1050@01 $Snap)
(assert (= $t@1050@01 ($Snap.combine ($Snap.first $t@1050@01) ($Snap.second $t@1050@01))))
(assert (= ($Snap.first $t@1050@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1000@01 4))))
(assert (= ($Snap.second $t@1050@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1000@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@1051@01 $Snap)
(assert (= $t@1051@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@1000@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1052@01 $Snap)
(assert (= $t@1052@01 ($Snap.combine ($Snap.first $t@1052@01) ($Snap.second $t@1052@01))))
(assert (= ($Snap.first $t@1052@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))))
(assert (= ($Snap.second $t@1052@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1053@01 $Snap)
(assert (= $t@1053@01 ($Snap.combine ($Snap.first $t@1053@01) ($Snap.second $t@1053@01))))
(assert (= ($Snap.first $t@1053@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@999@01 1))))
(assert (= ($Snap.second $t@1053@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@999@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1054@01 $Snap)
(assert (= $t@1054@01 ($Snap.combine ($Snap.first $t@1054@01) ($Snap.second $t@1054@01))))
(assert (= ($Snap.first $t@1054@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@999@01 2))))
(assert (= ($Snap.second $t@1054@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@999@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@1055@01 $Snap)
(assert (= $t@1055@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@999@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@1056@01 $Snap)
(assert (= $t@1056@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $t@1057@01 $Snap)
(assert (= $t@1057@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $a@1058@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@1059@01 $Snap)
(assert (= $t@1059@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1003@01 1))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 621 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1003@01, 1)) | live]
; [else-branch: 621 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1003@01, 1)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 621 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1003@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 622 | False | dead]
; [else-branch: 622 | True | live]
(push) ; 4
; [else-branch: 622 | True]
(pop) ; 4
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 623 | True | live]
; [else-branch: 623 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 623 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
; [then-branch: 624 | False | dead]
; [else-branch: 624 | True | live]
(push) ; 6
; [else-branch: 624 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1003@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 625 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1003@01, 3)) | live]
; [else-branch: 625 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1003@01, 3)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 625 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1003@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1003@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
; [then-branch: 626 | False | live]
; [else-branch: 626 | True | live]
(push) ; 8
; [then-branch: 626 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 626 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 625 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1003@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1003@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1003@01 3))))))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1060@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 627 | !(0 <= q$a@1060@01) | live]
; [else-branch: 627 | 0 <= q$a@1060@01 | live]
(push) ; 7
; [then-branch: 627 | !(0 <= q$a@1060@01)]
(assert (not (<= 0 q$a@1060@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 627 | 0 <= q$a@1060@01]
(assert (<= 0 q$a@1060@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1060@01) (not (<= 0 q$a@1060@01))))
(push) ; 6
; [then-branch: 628 | 0 <= q$a@1060@01 && q$a@1060@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 628 | !(0 <= q$a@1060@01 && q$a@1060@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 628 | 0 <= q$a@1060@01 && q$a@1060@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1060@01)
  (<= q$a@1060@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 629 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1060@01) | live]
; [else-branch: 629 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1060@01)) | live]
(push) ; 9
; [then-branch: 629 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1060@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
(pop) ; 9
(push) ; 9
; [else-branch: 629 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1060@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01)))
(push) ; 8
; [then-branch: 630 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1060@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1060@01) | live]
; [else-branch: 630 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1060@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1060@01)) | live]
(push) ; 9
; [then-branch: 630 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1060@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1060@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 10
; [then-branch: 631 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1003@01, 1)) | live]
; [else-branch: 631 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1003@01, 1)) | live]
(push) ; 11
; [then-branch: 631 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1003@01, 1))]
(pop) ; 11
(push) ; 11
; [else-branch: 631 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1003@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1003@01 1))))))
(pop) ; 9
(push) ; 9
; [else-branch: 630 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1060@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1060@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1003@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 628 | !(0 <= q$a@1060@01 && q$a@1060@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1060@01)
    (<= q$a@1060@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1060@01)
    (<= q$a@1060@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1060@01)
    (<= q$a@1060@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1060@01)
      (<= q$a@1060@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1060@01)
    (<= q$a@1060@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1060@01 Int)) (!
  (and
    (or (<= 0 q$a@1060@01) (not (<= 0 q$a@1060@01)))
    (=>
      (and
        (<= 0 q$a@1060@01)
        (<= q$a@1060@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1060@01)
        (<= q$a@1060@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1060@01)
          (<= q$a@1060@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1060@01)
        (<= q$a@1060@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1747@17@1747@397-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1060@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1060@01)
        (<= q$a@1060@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1747@17@1747@397|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1060@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1060@01)
        (<= q$a@1060@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1060@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1747@17@1747@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1061@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 632 | !(0 <= q$a@1061@01) | live]
; [else-branch: 632 | 0 <= q$a@1061@01 | live]
(push) ; 7
; [then-branch: 632 | !(0 <= q$a@1061@01)]
(assert (not (<= 0 q$a@1061@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 632 | 0 <= q$a@1061@01]
(assert (<= 0 q$a@1061@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1061@01) (not (<= 0 q$a@1061@01))))
(push) ; 6
; [then-branch: 633 | 0 <= q$a@1061@01 && q$a@1061@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 633 | !(0 <= q$a@1061@01 && q$a@1061@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 633 | 0 <= q$a@1061@01 && q$a@1061@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1061@01)
  (<= q$a@1061@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 634 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1061@01)) | live]
; [else-branch: 634 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1061@01) | live]
(push) ; 9
; [then-branch: 634 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1061@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 634 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1061@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01))))
(push) ; 8
; [then-branch: 635 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1061@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1061@01)) | live]
; [else-branch: 635 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1061@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1061@01))) | live]
(push) ; 9
; [then-branch: 635 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1061@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1061@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 636 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != q$a@1061@01 | live]
; [else-branch: 636 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == q$a@1061@01 | live]
(push) ; 11
; [then-branch: 636 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != q$a@1061@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1061@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 636 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == q$a@1061@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1061@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1061@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1061@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 635 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1061@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1061@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1061@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1061@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 633 | !(0 <= q$a@1061@01 && q$a@1061@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1061@01)
    (<= q$a@1061@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1061@01)
    (<= q$a@1061@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1061@01)
    (<= q$a@1061@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1061@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1061@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1061@01)
      (<= q$a@1061@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1061@01)
    (<= q$a@1061@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1061@01 Int)) (!
  (and
    (or (<= 0 q$a@1061@01) (not (<= 0 q$a@1061@01)))
    (=>
      (and
        (<= 0 q$a@1061@01)
        (<= q$a@1061@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1061@01)
        (<= q$a@1061@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1061@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
                  q$a@1061@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1061@01)
          (<= q$a@1061@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1061@01)
        (<= q$a@1061@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1748@17@1748@361-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1061@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1061@01)
        (<= q$a@1061@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1748@17@1748@361|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1061@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1061@01)
        (<= q$a@1061@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1061@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1748@17@1748@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@1062@01 $Snap)
(assert (= $t@1062@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@1013@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1063@01 $Struct)
(assert (=
  self@1063@01
  ($struct_set<$Struct> self@1003@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1003@01 11))
    l$havoc@1013@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 4
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 621 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1003@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 1))))
(pop) ; 3
; [eval] !!(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int))
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1003@01 1))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 637 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1003@01, 1)) | live]
; [else-branch: 637 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1003@01, 1)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 637 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1003@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 1))))
; [exec]
; self := ($struct_set(self, 2, ($map_set(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]),
;   l$_new_issuer, true): $Map[Int, Bool])): $Struct)
; [eval] ($struct_set(self, 2, ($map_set(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), l$_new_issuer, true): $Map[Int, Bool])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), l$_new_issuer, true): $Map[Int, Bool])
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(declare-const self@1064@01 $Struct)
(assert (=
  self@1064@01
  ($struct_set<$Struct> self@1003@01 2 ($map_set<$Map<Int~_Bool>> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) l$_new_issuer@997@01 true))))
; [exec]
; inhale acc(e$OpenMinter(l$_new_issuer), write)
(declare-const $t@1065@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label return
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not $out_of_gas@1012@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not $out_of_gas@1012@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 638 | $out_of_gas@1012@01 | live]
; [else-branch: 638 | !($out_of_gas@1012@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 638 | $out_of_gas@1012@01]
(assert $out_of_gas@1012@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 639 | False | dead]
; [else-branch: 639 | True | live]
(push) ; 5
; [else-branch: 639 | True]
(pop) ; 5
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 640 | True | live]
; [else-branch: 640 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 640 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 6
; [then-branch: 641 | False | dead]
; [else-branch: 641 | True | live]
(push) ; 7
; [else-branch: 641 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1003@01 3))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 642 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1003@01, 3)) | live]
; [else-branch: 642 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1003@01, 3)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 642 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1003@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1003@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 8
; [then-branch: 643 | False | live]
; [else-branch: 643 | True | live]
(push) ; 9
; [then-branch: 643 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 643 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 642 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1003@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1003@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1003@01 3))))))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1066@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 644 | !(0 <= q$a@1066@01) | live]
; [else-branch: 644 | 0 <= q$a@1066@01 | live]
(push) ; 8
; [then-branch: 644 | !(0 <= q$a@1066@01)]
(assert (not (<= 0 q$a@1066@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 644 | 0 <= q$a@1066@01]
(assert (<= 0 q$a@1066@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1066@01) (not (<= 0 q$a@1066@01))))
(push) ; 7
; [then-branch: 645 | 0 <= q$a@1066@01 && q$a@1066@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 645 | !(0 <= q$a@1066@01 && q$a@1066@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 645 | 0 <= q$a@1066@01 && q$a@1066@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1066@01)
  (<= q$a@1066@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 646 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1066@01) | live]
; [else-branch: 646 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1066@01)) | live]
(push) ; 10
; [then-branch: 646 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1066@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
(pop) ; 10
(push) ; 10
; [else-branch: 646 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1066@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01)))
(push) ; 9
; [then-branch: 647 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1066@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1066@01) | live]
; [else-branch: 647 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1066@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1066@01)) | live]
(push) ; 10
; [then-branch: 647 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1066@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1066@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 11
; [then-branch: 648 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1003@01, 1)) | live]
; [else-branch: 648 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1003@01, 1)) | live]
(push) ; 12
; [then-branch: 648 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1003@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))))
(pop) ; 12
(push) ; 12
; [else-branch: 648 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1003@01, 1))]
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1003@01 1))))))
(pop) ; 10
(push) ; 10
; [else-branch: 647 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1066@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1066@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1003@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 645 | !(0 <= q$a@1066@01 && q$a@1066@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1066@01)
    (<= q$a@1066@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1066@01)
    (<= q$a@1066@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1066@01)
    (<= q$a@1066@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1066@01)
      (<= q$a@1066@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1066@01)
    (<= q$a@1066@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1066@01 Int)) (!
  (and
    (or (<= 0 q$a@1066@01) (not (<= 0 q$a@1066@01)))
    (=>
      (and
        (<= 0 q$a@1066@01)
        (<= q$a@1066@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1066@01)
        (<= q$a@1066@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1066@01)
          (<= q$a@1066@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1066@01)
        (<= q$a@1066@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1747@17@1747@397-aux|)))
(push) ; 6
(assert (not (forall ((q$a@1066@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1066@01)
        (<= q$a@1066@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1747@17@1747@397|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1066@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1066@01)
        (<= q$a@1066@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1066@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1747@17@1747@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1067@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 649 | !(0 <= q$a@1067@01) | live]
; [else-branch: 649 | 0 <= q$a@1067@01 | live]
(push) ; 8
; [then-branch: 649 | !(0 <= q$a@1067@01)]
(assert (not (<= 0 q$a@1067@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 649 | 0 <= q$a@1067@01]
(assert (<= 0 q$a@1067@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1067@01) (not (<= 0 q$a@1067@01))))
(push) ; 7
; [then-branch: 650 | 0 <= q$a@1067@01 && q$a@1067@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 650 | !(0 <= q$a@1067@01 && q$a@1067@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 650 | 0 <= q$a@1067@01 && q$a@1067@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1067@01)
  (<= q$a@1067@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 651 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1067@01)) | live]
; [else-branch: 651 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1067@01) | live]
(push) ; 10
; [then-branch: 651 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1067@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 651 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1067@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01))))
(push) ; 9
; [then-branch: 652 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1067@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1067@01)) | live]
; [else-branch: 652 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1067@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1067@01))) | live]
(push) ; 10
; [then-branch: 652 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1067@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1067@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 653 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != q$a@1067@01 | live]
; [else-branch: 653 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == q$a@1067@01 | live]
(push) ; 12
; [then-branch: 653 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != q$a@1067@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1067@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 653 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == q$a@1067@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1067@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1067@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1067@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 652 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1067@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1067@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1067@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1067@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 650 | !(0 <= q$a@1067@01 && q$a@1067@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1067@01)
    (<= q$a@1067@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1067@01)
    (<= q$a@1067@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1067@01)
    (<= q$a@1067@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1067@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1067@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1067@01)
      (<= q$a@1067@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1067@01)
    (<= q$a@1067@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1067@01 Int)) (!
  (and
    (or (<= 0 q$a@1067@01) (not (<= 0 q$a@1067@01)))
    (=>
      (and
        (<= 0 q$a@1067@01)
        (<= q$a@1067@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1067@01)
        (<= q$a@1067@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1067@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
                  q$a@1067@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1067@01)
          (<= q$a@1067@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1067@01)
        (<= q$a@1067@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1748@17@1748@361-aux|)))
(push) ; 6
(assert (not (forall ((q$a@1067@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1067@01)
        (<= q$a@1067@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1748@17@1748@361|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1067@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1067@01)
        (<= q$a@1067@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1067@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1748@17@1748@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@1068@01 $Snap)
(assert (= $t@1068@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@1013@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1069@01 $Struct)
(assert (=
  self@1069@01
  ($struct_set<$Struct> self@1003@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1003@01 11))
    l$havoc@1013@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 5
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 638 | !($out_of_gas@1012@01)]
(assert (not $out_of_gas@1012@01))
(pop) ; 4
; [eval] !$out_of_gas
(push) ; 4
(set-option :timeout 10)
(assert (not $out_of_gas@1012@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not $out_of_gas@1012@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 654 | !($out_of_gas@1012@01) | live]
; [else-branch: 654 | $out_of_gas@1012@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 654 | !($out_of_gas@1012@01)]
(assert (not $out_of_gas@1012@01))
; [exec]
; label end
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 655 | True | live]
; [else-branch: 655 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 655 | True]
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1064@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 656 | $struct_get[Int]($struct_loc[Int](self@1064@01, 3)) != $struct_get[Int]($struct_loc[Int](self@1003@01, 3)) | dead]
; [else-branch: 656 | $struct_get[Int]($struct_loc[Int](self@1064@01, 3)) == $struct_get[Int]($struct_loc[Int](self@1003@01, 3)) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 656 | $struct_get[Int]($struct_loc[Int](self@1064@01, 3)) == $struct_get[Int]($struct_loc[Int](self@1003@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1064@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1064@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 3))))
; [exec]
; assert ($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1064@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1064@01 3))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 657 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1064@01, 3)) | live]
; [else-branch: 657 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1064@01, 3)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 657 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1064@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1064@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 8
; [then-branch: 658 | $struct_get[Int]($struct_loc[Int](self@1064@01, 1)) != $struct_get[Int]($struct_loc[Int](self@1003@01, 1)) | live]
; [else-branch: 658 | $struct_get[Int]($struct_loc[Int](self@1064@01, 1)) == $struct_get[Int]($struct_loc[Int](self@1003@01, 1)) | live]
(push) ; 9
; [then-branch: 658 | $struct_get[Int]($struct_loc[Int](self@1064@01, 1)) != $struct_get[Int]($struct_loc[Int](self@1003@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@1064@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))))
(pop) ; 9
(push) ; 9
; [else-branch: 658 | $struct_get[Int]($struct_loc[Int](self@1064@01, 1)) == $struct_get[Int]($struct_loc[Int](self@1003@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1064@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@1003@01 1))))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@1064@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1064@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@1003@01 1))))))
(pop) ; 7
(push) ; 7
; [else-branch: 657 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1064@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1064@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1064@01 3))))
  (and
    (not
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1064@01 3))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> self@1064@01 1))
        ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> self@1064@01 1))
          ($struct_get<Int> ($struct_loc<Int> self@1003@01 1))))))))
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1064@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1064@01 3))))))
(push) ; 6
(assert (not (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1064@01 3))))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1064@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1064@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1003@01 0)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1064@01 3))))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1064@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1064@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1003@01 0))))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1070@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 659 | !(0 <= q$a@1070@01) | live]
; [else-branch: 659 | 0 <= q$a@1070@01 | live]
(push) ; 8
; [then-branch: 659 | !(0 <= q$a@1070@01)]
(assert (not (<= 0 q$a@1070@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 659 | 0 <= q$a@1070@01]
(assert (<= 0 q$a@1070@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1070@01) (not (<= 0 q$a@1070@01))))
(push) ; 7
; [then-branch: 660 | 0 <= q$a@1070@01 && q$a@1070@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 660 | !(0 <= q$a@1070@01 && q$a@1070@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 660 | 0 <= q$a@1070@01 && q$a@1070@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1070@01)
  (<= q$a@1070@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 661 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1070@01) | live]
; [else-branch: 661 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1070@01)) | live]
(push) ; 10
; [then-branch: 661 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1070@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
(pop) ; 10
(push) ; 10
; [else-branch: 661 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1070@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01)))
(push) ; 9
; [then-branch: 662 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1070@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1064@01, 2)), q$a@1070@01) | live]
; [else-branch: 662 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1070@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1064@01, 2)), q$a@1070@01)) | live]
(push) ; 10
; [then-branch: 662 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1070@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1064@01, 2)), q$a@1070@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 11
; [then-branch: 663 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1064@01, 1)) | live]
; [else-branch: 663 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1064@01, 1)) | live]
(push) ; 12
; [then-branch: 663 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1064@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1064@01 1)))))
(pop) ; 12
(push) ; 12
; [else-branch: 663 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1064@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1064@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1064@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1064@01 1))))))
(pop) ; 10
(push) ; 10
; [else-branch: 662 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1070@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1064@01, 2)), q$a@1070@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1064@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1064@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 660 | !(0 <= q$a@1070@01 && q$a@1070@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1070@01)
    (<= q$a@1070@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1070@01)
    (<= q$a@1070@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1070@01)
    (<= q$a@1070@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1064@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1064@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1070@01)
      (<= q$a@1070@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1070@01)
    (<= q$a@1070@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1070@01 Int)) (!
  (and
    (or (<= 0 q$a@1070@01) (not (<= 0 q$a@1070@01)))
    (=>
      (and
        (<= 0 q$a@1070@01)
        (<= q$a@1070@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1070@01)
        (<= q$a@1070@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1064@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1064@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1070@01)
          (<= q$a@1070@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1070@01)
        (<= q$a@1070@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1742@13@1742@393-aux|)))
(assert (forall ((q$a@1070@01 Int)) (!
  (and
    (or (<= 0 q$a@1070@01) (not (<= 0 q$a@1070@01)))
    (=>
      (and
        (<= 0 q$a@1070@01)
        (<= q$a@1070@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1070@01)
        (<= q$a@1070@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1064@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1064@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1070@01)
          (<= q$a@1070@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1070@01)
        (<= q$a@1070@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1742@13@1742@393-aux|)))
(push) ; 6
(assert (not (forall ((q$a@1070@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1070@01)
        (<= q$a@1070@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1064@01 1)))
      (=
        (ite (= q$a@1070@01 l$_new_issuer@997@01) $Perm.Write $Perm.No)
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1742@13@1742@393|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1070@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1070@01)
        (<= q$a@1070@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01)))
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1064@01 1)))
      (=
        (ite (= q$a@1070@01 l$_new_issuer@997@01) $Perm.Write $Perm.No)
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1070@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1070@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1742@13@1742@393|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1071@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 664 | !(0 <= q$a@1071@01) | live]
; [else-branch: 664 | 0 <= q$a@1071@01 | live]
(push) ; 8
; [then-branch: 664 | !(0 <= q$a@1071@01)]
(assert (not (<= 0 q$a@1071@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 664 | 0 <= q$a@1071@01]
(assert (<= 0 q$a@1071@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1071@01) (not (<= 0 q$a@1071@01))))
(push) ; 7
; [then-branch: 665 | 0 <= q$a@1071@01 && q$a@1071@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 665 | !(0 <= q$a@1071@01 && q$a@1071@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 665 | 0 <= q$a@1071@01 && q$a@1071@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1071@01)
  (<= q$a@1071@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 666 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1071@01)) | live]
; [else-branch: 666 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1071@01) | live]
(push) ; 10
; [then-branch: 666 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1071@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 666 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1071@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01))))
(push) ; 9
; [then-branch: 667 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1071@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1064@01, 2)), q$a@1071@01)) | live]
; [else-branch: 667 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1071@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1064@01, 2)), q$a@1071@01))) | live]
(push) ; 10
; [then-branch: 667 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1071@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1064@01, 2)), q$a@1071@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 668 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != q$a@1071@01 | live]
; [else-branch: 668 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == q$a@1071@01 | live]
(push) ; 12
; [then-branch: 668 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != q$a@1071@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1071@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 668 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) == q$a@1071@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1071@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1071@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1071@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 667 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1003@01, 2)), q$a@1071@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1064@01, 2)), q$a@1071@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1071@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1071@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 665 | !(0 <= q$a@1071@01 && q$a@1071@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1071@01)
    (<= q$a@1071@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1071@01)
    (<= q$a@1071@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1071@01)
    (<= q$a@1071@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1071@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1071@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1071@01)
      (<= q$a@1071@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1071@01)
    (<= q$a@1071@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1071@01 Int)) (!
  (and
    (or (<= 0 q$a@1071@01) (not (<= 0 q$a@1071@01)))
    (=>
      (and
        (<= 0 q$a@1071@01)
        (<= q$a@1071@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1071@01)
        (<= q$a@1071@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1071@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
                  q$a@1071@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1071@01)
          (<= q$a@1071@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1071@01)
        (<= q$a@1071@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1743@13@1743@357-aux|)))
(assert (forall ((q$a@1071@01 Int)) (!
  (and
    (or (<= 0 q$a@1071@01) (not (<= 0 q$a@1071@01)))
    (=>
      (and
        (<= 0 q$a@1071@01)
        (<= q$a@1071@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1071@01)
        (<= q$a@1071@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@999@01 0)) q$a@1071@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
                  q$a@1071@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1071@01)
          (<= q$a@1071@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1071@01)
        (<= q$a@1071@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1743@13@1743@357-aux|)))
(push) ; 6
(assert (not (forall ((q$a@1071@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1071@01)
        (<= q$a@1071@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1743@13@1743@357|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1071@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1071@01)
        (<= q$a@1071@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1003@01 2)) q$a@1071@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1064@01 2)) q$a@1071@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1743@13@1743@357|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@1072@01 $Snap)
(assert (= $t@1072@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@1013@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1073@01 $Struct)
(assert (=
  self@1073@01
  ($struct_set<$Struct> self@1064@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1064@01 11))
    l$havoc@1013@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 5
; [eval] !$succ
; [then-branch: 669 | False | dead]
; [else-branch: 669 | True | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 669 | True]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 654 | $out_of_gas@1012@01]
(assert $out_of_gas@1012@01)
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 637 | $struct_get[Int]($struct_loc[Int](msg@999@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1003@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@999@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1003@01 1)))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$removeMinterAddress ----------
(declare-const $succ@1074@01 Bool)
(declare-const $succ@1075@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@1076@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@1077@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@1078@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@1079@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@1080@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@1081@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@1082@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@1083@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@1084@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@1085@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@1086@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@1087@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@1088@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@1089@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@1090@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@1091@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1092@01 $Snap)
(assert (= $t@1092@01 ($Snap.combine ($Snap.first $t@1092@01) ($Snap.second $t@1092@01))))
(assert (= ($Snap.first $t@1092@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1080@01 0))))
(assert (= ($Snap.second $t@1092@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1080@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1093@01 $Snap)
(assert (= $t@1093@01 ($Snap.combine ($Snap.first $t@1093@01) ($Snap.second $t@1093@01))))
(assert (= ($Snap.first $t@1093@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1080@01 1))))
(assert (= ($Snap.second $t@1093@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1080@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1094@01 $Snap)
(assert (= $t@1094@01 ($Snap.combine ($Snap.first $t@1094@01) ($Snap.second $t@1094@01))))
(assert (= ($Snap.first $t@1094@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1080@01 3))))
(assert (= ($Snap.second $t@1094@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1080@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
(declare-const $t@1095@01 $Snap)
(assert (= $t@1095@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 4)): Seq[Int])
; [eval] $struct_loc(self, 4)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1080@01 4))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
(declare-const $t@1096@01 $Snap)
(assert (= $t@1096@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 5)): Seq[Int])
; [eval] $struct_loc(self, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1080@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1097@01 $Snap)
(assert (= $t@1097@01 ($Snap.combine ($Snap.first $t@1097@01) ($Snap.second $t@1097@01))))
(assert (= ($Snap.first $t@1097@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1080@01 6))))
(assert (= ($Snap.second $t@1097@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1080@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1098@01 $Snap)
(assert (= $t@1098@01 ($Snap.combine ($Snap.first $t@1098@01) ($Snap.second $t@1098@01))))
(assert (= ($Snap.first $t@1098@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1080@01 7))))
(assert (= ($Snap.second $t@1098@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1080@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1099@01 $Snap)
(assert (= $t@1099@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@1100@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 670 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1080@01, 8)), $q3@1100@01)) | live]
; [else-branch: 670 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1080@01, 8)), $q3@1100@01) | live]
(push) ; 5
; [then-branch: 670 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1080@01, 8)), $q3@1100@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 8)) $q3@1100@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 670 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1080@01, 8)), $q3@1100@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 8)) $q3@1100@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 8)) $q3@1100@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 8)) $q3@1100@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1100@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 8)) $q3@1100@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 8)) $q3@1100@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 8)) $q3@1100@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1782@11@1782@345-aux|)))
(assert (forall (($q3@1100@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 8)) $q3@1100@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 8)) $q3@1100@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 8)) $q3@1100@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1782@11@1782@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@1101@01 $Snap)
(assert (= $t@1101@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@1102@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1102@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 8)) $q3@1102@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 8)) $q3@1102@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1783@11@1783@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@1103@01 $Snap)
(assert (= $t@1103@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@1104@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@1105@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(push) ; 5
; [then-branch: 671 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1080@01, 9)), $q4@1104@01), $q5@1105@01)) | live]
; [else-branch: 671 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1080@01, 9)), $q4@1104@01), $q5@1105@01) | live]
(push) ; 6
; [then-branch: 671 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1080@01, 9)), $q4@1104@01), $q5@1105@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1080@01 9)) $q4@1104@01) $q5@1105@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 671 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1080@01, 9)), $q4@1104@01), $q5@1105@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1080@01 9)) $q4@1104@01) $q5@1105@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1080@01 9)) $q4@1104@01) $q5@1105@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1080@01 9)) $q4@1104@01) $q5@1105@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@1105@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1080@01 9)) $q4@1104@01) $q5@1105@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1080@01 9)) $q4@1104@01) $q5@1105@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1080@01 9)) $q4@1104@01) $q5@1105@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1784@131@1784@597-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1104@01 Int)) (!
  (forall (($q5@1105@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1080@01 9)) $q4@1104@01) $q5@1105@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1080@01 9)) $q4@1104@01) $q5@1105@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1080@01 9)) $q4@1104@01) $q5@1105@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1784@131@1784@597-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1080@01 9)) $q4@1104@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1784@11@1784@598-aux|)))
(assert (forall (($q4@1104@01 Int)) (!
  (forall (($q5@1105@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1080@01 9)) $q4@1104@01) $q5@1105@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1080@01 9)) $q4@1104@01) $q5@1105@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1080@01 9)) $q4@1104@01) $q5@1105@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1784@131@1784@597|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1080@01 9)) $q4@1104@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1784@11@1784@598|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@1106@01 $Snap)
(assert (= $t@1106@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@1107@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@1108@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1107@01 Int)) (!
  (forall (($q5@1108@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1080@01 9)) $q4@1107@01) $q5@1108@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1080@01 9)) $q4@1107@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1080@01 9)) $q4@1107@01) $q5@1108@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1785@131@1785@505|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1080@01 9)) $q4@1107@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1785@11@1785@506|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 10)): Int) &&
;   ($struct_get($struct_loc(self, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1109@01 $Snap)
(assert (= $t@1109@01 ($Snap.combine ($Snap.first $t@1109@01) ($Snap.second $t@1109@01))))
(assert (= ($Snap.first $t@1109@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 10)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1080@01 10))))
(assert (= ($Snap.second $t@1109@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1080@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 11)): Int) &&
;   ($struct_get($struct_loc(self, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1110@01 $Snap)
(assert (= $t@1110@01 ($Snap.combine ($Snap.first $t@1110@01) ($Snap.second $t@1110@01))))
(assert (= ($Snap.first $t@1110@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 11)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1080@01 11))))
(assert (= ($Snap.second $t@1110@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1080@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 12)): Int) &&
;   ($struct_get($struct_loc(self, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1111@01 $Snap)
(assert (= $t@1111@01 ($Snap.combine ($Snap.first $t@1111@01) ($Snap.second $t@1111@01))))
(assert (= ($Snap.first $t@1111@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@1080@01 12))))
(assert (= ($Snap.second $t@1111@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1080@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1112@01 $Snap)
(assert (= $t@1112@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@1113@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(push) ; 4
; [then-branch: 672 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1080@01, 14)), $q6@1113@01)) | live]
; [else-branch: 672 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1080@01, 14)), $q6@1113@01) | live]
(push) ; 5
; [then-branch: 672 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1080@01, 14)), $q6@1113@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 14)) $q6@1113@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 672 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1080@01, 14)), $q6@1113@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 14)) $q6@1113@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 14)) $q6@1113@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 14)) $q6@1113@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1113@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 14)) $q6@1113@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 14)) $q6@1113@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 14)) $q6@1113@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1789@11@1789@348-aux|)))
(assert (forall (($q6@1113@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 14)) $q6@1113@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 14)) $q6@1113@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 14)) $q6@1113@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1789@11@1789@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $t@1114@01 $Snap)
(assert (= $t@1114@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $q6@1115@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1115@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 14)) $q6@1115@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 14)) $q6@1115@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1790@11@1790@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1116@01 $Snap)
(assert (= $t@1116@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@1117@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(push) ; 4
; [then-branch: 673 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1080@01, 15)), $q7@1117@01)) | live]
; [else-branch: 673 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1080@01, 15)), $q7@1117@01) | live]
(push) ; 5
; [then-branch: 673 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1080@01, 15)), $q7@1117@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 15)) $q7@1117@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 673 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1080@01, 15)), $q7@1117@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 15)) $q7@1117@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 15)) $q7@1117@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 15)) $q7@1117@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1117@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 15)) $q7@1117@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 15)) $q7@1117@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 15)) $q7@1117@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1791@11@1791@348-aux|)))
(assert (forall (($q7@1117@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 15)) $q7@1117@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 15)) $q7@1117@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 15)) $q7@1117@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1791@11@1791@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $t@1118@01 $Snap)
(assert (= $t@1118@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $q7@1119@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
; [eval] ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1119@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 15)) $q7@1119@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1080@01 15)) $q7@1119@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1792@11@1792@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@1120@01 $Snap)
(assert (= $t@1120@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1080@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1121@01 $Snap)
(assert (= $t@1121@01 ($Snap.combine ($Snap.first $t@1121@01) ($Snap.second $t@1121@01))))
(assert (= ($Snap.first $t@1121@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@1121@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1122@01 $Snap)
(assert (= $t@1122@01 ($Snap.combine ($Snap.first $t@1122@01) ($Snap.second $t@1122@01))))
(assert (= ($Snap.first $t@1122@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1077@01 0))))
(assert (= ($Snap.second $t@1122@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1077@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1123@01 $Snap)
(assert (= $t@1123@01 ($Snap.combine ($Snap.first $t@1123@01) ($Snap.second $t@1123@01))))
(assert (= ($Snap.first $t@1123@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1077@01 1))))
(assert (= ($Snap.second $t@1123@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1077@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1124@01 $Snap)
(assert (= $t@1124@01 ($Snap.combine ($Snap.first $t@1124@01) ($Snap.second $t@1124@01))))
(assert (= ($Snap.first $t@1124@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1077@01 2))))
(assert (= ($Snap.second $t@1124@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1077@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@1125@01 $Snap)
(assert (= $t@1125@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@1077@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1126@01 $Snap)
(assert (= $t@1126@01 ($Snap.combine ($Snap.first $t@1126@01) ($Snap.second $t@1126@01))))
(assert (= ($Snap.first $t@1126@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1077@01 4))))
(assert (= ($Snap.second $t@1126@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1077@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@1127@01 $Snap)
(assert (= $t@1127@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@1077@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1128@01 $Snap)
(assert (= $t@1128@01 ($Snap.combine ($Snap.first $t@1128@01) ($Snap.second $t@1128@01))))
(assert (= ($Snap.first $t@1128@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))))
(assert (= ($Snap.second $t@1128@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1129@01 $Snap)
(assert (= $t@1129@01 ($Snap.combine ($Snap.first $t@1129@01) ($Snap.second $t@1129@01))))
(assert (= ($Snap.first $t@1129@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1076@01 1))))
(assert (= ($Snap.second $t@1129@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1130@01 $Snap)
(assert (= $t@1130@01 ($Snap.combine ($Snap.first $t@1130@01) ($Snap.second $t@1130@01))))
(assert (= ($Snap.first $t@1130@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1076@01 2))))
(assert (= ($Snap.second $t@1130@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@1131@01 $Snap)
(assert (= $t@1131@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@1132@01 $Snap)
(assert (= $t@1132@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $t@1133@01 $Snap)
(assert (= $t@1133@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $a@1134@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@1135@01 $Snap)
(assert (= $t@1135@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool) == true)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool) == true
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)))
  true)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)))
    true))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 674 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), $struct_get[Int]($struct_loc[Int](msg@1076@01, 0))) != True | live]
; [else-branch: 674 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), $struct_get[Int]($struct_loc[Int](msg@1076@01, 0))) == True | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 674 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), $struct_get[Int]($struct_loc[Int](msg@1076@01, 0))) != True]
(assert (not
  (=
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)))
    true)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 675 | False | dead]
; [else-branch: 675 | True | live]
(push) ; 4
; [else-branch: 675 | True]
(pop) ; 4
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 676 | True | live]
; [else-branch: 676 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 676 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
; [then-branch: 677 | False | dead]
; [else-branch: 677 | True | live]
(push) ; 6
; [else-branch: 677 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1080@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1080@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 678 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1080@01, 3)) | live]
; [else-branch: 678 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1080@01, 3)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 678 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1080@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1080@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
; [then-branch: 679 | False | live]
; [else-branch: 679 | True | live]
(push) ; 8
; [then-branch: 679 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 679 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 678 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1080@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1080@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1080@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1080@01 3))))))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1136@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 680 | !(0 <= q$a@1136@01) | live]
; [else-branch: 680 | 0 <= q$a@1136@01 | live]
(push) ; 7
; [then-branch: 680 | !(0 <= q$a@1136@01)]
(assert (not (<= 0 q$a@1136@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 680 | 0 <= q$a@1136@01]
(assert (<= 0 q$a@1136@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1136@01) (not (<= 0 q$a@1136@01))))
(push) ; 6
; [then-branch: 681 | 0 <= q$a@1136@01 && q$a@1136@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 681 | !(0 <= q$a@1136@01 && q$a@1136@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 681 | 0 <= q$a@1136@01 && q$a@1136@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1136@01)
  (<= q$a@1136@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 682 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1136@01) | live]
; [else-branch: 682 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1136@01)) | live]
(push) ; 9
; [then-branch: 682 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1136@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
(pop) ; 9
(push) ; 9
; [else-branch: 682 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1136@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01)))
(push) ; 8
; [then-branch: 683 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1136@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1136@01) | live]
; [else-branch: 683 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1136@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1136@01)) | live]
(push) ; 9
; [then-branch: 683 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1136@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1136@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 10
; [then-branch: 684 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1080@01, 1)) | live]
; [else-branch: 684 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1080@01, 1)) | live]
(push) ; 11
; [then-branch: 684 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1080@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1080@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 684 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1080@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1080@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1080@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1080@01 1))))))
(pop) ; 9
(push) ; 9
; [else-branch: 683 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1136@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1136@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1080@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1080@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 681 | !(0 <= q$a@1136@01 && q$a@1136@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1136@01)
    (<= q$a@1136@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1136@01)
    (<= q$a@1136@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1136@01)
    (<= q$a@1136@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1080@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1080@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1136@01)
      (<= q$a@1136@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1136@01)
    (<= q$a@1136@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1136@01 Int)) (!
  (and
    (or (<= 0 q$a@1136@01) (not (<= 0 q$a@1136@01)))
    (=>
      (and
        (<= 0 q$a@1136@01)
        (<= q$a@1136@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1136@01)
        (<= q$a@1136@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1080@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1080@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1136@01)
          (<= q$a@1136@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1136@01)
        (<= q$a@1136@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1851@17@1851@397-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1136@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1136@01)
        (<= q$a@1136@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1851@17@1851@397|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1136@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1136@01)
        (<= q$a@1136@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1136@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1851@17@1851@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1137@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 685 | !(0 <= q$a@1137@01) | live]
; [else-branch: 685 | 0 <= q$a@1137@01 | live]
(push) ; 7
; [then-branch: 685 | !(0 <= q$a@1137@01)]
(assert (not (<= 0 q$a@1137@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 685 | 0 <= q$a@1137@01]
(assert (<= 0 q$a@1137@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1137@01) (not (<= 0 q$a@1137@01))))
(push) ; 6
; [then-branch: 686 | 0 <= q$a@1137@01 && q$a@1137@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 686 | !(0 <= q$a@1137@01 && q$a@1137@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 686 | 0 <= q$a@1137@01 && q$a@1137@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1137@01)
  (<= q$a@1137@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 687 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1137@01)) | live]
; [else-branch: 687 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1137@01) | live]
(push) ; 9
; [then-branch: 687 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1137@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 687 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1137@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01))))
(push) ; 8
; [then-branch: 688 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1137@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1137@01)) | live]
; [else-branch: 688 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1137@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1137@01))) | live]
(push) ; 9
; [then-branch: 688 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1137@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1137@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 689 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) != q$a@1137@01 | live]
; [else-branch: 689 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) == q$a@1137@01 | live]
(push) ; 11
; [then-branch: 689 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) != q$a@1137@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1137@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 689 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) == q$a@1137@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1137@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1137@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1137@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 688 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1137@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1137@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1137@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1137@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 686 | !(0 <= q$a@1137@01 && q$a@1137@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1137@01)
    (<= q$a@1137@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1137@01)
    (<= q$a@1137@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1137@01)
    (<= q$a@1137@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1137@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1137@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1137@01)
      (<= q$a@1137@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1137@01)
    (<= q$a@1137@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1137@01 Int)) (!
  (and
    (or (<= 0 q$a@1137@01) (not (<= 0 q$a@1137@01)))
    (=>
      (and
        (<= 0 q$a@1137@01)
        (<= q$a@1137@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1137@01)
        (<= q$a@1137@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1137@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
                  q$a@1137@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1137@01)
          (<= q$a@1137@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1137@01)
        (<= q$a@1137@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1852@17@1852@361-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1137@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1137@01)
        (<= q$a@1137@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1852@17@1852@361|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1137@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1137@01)
        (<= q$a@1137@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1137@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1852@17@1852@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@1138@01 $Snap)
(assert (= $t@1138@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@1090@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1139@01 $Struct)
(assert (=
  self@1139@01
  ($struct_set<$Struct> self@1080@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1080@01 11))
    l$havoc@1090@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 4
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 674 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), $struct_get[Int]($struct_loc[Int](msg@1076@01, 0))) == True]
(assert (=
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)))
  true))
(pop) ; 3
; [eval] !!(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool) == true)
; [eval] !(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool) == true)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool) == true
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int)): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)))
    true))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)))
  true)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 690 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), $struct_get[Int]($struct_loc[Int](msg@1076@01, 0))) == True | live]
; [else-branch: 690 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), $struct_get[Int]($struct_loc[Int](msg@1076@01, 0))) != True | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 690 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), $struct_get[Int]($struct_loc[Int](msg@1076@01, 0))) == True]
(assert (=
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)))
  true))
; [exec]
; self := ($struct_set(self, 2, ($map_set(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]),
;   ($struct_get($struct_loc(msg, 0)): Int), false): $Map[Int, Bool])): $Struct)
; [eval] ($struct_set(self, 2, ($map_set(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int), false): $Map[Int, Bool])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), ($struct_get($struct_loc(msg, 0)): Int), false): $Map[Int, Bool])
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const self@1140@01 $Struct)
(assert (=
  self@1140@01
  ($struct_set<$Struct> self@1080@01 2 ($map_set<$Map<Int~_Bool>> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) false))))
; [exec]
; inhale acc(e$CloseMinter(($struct_get($struct_loc(msg, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const $t@1141@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label return
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not $out_of_gas@1089@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not $out_of_gas@1089@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 691 | $out_of_gas@1089@01 | live]
; [else-branch: 691 | !($out_of_gas@1089@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 691 | $out_of_gas@1089@01]
(assert $out_of_gas@1089@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 692 | False | dead]
; [else-branch: 692 | True | live]
(push) ; 5
; [else-branch: 692 | True]
(pop) ; 5
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 693 | True | live]
; [else-branch: 693 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 693 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 6
; [then-branch: 694 | False | dead]
; [else-branch: 694 | True | live]
(push) ; 7
; [else-branch: 694 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1080@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1080@01 3))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 695 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1080@01, 3)) | live]
; [else-branch: 695 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1080@01, 3)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 695 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1080@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1080@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 8
; [then-branch: 696 | False | live]
; [else-branch: 696 | True | live]
(push) ; 9
; [then-branch: 696 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 696 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 695 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1080@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1080@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1080@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1080@01 3))))))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1142@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 697 | !(0 <= q$a@1142@01) | live]
; [else-branch: 697 | 0 <= q$a@1142@01 | live]
(push) ; 8
; [then-branch: 697 | !(0 <= q$a@1142@01)]
(assert (not (<= 0 q$a@1142@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 697 | 0 <= q$a@1142@01]
(assert (<= 0 q$a@1142@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1142@01) (not (<= 0 q$a@1142@01))))
(push) ; 7
; [then-branch: 698 | 0 <= q$a@1142@01 && q$a@1142@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 698 | !(0 <= q$a@1142@01 && q$a@1142@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 698 | 0 <= q$a@1142@01 && q$a@1142@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1142@01)
  (<= q$a@1142@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 699 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1142@01) | live]
; [else-branch: 699 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1142@01)) | live]
(push) ; 10
; [then-branch: 699 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1142@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
(pop) ; 10
(push) ; 10
; [else-branch: 699 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1142@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01)))
(push) ; 9
; [then-branch: 700 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1142@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1142@01) | live]
; [else-branch: 700 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1142@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1142@01)) | live]
(push) ; 10
; [then-branch: 700 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1142@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1142@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 11
; [then-branch: 701 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1080@01, 1)) | live]
; [else-branch: 701 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1080@01, 1)) | live]
(push) ; 12
; [then-branch: 701 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1080@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1080@01 1)))))
(pop) ; 12
(push) ; 12
; [else-branch: 701 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1080@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1080@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1080@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1080@01 1))))))
(pop) ; 10
(push) ; 10
; [else-branch: 700 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1142@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1142@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1080@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1080@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 698 | !(0 <= q$a@1142@01 && q$a@1142@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1142@01)
    (<= q$a@1142@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1142@01)
    (<= q$a@1142@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1142@01)
    (<= q$a@1142@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1080@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1080@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1142@01)
      (<= q$a@1142@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1142@01)
    (<= q$a@1142@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1142@01 Int)) (!
  (and
    (or (<= 0 q$a@1142@01) (not (<= 0 q$a@1142@01)))
    (=>
      (and
        (<= 0 q$a@1142@01)
        (<= q$a@1142@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1142@01)
        (<= q$a@1142@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1080@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1080@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1142@01)
          (<= q$a@1142@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1142@01)
        (<= q$a@1142@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1851@17@1851@397-aux|)))
(push) ; 6
(assert (not (forall ((q$a@1142@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1142@01)
        (<= q$a@1142@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1851@17@1851@397|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1142@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1142@01)
        (<= q$a@1142@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1142@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1851@17@1851@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1143@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 702 | !(0 <= q$a@1143@01) | live]
; [else-branch: 702 | 0 <= q$a@1143@01 | live]
(push) ; 8
; [then-branch: 702 | !(0 <= q$a@1143@01)]
(assert (not (<= 0 q$a@1143@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 702 | 0 <= q$a@1143@01]
(assert (<= 0 q$a@1143@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1143@01) (not (<= 0 q$a@1143@01))))
(push) ; 7
; [then-branch: 703 | 0 <= q$a@1143@01 && q$a@1143@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 703 | !(0 <= q$a@1143@01 && q$a@1143@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 703 | 0 <= q$a@1143@01 && q$a@1143@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1143@01)
  (<= q$a@1143@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 704 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1143@01)) | live]
; [else-branch: 704 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1143@01) | live]
(push) ; 10
; [then-branch: 704 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1143@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 704 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1143@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01))))
(push) ; 9
; [then-branch: 705 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1143@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1143@01)) | live]
; [else-branch: 705 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1143@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1143@01))) | live]
(push) ; 10
; [then-branch: 705 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1143@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1143@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 706 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) != q$a@1143@01 | live]
; [else-branch: 706 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) == q$a@1143@01 | live]
(push) ; 12
; [then-branch: 706 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) != q$a@1143@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1143@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 706 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) == q$a@1143@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1143@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1143@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1143@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 705 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1143@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1143@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1143@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1143@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 703 | !(0 <= q$a@1143@01 && q$a@1143@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1143@01)
    (<= q$a@1143@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1143@01)
    (<= q$a@1143@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1143@01)
    (<= q$a@1143@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1143@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1143@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1143@01)
      (<= q$a@1143@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1143@01)
    (<= q$a@1143@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1143@01 Int)) (!
  (and
    (or (<= 0 q$a@1143@01) (not (<= 0 q$a@1143@01)))
    (=>
      (and
        (<= 0 q$a@1143@01)
        (<= q$a@1143@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1143@01)
        (<= q$a@1143@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1143@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
                  q$a@1143@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1143@01)
          (<= q$a@1143@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1143@01)
        (<= q$a@1143@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1852@17@1852@361-aux|)))
(push) ; 6
(assert (not (forall ((q$a@1143@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1143@01)
        (<= q$a@1143@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1852@17@1852@361|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1143@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1143@01)
        (<= q$a@1143@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1852@17@1852@361|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@1144@01 $Snap)
(assert (= $t@1144@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@1090@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1145@01 $Struct)
(assert (=
  self@1145@01
  ($struct_set<$Struct> self@1080@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1080@01 11))
    l$havoc@1090@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 5
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 691 | !($out_of_gas@1089@01)]
(assert (not $out_of_gas@1089@01))
(pop) ; 4
; [eval] !$out_of_gas
(push) ; 4
(set-option :timeout 10)
(assert (not $out_of_gas@1089@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not $out_of_gas@1089@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 707 | !($out_of_gas@1089@01) | live]
; [else-branch: 707 | $out_of_gas@1089@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 707 | !($out_of_gas@1089@01)]
(assert (not $out_of_gas@1089@01))
; [exec]
; label end
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 708 | True | live]
; [else-branch: 708 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 708 | True]
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1140@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@1080@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 709 | $struct_get[Int]($struct_loc[Int](self@1140@01, 3)) != $struct_get[Int]($struct_loc[Int](self@1080@01, 3)) | dead]
; [else-branch: 709 | $struct_get[Int]($struct_loc[Int](self@1140@01, 3)) == $struct_get[Int]($struct_loc[Int](self@1080@01, 3)) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 709 | $struct_get[Int]($struct_loc[Int](self@1140@01, 3)) == $struct_get[Int]($struct_loc[Int](self@1080@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1140@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@1080@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1140@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@1080@01 3))))
; [exec]
; assert ($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1140@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1140@01 3))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 710 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1140@01, 3)) | live]
; [else-branch: 710 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1140@01, 3)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 710 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1140@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1140@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 8
; [then-branch: 711 | $struct_get[Int]($struct_loc[Int](self@1140@01, 1)) != $struct_get[Int]($struct_loc[Int](self@1080@01, 1)) | live]
; [else-branch: 711 | $struct_get[Int]($struct_loc[Int](self@1140@01, 1)) == $struct_get[Int]($struct_loc[Int](self@1080@01, 1)) | live]
(push) ; 9
; [then-branch: 711 | $struct_get[Int]($struct_loc[Int](self@1140@01, 1)) != $struct_get[Int]($struct_loc[Int](self@1080@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@1140@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@1080@01 1)))))
(pop) ; 9
(push) ; 9
; [else-branch: 711 | $struct_get[Int]($struct_loc[Int](self@1140@01, 1)) == $struct_get[Int]($struct_loc[Int](self@1080@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1140@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@1080@01 1))))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@1140@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@1080@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1140@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@1080@01 1))))))
(pop) ; 7
(push) ; 7
; [else-branch: 710 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1140@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1140@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1140@01 3))))
  (and
    (not
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1140@01 3))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> self@1140@01 1))
        ($struct_get<Int> ($struct_loc<Int> self@1080@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> self@1140@01 1))
          ($struct_get<Int> ($struct_loc<Int> self@1080@01 1))))))))
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1140@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1140@01 3))))))
(push) ; 6
(assert (not (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1140@01 3))))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1140@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@1080@01 1)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1140@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1080@01 0)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1140@01 3))))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1140@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@1080@01 1)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1140@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1080@01 0))))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1146@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 712 | !(0 <= q$a@1146@01) | live]
; [else-branch: 712 | 0 <= q$a@1146@01 | live]
(push) ; 8
; [then-branch: 712 | !(0 <= q$a@1146@01)]
(assert (not (<= 0 q$a@1146@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 712 | 0 <= q$a@1146@01]
(assert (<= 0 q$a@1146@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1146@01) (not (<= 0 q$a@1146@01))))
(push) ; 7
; [then-branch: 713 | 0 <= q$a@1146@01 && q$a@1146@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 713 | !(0 <= q$a@1146@01 && q$a@1146@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 713 | 0 <= q$a@1146@01 && q$a@1146@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1146@01)
  (<= q$a@1146@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 714 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1146@01) | live]
; [else-branch: 714 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1146@01)) | live]
(push) ; 10
; [then-branch: 714 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1146@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
(pop) ; 10
(push) ; 10
; [else-branch: 714 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1146@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01)))
(push) ; 9
; [then-branch: 715 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1146@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1140@01, 2)), q$a@1146@01) | live]
; [else-branch: 715 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1146@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1140@01, 2)), q$a@1146@01)) | live]
(push) ; 10
; [then-branch: 715 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1146@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1140@01, 2)), q$a@1146@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 11
; [then-branch: 716 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1140@01, 1)) | live]
; [else-branch: 716 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1140@01, 1)) | live]
(push) ; 12
; [then-branch: 716 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1140@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1140@01 1)))))
(pop) ; 12
(push) ; 12
; [else-branch: 716 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1140@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1140@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1140@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1140@01 1))))))
(pop) ; 10
(push) ; 10
; [else-branch: 715 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1146@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1140@01, 2)), q$a@1146@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1140@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1140@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 713 | !(0 <= q$a@1146@01 && q$a@1146@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1146@01)
    (<= q$a@1146@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1146@01)
    (<= q$a@1146@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1146@01)
    (<= q$a@1146@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1140@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1140@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1146@01)
      (<= q$a@1146@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1146@01)
    (<= q$a@1146@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1146@01 Int)) (!
  (and
    (or (<= 0 q$a@1146@01) (not (<= 0 q$a@1146@01)))
    (=>
      (and
        (<= 0 q$a@1146@01)
        (<= q$a@1146@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1146@01)
        (<= q$a@1146@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1140@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1140@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1146@01)
          (<= q$a@1146@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1146@01)
        (<= q$a@1146@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1846@13@1846@393-aux|)))
(assert (forall ((q$a@1146@01 Int)) (!
  (and
    (or (<= 0 q$a@1146@01) (not (<= 0 q$a@1146@01)))
    (=>
      (and
        (<= 0 q$a@1146@01)
        (<= q$a@1146@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1146@01)
        (<= q$a@1146@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1140@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1140@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1146@01)
          (<= q$a@1146@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1146@01)
        (<= q$a@1146@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1846@13@1846@393-aux|)))
(push) ; 6
(assert (not (forall ((q$a@1146@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1146@01)
        (<= q$a@1146@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1846@13@1846@393|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1146@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1146@01)
        (<= q$a@1146@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1146@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1146@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1846@13@1846@393|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1147@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 717 | !(0 <= q$a@1147@01) | live]
; [else-branch: 717 | 0 <= q$a@1147@01 | live]
(push) ; 8
; [then-branch: 717 | !(0 <= q$a@1147@01)]
(assert (not (<= 0 q$a@1147@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 717 | 0 <= q$a@1147@01]
(assert (<= 0 q$a@1147@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1147@01) (not (<= 0 q$a@1147@01))))
(push) ; 7
; [then-branch: 718 | 0 <= q$a@1147@01 && q$a@1147@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 718 | !(0 <= q$a@1147@01 && q$a@1147@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 718 | 0 <= q$a@1147@01 && q$a@1147@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1147@01)
  (<= q$a@1147@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 719 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1147@01)) | live]
; [else-branch: 719 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1147@01) | live]
(push) ; 10
; [then-branch: 719 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1147@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 719 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1147@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01))))
(push) ; 9
; [then-branch: 720 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1147@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1140@01, 2)), q$a@1147@01)) | live]
; [else-branch: 720 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1147@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1140@01, 2)), q$a@1147@01))) | live]
(push) ; 10
; [then-branch: 720 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1147@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1140@01, 2)), q$a@1147@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 721 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) != q$a@1147@01 | live]
; [else-branch: 721 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) == q$a@1147@01 | live]
(push) ; 12
; [then-branch: 721 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) != q$a@1147@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1147@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 721 | $struct_get[Int]($struct_loc[Int](msg@1076@01, 0)) == q$a@1147@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1147@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1147@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1147@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 720 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), q$a@1147@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1140@01, 2)), q$a@1147@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1147@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1147@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 718 | !(0 <= q$a@1147@01 && q$a@1147@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1147@01)
    (<= q$a@1147@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1147@01)
    (<= q$a@1147@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1147@01)
    (<= q$a@1147@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1147@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1147@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1147@01)
      (<= q$a@1147@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1147@01)
    (<= q$a@1147@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1147@01 Int)) (!
  (and
    (or (<= 0 q$a@1147@01) (not (<= 0 q$a@1147@01)))
    (=>
      (and
        (<= 0 q$a@1147@01)
        (<= q$a@1147@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1147@01)
        (<= q$a@1147@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1147@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
                  q$a@1147@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1147@01)
          (<= q$a@1147@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1147@01)
        (<= q$a@1147@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1847@13@1847@357-aux|)))
(assert (forall ((q$a@1147@01 Int)) (!
  (and
    (or (<= 0 q$a@1147@01) (not (<= 0 q$a@1147@01)))
    (=>
      (and
        (<= 0 q$a@1147@01)
        (<= q$a@1147@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1147@01)
        (<= q$a@1147@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1147@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0))
                  q$a@1147@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1147@01)
          (<= q$a@1147@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1147@01)
        (<= q$a@1147@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1847@13@1847@357-aux|)))
(push) ; 6
(assert (not (forall ((q$a@1147@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1147@01)
        (<= q$a@1147@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1147@01)
      (=
        (ite
          (= q$a@1147@01 ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)))
          $Perm.Write
          $Perm.No)
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1847@13@1847@357|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1147@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1147@01)
        (<= q$a@1147@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01))))
    (and
      (= ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)) q$a@1147@01)
      (=
        (ite
          (= q$a@1147@01 ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)))
          $Perm.Write
          $Perm.No)
        $Perm.Write)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) q$a@1147@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1140@01 2)) q$a@1147@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1847@13@1847@357|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@1148@01 $Snap)
(assert (= $t@1148@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@1090@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1149@01 $Struct)
(assert (=
  self@1149@01
  ($struct_set<$Struct> self@1140@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1140@01 11))
    l$havoc@1090@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 5
; [eval] !$succ
; [then-branch: 722 | False | dead]
; [else-branch: 722 | True | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 722 | True]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 707 | $out_of_gas@1089@01]
(assert $out_of_gas@1089@01)
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 690 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1080@01, 2)), $struct_get[Int]($struct_loc[Int](msg@1076@01, 0))) != True]
(assert (not
  (=
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1080@01 2)) ($struct_get<Int> ($struct_loc<Int> msg@1076@01 0)))
    true)))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$totalSupply ----------
(declare-const $succ@1150@01 Bool)
(declare-const $res@1151@01 Int)
(declare-const $succ@1152@01 Bool)
(declare-const $res@1153@01 Int)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@1154@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@1155@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@1156@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@1157@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@1158@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@1159@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@1160@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@1161@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@1162@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@1163@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@1164@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@1165@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@1166@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@1167@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@1168@01 Int)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@1169@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@1170@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1171@01 $Snap)
(assert (= $t@1171@01 ($Snap.combine ($Snap.first $t@1171@01) ($Snap.second $t@1171@01))))
(assert (= ($Snap.first $t@1171@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1158@01 0))))
(assert (= ($Snap.second $t@1171@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1158@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1172@01 $Snap)
(assert (= $t@1172@01 ($Snap.combine ($Snap.first $t@1172@01) ($Snap.second $t@1172@01))))
(assert (= ($Snap.first $t@1172@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1158@01 1))))
(assert (= ($Snap.second $t@1172@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1158@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1173@01 $Snap)
(assert (= $t@1173@01 ($Snap.combine ($Snap.first $t@1173@01) ($Snap.second $t@1173@01))))
(assert (= ($Snap.first $t@1173@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1158@01 3))))
(assert (= ($Snap.second $t@1173@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1158@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
(declare-const $t@1174@01 $Snap)
(assert (= $t@1174@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 4)): Seq[Int])
; [eval] $struct_loc(self, 4)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 4))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
(declare-const $t@1175@01 $Snap)
(assert (= $t@1175@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 5)): Seq[Int])
; [eval] $struct_loc(self, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1176@01 $Snap)
(assert (= $t@1176@01 ($Snap.combine ($Snap.first $t@1176@01) ($Snap.second $t@1176@01))))
(assert (= ($Snap.first $t@1176@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1158@01 6))))
(assert (= ($Snap.second $t@1176@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1158@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1177@01 $Snap)
(assert (= $t@1177@01 ($Snap.combine ($Snap.first $t@1177@01) ($Snap.second $t@1177@01))))
(assert (= ($Snap.first $t@1177@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1158@01 7))))
(assert (= ($Snap.second $t@1177@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1158@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1178@01 $Snap)
(assert (= $t@1178@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@1179@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 723 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1158@01, 8)), $q3@1179@01)) | live]
; [else-branch: 723 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1158@01, 8)), $q3@1179@01) | live]
(push) ; 5
; [then-branch: 723 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1158@01, 8)), $q3@1179@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q3@1179@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 723 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1158@01, 8)), $q3@1179@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q3@1179@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q3@1179@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q3@1179@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1179@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q3@1179@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q3@1179@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q3@1179@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1887@11@1887@345-aux|)))
(assert (forall (($q3@1179@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q3@1179@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q3@1179@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q3@1179@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1887@11@1887@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@1180@01 $Snap)
(assert (= $t@1180@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@1181@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1181@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q3@1181@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q3@1181@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1888@11@1888@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@1182@01 $Snap)
(assert (= $t@1182@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@1183@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@1184@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(push) ; 5
; [then-branch: 724 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1158@01, 9)), $q4@1183@01), $q5@1184@01)) | live]
; [else-branch: 724 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1158@01, 9)), $q4@1183@01), $q5@1184@01) | live]
(push) ; 6
; [then-branch: 724 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1158@01, 9)), $q4@1183@01), $q5@1184@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1158@01 9)) $q4@1183@01) $q5@1184@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 724 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1158@01, 9)), $q4@1183@01), $q5@1184@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1158@01 9)) $q4@1183@01) $q5@1184@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1158@01 9)) $q4@1183@01) $q5@1184@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1158@01 9)) $q4@1183@01) $q5@1184@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@1184@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1158@01 9)) $q4@1183@01) $q5@1184@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1158@01 9)) $q4@1183@01) $q5@1184@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1158@01 9)) $q4@1183@01) $q5@1184@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1889@131@1889@597-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1183@01 Int)) (!
  (forall (($q5@1184@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1158@01 9)) $q4@1183@01) $q5@1184@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1158@01 9)) $q4@1183@01) $q5@1184@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1158@01 9)) $q4@1183@01) $q5@1184@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1889@131@1889@597-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1158@01 9)) $q4@1183@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1889@11@1889@598-aux|)))
(assert (forall (($q4@1183@01 Int)) (!
  (forall (($q5@1184@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1158@01 9)) $q4@1183@01) $q5@1184@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1158@01 9)) $q4@1183@01) $q5@1184@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1158@01 9)) $q4@1183@01) $q5@1184@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1889@131@1889@597|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1158@01 9)) $q4@1183@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1889@11@1889@598|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@1185@01 $Snap)
(assert (= $t@1185@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@1186@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@1187@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1186@01 Int)) (!
  (forall (($q5@1187@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1158@01 9)) $q4@1186@01) $q5@1187@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1158@01 9)) $q4@1186@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1158@01 9)) $q4@1186@01) $q5@1187@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1890@131@1890@505|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1158@01 9)) $q4@1186@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1890@11@1890@506|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 10)): Int) &&
;   ($struct_get($struct_loc(self, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1188@01 $Snap)
(assert (= $t@1188@01 ($Snap.combine ($Snap.first $t@1188@01) ($Snap.second $t@1188@01))))
(assert (= ($Snap.first $t@1188@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 10)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1158@01 10))))
(assert (= ($Snap.second $t@1188@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1158@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 11)): Int) &&
;   ($struct_get($struct_loc(self, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1189@01 $Snap)
(assert (= $t@1189@01 ($Snap.combine ($Snap.first $t@1189@01) ($Snap.second $t@1189@01))))
(assert (= ($Snap.first $t@1189@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 11)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1158@01 11))))
(assert (= ($Snap.second $t@1189@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1158@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 12)): Int) &&
;   ($struct_get($struct_loc(self, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1190@01 $Snap)
(assert (= $t@1190@01 ($Snap.combine ($Snap.first $t@1190@01) ($Snap.second $t@1190@01))))
(assert (= ($Snap.first $t@1190@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@1158@01 12))))
(assert (= ($Snap.second $t@1190@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1158@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1191@01 $Snap)
(assert (= $t@1191@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@1192@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(push) ; 4
; [then-branch: 725 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1158@01, 14)), $q6@1192@01)) | live]
; [else-branch: 725 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1158@01, 14)), $q6@1192@01) | live]
(push) ; 5
; [then-branch: 725 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1158@01, 14)), $q6@1192@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 14)) $q6@1192@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 725 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1158@01, 14)), $q6@1192@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 14)) $q6@1192@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 14)) $q6@1192@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 14)) $q6@1192@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1192@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 14)) $q6@1192@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 14)) $q6@1192@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 14)) $q6@1192@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1894@11@1894@348-aux|)))
(assert (forall (($q6@1192@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 14)) $q6@1192@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 14)) $q6@1192@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 14)) $q6@1192@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1894@11@1894@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $t@1193@01 $Snap)
(assert (= $t@1193@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $q6@1194@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1194@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 14)) $q6@1194@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 14)) $q6@1194@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1895@11@1895@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1195@01 $Snap)
(assert (= $t@1195@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@1196@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(push) ; 4
; [then-branch: 726 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1158@01, 15)), $q7@1196@01)) | live]
; [else-branch: 726 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1158@01, 15)), $q7@1196@01) | live]
(push) ; 5
; [then-branch: 726 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1158@01, 15)), $q7@1196@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 15)) $q7@1196@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 726 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1158@01, 15)), $q7@1196@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 15)) $q7@1196@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 15)) $q7@1196@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 15)) $q7@1196@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1196@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 15)) $q7@1196@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 15)) $q7@1196@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 15)) $q7@1196@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1896@11@1896@348-aux|)))
(assert (forall (($q7@1196@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 15)) $q7@1196@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 15)) $q7@1196@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 15)) $q7@1196@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1896@11@1896@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $t@1197@01 $Snap)
(assert (= $t@1197@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $q7@1198@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
; [eval] ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1198@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 15)) $q7@1198@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 15)) $q7@1198@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1897@11@1897@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@1199@01 $Snap)
(assert (= $t@1199@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1158@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1200@01 $Snap)
(assert (= $t@1200@01 ($Snap.combine ($Snap.first $t@1200@01) ($Snap.second $t@1200@01))))
(assert (= ($Snap.first $t@1200@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@1200@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1201@01 $Snap)
(assert (= $t@1201@01 ($Snap.combine ($Snap.first $t@1201@01) ($Snap.second $t@1201@01))))
(assert (= ($Snap.first $t@1201@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1155@01 0))))
(assert (= ($Snap.second $t@1201@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1155@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1202@01 $Snap)
(assert (= $t@1202@01 ($Snap.combine ($Snap.first $t@1202@01) ($Snap.second $t@1202@01))))
(assert (= ($Snap.first $t@1202@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1155@01 1))))
(assert (= ($Snap.second $t@1202@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1155@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1203@01 $Snap)
(assert (= $t@1203@01 ($Snap.combine ($Snap.first $t@1203@01) ($Snap.second $t@1203@01))))
(assert (= ($Snap.first $t@1203@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1155@01 2))))
(assert (= ($Snap.second $t@1203@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1155@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@1204@01 $Snap)
(assert (= $t@1204@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@1155@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1205@01 $Snap)
(assert (= $t@1205@01 ($Snap.combine ($Snap.first $t@1205@01) ($Snap.second $t@1205@01))))
(assert (= ($Snap.first $t@1205@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1155@01 4))))
(assert (= ($Snap.second $t@1205@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1155@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@1206@01 $Snap)
(assert (= $t@1206@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@1155@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1207@01 $Snap)
(assert (= $t@1207@01 ($Snap.combine ($Snap.first $t@1207@01) ($Snap.second $t@1207@01))))
(assert (= ($Snap.first $t@1207@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))))
(assert (= ($Snap.second $t@1207@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1208@01 $Snap)
(assert (= $t@1208@01 ($Snap.combine ($Snap.first $t@1208@01) ($Snap.second $t@1208@01))))
(assert (= ($Snap.first $t@1208@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1154@01 1))))
(assert (= ($Snap.second $t@1208@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1154@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1209@01 $Snap)
(assert (= $t@1209@01 ($Snap.combine ($Snap.first $t@1209@01) ($Snap.second $t@1209@01))))
(assert (= ($Snap.first $t@1209@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1154@01 2))))
(assert (= ($Snap.second $t@1209@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1154@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@1210@01 $Snap)
(assert (= $t@1210@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1154@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@1211@01 $Snap)
(assert (= $t@1211@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $t@1212@01 $Snap)
(assert (= $t@1212@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $a@1213@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@1214@01 $Snap)
(assert (= $t@1214@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $res := $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 10)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 10)): Int))
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(declare-const $res@1215@01 Int)
(assert (=
  $res@1215@01
  ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@1158@01 10))))))
; [exec]
; label return
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@1167@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@1167@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 727 | $out_of_gas@1167@01 | live]
; [else-branch: 727 | !($out_of_gas@1167@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 727 | $out_of_gas@1167@01]
(assert $out_of_gas@1167@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 728 | False | dead]
; [else-branch: 728 | True | live]
(push) ; 4
; [else-branch: 728 | True]
(pop) ; 4
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 729 | True | live]
; [else-branch: 729 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 729 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
; [then-branch: 730 | False | dead]
; [else-branch: 730 | True | live]
(push) ; 6
; [else-branch: 730 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1158@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1158@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 731 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1158@01, 3)) | live]
; [else-branch: 731 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1158@01, 3)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 731 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1158@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1158@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
; [then-branch: 732 | False | live]
; [else-branch: 732 | True | live]
(push) ; 8
; [then-branch: 732 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 732 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 731 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1158@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1158@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1158@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1158@01 3))))))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1216@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 733 | !(0 <= q$a@1216@01) | live]
; [else-branch: 733 | 0 <= q$a@1216@01 | live]
(push) ; 7
; [then-branch: 733 | !(0 <= q$a@1216@01)]
(assert (not (<= 0 q$a@1216@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 733 | 0 <= q$a@1216@01]
(assert (<= 0 q$a@1216@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1216@01) (not (<= 0 q$a@1216@01))))
(push) ; 6
; [then-branch: 734 | 0 <= q$a@1216@01 && q$a@1216@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 734 | !(0 <= q$a@1216@01 && q$a@1216@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 734 | 0 <= q$a@1216@01 && q$a@1216@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1216@01)
  (<= q$a@1216@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 735 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1216@01) | live]
; [else-branch: 735 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1216@01)) | live]
(push) ; 9
; [then-branch: 735 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1216@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
(pop) ; 9
(push) ; 9
; [else-branch: 735 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1216@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01)))
(push) ; 8
; [then-branch: 736 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1216@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1216@01) | live]
; [else-branch: 736 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1216@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1216@01)) | live]
(push) ; 9
; [then-branch: 736 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1216@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1216@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 10
; [then-branch: 737 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1158@01, 1)) | live]
; [else-branch: 737 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1158@01, 1)) | live]
(push) ; 11
; [then-branch: 737 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1158@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1158@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 737 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1158@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1158@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1158@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1158@01 1))))))
(pop) ; 9
(push) ; 9
; [else-branch: 736 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1216@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1216@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1158@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1158@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 734 | !(0 <= q$a@1216@01 && q$a@1216@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1216@01)
    (<= q$a@1216@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1216@01)
    (<= q$a@1216@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1216@01)
    (<= q$a@1216@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1158@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1158@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1216@01)
      (<= q$a@1216@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1216@01)
    (<= q$a@1216@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1216@01 Int)) (!
  (and
    (or (<= 0 q$a@1216@01) (not (<= 0 q$a@1216@01)))
    (=>
      (and
        (<= 0 q$a@1216@01)
        (<= q$a@1216@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1216@01)
        (<= q$a@1216@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1158@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1158@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1216@01)
          (<= q$a@1216@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1216@01)
        (<= q$a@1216@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1953@17@1953@397-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1216@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1216@01)
        (<= q$a@1216@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1953@17@1953@397|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1216@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1216@01)
        (<= q$a@1216@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1216@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1953@17@1953@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1217@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 738 | !(0 <= q$a@1217@01) | live]
; [else-branch: 738 | 0 <= q$a@1217@01 | live]
(push) ; 7
; [then-branch: 738 | !(0 <= q$a@1217@01)]
(assert (not (<= 0 q$a@1217@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 738 | 0 <= q$a@1217@01]
(assert (<= 0 q$a@1217@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1217@01) (not (<= 0 q$a@1217@01))))
(push) ; 6
; [then-branch: 739 | 0 <= q$a@1217@01 && q$a@1217@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 739 | !(0 <= q$a@1217@01 && q$a@1217@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 739 | 0 <= q$a@1217@01 && q$a@1217@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1217@01)
  (<= q$a@1217@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 740 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1217@01)) | live]
; [else-branch: 740 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1217@01) | live]
(push) ; 9
; [then-branch: 740 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1217@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 740 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1217@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01))))
(push) ; 8
; [then-branch: 741 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1217@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1217@01)) | live]
; [else-branch: 741 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1217@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1217@01))) | live]
(push) ; 9
; [then-branch: 741 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1217@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1217@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 742 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) != q$a@1217@01 | live]
; [else-branch: 742 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) == q$a@1217@01 | live]
(push) ; 11
; [then-branch: 742 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) != q$a@1217@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0)) q$a@1217@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 742 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) == q$a@1217@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0)) q$a@1217@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0)) q$a@1217@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0)) q$a@1217@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 741 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1217@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1217@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0)) q$a@1217@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0)) q$a@1217@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 739 | !(0 <= q$a@1217@01 && q$a@1217@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1217@01)
    (<= q$a@1217@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1217@01)
    (<= q$a@1217@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1217@01)
    (<= q$a@1217@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0)) q$a@1217@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0)) q$a@1217@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1217@01)
      (<= q$a@1217@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1217@01)
    (<= q$a@1217@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1217@01 Int)) (!
  (and
    (or (<= 0 q$a@1217@01) (not (<= 0 q$a@1217@01)))
    (=>
      (and
        (<= 0 q$a@1217@01)
        (<= q$a@1217@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1217@01)
        (<= q$a@1217@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0)) q$a@1217@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
                  q$a@1217@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1217@01)
          (<= q$a@1217@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1217@01)
        (<= q$a@1217@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1954@17@1954@361-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1217@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1217@01)
        (<= q$a@1217@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1954@17@1954@361|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1217@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1217@01)
        (<= q$a@1217@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1217@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1954@17@1954@361|)))
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1218@01 $Snap)
(assert (= $t@1218@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1169@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1219@01 $Struct)
(assert (=
  self@1219@01
  ($struct_set<$Struct> self@1158@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1158@01 11))
    l$havoc$1@1169@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 4
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 727 | !($out_of_gas@1167@01)]
(assert (not $out_of_gas@1167@01))
(pop) ; 3
; [eval] !$out_of_gas
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@1167@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@1167@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 743 | !($out_of_gas@1167@01) | live]
; [else-branch: 743 | $out_of_gas@1167@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 743 | !($out_of_gas@1167@01)]
(assert (not $out_of_gas@1167@01))
; [exec]
; label end
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 744 | True | live]
; [else-branch: 744 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 744 | True]
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
; [then-branch: 745 | False | dead]
; [else-branch: 745 | True | live]
(push) ; 6
; [else-branch: 745 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1158@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1158@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 746 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1158@01, 3)) | live]
; [else-branch: 746 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1158@01, 3)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 746 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1158@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1158@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
; [then-branch: 747 | False | live]
; [else-branch: 747 | True | live]
(push) ; 8
; [then-branch: 747 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 747 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 746 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1158@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1158@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1158@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1158@01 3))))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1220@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 748 | !(0 <= q$a@1220@01) | live]
; [else-branch: 748 | 0 <= q$a@1220@01 | live]
(push) ; 7
; [then-branch: 748 | !(0 <= q$a@1220@01)]
(assert (not (<= 0 q$a@1220@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 748 | 0 <= q$a@1220@01]
(assert (<= 0 q$a@1220@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1220@01) (not (<= 0 q$a@1220@01))))
(push) ; 6
; [then-branch: 749 | 0 <= q$a@1220@01 && q$a@1220@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 749 | !(0 <= q$a@1220@01 && q$a@1220@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 749 | 0 <= q$a@1220@01 && q$a@1220@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1220@01)
  (<= q$a@1220@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 750 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1220@01) | live]
; [else-branch: 750 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1220@01)) | live]
(push) ; 9
; [then-branch: 750 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1220@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
(pop) ; 9
(push) ; 9
; [else-branch: 750 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1220@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01)))
(push) ; 8
; [then-branch: 751 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1220@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1220@01) | live]
; [else-branch: 751 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1220@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1220@01)) | live]
(push) ; 9
; [then-branch: 751 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1220@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1220@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 10
; [then-branch: 752 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1158@01, 1)) | live]
; [else-branch: 752 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1158@01, 1)) | live]
(push) ; 11
; [then-branch: 752 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1158@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1158@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 752 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1158@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1158@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1158@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1158@01 1))))))
(pop) ; 9
(push) ; 9
; [else-branch: 751 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1220@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1220@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1158@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1158@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 749 | !(0 <= q$a@1220@01 && q$a@1220@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1220@01)
    (<= q$a@1220@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1220@01)
    (<= q$a@1220@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1220@01)
    (<= q$a@1220@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1158@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1158@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1220@01)
      (<= q$a@1220@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1220@01)
    (<= q$a@1220@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1220@01 Int)) (!
  (and
    (or (<= 0 q$a@1220@01) (not (<= 0 q$a@1220@01)))
    (=>
      (and
        (<= 0 q$a@1220@01)
        (<= q$a@1220@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1220@01)
        (<= q$a@1220@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1158@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1158@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1220@01)
          (<= q$a@1220@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1220@01)
        (<= q$a@1220@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1948@13@1948@393-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1220@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1220@01)
        (<= q$a@1220@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1948@13@1948@393|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1220@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1220@01)
        (<= q$a@1220@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1220@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1948@13@1948@393|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1221@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 753 | !(0 <= q$a@1221@01) | live]
; [else-branch: 753 | 0 <= q$a@1221@01 | live]
(push) ; 7
; [then-branch: 753 | !(0 <= q$a@1221@01)]
(assert (not (<= 0 q$a@1221@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 753 | 0 <= q$a@1221@01]
(assert (<= 0 q$a@1221@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1221@01) (not (<= 0 q$a@1221@01))))
(push) ; 6
; [then-branch: 754 | 0 <= q$a@1221@01 && q$a@1221@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 754 | !(0 <= q$a@1221@01 && q$a@1221@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 754 | 0 <= q$a@1221@01 && q$a@1221@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1221@01)
  (<= q$a@1221@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 755 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1221@01)) | live]
; [else-branch: 755 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1221@01) | live]
(push) ; 9
; [then-branch: 755 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1221@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 755 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1221@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01))))
(push) ; 8
; [then-branch: 756 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1221@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1221@01)) | live]
; [else-branch: 756 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1221@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1221@01))) | live]
(push) ; 9
; [then-branch: 756 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1221@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1221@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 757 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) != q$a@1221@01 | live]
; [else-branch: 757 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) == q$a@1221@01 | live]
(push) ; 11
; [then-branch: 757 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) != q$a@1221@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0)) q$a@1221@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 757 | $struct_get[Int]($struct_loc[Int](msg@1154@01, 0)) == q$a@1221@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0)) q$a@1221@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0)) q$a@1221@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0)) q$a@1221@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 756 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1221@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1158@01, 2)), q$a@1221@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0)) q$a@1221@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0)) q$a@1221@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 754 | !(0 <= q$a@1221@01 && q$a@1221@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1221@01)
    (<= q$a@1221@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1221@01)
    (<= q$a@1221@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1221@01)
    (<= q$a@1221@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0)) q$a@1221@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0)) q$a@1221@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1221@01)
      (<= q$a@1221@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1221@01)
    (<= q$a@1221@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1221@01 Int)) (!
  (and
    (or (<= 0 q$a@1221@01) (not (<= 0 q$a@1221@01)))
    (=>
      (and
        (<= 0 q$a@1221@01)
        (<= q$a@1221@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1221@01)
        (<= q$a@1221@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0)) q$a@1221@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
                  q$a@1221@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1221@01)
          (<= q$a@1221@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1221@01)
        (<= q$a@1221@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1949@13@1949@357-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1221@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1221@01)
        (<= q$a@1221@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1949@13@1949@357|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1221@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1221@01)
        (<= q$a@1221@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1158@01 2)) q$a@1221@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1949@13@1949@357|)))
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1222@01 $Snap)
(assert (= $t@1222@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1169@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1223@01 $Struct)
(assert (=
  self@1223@01
  ($struct_set<$Struct> self@1158@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1158@01 11))
    l$havoc$1@1169@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 4
; [eval] !$succ
; [then-branch: 758 | False | dead]
; [else-branch: 758 | True | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 758 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 743 | $out_of_gas@1167@01]
(assert $out_of_gas@1167@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$balanceOf ----------
(declare-const l$_owner@1224@01 Int)
(declare-const $succ@1225@01 Bool)
(declare-const $res@1226@01 Int)
(declare-const l$_owner@1227@01 Int)
(declare-const $succ@1228@01 Bool)
(declare-const $res@1229@01 Int)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@1230@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@1231@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@1232@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@1233@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@1234@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@1235@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@1236@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@1237@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@1238@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@1239@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@1240@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@1241@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@1242@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@1243@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@1244@01 Int)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@1245@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@1246@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1247@01 $Snap)
(assert (= $t@1247@01 ($Snap.combine ($Snap.first $t@1247@01) ($Snap.second $t@1247@01))))
(assert (= ($Snap.first $t@1247@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1234@01 0))))
(assert (= ($Snap.second $t@1247@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1234@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1248@01 $Snap)
(assert (= $t@1248@01 ($Snap.combine ($Snap.first $t@1248@01) ($Snap.second $t@1248@01))))
(assert (= ($Snap.first $t@1248@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1234@01 1))))
(assert (= ($Snap.second $t@1248@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1234@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1249@01 $Snap)
(assert (= $t@1249@01 ($Snap.combine ($Snap.first $t@1249@01) ($Snap.second $t@1249@01))))
(assert (= ($Snap.first $t@1249@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1234@01 3))))
(assert (= ($Snap.second $t@1249@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1234@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
(declare-const $t@1250@01 $Snap)
(assert (= $t@1250@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 4)): Seq[Int])
; [eval] $struct_loc(self, 4)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1234@01 4))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
(declare-const $t@1251@01 $Snap)
(assert (= $t@1251@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 5)): Seq[Int])
; [eval] $struct_loc(self, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1234@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1252@01 $Snap)
(assert (= $t@1252@01 ($Snap.combine ($Snap.first $t@1252@01) ($Snap.second $t@1252@01))))
(assert (= ($Snap.first $t@1252@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1234@01 6))))
(assert (= ($Snap.second $t@1252@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1234@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1253@01 $Snap)
(assert (= $t@1253@01 ($Snap.combine ($Snap.first $t@1253@01) ($Snap.second $t@1253@01))))
(assert (= ($Snap.first $t@1253@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1234@01 7))))
(assert (= ($Snap.second $t@1253@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1234@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1254@01 $Snap)
(assert (= $t@1254@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@1255@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 759 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1234@01, 8)), $q3@1255@01)) | live]
; [else-branch: 759 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1234@01, 8)), $q3@1255@01) | live]
(push) ; 5
; [then-branch: 759 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1234@01, 8)), $q3@1255@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 8)) $q3@1255@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 759 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1234@01, 8)), $q3@1255@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 8)) $q3@1255@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 8)) $q3@1255@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 8)) $q3@1255@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1255@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 8)) $q3@1255@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 8)) $q3@1255@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 8)) $q3@1255@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1989@11@1989@345-aux|)))
(assert (forall (($q3@1255@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 8)) $q3@1255@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 8)) $q3@1255@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 8)) $q3@1255@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1989@11@1989@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@1256@01 $Snap)
(assert (= $t@1256@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@1257@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1257@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 8)) $q3@1257@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 8)) $q3@1257@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1990@11@1990@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@1258@01 $Snap)
(assert (= $t@1258@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@1259@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@1260@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(push) ; 5
; [then-branch: 760 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1234@01, 9)), $q4@1259@01), $q5@1260@01)) | live]
; [else-branch: 760 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1234@01, 9)), $q4@1259@01), $q5@1260@01) | live]
(push) ; 6
; [then-branch: 760 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1234@01, 9)), $q4@1259@01), $q5@1260@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1234@01 9)) $q4@1259@01) $q5@1260@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 760 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1234@01, 9)), $q4@1259@01), $q5@1260@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1234@01 9)) $q4@1259@01) $q5@1260@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1234@01 9)) $q4@1259@01) $q5@1260@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1234@01 9)) $q4@1259@01) $q5@1260@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@1260@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1234@01 9)) $q4@1259@01) $q5@1260@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1234@01 9)) $q4@1259@01) $q5@1260@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1234@01 9)) $q4@1259@01) $q5@1260@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1991@131@1991@597-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1259@01 Int)) (!
  (forall (($q5@1260@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1234@01 9)) $q4@1259@01) $q5@1260@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1234@01 9)) $q4@1259@01) $q5@1260@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1234@01 9)) $q4@1259@01) $q5@1260@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1991@131@1991@597-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1234@01 9)) $q4@1259@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1991@11@1991@598-aux|)))
(assert (forall (($q4@1259@01 Int)) (!
  (forall (($q5@1260@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1234@01 9)) $q4@1259@01) $q5@1260@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1234@01 9)) $q4@1259@01) $q5@1260@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1234@01 9)) $q4@1259@01) $q5@1260@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1991@131@1991@597|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1234@01 9)) $q4@1259@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1991@11@1991@598|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@1261@01 $Snap)
(assert (= $t@1261@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@1262@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@1263@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1262@01 Int)) (!
  (forall (($q5@1263@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1234@01 9)) $q4@1262@01) $q5@1263@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1234@01 9)) $q4@1262@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1234@01 9)) $q4@1262@01) $q5@1263@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1992@131@1992@505|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1234@01 9)) $q4@1262@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1992@11@1992@506|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 10)): Int) &&
;   ($struct_get($struct_loc(self, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1264@01 $Snap)
(assert (= $t@1264@01 ($Snap.combine ($Snap.first $t@1264@01) ($Snap.second $t@1264@01))))
(assert (= ($Snap.first $t@1264@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 10)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1234@01 10))))
(assert (= ($Snap.second $t@1264@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1234@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 11)): Int) &&
;   ($struct_get($struct_loc(self, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1265@01 $Snap)
(assert (= $t@1265@01 ($Snap.combine ($Snap.first $t@1265@01) ($Snap.second $t@1265@01))))
(assert (= ($Snap.first $t@1265@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 11)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1234@01 11))))
(assert (= ($Snap.second $t@1265@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1234@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 12)): Int) &&
;   ($struct_get($struct_loc(self, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1266@01 $Snap)
(assert (= $t@1266@01 ($Snap.combine ($Snap.first $t@1266@01) ($Snap.second $t@1266@01))))
(assert (= ($Snap.first $t@1266@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@1234@01 12))))
(assert (= ($Snap.second $t@1266@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1234@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1267@01 $Snap)
(assert (= $t@1267@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@1268@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(push) ; 4
; [then-branch: 761 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1234@01, 14)), $q6@1268@01)) | live]
; [else-branch: 761 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1234@01, 14)), $q6@1268@01) | live]
(push) ; 5
; [then-branch: 761 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1234@01, 14)), $q6@1268@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 14)) $q6@1268@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 761 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1234@01, 14)), $q6@1268@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 14)) $q6@1268@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 14)) $q6@1268@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 14)) $q6@1268@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1268@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 14)) $q6@1268@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 14)) $q6@1268@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 14)) $q6@1268@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1996@11@1996@348-aux|)))
(assert (forall (($q6@1268@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 14)) $q6@1268@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 14)) $q6@1268@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 14)) $q6@1268@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1996@11@1996@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $t@1269@01 $Snap)
(assert (= $t@1269@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $q6@1270@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1270@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 14)) $q6@1270@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 14)) $q6@1270@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1997@11@1997@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1271@01 $Snap)
(assert (= $t@1271@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@1272@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(push) ; 4
; [then-branch: 762 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1234@01, 15)), $q7@1272@01)) | live]
; [else-branch: 762 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1234@01, 15)), $q7@1272@01) | live]
(push) ; 5
; [then-branch: 762 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1234@01, 15)), $q7@1272@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 15)) $q7@1272@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 762 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1234@01, 15)), $q7@1272@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 15)) $q7@1272@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 15)) $q7@1272@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 15)) $q7@1272@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1272@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 15)) $q7@1272@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 15)) $q7@1272@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 15)) $q7@1272@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1998@11@1998@348-aux|)))
(assert (forall (($q7@1272@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 15)) $q7@1272@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 15)) $q7@1272@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 15)) $q7@1272@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1998@11@1998@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $t@1273@01 $Snap)
(assert (= $t@1273@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $q7@1274@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
; [eval] ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1274@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 15)) $q7@1274@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 15)) $q7@1274@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@1999@11@1999@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@1275@01 $Snap)
(assert (= $t@1275@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1234@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1276@01 $Snap)
(assert (= $t@1276@01 ($Snap.combine ($Snap.first $t@1276@01) ($Snap.second $t@1276@01))))
(assert (= ($Snap.first $t@1276@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@1276@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$_owner &&
;   l$_owner <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1277@01 $Snap)
(assert (= $t@1277@01 ($Snap.combine ($Snap.first $t@1277@01) ($Snap.second $t@1277@01))))
(assert (= ($Snap.first $t@1277@01) $Snap.unit))
; [eval] 0 <= l$_owner
(assert (<= 0 l$_owner@1227@01))
(assert (= ($Snap.second $t@1277@01) $Snap.unit))
; [eval] l$_owner <= 1461501637330902918203684832716283019655932542975
(assert (<= l$_owner@1227@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1278@01 $Snap)
(assert (= $t@1278@01 ($Snap.combine ($Snap.first $t@1278@01) ($Snap.second $t@1278@01))))
(assert (= ($Snap.first $t@1278@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1231@01 0))))
(assert (= ($Snap.second $t@1278@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1231@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1279@01 $Snap)
(assert (= $t@1279@01 ($Snap.combine ($Snap.first $t@1279@01) ($Snap.second $t@1279@01))))
(assert (= ($Snap.first $t@1279@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1231@01 1))))
(assert (= ($Snap.second $t@1279@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1231@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1280@01 $Snap)
(assert (= $t@1280@01 ($Snap.combine ($Snap.first $t@1280@01) ($Snap.second $t@1280@01))))
(assert (= ($Snap.first $t@1280@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1231@01 2))))
(assert (= ($Snap.second $t@1280@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1231@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@1281@01 $Snap)
(assert (= $t@1281@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@1231@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1282@01 $Snap)
(assert (= $t@1282@01 ($Snap.combine ($Snap.first $t@1282@01) ($Snap.second $t@1282@01))))
(assert (= ($Snap.first $t@1282@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1231@01 4))))
(assert (= ($Snap.second $t@1282@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1231@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@1283@01 $Snap)
(assert (= $t@1283@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@1231@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1284@01 $Snap)
(assert (= $t@1284@01 ($Snap.combine ($Snap.first $t@1284@01) ($Snap.second $t@1284@01))))
(assert (= ($Snap.first $t@1284@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))))
(assert (= ($Snap.second $t@1284@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1285@01 $Snap)
(assert (= $t@1285@01 ($Snap.combine ($Snap.first $t@1285@01) ($Snap.second $t@1285@01))))
(assert (= ($Snap.first $t@1285@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1230@01 1))))
(assert (= ($Snap.second $t@1285@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1230@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1286@01 $Snap)
(assert (= $t@1286@01 ($Snap.combine ($Snap.first $t@1286@01) ($Snap.second $t@1286@01))))
(assert (= ($Snap.first $t@1286@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1230@01 2))))
(assert (= ($Snap.second $t@1286@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1230@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@1287@01 $Snap)
(assert (= $t@1287@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1230@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@1288@01 $Snap)
(assert (= $t@1288@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $t@1289@01 $Snap)
(assert (= $t@1289@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $a@1290@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@1291@01 $Snap)
(assert (= $t@1291@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1230@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $res := $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   l$_owner): Int)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_owner): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_owner): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_owner): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(declare-const $res@1292@01 Int)
(assert (=
  $res@1292@01
  ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1234@01 8)) l$_owner@1227@01)))))
; [exec]
; label return
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@1243@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@1243@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 763 | $out_of_gas@1243@01 | live]
; [else-branch: 763 | !($out_of_gas@1243@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 763 | $out_of_gas@1243@01]
(assert $out_of_gas@1243@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 764 | False | dead]
; [else-branch: 764 | True | live]
(push) ; 4
; [else-branch: 764 | True]
(pop) ; 4
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 765 | True | live]
; [else-branch: 765 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 765 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
; [then-branch: 766 | False | dead]
; [else-branch: 766 | True | live]
(push) ; 6
; [else-branch: 766 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1234@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1234@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 767 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1234@01, 3)) | live]
; [else-branch: 767 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1234@01, 3)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 767 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1234@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1234@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
; [then-branch: 768 | False | live]
; [else-branch: 768 | True | live]
(push) ; 8
; [then-branch: 768 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 768 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 767 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1234@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1234@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1234@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1234@01 3))))))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1293@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 769 | !(0 <= q$a@1293@01) | live]
; [else-branch: 769 | 0 <= q$a@1293@01 | live]
(push) ; 7
; [then-branch: 769 | !(0 <= q$a@1293@01)]
(assert (not (<= 0 q$a@1293@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 769 | 0 <= q$a@1293@01]
(assert (<= 0 q$a@1293@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1293@01) (not (<= 0 q$a@1293@01))))
(push) ; 6
; [then-branch: 770 | 0 <= q$a@1293@01 && q$a@1293@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 770 | !(0 <= q$a@1293@01 && q$a@1293@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 770 | 0 <= q$a@1293@01 && q$a@1293@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1293@01)
  (<= q$a@1293@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 771 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1293@01) | live]
; [else-branch: 771 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1293@01)) | live]
(push) ; 9
; [then-branch: 771 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1293@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
(pop) ; 9
(push) ; 9
; [else-branch: 771 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1293@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01)))
(push) ; 8
; [then-branch: 772 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1293@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1293@01) | live]
; [else-branch: 772 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1293@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1293@01)) | live]
(push) ; 9
; [then-branch: 772 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1293@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1293@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 10
; [then-branch: 773 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1234@01, 1)) | live]
; [else-branch: 773 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1234@01, 1)) | live]
(push) ; 11
; [then-branch: 773 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1234@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1234@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 773 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1234@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1234@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1234@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1234@01 1))))))
(pop) ; 9
(push) ; 9
; [else-branch: 772 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1293@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1293@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1234@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1234@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 770 | !(0 <= q$a@1293@01 && q$a@1293@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1293@01)
    (<= q$a@1293@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1293@01)
    (<= q$a@1293@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1293@01)
    (<= q$a@1293@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1234@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1234@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1293@01)
      (<= q$a@1293@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1293@01)
    (<= q$a@1293@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1293@01 Int)) (!
  (and
    (or (<= 0 q$a@1293@01) (not (<= 0 q$a@1293@01)))
    (=>
      (and
        (<= 0 q$a@1293@01)
        (<= q$a@1293@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1293@01)
        (<= q$a@1293@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1234@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1234@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1293@01)
          (<= q$a@1293@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1293@01)
        (<= q$a@1293@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2057@17@2057@397-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1293@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1293@01)
        (<= q$a@1293@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2057@17@2057@397|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1293@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1293@01)
        (<= q$a@1293@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1293@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2057@17@2057@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1294@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 774 | !(0 <= q$a@1294@01) | live]
; [else-branch: 774 | 0 <= q$a@1294@01 | live]
(push) ; 7
; [then-branch: 774 | !(0 <= q$a@1294@01)]
(assert (not (<= 0 q$a@1294@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 774 | 0 <= q$a@1294@01]
(assert (<= 0 q$a@1294@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1294@01) (not (<= 0 q$a@1294@01))))
(push) ; 6
; [then-branch: 775 | 0 <= q$a@1294@01 && q$a@1294@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 775 | !(0 <= q$a@1294@01 && q$a@1294@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 775 | 0 <= q$a@1294@01 && q$a@1294@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1294@01)
  (<= q$a@1294@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 776 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1294@01)) | live]
; [else-branch: 776 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1294@01) | live]
(push) ; 9
; [then-branch: 776 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1294@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 776 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1294@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01))))
(push) ; 8
; [then-branch: 777 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1294@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1294@01)) | live]
; [else-branch: 777 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1294@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1294@01))) | live]
(push) ; 9
; [then-branch: 777 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1294@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1294@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 778 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) != q$a@1294@01 | live]
; [else-branch: 778 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) == q$a@1294@01 | live]
(push) ; 11
; [then-branch: 778 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) != q$a@1294@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0)) q$a@1294@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 778 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) == q$a@1294@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0)) q$a@1294@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0)) q$a@1294@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0)) q$a@1294@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 777 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1294@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1294@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0)) q$a@1294@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0)) q$a@1294@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 775 | !(0 <= q$a@1294@01 && q$a@1294@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1294@01)
    (<= q$a@1294@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1294@01)
    (<= q$a@1294@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1294@01)
    (<= q$a@1294@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0)) q$a@1294@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0)) q$a@1294@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1294@01)
      (<= q$a@1294@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1294@01)
    (<= q$a@1294@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1294@01 Int)) (!
  (and
    (or (<= 0 q$a@1294@01) (not (<= 0 q$a@1294@01)))
    (=>
      (and
        (<= 0 q$a@1294@01)
        (<= q$a@1294@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1294@01)
        (<= q$a@1294@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0)) q$a@1294@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
                  q$a@1294@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1294@01)
          (<= q$a@1294@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1294@01)
        (<= q$a@1294@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2058@17@2058@361-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1294@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1294@01)
        (<= q$a@1294@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2058@17@2058@361|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1294@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1294@01)
        (<= q$a@1294@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1294@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2058@17@2058@361|)))
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1295@01 $Snap)
(assert (= $t@1295@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1245@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1296@01 $Struct)
(assert (=
  self@1296@01
  ($struct_set<$Struct> self@1234@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1234@01 11))
    l$havoc$1@1245@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 4
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 763 | !($out_of_gas@1243@01)]
(assert (not $out_of_gas@1243@01))
(pop) ; 3
; [eval] !$out_of_gas
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@1243@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@1243@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 779 | !($out_of_gas@1243@01) | live]
; [else-branch: 779 | $out_of_gas@1243@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 779 | !($out_of_gas@1243@01)]
(assert (not $out_of_gas@1243@01))
; [exec]
; label end
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 780 | True | live]
; [else-branch: 780 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 780 | True]
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
; [then-branch: 781 | False | dead]
; [else-branch: 781 | True | live]
(push) ; 6
; [else-branch: 781 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1234@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1234@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 782 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1234@01, 3)) | live]
; [else-branch: 782 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1234@01, 3)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 782 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1234@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1234@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
; [then-branch: 783 | False | live]
; [else-branch: 783 | True | live]
(push) ; 8
; [then-branch: 783 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 783 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 782 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1234@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1234@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1234@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1234@01 3))))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1297@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 784 | !(0 <= q$a@1297@01) | live]
; [else-branch: 784 | 0 <= q$a@1297@01 | live]
(push) ; 7
; [then-branch: 784 | !(0 <= q$a@1297@01)]
(assert (not (<= 0 q$a@1297@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 784 | 0 <= q$a@1297@01]
(assert (<= 0 q$a@1297@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1297@01) (not (<= 0 q$a@1297@01))))
(push) ; 6
; [then-branch: 785 | 0 <= q$a@1297@01 && q$a@1297@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 785 | !(0 <= q$a@1297@01 && q$a@1297@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 785 | 0 <= q$a@1297@01 && q$a@1297@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1297@01)
  (<= q$a@1297@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 786 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1297@01) | live]
; [else-branch: 786 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1297@01)) | live]
(push) ; 9
; [then-branch: 786 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1297@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
(pop) ; 9
(push) ; 9
; [else-branch: 786 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1297@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01)))
(push) ; 8
; [then-branch: 787 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1297@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1297@01) | live]
; [else-branch: 787 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1297@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1297@01)) | live]
(push) ; 9
; [then-branch: 787 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1297@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1297@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 10
; [then-branch: 788 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1234@01, 1)) | live]
; [else-branch: 788 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1234@01, 1)) | live]
(push) ; 11
; [then-branch: 788 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1234@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1234@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 788 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1234@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1234@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1234@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1234@01 1))))))
(pop) ; 9
(push) ; 9
; [else-branch: 787 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1297@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1297@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1234@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1234@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 785 | !(0 <= q$a@1297@01 && q$a@1297@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1297@01)
    (<= q$a@1297@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1297@01)
    (<= q$a@1297@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1297@01)
    (<= q$a@1297@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1234@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1234@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1297@01)
      (<= q$a@1297@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1297@01)
    (<= q$a@1297@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1297@01 Int)) (!
  (and
    (or (<= 0 q$a@1297@01) (not (<= 0 q$a@1297@01)))
    (=>
      (and
        (<= 0 q$a@1297@01)
        (<= q$a@1297@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1297@01)
        (<= q$a@1297@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1234@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1234@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1297@01)
          (<= q$a@1297@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1297@01)
        (<= q$a@1297@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2052@13@2052@393-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1297@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1297@01)
        (<= q$a@1297@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2052@13@2052@393|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1297@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1297@01)
        (<= q$a@1297@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1297@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2052@13@2052@393|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1298@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 789 | !(0 <= q$a@1298@01) | live]
; [else-branch: 789 | 0 <= q$a@1298@01 | live]
(push) ; 7
; [then-branch: 789 | !(0 <= q$a@1298@01)]
(assert (not (<= 0 q$a@1298@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 789 | 0 <= q$a@1298@01]
(assert (<= 0 q$a@1298@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1298@01) (not (<= 0 q$a@1298@01))))
(push) ; 6
; [then-branch: 790 | 0 <= q$a@1298@01 && q$a@1298@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 790 | !(0 <= q$a@1298@01 && q$a@1298@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 790 | 0 <= q$a@1298@01 && q$a@1298@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1298@01)
  (<= q$a@1298@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 791 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1298@01)) | live]
; [else-branch: 791 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1298@01) | live]
(push) ; 9
; [then-branch: 791 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1298@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 791 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1298@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01))))
(push) ; 8
; [then-branch: 792 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1298@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1298@01)) | live]
; [else-branch: 792 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1298@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1298@01))) | live]
(push) ; 9
; [then-branch: 792 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1298@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1298@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 793 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) != q$a@1298@01 | live]
; [else-branch: 793 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) == q$a@1298@01 | live]
(push) ; 11
; [then-branch: 793 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) != q$a@1298@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0)) q$a@1298@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 793 | $struct_get[Int]($struct_loc[Int](msg@1230@01, 0)) == q$a@1298@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0)) q$a@1298@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0)) q$a@1298@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0)) q$a@1298@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 792 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1298@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1234@01, 2)), q$a@1298@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0)) q$a@1298@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0)) q$a@1298@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 790 | !(0 <= q$a@1298@01 && q$a@1298@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1298@01)
    (<= q$a@1298@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1298@01)
    (<= q$a@1298@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1298@01)
    (<= q$a@1298@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0)) q$a@1298@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0)) q$a@1298@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1298@01)
      (<= q$a@1298@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1298@01)
    (<= q$a@1298@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1298@01 Int)) (!
  (and
    (or (<= 0 q$a@1298@01) (not (<= 0 q$a@1298@01)))
    (=>
      (and
        (<= 0 q$a@1298@01)
        (<= q$a@1298@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1298@01)
        (<= q$a@1298@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0)) q$a@1298@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1230@01 0))
                  q$a@1298@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1298@01)
          (<= q$a@1298@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1298@01)
        (<= q$a@1298@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2053@13@2053@357-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1298@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1298@01)
        (<= q$a@1298@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2053@13@2053@357|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1298@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1298@01)
        (<= q$a@1298@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1234@01 2)) q$a@1298@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2053@13@2053@357|)))
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1299@01 $Snap)
(assert (= $t@1299@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1245@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1300@01 $Struct)
(assert (=
  self@1300@01
  ($struct_set<$Struct> self@1234@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1234@01 11))
    l$havoc$1@1245@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 4
; [eval] !$succ
; [then-branch: 794 | False | dead]
; [else-branch: 794 | True | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 794 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 779 | $out_of_gas@1243@01]
(assert $out_of_gas@1243@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$transfer ----------
(declare-const l$_to@1301@01 Int)
(declare-const l$_value@1302@01 $Int)
(declare-const $succ@1303@01 Bool)
(declare-const $res@1304@01 Bool)
(declare-const l$_to@1305@01 Int)
(declare-const l$_value@1306@01 $Int)
(declare-const $succ@1307@01 Bool)
(declare-const $res@1308@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@1309@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@1310@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@1311@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@1312@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@1313@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@1314@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@1315@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@1316@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@1317@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@1318@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@1319@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@1320@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@1321@01 Bool)
; [exec]
; var l$_sender: Int
(declare-const l$_sender@1322@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@1323@01 Bool)
; [exec]
; var l$havoc: Bool
(declare-const l$havoc@1324@01 Bool)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@1325@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@1326@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1327@01 $Snap)
(assert (= $t@1327@01 ($Snap.combine ($Snap.first $t@1327@01) ($Snap.second $t@1327@01))))
(assert (= ($Snap.first $t@1327@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1313@01 0))))
(assert (= ($Snap.second $t@1327@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1328@01 $Snap)
(assert (= $t@1328@01 ($Snap.combine ($Snap.first $t@1328@01) ($Snap.second $t@1328@01))))
(assert (= ($Snap.first $t@1328@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1313@01 1))))
(assert (= ($Snap.second $t@1328@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1329@01 $Snap)
(assert (= $t@1329@01 ($Snap.combine ($Snap.first $t@1329@01) ($Snap.second $t@1329@01))))
(assert (= ($Snap.first $t@1329@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1313@01 3))))
(assert (= ($Snap.second $t@1329@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
(declare-const $t@1330@01 $Snap)
(assert (= $t@1330@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 4)): Seq[Int])
; [eval] $struct_loc(self, 4)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1313@01 4))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
(declare-const $t@1331@01 $Snap)
(assert (= $t@1331@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 5)): Seq[Int])
; [eval] $struct_loc(self, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1313@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1332@01 $Snap)
(assert (= $t@1332@01 ($Snap.combine ($Snap.first $t@1332@01) ($Snap.second $t@1332@01))))
(assert (= ($Snap.first $t@1332@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1313@01 6))))
(assert (= ($Snap.second $t@1332@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1333@01 $Snap)
(assert (= $t@1333@01 ($Snap.combine ($Snap.first $t@1333@01) ($Snap.second $t@1333@01))))
(assert (= ($Snap.first $t@1333@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1313@01 7))))
(assert (= ($Snap.second $t@1333@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1334@01 $Snap)
(assert (= $t@1334@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@1335@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 795 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 8)), $q3@1335@01)) | live]
; [else-branch: 795 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 8)), $q3@1335@01) | live]
(push) ; 5
; [then-branch: 795 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 8)), $q3@1335@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) $q3@1335@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 795 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 8)), $q3@1335@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) $q3@1335@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) $q3@1335@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) $q3@1335@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1335@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) $q3@1335@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) $q3@1335@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) $q3@1335@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2094@11@2094@345-aux|)))
(assert (forall (($q3@1335@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) $q3@1335@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) $q3@1335@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) $q3@1335@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2094@11@2094@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@1336@01 $Snap)
(assert (= $t@1336@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@1337@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1337@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) $q3@1337@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) $q3@1337@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2095@11@2095@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@1338@01 $Snap)
(assert (= $t@1338@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@1339@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@1340@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(push) ; 5
; [then-branch: 796 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1313@01, 9)), $q4@1339@01), $q5@1340@01)) | live]
; [else-branch: 796 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1313@01, 9)), $q4@1339@01), $q5@1340@01) | live]
(push) ; 6
; [then-branch: 796 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1313@01, 9)), $q4@1339@01), $q5@1340@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1313@01 9)) $q4@1339@01) $q5@1340@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 796 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1313@01, 9)), $q4@1339@01), $q5@1340@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1313@01 9)) $q4@1339@01) $q5@1340@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1313@01 9)) $q4@1339@01) $q5@1340@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1313@01 9)) $q4@1339@01) $q5@1340@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@1340@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1313@01 9)) $q4@1339@01) $q5@1340@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1313@01 9)) $q4@1339@01) $q5@1340@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1313@01 9)) $q4@1339@01) $q5@1340@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2096@131@2096@597-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1339@01 Int)) (!
  (forall (($q5@1340@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1313@01 9)) $q4@1339@01) $q5@1340@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1313@01 9)) $q4@1339@01) $q5@1340@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1313@01 9)) $q4@1339@01) $q5@1340@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2096@131@2096@597-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1313@01 9)) $q4@1339@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2096@11@2096@598-aux|)))
(assert (forall (($q4@1339@01 Int)) (!
  (forall (($q5@1340@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1313@01 9)) $q4@1339@01) $q5@1340@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1313@01 9)) $q4@1339@01) $q5@1340@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1313@01 9)) $q4@1339@01) $q5@1340@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2096@131@2096@597|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1313@01 9)) $q4@1339@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2096@11@2096@598|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@1341@01 $Snap)
(assert (= $t@1341@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@1342@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@1343@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1342@01 Int)) (!
  (forall (($q5@1343@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1313@01 9)) $q4@1342@01) $q5@1343@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1313@01 9)) $q4@1342@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1313@01 9)) $q4@1342@01) $q5@1343@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2097@131@2097@505|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1313@01 9)) $q4@1342@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2097@11@2097@506|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 10)): Int) &&
;   ($struct_get($struct_loc(self, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1344@01 $Snap)
(assert (= $t@1344@01 ($Snap.combine ($Snap.first $t@1344@01) ($Snap.second $t@1344@01))))
(assert (= ($Snap.first $t@1344@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 10)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1313@01 10))))
(assert (= ($Snap.second $t@1344@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 11)): Int) &&
;   ($struct_get($struct_loc(self, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1345@01 $Snap)
(assert (= $t@1345@01 ($Snap.combine ($Snap.first $t@1345@01) ($Snap.second $t@1345@01))))
(assert (= ($Snap.first $t@1345@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 11)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1313@01 11))))
(assert (= ($Snap.second $t@1345@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 12)): Int) &&
;   ($struct_get($struct_loc(self, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1346@01 $Snap)
(assert (= $t@1346@01 ($Snap.combine ($Snap.first $t@1346@01) ($Snap.second $t@1346@01))))
(assert (= ($Snap.first $t@1346@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 12))))
(assert (= ($Snap.second $t@1346@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1347@01 $Snap)
(assert (= $t@1347@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@1348@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(push) ; 4
; [then-branch: 797 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 14)), $q6@1348@01)) | live]
; [else-branch: 797 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 14)), $q6@1348@01) | live]
(push) ; 5
; [then-branch: 797 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 14)), $q6@1348@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 14)) $q6@1348@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 797 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 14)), $q6@1348@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 14)) $q6@1348@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 14)) $q6@1348@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 14)) $q6@1348@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1348@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 14)) $q6@1348@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 14)) $q6@1348@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 14)) $q6@1348@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2101@11@2101@348-aux|)))
(assert (forall (($q6@1348@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 14)) $q6@1348@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 14)) $q6@1348@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 14)) $q6@1348@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2101@11@2101@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $t@1349@01 $Snap)
(assert (= $t@1349@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $q6@1350@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1350@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 14)) $q6@1350@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 14)) $q6@1350@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2102@11@2102@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1351@01 $Snap)
(assert (= $t@1351@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@1352@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(push) ; 4
; [then-branch: 798 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 15)), $q7@1352@01)) | live]
; [else-branch: 798 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 15)), $q7@1352@01) | live]
(push) ; 5
; [then-branch: 798 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 15)), $q7@1352@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 15)) $q7@1352@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 798 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 15)), $q7@1352@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 15)) $q7@1352@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 15)) $q7@1352@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 15)) $q7@1352@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1352@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 15)) $q7@1352@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 15)) $q7@1352@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 15)) $q7@1352@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2103@11@2103@348-aux|)))
(assert (forall (($q7@1352@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 15)) $q7@1352@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 15)) $q7@1352@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 15)) $q7@1352@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2103@11@2103@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $t@1353@01 $Snap)
(assert (= $t@1353@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $q7@1354@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
; [eval] ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1354@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 15)) $q7@1354@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 15)) $q7@1354@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2104@11@2104@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@1355@01 $Snap)
(assert (= $t@1355@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1356@01 $Snap)
(assert (= $t@1356@01 ($Snap.combine ($Snap.first $t@1356@01) ($Snap.second $t@1356@01))))
(assert (= ($Snap.first $t@1356@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@1356@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$_to &&
;   l$_to <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1357@01 $Snap)
(assert (= $t@1357@01 ($Snap.combine ($Snap.first $t@1357@01) ($Snap.second $t@1357@01))))
(assert (= ($Snap.first $t@1357@01) $Snap.unit))
; [eval] 0 <= l$_to
(assert (<= 0 l$_to@1305@01))
(assert (= ($Snap.second $t@1357@01) $Snap.unit))
; [eval] l$_to <= 1461501637330902918203684832716283019655932542975
(assert (<= l$_to@1305@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $unwrap(l$_value) &&
;   $unwrap(l$_value) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1358@01 $Snap)
(assert (= $t@1358@01 ($Snap.combine ($Snap.first $t@1358@01) ($Snap.second $t@1358@01))))
(assert (= ($Snap.first $t@1358@01) $Snap.unit))
; [eval] 0 <= $unwrap(l$_value)
; [eval] $unwrap(l$_value)
(assert (<= 0 ($unwrap<Int> l$_value@1306@01)))
(assert (= ($Snap.second $t@1358@01) $Snap.unit))
; [eval] $unwrap(l$_value) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$_value)
(assert (<=
  ($unwrap<Int> l$_value@1306@01)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1359@01 $Snap)
(assert (= $t@1359@01 ($Snap.combine ($Snap.first $t@1359@01) ($Snap.second $t@1359@01))))
(assert (= ($Snap.first $t@1359@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1310@01 0))))
(assert (= ($Snap.second $t@1359@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1310@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1360@01 $Snap)
(assert (= $t@1360@01 ($Snap.combine ($Snap.first $t@1360@01) ($Snap.second $t@1360@01))))
(assert (= ($Snap.first $t@1360@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1310@01 1))))
(assert (= ($Snap.second $t@1360@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1310@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1361@01 $Snap)
(assert (= $t@1361@01 ($Snap.combine ($Snap.first $t@1361@01) ($Snap.second $t@1361@01))))
(assert (= ($Snap.first $t@1361@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1310@01 2))))
(assert (= ($Snap.second $t@1361@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1310@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@1362@01 $Snap)
(assert (= $t@1362@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@1310@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1363@01 $Snap)
(assert (= $t@1363@01 ($Snap.combine ($Snap.first $t@1363@01) ($Snap.second $t@1363@01))))
(assert (= ($Snap.first $t@1363@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1310@01 4))))
(assert (= ($Snap.second $t@1363@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1310@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@1364@01 $Snap)
(assert (= $t@1364@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@1310@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1365@01 $Snap)
(assert (= $t@1365@01 ($Snap.combine ($Snap.first $t@1365@01) ($Snap.second $t@1365@01))))
(assert (= ($Snap.first $t@1365@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))))
(assert (= ($Snap.second $t@1365@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1366@01 $Snap)
(assert (= $t@1366@01 ($Snap.combine ($Snap.first $t@1366@01) ($Snap.second $t@1366@01))))
(assert (= ($Snap.first $t@1366@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1309@01 1))))
(assert (= ($Snap.second $t@1366@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1367@01 $Snap)
(assert (= $t@1367@01 ($Snap.combine ($Snap.first $t@1367@01) ($Snap.second $t@1367@01))))
(assert (= ($Snap.first $t@1367@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1309@01 2))))
(assert (= ($Snap.second $t@1367@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@1368@01 $Snap)
(assert (= $t@1368@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@1369@01 $Snap)
(assert (= $t@1369@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $t@1370@01 $Snap)
(assert (= $t@1370@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $a@1371@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@1372@01 $Snap)
(assert (= $t@1372@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; l$_sender := ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const l$_sender@1373@01 Int)
(assert (= l$_sender@1373@01 ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_value)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) l$_sender@1373@01)))
      ($unwrap<Int> l$_value@1306@01))
    0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) l$_sender@1373@01)))
    ($unwrap<Int> l$_value@1306@01))
  0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 799 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 8)), l$_sender@1373@01))) - $unwrap[Int](l$_value@1306@01) < 0 | live]
; [else-branch: 799 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 8)), l$_sender@1373@01))) - $unwrap[Int](l$_value@1306@01) < 0) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 799 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 8)), l$_sender@1373@01))) - $unwrap[Int](l$_value@1306@01) < 0]
(assert (<
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) l$_sender@1373@01)))
    ($unwrap<Int> l$_value@1306@01))
  0))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 800 | False | dead]
; [else-branch: 800 | True | live]
(push) ; 4
; [else-branch: 800 | True]
(pop) ; 4
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 801 | True | live]
; [else-branch: 801 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 801 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
; [then-branch: 802 | False | dead]
; [else-branch: 802 | True | live]
(push) ; 6
; [else-branch: 802 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1313@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 803 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1313@01, 3)) | live]
; [else-branch: 803 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1313@01, 3)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 803 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1313@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1313@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
; [then-branch: 804 | False | live]
; [else-branch: 804 | True | live]
(push) ; 8
; [then-branch: 804 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 804 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 803 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1313@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1313@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1313@01 3))))))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1374@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 805 | !(0 <= q$a@1374@01) | live]
; [else-branch: 805 | 0 <= q$a@1374@01 | live]
(push) ; 7
; [then-branch: 805 | !(0 <= q$a@1374@01)]
(assert (not (<= 0 q$a@1374@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 805 | 0 <= q$a@1374@01]
(assert (<= 0 q$a@1374@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1374@01) (not (<= 0 q$a@1374@01))))
(push) ; 6
; [then-branch: 806 | 0 <= q$a@1374@01 && q$a@1374@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 806 | !(0 <= q$a@1374@01 && q$a@1374@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 806 | 0 <= q$a@1374@01 && q$a@1374@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1374@01)
  (<= q$a@1374@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 807 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1374@01) | live]
; [else-branch: 807 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1374@01)) | live]
(push) ; 9
; [then-branch: 807 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1374@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
(pop) ; 9
(push) ; 9
; [else-branch: 807 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1374@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01)))
(push) ; 8
; [then-branch: 808 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1374@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1374@01) | live]
; [else-branch: 808 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1374@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1374@01)) | live]
(push) ; 9
; [then-branch: 808 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1374@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1374@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 10
; [then-branch: 809 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1313@01, 1)) | live]
; [else-branch: 809 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1313@01, 1)) | live]
(push) ; 11
; [then-branch: 809 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1313@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 809 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1313@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1313@01 1))))))
(pop) ; 9
(push) ; 9
; [else-branch: 808 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1374@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1374@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1313@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 806 | !(0 <= q$a@1374@01 && q$a@1374@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1374@01)
    (<= q$a@1374@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1374@01)
    (<= q$a@1374@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1374@01)
    (<= q$a@1374@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1374@01)
      (<= q$a@1374@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1374@01)
    (<= q$a@1374@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1374@01 Int)) (!
  (and
    (or (<= 0 q$a@1374@01) (not (<= 0 q$a@1374@01)))
    (=>
      (and
        (<= 0 q$a@1374@01)
        (<= q$a@1374@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1374@01)
        (<= q$a@1374@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1374@01)
          (<= q$a@1374@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1374@01)
        (<= q$a@1374@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2182@17@2182@397-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1374@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1374@01)
        (<= q$a@1374@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2182@17@2182@397|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1374@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1374@01)
        (<= q$a@1374@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1374@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2182@17@2182@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1375@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 810 | !(0 <= q$a@1375@01) | live]
; [else-branch: 810 | 0 <= q$a@1375@01 | live]
(push) ; 7
; [then-branch: 810 | !(0 <= q$a@1375@01)]
(assert (not (<= 0 q$a@1375@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 810 | 0 <= q$a@1375@01]
(assert (<= 0 q$a@1375@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1375@01) (not (<= 0 q$a@1375@01))))
(push) ; 6
; [then-branch: 811 | 0 <= q$a@1375@01 && q$a@1375@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 811 | !(0 <= q$a@1375@01 && q$a@1375@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 811 | 0 <= q$a@1375@01 && q$a@1375@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1375@01)
  (<= q$a@1375@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 812 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1375@01)) | live]
; [else-branch: 812 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1375@01) | live]
(push) ; 9
; [then-branch: 812 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1375@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 812 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1375@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01))))
(push) ; 8
; [then-branch: 813 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1375@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1375@01)) | live]
; [else-branch: 813 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1375@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1375@01))) | live]
(push) ; 9
; [then-branch: 813 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1375@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1375@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 814 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != q$a@1375@01 | live]
; [else-branch: 814 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == q$a@1375@01 | live]
(push) ; 11
; [then-branch: 814 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != q$a@1375@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1375@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 814 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == q$a@1375@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1375@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1375@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1375@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 813 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1375@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1375@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1375@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1375@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 811 | !(0 <= q$a@1375@01 && q$a@1375@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1375@01)
    (<= q$a@1375@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1375@01)
    (<= q$a@1375@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1375@01)
    (<= q$a@1375@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1375@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1375@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1375@01)
      (<= q$a@1375@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1375@01)
    (<= q$a@1375@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1375@01 Int)) (!
  (and
    (or (<= 0 q$a@1375@01) (not (<= 0 q$a@1375@01)))
    (=>
      (and
        (<= 0 q$a@1375@01)
        (<= q$a@1375@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1375@01)
        (<= q$a@1375@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1375@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
                  q$a@1375@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1375@01)
          (<= q$a@1375@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1375@01)
        (<= q$a@1375@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2183@17@2183@361-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1375@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1375@01)
        (<= q$a@1375@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2183@17@2183@361|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1375@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1375@01)
        (<= q$a@1375@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1375@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2183@17@2183@361|)))
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1376@01 $Snap)
(assert (= $t@1376@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1325@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1377@01 $Struct)
(assert (=
  self@1377@01
  ($struct_set<$Struct> self@1313@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1313@01 11))
    l$havoc$1@1325@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 4
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 799 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 8)), l$_sender@1373@01))) - $unwrap[Int](l$_value@1306@01) < 0)]
(assert (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) l$_sender@1373@01)))
      ($unwrap<Int> l$_value@1306@01))
    0)))
(pop) ; 3
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value) < 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_value)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) l$_sender@1373@01)))
    ($unwrap<Int> l$_value@1306@01))
  0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) l$_sender@1373@01)))
      ($unwrap<Int> l$_value@1306@01))
    0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 815 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 8)), l$_sender@1373@01))) - $unwrap[Int](l$_value@1306@01) < 0) | live]
; [else-branch: 815 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 8)), l$_sender@1373@01))) - $unwrap[Int](l$_value@1306@01) < 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 815 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 8)), l$_sender@1373@01))) - $unwrap[Int](l$_value@1306@01) < 0)]
(assert (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) l$_sender@1373@01)))
      ($unwrap<Int> l$_value@1306@01))
    0)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_value)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) l$_sender@1373@01)))
      ($unwrap<Int> l$_value@1306@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 816 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 8)), l$_sender@1373@01))) - $unwrap[Int](l$_value@1306@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 816 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 8)), l$_sender@1373@01))) - $unwrap[Int](l$_value@1306@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 816 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 8)), l$_sender@1373@01))) - $unwrap[Int](l$_value@1306@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) l$_sender@1373@01)))
      ($unwrap<Int> l$_value@1306@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 4
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_value)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) l$_sender@1373@01)))
    ($unwrap<Int> l$_value@1306@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) l$_sender@1373@01)))
      ($unwrap<Int> l$_value@1306@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 817 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 8)), l$_sender@1373@01))) - $unwrap[Int](l$_value@1306@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 817 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 8)), l$_sender@1373@01))) - $unwrap[Int](l$_value@1306@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 817 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 8)), l$_sender@1373@01))) - $unwrap[Int](l$_value@1306@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) l$_sender@1373@01)))
      ($unwrap<Int> l$_value@1306@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   l$_sender, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   l$_sender): Int))) -
;   $unwrap(l$_value)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_sender): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_value)
(declare-const self@1378@01 $Struct)
(assert (=
  self@1378@01
  ($struct_set<$Struct> self@1313@01 8 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) l$_sender@1373@01 (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) l$_sender@1373@01)))
    ($unwrap<Int> l$_value@1306@01))))))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_value)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1378@01 8)) l$_to@1305@01)))
      ($unwrap<Int> l$_value@1306@01))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 818 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1378@01, 8)), l$_to@1305@01))) + $unwrap[Int](l$_value@1306@01) < 0 | dead]
; [else-branch: 818 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1378@01, 8)), l$_to@1305@01))) + $unwrap[Int](l$_value@1306@01) < 0) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 818 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1378@01, 8)), l$_to@1305@01))) + $unwrap[Int](l$_value@1306@01) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1378@01 8)) l$_to@1305@01)))
      ($unwrap<Int> l$_value@1306@01))
    0)))
(pop) ; 5
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value) < 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_value)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1378@01 8)) l$_to@1305@01)))
    ($unwrap<Int> l$_value@1306@01))
  0)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1378@01 8)) l$_to@1305@01)))
      ($unwrap<Int> l$_value@1306@01))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 819 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1378@01, 8)), l$_to@1305@01))) + $unwrap[Int](l$_value@1306@01) < 0) | live]
; [else-branch: 819 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1378@01, 8)), l$_to@1305@01))) + $unwrap[Int](l$_value@1306@01) < 0 | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 819 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1378@01, 8)), l$_to@1305@01))) + $unwrap[Int](l$_value@1306@01) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1378@01 8)) l$_to@1305@01)))
      ($unwrap<Int> l$_value@1306@01))
    0)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_value)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1378@01 8)) l$_to@1305@01)))
      ($unwrap<Int> l$_value@1306@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1378@01 8)) l$_to@1305@01)))
    ($unwrap<Int> l$_value@1306@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 820 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1378@01, 8)), l$_to@1305@01))) + $unwrap[Int](l$_value@1306@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 820 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1378@01, 8)), l$_to@1305@01))) + $unwrap[Int](l$_value@1306@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 820 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1378@01, 8)), l$_to@1305@01))) + $unwrap[Int](l$_value@1306@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1378@01 8)) l$_to@1305@01)))
    ($unwrap<Int> l$_value@1306@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 821 | False | dead]
; [else-branch: 821 | True | live]
(push) ; 7
; [else-branch: 821 | True]
(pop) ; 7
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 822 | True | live]
; [else-branch: 822 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 822 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 8
; [then-branch: 823 | False | dead]
; [else-branch: 823 | True | live]
(push) ; 9
; [else-branch: 823 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1313@01 3))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 824 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1313@01, 3)) | live]
; [else-branch: 824 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1313@01, 3)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 824 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1313@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1313@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 10
; [then-branch: 825 | False | live]
; [else-branch: 825 | True | live]
(push) ; 11
; [then-branch: 825 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 825 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 824 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1313@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1313@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1313@01 3))))))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1379@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 826 | !(0 <= q$a@1379@01) | live]
; [else-branch: 826 | 0 <= q$a@1379@01 | live]
(push) ; 10
; [then-branch: 826 | !(0 <= q$a@1379@01)]
(assert (not (<= 0 q$a@1379@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 826 | 0 <= q$a@1379@01]
(assert (<= 0 q$a@1379@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1379@01) (not (<= 0 q$a@1379@01))))
(push) ; 9
; [then-branch: 827 | 0 <= q$a@1379@01 && q$a@1379@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 827 | !(0 <= q$a@1379@01 && q$a@1379@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 827 | 0 <= q$a@1379@01 && q$a@1379@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1379@01)
  (<= q$a@1379@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 11
; [then-branch: 828 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1379@01) | live]
; [else-branch: 828 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1379@01)) | live]
(push) ; 12
; [then-branch: 828 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1379@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
(pop) ; 12
(push) ; 12
; [else-branch: 828 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1379@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01)))
(push) ; 11
; [then-branch: 829 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1379@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1379@01) | live]
; [else-branch: 829 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1379@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1379@01)) | live]
(push) ; 12
; [then-branch: 829 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1379@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1379@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 13
; [then-branch: 830 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1313@01, 1)) | live]
; [else-branch: 830 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1313@01, 1)) | live]
(push) ; 14
; [then-branch: 830 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1313@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))))
(pop) ; 14
(push) ; 14
; [else-branch: 830 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1313@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1313@01 1))))))
(pop) ; 12
(push) ; 12
; [else-branch: 829 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1379@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1379@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1313@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 827 | !(0 <= q$a@1379@01 && q$a@1379@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1379@01)
    (<= q$a@1379@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1379@01)
    (<= q$a@1379@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1379@01)
    (<= q$a@1379@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1379@01)
      (<= q$a@1379@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1379@01)
    (<= q$a@1379@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1379@01 Int)) (!
  (and
    (or (<= 0 q$a@1379@01) (not (<= 0 q$a@1379@01)))
    (=>
      (and
        (<= 0 q$a@1379@01)
        (<= q$a@1379@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1379@01)
        (<= q$a@1379@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1379@01)
          (<= q$a@1379@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1379@01)
        (<= q$a@1379@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2182@17@2182@397-aux|)))
(push) ; 8
(assert (not (forall ((q$a@1379@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1379@01)
        (<= q$a@1379@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2182@17@2182@397|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1379@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1379@01)
        (<= q$a@1379@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1379@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2182@17@2182@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1380@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 831 | !(0 <= q$a@1380@01) | live]
; [else-branch: 831 | 0 <= q$a@1380@01 | live]
(push) ; 10
; [then-branch: 831 | !(0 <= q$a@1380@01)]
(assert (not (<= 0 q$a@1380@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 831 | 0 <= q$a@1380@01]
(assert (<= 0 q$a@1380@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1380@01) (not (<= 0 q$a@1380@01))))
(push) ; 9
; [then-branch: 832 | 0 <= q$a@1380@01 && q$a@1380@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 832 | !(0 <= q$a@1380@01 && q$a@1380@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 832 | 0 <= q$a@1380@01 && q$a@1380@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1380@01)
  (<= q$a@1380@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 11
; [then-branch: 833 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1380@01)) | live]
; [else-branch: 833 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1380@01) | live]
(push) ; 12
; [then-branch: 833 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1380@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 833 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1380@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01))))
(push) ; 11
; [then-branch: 834 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1380@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1380@01)) | live]
; [else-branch: 834 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1380@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1380@01))) | live]
(push) ; 12
; [then-branch: 834 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1380@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1380@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 13
; [then-branch: 835 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != q$a@1380@01 | live]
; [else-branch: 835 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == q$a@1380@01 | live]
(push) ; 14
; [then-branch: 835 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != q$a@1380@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1380@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 835 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == q$a@1380@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1380@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1380@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1380@01))))
(pop) ; 12
(push) ; 12
; [else-branch: 834 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1380@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1380@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1380@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1380@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)))))
(pop) ; 10
(push) ; 10
; [else-branch: 832 | !(0 <= q$a@1380@01 && q$a@1380@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1380@01)
    (<= q$a@1380@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1380@01)
    (<= q$a@1380@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1380@01)
    (<= q$a@1380@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1380@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1380@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1380@01)
      (<= q$a@1380@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1380@01)
    (<= q$a@1380@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1380@01 Int)) (!
  (and
    (or (<= 0 q$a@1380@01) (not (<= 0 q$a@1380@01)))
    (=>
      (and
        (<= 0 q$a@1380@01)
        (<= q$a@1380@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1380@01)
        (<= q$a@1380@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1380@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
                  q$a@1380@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1380@01)
          (<= q$a@1380@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1380@01)
        (<= q$a@1380@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2183@17@2183@361-aux|)))
(push) ; 8
(assert (not (forall ((q$a@1380@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1380@01)
        (<= q$a@1380@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2183@17@2183@361|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1380@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1380@01)
        (<= q$a@1380@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1380@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2183@17@2183@361|)))
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1381@01 $Snap)
(assert (= $t@1381@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1325@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1382@01 $Struct)
(assert (=
  self@1382@01
  ($struct_set<$Struct> self@1313@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1313@01 11))
    l$havoc$1@1325@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 7
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 820 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1378@01, 8)), l$_to@1305@01))) + $unwrap[Int](l$_value@1306@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1378@01 8)) l$_to@1305@01)))
      ($unwrap<Int> l$_value@1306@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 6
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_value)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1378@01 8)) l$_to@1305@01)))
    ($unwrap<Int> l$_value@1306@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1378@01 8)) l$_to@1305@01)))
      ($unwrap<Int> l$_value@1306@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 836 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1378@01, 8)), l$_to@1305@01))) + $unwrap[Int](l$_value@1306@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 836 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1378@01, 8)), l$_to@1305@01))) + $unwrap[Int](l$_value@1306@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 836 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1378@01, 8)), l$_to@1305@01))) + $unwrap[Int](l$_value@1306@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1378@01 8)) l$_to@1305@01)))
      ($unwrap<Int> l$_value@1306@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   l$_to, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   l$_to): Int))) +
;   $unwrap(l$_value)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_value)
(declare-const self@1383@01 $Struct)
(assert (=
  self@1383@01
  ($struct_set<$Struct> self@1378@01 8 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1378@01 8)) l$_to@1305@01 (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1378@01 8)) l$_to@1305@01)))
    ($unwrap<Int> l$_value@1306@01))))))
; [exec]
; inhale acc(e$Transfer(l$_sender, l$_to, $unwrap(l$_value)), write)
; [eval] $unwrap(l$_value)
(declare-const $t@1384@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $res := true
; [exec]
; label return
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not $out_of_gas@1323@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not $out_of_gas@1323@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 837 | $out_of_gas@1323@01 | live]
; [else-branch: 837 | !($out_of_gas@1323@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 837 | $out_of_gas@1323@01]
(assert $out_of_gas@1323@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 838 | False | dead]
; [else-branch: 838 | True | live]
(push) ; 8
; [else-branch: 838 | True]
(pop) ; 8
; [eval] !$succ
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 839 | True | live]
; [else-branch: 839 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 839 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
; [then-branch: 840 | False | dead]
; [else-branch: 840 | True | live]
(push) ; 10
; [else-branch: 840 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1313@01 3))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 841 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1313@01, 3)) | live]
; [else-branch: 841 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1313@01, 3)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 841 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1313@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1313@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 11
; [then-branch: 842 | False | live]
; [else-branch: 842 | True | live]
(push) ; 12
; [then-branch: 842 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 842 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 841 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1313@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1313@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1313@01 3))))))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1385@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 843 | !(0 <= q$a@1385@01) | live]
; [else-branch: 843 | 0 <= q$a@1385@01 | live]
(push) ; 11
; [then-branch: 843 | !(0 <= q$a@1385@01)]
(assert (not (<= 0 q$a@1385@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 843 | 0 <= q$a@1385@01]
(assert (<= 0 q$a@1385@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1385@01) (not (<= 0 q$a@1385@01))))
(push) ; 10
; [then-branch: 844 | 0 <= q$a@1385@01 && q$a@1385@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 844 | !(0 <= q$a@1385@01 && q$a@1385@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 844 | 0 <= q$a@1385@01 && q$a@1385@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1385@01)
  (<= q$a@1385@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 12
; [then-branch: 845 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1385@01) | live]
; [else-branch: 845 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1385@01)) | live]
(push) ; 13
; [then-branch: 845 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1385@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
(pop) ; 13
(push) ; 13
; [else-branch: 845 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1385@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01)))
(push) ; 12
; [then-branch: 846 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1385@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1385@01) | live]
; [else-branch: 846 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1385@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1385@01)) | live]
(push) ; 13
; [then-branch: 846 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1385@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1385@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 14
; [then-branch: 847 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1313@01, 1)) | live]
; [else-branch: 847 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1313@01, 1)) | live]
(push) ; 15
; [then-branch: 847 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1313@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))))
(pop) ; 15
(push) ; 15
; [else-branch: 847 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1313@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1313@01 1))))))
(pop) ; 13
(push) ; 13
; [else-branch: 846 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1385@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1385@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1313@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))))
(pop) ; 11
(push) ; 11
; [else-branch: 844 | !(0 <= q$a@1385@01 && q$a@1385@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1385@01)
    (<= q$a@1385@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1385@01)
    (<= q$a@1385@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1385@01)
    (<= q$a@1385@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1385@01)
      (<= q$a@1385@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1385@01)
    (<= q$a@1385@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1385@01 Int)) (!
  (and
    (or (<= 0 q$a@1385@01) (not (<= 0 q$a@1385@01)))
    (=>
      (and
        (<= 0 q$a@1385@01)
        (<= q$a@1385@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1385@01)
        (<= q$a@1385@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1385@01)
          (<= q$a@1385@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1385@01)
        (<= q$a@1385@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2182@17@2182@397-aux|)))
(push) ; 9
(assert (not (forall ((q$a@1385@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1385@01)
        (<= q$a@1385@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2182@17@2182@397|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1385@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1385@01)
        (<= q$a@1385@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1385@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2182@17@2182@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1386@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 848 | !(0 <= q$a@1386@01) | live]
; [else-branch: 848 | 0 <= q$a@1386@01 | live]
(push) ; 11
; [then-branch: 848 | !(0 <= q$a@1386@01)]
(assert (not (<= 0 q$a@1386@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 848 | 0 <= q$a@1386@01]
(assert (<= 0 q$a@1386@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1386@01) (not (<= 0 q$a@1386@01))))
(push) ; 10
; [then-branch: 849 | 0 <= q$a@1386@01 && q$a@1386@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 849 | !(0 <= q$a@1386@01 && q$a@1386@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 849 | 0 <= q$a@1386@01 && q$a@1386@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1386@01)
  (<= q$a@1386@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 12
; [then-branch: 850 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1386@01)) | live]
; [else-branch: 850 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1386@01) | live]
(push) ; 13
; [then-branch: 850 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1386@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 850 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1386@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01))))
(push) ; 12
; [then-branch: 851 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1386@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1386@01)) | live]
; [else-branch: 851 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1386@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1386@01))) | live]
(push) ; 13
; [then-branch: 851 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1386@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1386@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 14
; [then-branch: 852 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != q$a@1386@01 | live]
; [else-branch: 852 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == q$a@1386@01 | live]
(push) ; 15
; [then-branch: 852 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != q$a@1386@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1386@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 852 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == q$a@1386@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1386@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1386@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1386@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 851 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1386@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1386@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1386@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1386@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 849 | !(0 <= q$a@1386@01 && q$a@1386@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1386@01)
    (<= q$a@1386@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1386@01)
    (<= q$a@1386@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1386@01)
    (<= q$a@1386@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1386@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1386@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1386@01)
      (<= q$a@1386@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1386@01)
    (<= q$a@1386@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1386@01 Int)) (!
  (and
    (or (<= 0 q$a@1386@01) (not (<= 0 q$a@1386@01)))
    (=>
      (and
        (<= 0 q$a@1386@01)
        (<= q$a@1386@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1386@01)
        (<= q$a@1386@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1386@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
                  q$a@1386@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1386@01)
          (<= q$a@1386@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1386@01)
        (<= q$a@1386@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2183@17@2183@361-aux|)))
(push) ; 9
(assert (not (forall ((q$a@1386@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1386@01)
        (<= q$a@1386@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2183@17@2183@361|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1386@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1386@01)
        (<= q$a@1386@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1386@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2183@17@2183@361|)))
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1387@01 $Snap)
(assert (= $t@1387@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1325@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1388@01 $Struct)
(assert (=
  self@1388@01
  ($struct_set<$Struct> self@1313@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1313@01 11))
    l$havoc$1@1325@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 8
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 837 | !($out_of_gas@1323@01)]
(assert (not $out_of_gas@1323@01))
(pop) ; 7
; [eval] !$out_of_gas
(push) ; 7
(set-option :timeout 10)
(assert (not $out_of_gas@1323@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not $out_of_gas@1323@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 853 | !($out_of_gas@1323@01) | live]
; [else-branch: 853 | $out_of_gas@1323@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 853 | !($out_of_gas@1323@01)]
(assert (not $out_of_gas@1323@01))
; [exec]
; label end
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 854 | True | live]
; [else-branch: 854 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 854 | True]
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1383@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 3)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 855 | $struct_get[Int]($struct_loc[Int](self@1383@01, 3)) != $struct_get[Int]($struct_loc[Int](self@1313@01, 3)) | dead]
; [else-branch: 855 | $struct_get[Int]($struct_loc[Int](self@1383@01, 3)) == $struct_get[Int]($struct_loc[Int](self@1313@01, 3)) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 855 | $struct_get[Int]($struct_loc[Int](self@1383@01, 3)) == $struct_get[Int]($struct_loc[Int](self@1313@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1383@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1383@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 3))))
; [exec]
; assert ($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1383@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1383@01 3))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 856 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1383@01, 3)) | live]
; [else-branch: 856 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1383@01, 3)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 856 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1383@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1383@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 11
; [then-branch: 857 | $struct_get[Int]($struct_loc[Int](self@1383@01, 1)) != $struct_get[Int]($struct_loc[Int](self@1313@01, 1)) | live]
; [else-branch: 857 | $struct_get[Int]($struct_loc[Int](self@1383@01, 1)) == $struct_get[Int]($struct_loc[Int](self@1313@01, 1)) | live]
(push) ; 12
; [then-branch: 857 | $struct_get[Int]($struct_loc[Int](self@1383@01, 1)) != $struct_get[Int]($struct_loc[Int](self@1313@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@1383@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))))
(pop) ; 12
(push) ; 12
; [else-branch: 857 | $struct_get[Int]($struct_loc[Int](self@1383@01, 1)) == $struct_get[Int]($struct_loc[Int](self@1313@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1383@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@1313@01 1))))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@1383@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1383@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@1313@01 1))))))
(pop) ; 10
(push) ; 10
; [else-branch: 856 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1383@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1383@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1383@01 3))))
  (and
    (not
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1383@01 3))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> self@1383@01 1))
        ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> self@1383@01 1))
          ($struct_get<Int> ($struct_loc<Int> self@1313@01 1))))))))
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1383@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1383@01 3))))))
(push) ; 9
(assert (not (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1383@01 3))))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1383@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1383@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1313@01 0)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1383@01 3))))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1383@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@1313@01 1)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1383@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1313@01 0))))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1389@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 858 | !(0 <= q$a@1389@01) | live]
; [else-branch: 858 | 0 <= q$a@1389@01 | live]
(push) ; 11
; [then-branch: 858 | !(0 <= q$a@1389@01)]
(assert (not (<= 0 q$a@1389@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 858 | 0 <= q$a@1389@01]
(assert (<= 0 q$a@1389@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1389@01) (not (<= 0 q$a@1389@01))))
(push) ; 10
; [then-branch: 859 | 0 <= q$a@1389@01 && q$a@1389@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 859 | !(0 <= q$a@1389@01 && q$a@1389@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 859 | 0 <= q$a@1389@01 && q$a@1389@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1389@01)
  (<= q$a@1389@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 12
; [then-branch: 860 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1389@01) | live]
; [else-branch: 860 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1389@01)) | live]
(push) ; 13
; [then-branch: 860 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1389@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
(pop) ; 13
(push) ; 13
; [else-branch: 860 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1389@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01)))
(push) ; 12
; [then-branch: 861 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1389@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1383@01, 2)), q$a@1389@01) | live]
; [else-branch: 861 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1389@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1383@01, 2)), q$a@1389@01)) | live]
(push) ; 13
; [then-branch: 861 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1389@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1383@01, 2)), q$a@1389@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 14
; [then-branch: 862 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1383@01, 1)) | live]
; [else-branch: 862 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1383@01, 1)) | live]
(push) ; 15
; [then-branch: 862 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1383@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1383@01 1)))))
(pop) ; 15
(push) ; 15
; [else-branch: 862 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1383@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1383@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1383@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1383@01 1))))))
(pop) ; 13
(push) ; 13
; [else-branch: 861 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1389@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1383@01, 2)), q$a@1389@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1383@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1383@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01))))
(pop) ; 11
(push) ; 11
; [else-branch: 859 | !(0 <= q$a@1389@01 && q$a@1389@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1389@01)
    (<= q$a@1389@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1389@01)
    (<= q$a@1389@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1389@01)
    (<= q$a@1389@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1383@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1383@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1389@01)
      (<= q$a@1389@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1389@01)
    (<= q$a@1389@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1389@01 Int)) (!
  (and
    (or (<= 0 q$a@1389@01) (not (<= 0 q$a@1389@01)))
    (=>
      (and
        (<= 0 q$a@1389@01)
        (<= q$a@1389@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1389@01)
        (<= q$a@1389@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1383@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1383@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1389@01)
          (<= q$a@1389@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1389@01)
        (<= q$a@1389@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2177@13@2177@393-aux|)))
(assert (forall ((q$a@1389@01 Int)) (!
  (and
    (or (<= 0 q$a@1389@01) (not (<= 0 q$a@1389@01)))
    (=>
      (and
        (<= 0 q$a@1389@01)
        (<= q$a@1389@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1389@01)
        (<= q$a@1389@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1383@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1383@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1389@01)
          (<= q$a@1389@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1389@01)
        (<= q$a@1389@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2177@13@2177@393-aux|)))
(push) ; 9
(assert (not (forall ((q$a@1389@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1389@01)
        (<= q$a@1389@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2177@13@2177@393|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1389@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1389@01)
        (<= q$a@1389@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1389@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1389@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2177@13@2177@393|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1390@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 863 | !(0 <= q$a@1390@01) | live]
; [else-branch: 863 | 0 <= q$a@1390@01 | live]
(push) ; 11
; [then-branch: 863 | !(0 <= q$a@1390@01)]
(assert (not (<= 0 q$a@1390@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 863 | 0 <= q$a@1390@01]
(assert (<= 0 q$a@1390@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1390@01) (not (<= 0 q$a@1390@01))))
(push) ; 10
; [then-branch: 864 | 0 <= q$a@1390@01 && q$a@1390@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 864 | !(0 <= q$a@1390@01 && q$a@1390@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 864 | 0 <= q$a@1390@01 && q$a@1390@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1390@01)
  (<= q$a@1390@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 12
; [then-branch: 865 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1390@01)) | live]
; [else-branch: 865 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1390@01) | live]
(push) ; 13
; [then-branch: 865 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1390@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 865 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1390@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01))))
(push) ; 12
; [then-branch: 866 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1390@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1383@01, 2)), q$a@1390@01)) | live]
; [else-branch: 866 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1390@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1383@01, 2)), q$a@1390@01))) | live]
(push) ; 13
; [then-branch: 866 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1390@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1383@01, 2)), q$a@1390@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 14
; [then-branch: 867 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != q$a@1390@01 | live]
; [else-branch: 867 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == q$a@1390@01 | live]
(push) ; 15
; [then-branch: 867 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) != q$a@1390@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1390@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 867 | $struct_get[Int]($struct_loc[Int](msg@1309@01, 0)) == q$a@1390@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1390@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1390@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1390@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 866 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1313@01, 2)), q$a@1390@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1383@01, 2)), q$a@1390@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01)))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1390@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1390@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 864 | !(0 <= q$a@1390@01 && q$a@1390@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1390@01)
    (<= q$a@1390@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1390@01)
    (<= q$a@1390@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1390@01)
    (<= q$a@1390@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1390@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1390@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1390@01)
      (<= q$a@1390@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1390@01)
    (<= q$a@1390@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1390@01 Int)) (!
  (and
    (or (<= 0 q$a@1390@01) (not (<= 0 q$a@1390@01)))
    (=>
      (and
        (<= 0 q$a@1390@01)
        (<= q$a@1390@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1390@01)
        (<= q$a@1390@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1390@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
                  q$a@1390@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1390@01)
          (<= q$a@1390@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1390@01)
        (<= q$a@1390@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2178@13@2178@357-aux|)))
(assert (forall ((q$a@1390@01 Int)) (!
  (and
    (or (<= 0 q$a@1390@01) (not (<= 0 q$a@1390@01)))
    (=>
      (and
        (<= 0 q$a@1390@01)
        (<= q$a@1390@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1390@01)
        (<= q$a@1390@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0)) q$a@1390@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1309@01 0))
                  q$a@1390@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1390@01)
          (<= q$a@1390@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1390@01)
        (<= q$a@1390@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2178@13@2178@357-aux|)))
(push) ; 9
(assert (not (forall ((q$a@1390@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1390@01)
        (<= q$a@1390@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2178@13@2178@357|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1390@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1390@01)
        (<= q$a@1390@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1313@01 2)) q$a@1390@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1383@01 2)) q$a@1390@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2178@13@2178@357|)))
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1391@01 $Snap)
(assert (= $t@1391@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1325@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1392@01 $Struct)
(assert (=
  self@1392@01
  ($struct_set<$Struct> self@1383@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1383@01 11))
    l$havoc$1@1325@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 8
; [eval] !$succ
; [then-branch: 868 | False | dead]
; [else-branch: 868 | True | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 868 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 853 | $out_of_gas@1323@01]
(assert $out_of_gas@1323@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 836 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1378@01, 8)), l$_to@1305@01))) + $unwrap[Int](l$_value@1306@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1378@01 8)) l$_to@1305@01)))
    ($unwrap<Int> l$_value@1306@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 815 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1313@01, 8)), l$_sender@1373@01))) - $unwrap[Int](l$_value@1306@01) < 0]
(assert (<
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1313@01 8)) l$_sender@1373@01)))
    ($unwrap<Int> l$_value@1306@01))
  0))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$transferFrom ----------
(declare-const l$_from@1393@01 Int)
(declare-const l$_to@1394@01 Int)
(declare-const l$_value@1395@01 $Int)
(declare-const $succ@1396@01 Bool)
(declare-const $res@1397@01 Bool)
(declare-const l$_from@1398@01 Int)
(declare-const l$_to@1399@01 Int)
(declare-const l$_value@1400@01 $Int)
(declare-const $succ@1401@01 Bool)
(declare-const $res@1402@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@1403@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@1404@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@1405@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@1406@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@1407@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@1408@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@1409@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@1410@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@1411@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@1412@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@1413@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@1414@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@1415@01 Bool)
; [exec]
; var l$_sender: Int
(declare-const l$_sender@1416@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@1417@01 Bool)
; [exec]
; var l$havoc: Bool
(declare-const l$havoc@1418@01 Bool)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@1419@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@1420@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1421@01 $Snap)
(assert (= $t@1421@01 ($Snap.combine ($Snap.first $t@1421@01) ($Snap.second $t@1421@01))))
(assert (= ($Snap.first $t@1421@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1407@01 0))))
(assert (= ($Snap.second $t@1421@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1422@01 $Snap)
(assert (= $t@1422@01 ($Snap.combine ($Snap.first $t@1422@01) ($Snap.second $t@1422@01))))
(assert (= ($Snap.first $t@1422@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1407@01 1))))
(assert (= ($Snap.second $t@1422@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1423@01 $Snap)
(assert (= $t@1423@01 ($Snap.combine ($Snap.first $t@1423@01) ($Snap.second $t@1423@01))))
(assert (= ($Snap.first $t@1423@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1407@01 3))))
(assert (= ($Snap.second $t@1423@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
(declare-const $t@1424@01 $Snap)
(assert (= $t@1424@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 4)): Seq[Int])
; [eval] $struct_loc(self, 4)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1407@01 4))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
(declare-const $t@1425@01 $Snap)
(assert (= $t@1425@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 5)): Seq[Int])
; [eval] $struct_loc(self, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1407@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1426@01 $Snap)
(assert (= $t@1426@01 ($Snap.combine ($Snap.first $t@1426@01) ($Snap.second $t@1426@01))))
(assert (= ($Snap.first $t@1426@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1407@01 6))))
(assert (= ($Snap.second $t@1426@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1427@01 $Snap)
(assert (= $t@1427@01 ($Snap.combine ($Snap.first $t@1427@01) ($Snap.second $t@1427@01))))
(assert (= ($Snap.first $t@1427@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1407@01 7))))
(assert (= ($Snap.second $t@1427@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1428@01 $Snap)
(assert (= $t@1428@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@1429@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 869 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 8)), $q3@1429@01)) | live]
; [else-branch: 869 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 8)), $q3@1429@01) | live]
(push) ; 5
; [then-branch: 869 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 8)), $q3@1429@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) $q3@1429@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 869 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 8)), $q3@1429@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) $q3@1429@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) $q3@1429@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) $q3@1429@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1429@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) $q3@1429@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) $q3@1429@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) $q3@1429@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2219@11@2219@345-aux|)))
(assert (forall (($q3@1429@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) $q3@1429@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) $q3@1429@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) $q3@1429@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2219@11@2219@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@1430@01 $Snap)
(assert (= $t@1430@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@1431@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1431@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) $q3@1431@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) $q3@1431@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2220@11@2220@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@1432@01 $Snap)
(assert (= $t@1432@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@1433@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@1434@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(push) ; 5
; [then-branch: 870 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1407@01, 9)), $q4@1433@01), $q5@1434@01)) | live]
; [else-branch: 870 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1407@01, 9)), $q4@1433@01), $q5@1434@01) | live]
(push) ; 6
; [then-branch: 870 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1407@01, 9)), $q4@1433@01), $q5@1434@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1407@01 9)) $q4@1433@01) $q5@1434@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 870 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1407@01, 9)), $q4@1433@01), $q5@1434@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1407@01 9)) $q4@1433@01) $q5@1434@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1407@01 9)) $q4@1433@01) $q5@1434@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1407@01 9)) $q4@1433@01) $q5@1434@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@1434@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1407@01 9)) $q4@1433@01) $q5@1434@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1407@01 9)) $q4@1433@01) $q5@1434@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1407@01 9)) $q4@1433@01) $q5@1434@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2221@131@2221@597-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1433@01 Int)) (!
  (forall (($q5@1434@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1407@01 9)) $q4@1433@01) $q5@1434@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1407@01 9)) $q4@1433@01) $q5@1434@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1407@01 9)) $q4@1433@01) $q5@1434@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2221@131@2221@597-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1407@01 9)) $q4@1433@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2221@11@2221@598-aux|)))
(assert (forall (($q4@1433@01 Int)) (!
  (forall (($q5@1434@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1407@01 9)) $q4@1433@01) $q5@1434@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1407@01 9)) $q4@1433@01) $q5@1434@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1407@01 9)) $q4@1433@01) $q5@1434@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2221@131@2221@597|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1407@01 9)) $q4@1433@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2221@11@2221@598|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@1435@01 $Snap)
(assert (= $t@1435@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@1436@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@1437@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1436@01 Int)) (!
  (forall (($q5@1437@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1407@01 9)) $q4@1436@01) $q5@1437@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1407@01 9)) $q4@1436@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1407@01 9)) $q4@1436@01) $q5@1437@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2222@131@2222@505|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1407@01 9)) $q4@1436@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2222@11@2222@506|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 10)): Int) &&
;   ($struct_get($struct_loc(self, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1438@01 $Snap)
(assert (= $t@1438@01 ($Snap.combine ($Snap.first $t@1438@01) ($Snap.second $t@1438@01))))
(assert (= ($Snap.first $t@1438@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 10)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1407@01 10))))
(assert (= ($Snap.second $t@1438@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 11)): Int) &&
;   ($struct_get($struct_loc(self, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1439@01 $Snap)
(assert (= $t@1439@01 ($Snap.combine ($Snap.first $t@1439@01) ($Snap.second $t@1439@01))))
(assert (= ($Snap.first $t@1439@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 11)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1407@01 11))))
(assert (= ($Snap.second $t@1439@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 12)): Int) &&
;   ($struct_get($struct_loc(self, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1440@01 $Snap)
(assert (= $t@1440@01 ($Snap.combine ($Snap.first $t@1440@01) ($Snap.second $t@1440@01))))
(assert (= ($Snap.first $t@1440@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 12))))
(assert (= ($Snap.second $t@1440@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1441@01 $Snap)
(assert (= $t@1441@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@1442@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(push) ; 4
; [then-branch: 871 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 14)), $q6@1442@01)) | live]
; [else-branch: 871 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 14)), $q6@1442@01) | live]
(push) ; 5
; [then-branch: 871 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 14)), $q6@1442@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 14)) $q6@1442@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 871 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 14)), $q6@1442@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 14)) $q6@1442@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 14)) $q6@1442@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 14)) $q6@1442@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1442@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 14)) $q6@1442@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 14)) $q6@1442@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 14)) $q6@1442@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2226@11@2226@348-aux|)))
(assert (forall (($q6@1442@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 14)) $q6@1442@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 14)) $q6@1442@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 14)) $q6@1442@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2226@11@2226@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $t@1443@01 $Snap)
(assert (= $t@1443@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $q6@1444@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1444@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 14)) $q6@1444@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 14)) $q6@1444@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2227@11@2227@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1445@01 $Snap)
(assert (= $t@1445@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@1446@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(push) ; 4
; [then-branch: 872 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 15)), $q7@1446@01)) | live]
; [else-branch: 872 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 15)), $q7@1446@01) | live]
(push) ; 5
; [then-branch: 872 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 15)), $q7@1446@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 15)) $q7@1446@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 872 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 15)), $q7@1446@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 15)) $q7@1446@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 15)) $q7@1446@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 15)) $q7@1446@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1446@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 15)) $q7@1446@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 15)) $q7@1446@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 15)) $q7@1446@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2228@11@2228@348-aux|)))
(assert (forall (($q7@1446@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 15)) $q7@1446@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 15)) $q7@1446@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 15)) $q7@1446@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2228@11@2228@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $t@1447@01 $Snap)
(assert (= $t@1447@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $q7@1448@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
; [eval] ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1448@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 15)) $q7@1448@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 15)) $q7@1448@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2229@11@2229@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@1449@01 $Snap)
(assert (= $t@1449@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1450@01 $Snap)
(assert (= $t@1450@01 ($Snap.combine ($Snap.first $t@1450@01) ($Snap.second $t@1450@01))))
(assert (= ($Snap.first $t@1450@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@1450@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$_from &&
;   l$_from <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1451@01 $Snap)
(assert (= $t@1451@01 ($Snap.combine ($Snap.first $t@1451@01) ($Snap.second $t@1451@01))))
(assert (= ($Snap.first $t@1451@01) $Snap.unit))
; [eval] 0 <= l$_from
(assert (<= 0 l$_from@1398@01))
(assert (= ($Snap.second $t@1451@01) $Snap.unit))
; [eval] l$_from <= 1461501637330902918203684832716283019655932542975
(assert (<= l$_from@1398@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$_to &&
;   l$_to <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1452@01 $Snap)
(assert (= $t@1452@01 ($Snap.combine ($Snap.first $t@1452@01) ($Snap.second $t@1452@01))))
(assert (= ($Snap.first $t@1452@01) $Snap.unit))
; [eval] 0 <= l$_to
(assert (<= 0 l$_to@1399@01))
(assert (= ($Snap.second $t@1452@01) $Snap.unit))
; [eval] l$_to <= 1461501637330902918203684832716283019655932542975
(assert (<= l$_to@1399@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $unwrap(l$_value) &&
;   $unwrap(l$_value) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1453@01 $Snap)
(assert (= $t@1453@01 ($Snap.combine ($Snap.first $t@1453@01) ($Snap.second $t@1453@01))))
(assert (= ($Snap.first $t@1453@01) $Snap.unit))
; [eval] 0 <= $unwrap(l$_value)
; [eval] $unwrap(l$_value)
(assert (<= 0 ($unwrap<Int> l$_value@1400@01)))
(assert (= ($Snap.second $t@1453@01) $Snap.unit))
; [eval] $unwrap(l$_value) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$_value)
(assert (<=
  ($unwrap<Int> l$_value@1400@01)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1454@01 $Snap)
(assert (= $t@1454@01 ($Snap.combine ($Snap.first $t@1454@01) ($Snap.second $t@1454@01))))
(assert (= ($Snap.first $t@1454@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1404@01 0))))
(assert (= ($Snap.second $t@1454@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1404@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1455@01 $Snap)
(assert (= $t@1455@01 ($Snap.combine ($Snap.first $t@1455@01) ($Snap.second $t@1455@01))))
(assert (= ($Snap.first $t@1455@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1404@01 1))))
(assert (= ($Snap.second $t@1455@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1404@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1456@01 $Snap)
(assert (= $t@1456@01 ($Snap.combine ($Snap.first $t@1456@01) ($Snap.second $t@1456@01))))
(assert (= ($Snap.first $t@1456@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1404@01 2))))
(assert (= ($Snap.second $t@1456@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1404@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@1457@01 $Snap)
(assert (= $t@1457@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@1404@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1458@01 $Snap)
(assert (= $t@1458@01 ($Snap.combine ($Snap.first $t@1458@01) ($Snap.second $t@1458@01))))
(assert (= ($Snap.first $t@1458@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1404@01 4))))
(assert (= ($Snap.second $t@1458@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1404@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@1459@01 $Snap)
(assert (= $t@1459@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@1404@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1460@01 $Snap)
(assert (= $t@1460@01 ($Snap.combine ($Snap.first $t@1460@01) ($Snap.second $t@1460@01))))
(assert (= ($Snap.first $t@1460@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))))
(assert (= ($Snap.second $t@1460@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1461@01 $Snap)
(assert (= $t@1461@01 ($Snap.combine ($Snap.first $t@1461@01) ($Snap.second $t@1461@01))))
(assert (= ($Snap.first $t@1461@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1403@01 1))))
(assert (= ($Snap.second $t@1461@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1462@01 $Snap)
(assert (= $t@1462@01 ($Snap.combine ($Snap.first $t@1462@01) ($Snap.second $t@1462@01))))
(assert (= ($Snap.first $t@1462@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1403@01 2))))
(assert (= ($Snap.second $t@1462@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@1463@01 $Snap)
(assert (= $t@1463@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@1464@01 $Snap)
(assert (= $t@1464@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $t@1465@01 $Snap)
(assert (= $t@1465@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $a@1466@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@1467@01 $Snap)
(assert (= $t@1467@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; l$_sender := ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const l$_sender@1468@01 Int)
(assert (= l$_sender@1468@01 ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int))) - $unwrap(l$_value) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int))) - $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_value)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) l$_from@1398@01)))
      ($unwrap<Int> l$_value@1400@01))
    0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) l$_from@1398@01)))
    ($unwrap<Int> l$_value@1400@01))
  0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 873 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 8)), l$_from@1398@01))) - $unwrap[Int](l$_value@1400@01) < 0 | live]
; [else-branch: 873 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 8)), l$_from@1398@01))) - $unwrap[Int](l$_value@1400@01) < 0) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 873 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 8)), l$_from@1398@01))) - $unwrap[Int](l$_value@1400@01) < 0]
(assert (<
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) l$_from@1398@01)))
    ($unwrap<Int> l$_value@1400@01))
  0))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 874 | False | dead]
; [else-branch: 874 | True | live]
(push) ; 4
; [else-branch: 874 | True]
(pop) ; 4
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 875 | True | live]
; [else-branch: 875 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 875 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
; [then-branch: 876 | False | dead]
; [else-branch: 876 | True | live]
(push) ; 6
; [else-branch: 876 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 877 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1407@01, 3)) | live]
; [else-branch: 877 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1407@01, 3)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 877 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1407@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
; [then-branch: 878 | False | live]
; [else-branch: 878 | True | live]
(push) ; 8
; [then-branch: 878 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 878 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 877 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1407@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1407@01 3))))))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1469@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 879 | !(0 <= q$a@1469@01) | live]
; [else-branch: 879 | 0 <= q$a@1469@01 | live]
(push) ; 7
; [then-branch: 879 | !(0 <= q$a@1469@01)]
(assert (not (<= 0 q$a@1469@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 879 | 0 <= q$a@1469@01]
(assert (<= 0 q$a@1469@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1469@01) (not (<= 0 q$a@1469@01))))
(push) ; 6
; [then-branch: 880 | 0 <= q$a@1469@01 && q$a@1469@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 880 | !(0 <= q$a@1469@01 && q$a@1469@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 880 | 0 <= q$a@1469@01 && q$a@1469@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1469@01)
  (<= q$a@1469@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 881 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1469@01) | live]
; [else-branch: 881 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1469@01)) | live]
(push) ; 9
; [then-branch: 881 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1469@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
(pop) ; 9
(push) ; 9
; [else-branch: 881 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1469@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01)))
(push) ; 8
; [then-branch: 882 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1469@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1469@01) | live]
; [else-branch: 882 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1469@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1469@01)) | live]
(push) ; 9
; [then-branch: 882 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1469@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1469@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 10
; [then-branch: 883 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1407@01, 1)) | live]
; [else-branch: 883 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1407@01, 1)) | live]
(push) ; 11
; [then-branch: 883 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1407@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 883 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1407@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1407@01 1))))))
(pop) ; 9
(push) ; 9
; [else-branch: 882 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1469@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1469@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1407@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 880 | !(0 <= q$a@1469@01 && q$a@1469@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1469@01)
    (<= q$a@1469@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1469@01)
    (<= q$a@1469@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1469@01)
    (<= q$a@1469@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1469@01)
      (<= q$a@1469@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1469@01)
    (<= q$a@1469@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1469@01 Int)) (!
  (and
    (or (<= 0 q$a@1469@01) (not (<= 0 q$a@1469@01)))
    (=>
      (and
        (<= 0 q$a@1469@01)
        (<= q$a@1469@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1469@01)
        (<= q$a@1469@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1469@01)
          (<= q$a@1469@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1469@01)
        (<= q$a@1469@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2316@17@2316@397-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1469@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1469@01)
        (<= q$a@1469@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2316@17@2316@397|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1469@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1469@01)
        (<= q$a@1469@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1469@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2316@17@2316@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1470@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 884 | !(0 <= q$a@1470@01) | live]
; [else-branch: 884 | 0 <= q$a@1470@01 | live]
(push) ; 7
; [then-branch: 884 | !(0 <= q$a@1470@01)]
(assert (not (<= 0 q$a@1470@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 884 | 0 <= q$a@1470@01]
(assert (<= 0 q$a@1470@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1470@01) (not (<= 0 q$a@1470@01))))
(push) ; 6
; [then-branch: 885 | 0 <= q$a@1470@01 && q$a@1470@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 885 | !(0 <= q$a@1470@01 && q$a@1470@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 885 | 0 <= q$a@1470@01 && q$a@1470@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1470@01)
  (<= q$a@1470@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 886 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1470@01)) | live]
; [else-branch: 886 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1470@01) | live]
(push) ; 9
; [then-branch: 886 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1470@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 886 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1470@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01))))
(push) ; 8
; [then-branch: 887 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1470@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1470@01)) | live]
; [else-branch: 887 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1470@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1470@01))) | live]
(push) ; 9
; [then-branch: 887 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1470@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1470@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 888 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != q$a@1470@01 | live]
; [else-branch: 888 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == q$a@1470@01 | live]
(push) ; 11
; [then-branch: 888 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != q$a@1470@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1470@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 888 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == q$a@1470@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1470@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1470@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1470@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 887 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1470@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1470@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1470@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1470@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 885 | !(0 <= q$a@1470@01 && q$a@1470@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1470@01)
    (<= q$a@1470@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1470@01)
    (<= q$a@1470@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1470@01)
    (<= q$a@1470@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1470@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1470@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1470@01)
      (<= q$a@1470@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1470@01)
    (<= q$a@1470@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1470@01 Int)) (!
  (and
    (or (<= 0 q$a@1470@01) (not (<= 0 q$a@1470@01)))
    (=>
      (and
        (<= 0 q$a@1470@01)
        (<= q$a@1470@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1470@01)
        (<= q$a@1470@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1470@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
                  q$a@1470@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1470@01)
          (<= q$a@1470@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1470@01)
        (<= q$a@1470@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2317@17@2317@361-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1470@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1470@01)
        (<= q$a@1470@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2317@17@2317@361|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1470@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1470@01)
        (<= q$a@1470@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1470@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2317@17@2317@361|)))
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1471@01 $Snap)
(assert (= $t@1471@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1419@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1472@01 $Struct)
(assert (=
  self@1472@01
  ($struct_set<$Struct> self@1407@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 11))
    l$havoc$1@1419@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 4
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 873 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 8)), l$_from@1398@01))) - $unwrap[Int](l$_value@1400@01) < 0)]
(assert (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) l$_from@1398@01)))
      ($unwrap<Int> l$_value@1400@01))
    0)))
(pop) ; 3
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int))) - $unwrap(l$_value) < 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int))) - $unwrap(l$_value) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int))) - $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_value)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) l$_from@1398@01)))
    ($unwrap<Int> l$_value@1400@01))
  0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) l$_from@1398@01)))
      ($unwrap<Int> l$_value@1400@01))
    0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 889 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 8)), l$_from@1398@01))) - $unwrap[Int](l$_value@1400@01) < 0) | live]
; [else-branch: 889 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 8)), l$_from@1398@01))) - $unwrap[Int](l$_value@1400@01) < 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 889 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 8)), l$_from@1398@01))) - $unwrap[Int](l$_value@1400@01) < 0)]
(assert (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) l$_from@1398@01)))
      ($unwrap<Int> l$_value@1400@01))
    0)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int))) - $unwrap(l$_value) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int))) - $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_value)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) l$_from@1398@01)))
      ($unwrap<Int> l$_value@1400@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 890 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 8)), l$_from@1398@01))) - $unwrap[Int](l$_value@1400@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 890 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 8)), l$_from@1398@01))) - $unwrap[Int](l$_value@1400@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 890 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 8)), l$_from@1398@01))) - $unwrap[Int](l$_value@1400@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) l$_from@1398@01)))
      ($unwrap<Int> l$_value@1400@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 4
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int))) - $unwrap(l$_value) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int))) - $unwrap(l$_value) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int))) - $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_value)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) l$_from@1398@01)))
    ($unwrap<Int> l$_value@1400@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) l$_from@1398@01)))
      ($unwrap<Int> l$_value@1400@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 891 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 8)), l$_from@1398@01))) - $unwrap[Int](l$_value@1400@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 891 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 8)), l$_from@1398@01))) - $unwrap[Int](l$_value@1400@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 891 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 8)), l$_from@1398@01))) - $unwrap[Int](l$_value@1400@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) l$_from@1398@01)))
      ($unwrap<Int> l$_value@1400@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   l$_from, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   l$_from): Int))) -
;   $unwrap(l$_value)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int))) - $unwrap(l$_value)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int))) - $unwrap(l$_value)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int))) - $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_from): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_value)
(declare-const self@1473@01 $Struct)
(assert (=
  self@1473@01
  ($struct_set<$Struct> self@1407@01 8 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) l$_from@1398@01 (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) l$_from@1398@01)))
    ($unwrap<Int> l$_value@1400@01))))))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_value)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1473@01 8)) l$_to@1399@01)))
      ($unwrap<Int> l$_value@1400@01))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 892 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1473@01, 8)), l$_to@1399@01))) + $unwrap[Int](l$_value@1400@01) < 0 | dead]
; [else-branch: 892 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1473@01, 8)), l$_to@1399@01))) + $unwrap[Int](l$_value@1400@01) < 0) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 892 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1473@01, 8)), l$_to@1399@01))) + $unwrap[Int](l$_value@1400@01) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1473@01 8)) l$_to@1399@01)))
      ($unwrap<Int> l$_value@1400@01))
    0)))
(pop) ; 5
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value) < 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_value)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1473@01 8)) l$_to@1399@01)))
    ($unwrap<Int> l$_value@1400@01))
  0)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1473@01 8)) l$_to@1399@01)))
      ($unwrap<Int> l$_value@1400@01))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 893 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1473@01, 8)), l$_to@1399@01))) + $unwrap[Int](l$_value@1400@01) < 0) | live]
; [else-branch: 893 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1473@01, 8)), l$_to@1399@01))) + $unwrap[Int](l$_value@1400@01) < 0 | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 893 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1473@01, 8)), l$_to@1399@01))) + $unwrap[Int](l$_value@1400@01) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1473@01 8)) l$_to@1399@01)))
      ($unwrap<Int> l$_value@1400@01))
    0)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_value)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1473@01 8)) l$_to@1399@01)))
      ($unwrap<Int> l$_value@1400@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1473@01 8)) l$_to@1399@01)))
    ($unwrap<Int> l$_value@1400@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 894 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1473@01, 8)), l$_to@1399@01))) + $unwrap[Int](l$_value@1400@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 894 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1473@01, 8)), l$_to@1399@01))) + $unwrap[Int](l$_value@1400@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 894 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1473@01, 8)), l$_to@1399@01))) + $unwrap[Int](l$_value@1400@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1473@01 8)) l$_to@1399@01)))
    ($unwrap<Int> l$_value@1400@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 895 | False | dead]
; [else-branch: 895 | True | live]
(push) ; 7
; [else-branch: 895 | True]
(pop) ; 7
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 896 | True | live]
; [else-branch: 896 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 896 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 8
; [then-branch: 897 | False | dead]
; [else-branch: 897 | True | live]
(push) ; 9
; [else-branch: 897 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 3))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 898 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1407@01, 3)) | live]
; [else-branch: 898 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1407@01, 3)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 898 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1407@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 10
; [then-branch: 899 | False | live]
; [else-branch: 899 | True | live]
(push) ; 11
; [then-branch: 899 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 899 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 898 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1407@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1407@01 3))))))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1474@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 900 | !(0 <= q$a@1474@01) | live]
; [else-branch: 900 | 0 <= q$a@1474@01 | live]
(push) ; 10
; [then-branch: 900 | !(0 <= q$a@1474@01)]
(assert (not (<= 0 q$a@1474@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 900 | 0 <= q$a@1474@01]
(assert (<= 0 q$a@1474@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1474@01) (not (<= 0 q$a@1474@01))))
(push) ; 9
; [then-branch: 901 | 0 <= q$a@1474@01 && q$a@1474@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 901 | !(0 <= q$a@1474@01 && q$a@1474@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 901 | 0 <= q$a@1474@01 && q$a@1474@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1474@01)
  (<= q$a@1474@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 11
; [then-branch: 902 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1474@01) | live]
; [else-branch: 902 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1474@01)) | live]
(push) ; 12
; [then-branch: 902 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1474@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
(pop) ; 12
(push) ; 12
; [else-branch: 902 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1474@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01)))
(push) ; 11
; [then-branch: 903 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1474@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1474@01) | live]
; [else-branch: 903 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1474@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1474@01)) | live]
(push) ; 12
; [then-branch: 903 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1474@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1474@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 13
; [then-branch: 904 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1407@01, 1)) | live]
; [else-branch: 904 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1407@01, 1)) | live]
(push) ; 14
; [then-branch: 904 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1407@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))))
(pop) ; 14
(push) ; 14
; [else-branch: 904 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1407@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1407@01 1))))))
(pop) ; 12
(push) ; 12
; [else-branch: 903 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1474@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1474@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1407@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 901 | !(0 <= q$a@1474@01 && q$a@1474@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1474@01)
    (<= q$a@1474@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1474@01)
    (<= q$a@1474@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1474@01)
    (<= q$a@1474@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1474@01)
      (<= q$a@1474@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1474@01)
    (<= q$a@1474@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1474@01 Int)) (!
  (and
    (or (<= 0 q$a@1474@01) (not (<= 0 q$a@1474@01)))
    (=>
      (and
        (<= 0 q$a@1474@01)
        (<= q$a@1474@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1474@01)
        (<= q$a@1474@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1474@01)
          (<= q$a@1474@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1474@01)
        (<= q$a@1474@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2316@17@2316@397-aux|)))
(push) ; 8
(assert (not (forall ((q$a@1474@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1474@01)
        (<= q$a@1474@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2316@17@2316@397|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1474@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1474@01)
        (<= q$a@1474@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1474@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2316@17@2316@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1475@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 905 | !(0 <= q$a@1475@01) | live]
; [else-branch: 905 | 0 <= q$a@1475@01 | live]
(push) ; 10
; [then-branch: 905 | !(0 <= q$a@1475@01)]
(assert (not (<= 0 q$a@1475@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 905 | 0 <= q$a@1475@01]
(assert (<= 0 q$a@1475@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1475@01) (not (<= 0 q$a@1475@01))))
(push) ; 9
; [then-branch: 906 | 0 <= q$a@1475@01 && q$a@1475@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 906 | !(0 <= q$a@1475@01 && q$a@1475@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 906 | 0 <= q$a@1475@01 && q$a@1475@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1475@01)
  (<= q$a@1475@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 11
; [then-branch: 907 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1475@01)) | live]
; [else-branch: 907 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1475@01) | live]
(push) ; 12
; [then-branch: 907 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1475@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 907 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1475@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01))))
(push) ; 11
; [then-branch: 908 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1475@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1475@01)) | live]
; [else-branch: 908 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1475@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1475@01))) | live]
(push) ; 12
; [then-branch: 908 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1475@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1475@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 13
; [then-branch: 909 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != q$a@1475@01 | live]
; [else-branch: 909 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == q$a@1475@01 | live]
(push) ; 14
; [then-branch: 909 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != q$a@1475@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1475@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 909 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == q$a@1475@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1475@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1475@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1475@01))))
(pop) ; 12
(push) ; 12
; [else-branch: 908 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1475@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1475@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1475@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1475@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)))))
(pop) ; 10
(push) ; 10
; [else-branch: 906 | !(0 <= q$a@1475@01 && q$a@1475@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1475@01)
    (<= q$a@1475@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1475@01)
    (<= q$a@1475@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1475@01)
    (<= q$a@1475@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1475@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1475@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1475@01)
      (<= q$a@1475@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1475@01)
    (<= q$a@1475@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1475@01 Int)) (!
  (and
    (or (<= 0 q$a@1475@01) (not (<= 0 q$a@1475@01)))
    (=>
      (and
        (<= 0 q$a@1475@01)
        (<= q$a@1475@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1475@01)
        (<= q$a@1475@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1475@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
                  q$a@1475@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1475@01)
          (<= q$a@1475@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1475@01)
        (<= q$a@1475@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2317@17@2317@361-aux|)))
(push) ; 8
(assert (not (forall ((q$a@1475@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1475@01)
        (<= q$a@1475@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2317@17@2317@361|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1475@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1475@01)
        (<= q$a@1475@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1475@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2317@17@2317@361|)))
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1476@01 $Snap)
(assert (= $t@1476@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1419@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1477@01 $Struct)
(assert (=
  self@1477@01
  ($struct_set<$Struct> self@1407@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 11))
    l$havoc$1@1419@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 7
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 894 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1473@01, 8)), l$_to@1399@01))) + $unwrap[Int](l$_value@1400@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1473@01 8)) l$_to@1399@01)))
      ($unwrap<Int> l$_value@1400@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 6
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_value)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1473@01 8)) l$_to@1399@01)))
    ($unwrap<Int> l$_value@1400@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1473@01 8)) l$_to@1399@01)))
      ($unwrap<Int> l$_value@1400@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 910 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1473@01, 8)), l$_to@1399@01))) + $unwrap[Int](l$_value@1400@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 910 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1473@01, 8)), l$_to@1399@01))) + $unwrap[Int](l$_value@1400@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 910 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1473@01, 8)), l$_to@1399@01))) + $unwrap[Int](l$_value@1400@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1473@01 8)) l$_to@1399@01)))
      ($unwrap<Int> l$_value@1400@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   l$_to, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   l$_to): Int))) +
;   $unwrap(l$_value)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to, $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))) + $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), l$_to): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] $unwrap(l$_value)
(declare-const self@1478@01 $Struct)
(assert (=
  self@1478@01
  ($struct_set<$Struct> self@1473@01 8 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1473@01 8)) l$_to@1399@01 (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1473@01 8)) l$_to@1399@01)))
    ($unwrap<Int> l$_value@1400@01))))))
; [eval] $unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value) < 0
; [eval] $unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int)))
; [eval] $wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] $unwrap(l$_value)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1478@01 9)) l$_from@1398@01) l$_sender@1468@01)))
      ($unwrap<Int> l$_value@1400@01))
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1478@01 9)) l$_from@1398@01) l$_sender@1468@01)))
    ($unwrap<Int> l$_value@1400@01))
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 911 | $unwrap[Int]($wrap[$Int]($map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1478@01, 9)), l$_from@1398@01), l$_sender@1468@01))) - $unwrap[Int](l$_value@1400@01) < 0 | live]
; [else-branch: 911 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1478@01, 9)), l$_from@1398@01), l$_sender@1468@01))) - $unwrap[Int](l$_value@1400@01) < 0) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 911 | $unwrap[Int]($wrap[$Int]($map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1478@01, 9)), l$_from@1398@01), l$_sender@1468@01))) - $unwrap[Int](l$_value@1400@01) < 0]
(assert (<
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1478@01 9)) l$_from@1398@01) l$_sender@1468@01)))
    ($unwrap<Int> l$_value@1400@01))
  0))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 912 | False | dead]
; [else-branch: 912 | True | live]
(push) ; 8
; [else-branch: 912 | True]
(pop) ; 8
; [eval] !$succ
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 913 | True | live]
; [else-branch: 913 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 913 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 9
; [then-branch: 914 | False | dead]
; [else-branch: 914 | True | live]
(push) ; 10
; [else-branch: 914 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 3))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 915 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1407@01, 3)) | live]
; [else-branch: 915 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1407@01, 3)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 915 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1407@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 11
; [then-branch: 916 | False | live]
; [else-branch: 916 | True | live]
(push) ; 12
; [then-branch: 916 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 916 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 915 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1407@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1407@01 3))))))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1479@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 917 | !(0 <= q$a@1479@01) | live]
; [else-branch: 917 | 0 <= q$a@1479@01 | live]
(push) ; 11
; [then-branch: 917 | !(0 <= q$a@1479@01)]
(assert (not (<= 0 q$a@1479@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 917 | 0 <= q$a@1479@01]
(assert (<= 0 q$a@1479@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1479@01) (not (<= 0 q$a@1479@01))))
(push) ; 10
; [then-branch: 918 | 0 <= q$a@1479@01 && q$a@1479@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 918 | !(0 <= q$a@1479@01 && q$a@1479@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 918 | 0 <= q$a@1479@01 && q$a@1479@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1479@01)
  (<= q$a@1479@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 12
; [then-branch: 919 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1479@01) | live]
; [else-branch: 919 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1479@01)) | live]
(push) ; 13
; [then-branch: 919 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1479@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
(pop) ; 13
(push) ; 13
; [else-branch: 919 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1479@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01)))
(push) ; 12
; [then-branch: 920 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1479@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1479@01) | live]
; [else-branch: 920 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1479@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1479@01)) | live]
(push) ; 13
; [then-branch: 920 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1479@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1479@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 14
; [then-branch: 921 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1407@01, 1)) | live]
; [else-branch: 921 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1407@01, 1)) | live]
(push) ; 15
; [then-branch: 921 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1407@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))))
(pop) ; 15
(push) ; 15
; [else-branch: 921 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1407@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1407@01 1))))))
(pop) ; 13
(push) ; 13
; [else-branch: 920 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1479@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1479@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1407@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))))
(pop) ; 11
(push) ; 11
; [else-branch: 918 | !(0 <= q$a@1479@01 && q$a@1479@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1479@01)
    (<= q$a@1479@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1479@01)
    (<= q$a@1479@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1479@01)
    (<= q$a@1479@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1479@01)
      (<= q$a@1479@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1479@01)
    (<= q$a@1479@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1479@01 Int)) (!
  (and
    (or (<= 0 q$a@1479@01) (not (<= 0 q$a@1479@01)))
    (=>
      (and
        (<= 0 q$a@1479@01)
        (<= q$a@1479@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1479@01)
        (<= q$a@1479@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1479@01)
          (<= q$a@1479@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1479@01)
        (<= q$a@1479@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2316@17@2316@397-aux|)))
(push) ; 9
(assert (not (forall ((q$a@1479@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1479@01)
        (<= q$a@1479@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2316@17@2316@397|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1479@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1479@01)
        (<= q$a@1479@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1479@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2316@17@2316@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1480@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 922 | !(0 <= q$a@1480@01) | live]
; [else-branch: 922 | 0 <= q$a@1480@01 | live]
(push) ; 11
; [then-branch: 922 | !(0 <= q$a@1480@01)]
(assert (not (<= 0 q$a@1480@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 922 | 0 <= q$a@1480@01]
(assert (<= 0 q$a@1480@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1480@01) (not (<= 0 q$a@1480@01))))
(push) ; 10
; [then-branch: 923 | 0 <= q$a@1480@01 && q$a@1480@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 923 | !(0 <= q$a@1480@01 && q$a@1480@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 923 | 0 <= q$a@1480@01 && q$a@1480@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1480@01)
  (<= q$a@1480@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 12
; [then-branch: 924 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1480@01)) | live]
; [else-branch: 924 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1480@01) | live]
(push) ; 13
; [then-branch: 924 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1480@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 924 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1480@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01))))
(push) ; 12
; [then-branch: 925 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1480@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1480@01)) | live]
; [else-branch: 925 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1480@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1480@01))) | live]
(push) ; 13
; [then-branch: 925 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1480@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1480@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 14
; [then-branch: 926 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != q$a@1480@01 | live]
; [else-branch: 926 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == q$a@1480@01 | live]
(push) ; 15
; [then-branch: 926 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != q$a@1480@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1480@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 926 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == q$a@1480@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1480@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1480@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1480@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 925 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1480@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1480@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1480@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1480@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 923 | !(0 <= q$a@1480@01 && q$a@1480@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1480@01)
    (<= q$a@1480@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1480@01)
    (<= q$a@1480@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1480@01)
    (<= q$a@1480@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1480@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1480@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1480@01)
      (<= q$a@1480@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1480@01)
    (<= q$a@1480@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1480@01 Int)) (!
  (and
    (or (<= 0 q$a@1480@01) (not (<= 0 q$a@1480@01)))
    (=>
      (and
        (<= 0 q$a@1480@01)
        (<= q$a@1480@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1480@01)
        (<= q$a@1480@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1480@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
                  q$a@1480@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1480@01)
          (<= q$a@1480@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1480@01)
        (<= q$a@1480@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2317@17@2317@361-aux|)))
(push) ; 9
(assert (not (forall ((q$a@1480@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1480@01)
        (<= q$a@1480@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2317@17@2317@361|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1480@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1480@01)
        (<= q$a@1480@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1480@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2317@17@2317@361|)))
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1481@01 $Snap)
(assert (= $t@1481@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1419@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1482@01 $Struct)
(assert (=
  self@1482@01
  ($struct_set<$Struct> self@1407@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 11))
    l$havoc$1@1419@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 8
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 911 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1478@01, 9)), l$_from@1398@01), l$_sender@1468@01))) - $unwrap[Int](l$_value@1400@01) < 0)]
(assert (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1478@01 9)) l$_from@1398@01) l$_sender@1468@01)))
      ($unwrap<Int> l$_value@1400@01))
    0)))
(pop) ; 7
; [eval] !($unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value) < 0)
; [eval] $unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value) < 0
; [eval] $unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int)))
; [eval] $wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] $unwrap(l$_value)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1478@01 9)) l$_from@1398@01) l$_sender@1468@01)))
    ($unwrap<Int> l$_value@1400@01))
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1478@01 9)) l$_from@1398@01) l$_sender@1468@01)))
      ($unwrap<Int> l$_value@1400@01))
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 927 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1478@01, 9)), l$_from@1398@01), l$_sender@1468@01))) - $unwrap[Int](l$_value@1400@01) < 0) | live]
; [else-branch: 927 | $unwrap[Int]($wrap[$Int]($map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1478@01, 9)), l$_from@1398@01), l$_sender@1468@01))) - $unwrap[Int](l$_value@1400@01) < 0 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 927 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1478@01, 9)), l$_from@1398@01), l$_sender@1468@01))) - $unwrap[Int](l$_value@1400@01) < 0)]
(assert (not
  (<
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1478@01 9)) l$_from@1398@01) l$_sender@1468@01)))
      ($unwrap<Int> l$_value@1400@01))
    0)))
; [eval] $unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int)))
; [eval] $wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] $unwrap(l$_value)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1478@01 9)) l$_from@1398@01) l$_sender@1468@01)))
      ($unwrap<Int> l$_value@1400@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 928 | $unwrap[Int]($wrap[$Int]($map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1478@01, 9)), l$_from@1398@01), l$_sender@1468@01))) - $unwrap[Int](l$_value@1400@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 928 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1478@01, 9)), l$_from@1398@01), l$_sender@1468@01))) - $unwrap[Int](l$_value@1400@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 928 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1478@01, 9)), l$_from@1398@01), l$_sender@1468@01))) - $unwrap[Int](l$_value@1400@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1478@01 9)) l$_from@1398@01) l$_sender@1468@01)))
      ($unwrap<Int> l$_value@1400@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 8
; [eval] !($unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int)))
; [eval] $wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] $unwrap(l$_value)
(push) ; 8
(set-option :timeout 10)
(assert (not (>
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1478@01 9)) l$_from@1398@01) l$_sender@1468@01)))
    ($unwrap<Int> l$_value@1400@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1478@01 9)) l$_from@1398@01) l$_sender@1468@01)))
      ($unwrap<Int> l$_value@1400@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 929 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1478@01, 9)), l$_from@1398@01), l$_sender@1468@01))) - $unwrap[Int](l$_value@1400@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 929 | $unwrap[Int]($wrap[$Int]($map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1478@01, 9)), l$_from@1398@01), l$_sender@1468@01))) - $unwrap[Int](l$_value@1400@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 929 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1478@01, 9)), l$_from@1398@01), l$_sender@1468@01))) - $unwrap[Int](l$_value@1400@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (-
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1478@01 9)) l$_from@1398@01) l$_sender@1468@01)))
      ($unwrap<Int> l$_value@1400@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 9, ($map_set(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;   l$_from, ($map_set(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;   l$_from): $Map[Int, Int]), l$_sender, $unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self,
;   9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int))) -
;   $unwrap(l$_value)): $Map[Int, Int])): $Map[Int, $Map[Int, Int]])): $Struct)
; [eval] ($struct_set(self, 9, ($map_set(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from, ($map_set(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender, $unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value)): $Map[Int, Int])): $Map[Int, $Map[Int, Int]])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from, ($map_set(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender, $unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value)): $Map[Int, Int])): $Map[Int, $Map[Int, Int]])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] ($map_set(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender, $unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value)): $Map[Int, Int])
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] $unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int))) - $unwrap(l$_value)
; [eval] $unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int)))
; [eval] $wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int]), l$_sender): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_from): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] $unwrap(l$_value)
(declare-const self@1483@01 $Struct)
(assert (=
  self@1483@01
  ($struct_set<$Struct> self@1478@01 9 ($map_set<$Map<Int~_$Map<Int~_Int>>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1478@01 9)) l$_from@1398@01 ($map_set<$Map<Int~_Int>> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1478@01 9)) l$_from@1398@01) l$_sender@1468@01 (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1478@01 9)) l$_from@1398@01) l$_sender@1468@01)))
    ($unwrap<Int> l$_value@1400@01)))))))
; [exec]
; inhale acc(e$Transfer(l$_from, l$_to, $unwrap(l$_value)), write)
; [eval] $unwrap(l$_value)
(declare-const $t@1484@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $res := true
; [exec]
; label return
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@1417@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@1417@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 930 | $out_of_gas@1417@01 | live]
; [else-branch: 930 | !($out_of_gas@1417@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 930 | $out_of_gas@1417@01]
(assert $out_of_gas@1417@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 931 | False | dead]
; [else-branch: 931 | True | live]
(push) ; 10
; [else-branch: 931 | True]
(pop) ; 10
; [eval] !$succ
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 932 | True | live]
; [else-branch: 932 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 932 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 11
; [then-branch: 933 | False | dead]
; [else-branch: 933 | True | live]
(push) ; 12
; [else-branch: 933 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 3)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 3))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 934 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1407@01, 3)) | live]
; [else-branch: 934 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1407@01, 3)) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 934 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1407@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 13
; [then-branch: 935 | False | live]
; [else-branch: 935 | True | live]
(push) ; 14
; [then-branch: 935 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 935 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 934 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1407@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1407@01 3))))))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1485@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 936 | !(0 <= q$a@1485@01) | live]
; [else-branch: 936 | 0 <= q$a@1485@01 | live]
(push) ; 13
; [then-branch: 936 | !(0 <= q$a@1485@01)]
(assert (not (<= 0 q$a@1485@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 936 | 0 <= q$a@1485@01]
(assert (<= 0 q$a@1485@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1485@01) (not (<= 0 q$a@1485@01))))
(push) ; 12
; [then-branch: 937 | 0 <= q$a@1485@01 && q$a@1485@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 937 | !(0 <= q$a@1485@01 && q$a@1485@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 937 | 0 <= q$a@1485@01 && q$a@1485@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1485@01)
  (<= q$a@1485@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 14
; [then-branch: 938 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1485@01) | live]
; [else-branch: 938 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1485@01)) | live]
(push) ; 15
; [then-branch: 938 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1485@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
(pop) ; 15
(push) ; 15
; [else-branch: 938 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1485@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01)))
(push) ; 14
; [then-branch: 939 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1485@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1485@01) | live]
; [else-branch: 939 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1485@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1485@01)) | live]
(push) ; 15
; [then-branch: 939 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1485@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1485@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 16
; [then-branch: 940 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1407@01, 1)) | live]
; [else-branch: 940 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1407@01, 1)) | live]
(push) ; 17
; [then-branch: 940 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1407@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))))
(pop) ; 17
(push) ; 17
; [else-branch: 940 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1407@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1407@01 1))))))
(pop) ; 15
(push) ; 15
; [else-branch: 939 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1485@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1485@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1407@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 937 | !(0 <= q$a@1485@01 && q$a@1485@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1485@01)
    (<= q$a@1485@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1485@01)
    (<= q$a@1485@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1485@01)
    (<= q$a@1485@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1485@01)
      (<= q$a@1485@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1485@01)
    (<= q$a@1485@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1485@01 Int)) (!
  (and
    (or (<= 0 q$a@1485@01) (not (<= 0 q$a@1485@01)))
    (=>
      (and
        (<= 0 q$a@1485@01)
        (<= q$a@1485@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1485@01)
        (<= q$a@1485@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1485@01)
          (<= q$a@1485@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1485@01)
        (<= q$a@1485@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2316@17@2316@397-aux|)))
(push) ; 11
(assert (not (forall ((q$a@1485@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1485@01)
        (<= q$a@1485@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2316@17@2316@397|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1485@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1485@01)
        (<= q$a@1485@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1485@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2316@17@2316@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1486@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 941 | !(0 <= q$a@1486@01) | live]
; [else-branch: 941 | 0 <= q$a@1486@01 | live]
(push) ; 13
; [then-branch: 941 | !(0 <= q$a@1486@01)]
(assert (not (<= 0 q$a@1486@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 941 | 0 <= q$a@1486@01]
(assert (<= 0 q$a@1486@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1486@01) (not (<= 0 q$a@1486@01))))
(push) ; 12
; [then-branch: 942 | 0 <= q$a@1486@01 && q$a@1486@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 942 | !(0 <= q$a@1486@01 && q$a@1486@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 942 | 0 <= q$a@1486@01 && q$a@1486@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1486@01)
  (<= q$a@1486@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 14
; [then-branch: 943 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1486@01)) | live]
; [else-branch: 943 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1486@01) | live]
(push) ; 15
; [then-branch: 943 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1486@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 943 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1486@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01))))
(push) ; 14
; [then-branch: 944 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1486@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1486@01)) | live]
; [else-branch: 944 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1486@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1486@01))) | live]
(push) ; 15
; [then-branch: 944 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1486@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1486@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 16
; [then-branch: 945 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != q$a@1486@01 | live]
; [else-branch: 945 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == q$a@1486@01 | live]
(push) ; 17
; [then-branch: 945 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != q$a@1486@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1486@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 945 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == q$a@1486@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1486@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1486@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1486@01))))
(pop) ; 15
(push) ; 15
; [else-branch: 944 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1486@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1486@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1486@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1486@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)))))
(pop) ; 13
(push) ; 13
; [else-branch: 942 | !(0 <= q$a@1486@01 && q$a@1486@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1486@01)
    (<= q$a@1486@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1486@01)
    (<= q$a@1486@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1486@01)
    (<= q$a@1486@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1486@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1486@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1486@01)
      (<= q$a@1486@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1486@01)
    (<= q$a@1486@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1486@01 Int)) (!
  (and
    (or (<= 0 q$a@1486@01) (not (<= 0 q$a@1486@01)))
    (=>
      (and
        (<= 0 q$a@1486@01)
        (<= q$a@1486@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1486@01)
        (<= q$a@1486@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1486@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
                  q$a@1486@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1486@01)
          (<= q$a@1486@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1486@01)
        (<= q$a@1486@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2317@17@2317@361-aux|)))
(push) ; 11
(assert (not (forall ((q$a@1486@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1486@01)
        (<= q$a@1486@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2317@17@2317@361|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1486@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1486@01)
        (<= q$a@1486@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1486@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2317@17@2317@361|)))
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1487@01 $Snap)
(assert (= $t@1487@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1419@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1488@01 $Struct)
(assert (=
  self@1488@01
  ($struct_set<$Struct> self@1407@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 11))
    l$havoc$1@1419@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 10
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 930 | !($out_of_gas@1417@01)]
(assert (not $out_of_gas@1417@01))
(pop) ; 9
; [eval] !$out_of_gas
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@1417@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@1417@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 946 | !($out_of_gas@1417@01) | live]
; [else-branch: 946 | $out_of_gas@1417@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 946 | !($out_of_gas@1417@01)]
(assert (not $out_of_gas@1417@01))
; [exec]
; label end
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 947 | True | live]
; [else-branch: 947 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 947 | True]
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1483@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 3)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 948 | $struct_get[Int]($struct_loc[Int](self@1483@01, 3)) != $struct_get[Int]($struct_loc[Int](self@1407@01, 3)) | dead]
; [else-branch: 948 | $struct_get[Int]($struct_loc[Int](self@1483@01, 3)) == $struct_get[Int]($struct_loc[Int](self@1407@01, 3)) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 948 | $struct_get[Int]($struct_loc[Int](self@1483@01, 3)) == $struct_get[Int]($struct_loc[Int](self@1407@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1483@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1483@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 3))))
; [exec]
; assert ($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1483@01 3)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1483@01 3))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 949 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1483@01, 3)) | live]
; [else-branch: 949 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1483@01, 3)) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 949 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1483@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1483@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 13
; [then-branch: 950 | $struct_get[Int]($struct_loc[Int](self@1483@01, 1)) != $struct_get[Int]($struct_loc[Int](self@1407@01, 1)) | live]
; [else-branch: 950 | $struct_get[Int]($struct_loc[Int](self@1483@01, 1)) == $struct_get[Int]($struct_loc[Int](self@1407@01, 1)) | live]
(push) ; 14
; [then-branch: 950 | $struct_get[Int]($struct_loc[Int](self@1483@01, 1)) != $struct_get[Int]($struct_loc[Int](self@1407@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@1483@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))))
(pop) ; 14
(push) ; 14
; [else-branch: 950 | $struct_get[Int]($struct_loc[Int](self@1483@01, 1)) == $struct_get[Int]($struct_loc[Int](self@1407@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1483@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@1407@01 1))))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@1483@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1483@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@1407@01 1))))))
(pop) ; 12
(push) ; 12
; [else-branch: 949 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1483@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1483@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1483@01 3))))
  (and
    (not
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1483@01 3))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> self@1483@01 1))
        ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> self@1483@01 1))
          ($struct_get<Int> ($struct_loc<Int> self@1407@01 1))))))))
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1483@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1483@01 3))))))
(push) ; 11
(assert (not (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1483@01 3))))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1483@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1483@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1407@01 0)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1483@01 3))))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1483@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@1407@01 1)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1483@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1407@01 0))))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1489@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 951 | !(0 <= q$a@1489@01) | live]
; [else-branch: 951 | 0 <= q$a@1489@01 | live]
(push) ; 13
; [then-branch: 951 | !(0 <= q$a@1489@01)]
(assert (not (<= 0 q$a@1489@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 951 | 0 <= q$a@1489@01]
(assert (<= 0 q$a@1489@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1489@01) (not (<= 0 q$a@1489@01))))
(push) ; 12
; [then-branch: 952 | 0 <= q$a@1489@01 && q$a@1489@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 952 | !(0 <= q$a@1489@01 && q$a@1489@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 952 | 0 <= q$a@1489@01 && q$a@1489@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1489@01)
  (<= q$a@1489@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 14
; [then-branch: 953 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1489@01) | live]
; [else-branch: 953 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1489@01)) | live]
(push) ; 15
; [then-branch: 953 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1489@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
(pop) ; 15
(push) ; 15
; [else-branch: 953 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1489@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01)))
(push) ; 14
; [then-branch: 954 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1489@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1483@01, 2)), q$a@1489@01) | live]
; [else-branch: 954 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1489@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1483@01, 2)), q$a@1489@01)) | live]
(push) ; 15
; [then-branch: 954 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1489@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1483@01, 2)), q$a@1489@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 16
; [then-branch: 955 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1483@01, 1)) | live]
; [else-branch: 955 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1483@01, 1)) | live]
(push) ; 17
; [then-branch: 955 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1483@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1483@01 1)))))
(pop) ; 17
(push) ; 17
; [else-branch: 955 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1483@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1483@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1483@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1483@01 1))))))
(pop) ; 15
(push) ; 15
; [else-branch: 954 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1489@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1483@01, 2)), q$a@1489@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1483@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1483@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 952 | !(0 <= q$a@1489@01 && q$a@1489@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1489@01)
    (<= q$a@1489@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1489@01)
    (<= q$a@1489@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1489@01)
    (<= q$a@1489@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1483@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1483@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1489@01)
      (<= q$a@1489@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1489@01)
    (<= q$a@1489@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1489@01 Int)) (!
  (and
    (or (<= 0 q$a@1489@01) (not (<= 0 q$a@1489@01)))
    (=>
      (and
        (<= 0 q$a@1489@01)
        (<= q$a@1489@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1489@01)
        (<= q$a@1489@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1483@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1483@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1489@01)
          (<= q$a@1489@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1489@01)
        (<= q$a@1489@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2311@13@2311@393-aux|)))
(assert (forall ((q$a@1489@01 Int)) (!
  (and
    (or (<= 0 q$a@1489@01) (not (<= 0 q$a@1489@01)))
    (=>
      (and
        (<= 0 q$a@1489@01)
        (<= q$a@1489@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1489@01)
        (<= q$a@1489@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1483@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1483@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1489@01)
          (<= q$a@1489@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1489@01)
        (<= q$a@1489@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2311@13@2311@393-aux|)))
(push) ; 11
(assert (not (forall ((q$a@1489@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1489@01)
        (<= q$a@1489@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2311@13@2311@393|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1489@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1489@01)
        (<= q$a@1489@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1489@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1489@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2311@13@2311@393|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1490@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 956 | !(0 <= q$a@1490@01) | live]
; [else-branch: 956 | 0 <= q$a@1490@01 | live]
(push) ; 13
; [then-branch: 956 | !(0 <= q$a@1490@01)]
(assert (not (<= 0 q$a@1490@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 956 | 0 <= q$a@1490@01]
(assert (<= 0 q$a@1490@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1490@01) (not (<= 0 q$a@1490@01))))
(push) ; 12
; [then-branch: 957 | 0 <= q$a@1490@01 && q$a@1490@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 957 | !(0 <= q$a@1490@01 && q$a@1490@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 957 | 0 <= q$a@1490@01 && q$a@1490@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1490@01)
  (<= q$a@1490@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 14
; [then-branch: 958 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1490@01)) | live]
; [else-branch: 958 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1490@01) | live]
(push) ; 15
; [then-branch: 958 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1490@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 958 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1490@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01))))
(push) ; 14
; [then-branch: 959 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1490@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1483@01, 2)), q$a@1490@01)) | live]
; [else-branch: 959 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1490@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1483@01, 2)), q$a@1490@01))) | live]
(push) ; 15
; [then-branch: 959 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1490@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1483@01, 2)), q$a@1490@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 16
; [then-branch: 960 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != q$a@1490@01 | live]
; [else-branch: 960 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == q$a@1490@01 | live]
(push) ; 17
; [then-branch: 960 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) != q$a@1490@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1490@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 960 | $struct_get[Int]($struct_loc[Int](msg@1403@01, 0)) == q$a@1490@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1490@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1490@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1490@01))))
(pop) ; 15
(push) ; 15
; [else-branch: 959 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1407@01, 2)), q$a@1490@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1483@01, 2)), q$a@1490@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01)))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1490@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1490@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01)))))
(pop) ; 13
(push) ; 13
; [else-branch: 957 | !(0 <= q$a@1490@01 && q$a@1490@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1490@01)
    (<= q$a@1490@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1490@01)
    (<= q$a@1490@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1490@01)
    (<= q$a@1490@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1490@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1490@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1490@01)
      (<= q$a@1490@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1490@01)
    (<= q$a@1490@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1490@01 Int)) (!
  (and
    (or (<= 0 q$a@1490@01) (not (<= 0 q$a@1490@01)))
    (=>
      (and
        (<= 0 q$a@1490@01)
        (<= q$a@1490@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1490@01)
        (<= q$a@1490@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1490@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
                  q$a@1490@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1490@01)
          (<= q$a@1490@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1490@01)
        (<= q$a@1490@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2312@13@2312@357-aux|)))
(assert (forall ((q$a@1490@01 Int)) (!
  (and
    (or (<= 0 q$a@1490@01) (not (<= 0 q$a@1490@01)))
    (=>
      (and
        (<= 0 q$a@1490@01)
        (<= q$a@1490@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1490@01)
        (<= q$a@1490@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0)) q$a@1490@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1403@01 0))
                  q$a@1490@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1490@01)
          (<= q$a@1490@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1490@01)
        (<= q$a@1490@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2312@13@2312@357-aux|)))
(push) ; 11
(assert (not (forall ((q$a@1490@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1490@01)
        (<= q$a@1490@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2312@13@2312@357|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1490@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1490@01)
        (<= q$a@1490@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1407@01 2)) q$a@1490@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1483@01 2)) q$a@1490@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2312@13@2312@357|)))
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1491@01 $Snap)
(assert (= $t@1491@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1419@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1492@01 $Struct)
(assert (=
  self@1492@01
  ($struct_set<$Struct> self@1483@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1483@01 11))
    l$havoc$1@1419@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 10
; [eval] !$succ
; [then-branch: 961 | False | dead]
; [else-branch: 961 | True | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 961 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 946 | $out_of_gas@1417@01]
(assert $out_of_gas@1417@01)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 927 | $unwrap[Int]($wrap[$Int]($map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1478@01, 9)), l$_from@1398@01), l$_sender@1468@01))) - $unwrap[Int](l$_value@1400@01) < 0]
(assert (<
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1478@01 9)) l$_from@1398@01) l$_sender@1468@01)))
    ($unwrap<Int> l$_value@1400@01))
  0))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 910 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1473@01, 8)), l$_to@1399@01))) + $unwrap[Int](l$_value@1400@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1473@01 8)) l$_to@1399@01)))
    ($unwrap<Int> l$_value@1400@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 889 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1407@01, 8)), l$_from@1398@01))) - $unwrap[Int](l$_value@1400@01) < 0]
(assert (<
  (-
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1407@01 8)) l$_from@1398@01)))
    ($unwrap<Int> l$_value@1400@01))
  0))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$approve ----------
(declare-const l$_spender@1493@01 Int)
(declare-const l$_value@1494@01 $Int)
(declare-const $succ@1495@01 Bool)
(declare-const $res@1496@01 Bool)
(declare-const l$_spender@1497@01 Int)
(declare-const l$_value@1498@01 $Int)
(declare-const $succ@1499@01 Bool)
(declare-const $res@1500@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@1501@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@1502@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@1503@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@1504@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@1505@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@1506@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@1507@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@1508@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@1509@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@1510@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@1511@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@1512@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@1513@01 Bool)
; [exec]
; var l$_sender: Int
(declare-const l$_sender@1514@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@1515@01 Bool)
; [exec]
; var l$havoc: Bool
(declare-const l$havoc@1516@01 Bool)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@1517@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@1518@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1519@01 $Snap)
(assert (= $t@1519@01 ($Snap.combine ($Snap.first $t@1519@01) ($Snap.second $t@1519@01))))
(assert (= ($Snap.first $t@1519@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1505@01 0))))
(assert (= ($Snap.second $t@1519@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1505@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1520@01 $Snap)
(assert (= $t@1520@01 ($Snap.combine ($Snap.first $t@1520@01) ($Snap.second $t@1520@01))))
(assert (= ($Snap.first $t@1520@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1505@01 1))))
(assert (= ($Snap.second $t@1520@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1505@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1521@01 $Snap)
(assert (= $t@1521@01 ($Snap.combine ($Snap.first $t@1521@01) ($Snap.second $t@1521@01))))
(assert (= ($Snap.first $t@1521@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1505@01 3))))
(assert (= ($Snap.second $t@1521@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1505@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
(declare-const $t@1522@01 $Snap)
(assert (= $t@1522@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 4)): Seq[Int])
; [eval] $struct_loc(self, 4)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1505@01 4))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
(declare-const $t@1523@01 $Snap)
(assert (= $t@1523@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 5)): Seq[Int])
; [eval] $struct_loc(self, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1505@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1524@01 $Snap)
(assert (= $t@1524@01 ($Snap.combine ($Snap.first $t@1524@01) ($Snap.second $t@1524@01))))
(assert (= ($Snap.first $t@1524@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1505@01 6))))
(assert (= ($Snap.second $t@1524@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1505@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1525@01 $Snap)
(assert (= $t@1525@01 ($Snap.combine ($Snap.first $t@1525@01) ($Snap.second $t@1525@01))))
(assert (= ($Snap.first $t@1525@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1505@01 7))))
(assert (= ($Snap.second $t@1525@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1505@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1526@01 $Snap)
(assert (= $t@1526@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@1527@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 962 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1505@01, 8)), $q3@1527@01)) | live]
; [else-branch: 962 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1505@01, 8)), $q3@1527@01) | live]
(push) ; 5
; [then-branch: 962 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1505@01, 8)), $q3@1527@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 8)) $q3@1527@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 962 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1505@01, 8)), $q3@1527@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 8)) $q3@1527@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 8)) $q3@1527@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 8)) $q3@1527@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1527@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 8)) $q3@1527@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 8)) $q3@1527@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 8)) $q3@1527@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2353@11@2353@345-aux|)))
(assert (forall (($q3@1527@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 8)) $q3@1527@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 8)) $q3@1527@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 8)) $q3@1527@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2353@11@2353@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@1528@01 $Snap)
(assert (= $t@1528@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@1529@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1529@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 8)) $q3@1529@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 8)) $q3@1529@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2354@11@2354@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@1530@01 $Snap)
(assert (= $t@1530@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@1531@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@1532@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(push) ; 5
; [then-branch: 963 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1505@01, 9)), $q4@1531@01), $q5@1532@01)) | live]
; [else-branch: 963 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1505@01, 9)), $q4@1531@01), $q5@1532@01) | live]
(push) ; 6
; [then-branch: 963 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1505@01, 9)), $q4@1531@01), $q5@1532@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) $q4@1531@01) $q5@1532@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 963 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1505@01, 9)), $q4@1531@01), $q5@1532@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) $q4@1531@01) $q5@1532@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) $q4@1531@01) $q5@1532@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) $q4@1531@01) $q5@1532@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@1532@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) $q4@1531@01) $q5@1532@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) $q4@1531@01) $q5@1532@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) $q4@1531@01) $q5@1532@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2355@131@2355@597-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1531@01 Int)) (!
  (forall (($q5@1532@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) $q4@1531@01) $q5@1532@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) $q4@1531@01) $q5@1532@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) $q4@1531@01) $q5@1532@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2355@131@2355@597-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) $q4@1531@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2355@11@2355@598-aux|)))
(assert (forall (($q4@1531@01 Int)) (!
  (forall (($q5@1532@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) $q4@1531@01) $q5@1532@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) $q4@1531@01) $q5@1532@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) $q4@1531@01) $q5@1532@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2355@131@2355@597|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) $q4@1531@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2355@11@2355@598|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@1533@01 $Snap)
(assert (= $t@1533@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@1534@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@1535@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1534@01 Int)) (!
  (forall (($q5@1535@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) $q4@1534@01) $q5@1535@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) $q4@1534@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) $q4@1534@01) $q5@1535@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2356@131@2356@505|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) $q4@1534@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2356@11@2356@506|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 10)): Int) &&
;   ($struct_get($struct_loc(self, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1536@01 $Snap)
(assert (= $t@1536@01 ($Snap.combine ($Snap.first $t@1536@01) ($Snap.second $t@1536@01))))
(assert (= ($Snap.first $t@1536@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 10)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1505@01 10))))
(assert (= ($Snap.second $t@1536@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1505@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 11)): Int) &&
;   ($struct_get($struct_loc(self, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1537@01 $Snap)
(assert (= $t@1537@01 ($Snap.combine ($Snap.first $t@1537@01) ($Snap.second $t@1537@01))))
(assert (= ($Snap.first $t@1537@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 11)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1505@01 11))))
(assert (= ($Snap.second $t@1537@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1505@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 12)): Int) &&
;   ($struct_get($struct_loc(self, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1538@01 $Snap)
(assert (= $t@1538@01 ($Snap.combine ($Snap.first $t@1538@01) ($Snap.second $t@1538@01))))
(assert (= ($Snap.first $t@1538@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@1505@01 12))))
(assert (= ($Snap.second $t@1538@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1505@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1539@01 $Snap)
(assert (= $t@1539@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@1540@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(push) ; 4
; [then-branch: 964 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1505@01, 14)), $q6@1540@01)) | live]
; [else-branch: 964 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1505@01, 14)), $q6@1540@01) | live]
(push) ; 5
; [then-branch: 964 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1505@01, 14)), $q6@1540@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 14)) $q6@1540@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 964 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1505@01, 14)), $q6@1540@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 14)) $q6@1540@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 14)) $q6@1540@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 14)) $q6@1540@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1540@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 14)) $q6@1540@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 14)) $q6@1540@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 14)) $q6@1540@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2360@11@2360@348-aux|)))
(assert (forall (($q6@1540@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 14)) $q6@1540@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 14)) $q6@1540@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 14)) $q6@1540@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2360@11@2360@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $t@1541@01 $Snap)
(assert (= $t@1541@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $q6@1542@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1542@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 14)) $q6@1542@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 14)) $q6@1542@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2361@11@2361@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1543@01 $Snap)
(assert (= $t@1543@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@1544@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(push) ; 4
; [then-branch: 965 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1505@01, 15)), $q7@1544@01)) | live]
; [else-branch: 965 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1505@01, 15)), $q7@1544@01) | live]
(push) ; 5
; [then-branch: 965 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1505@01, 15)), $q7@1544@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 15)) $q7@1544@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 965 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1505@01, 15)), $q7@1544@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 15)) $q7@1544@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 15)) $q7@1544@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 15)) $q7@1544@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1544@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 15)) $q7@1544@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 15)) $q7@1544@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 15)) $q7@1544@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2362@11@2362@348-aux|)))
(assert (forall (($q7@1544@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 15)) $q7@1544@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 15)) $q7@1544@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 15)) $q7@1544@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2362@11@2362@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $t@1545@01 $Snap)
(assert (= $t@1545@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $q7@1546@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
; [eval] ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1546@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 15)) $q7@1546@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1505@01 15)) $q7@1546@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2363@11@2363@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@1547@01 $Snap)
(assert (= $t@1547@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1505@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1548@01 $Snap)
(assert (= $t@1548@01 ($Snap.combine ($Snap.first $t@1548@01) ($Snap.second $t@1548@01))))
(assert (= ($Snap.first $t@1548@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@1548@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$_spender &&
;   l$_spender <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1549@01 $Snap)
(assert (= $t@1549@01 ($Snap.combine ($Snap.first $t@1549@01) ($Snap.second $t@1549@01))))
(assert (= ($Snap.first $t@1549@01) $Snap.unit))
; [eval] 0 <= l$_spender
(assert (<= 0 l$_spender@1497@01))
(assert (= ($Snap.second $t@1549@01) $Snap.unit))
; [eval] l$_spender <= 1461501637330902918203684832716283019655932542975
(assert (<= l$_spender@1497@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $unwrap(l$_value) &&
;   $unwrap(l$_value) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1550@01 $Snap)
(assert (= $t@1550@01 ($Snap.combine ($Snap.first $t@1550@01) ($Snap.second $t@1550@01))))
(assert (= ($Snap.first $t@1550@01) $Snap.unit))
; [eval] 0 <= $unwrap(l$_value)
; [eval] $unwrap(l$_value)
(assert (<= 0 ($unwrap<Int> l$_value@1498@01)))
(assert (= ($Snap.second $t@1550@01) $Snap.unit))
; [eval] $unwrap(l$_value) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$_value)
(assert (<=
  ($unwrap<Int> l$_value@1498@01)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1551@01 $Snap)
(assert (= $t@1551@01 ($Snap.combine ($Snap.first $t@1551@01) ($Snap.second $t@1551@01))))
(assert (= ($Snap.first $t@1551@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1502@01 0))))
(assert (= ($Snap.second $t@1551@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1502@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1552@01 $Snap)
(assert (= $t@1552@01 ($Snap.combine ($Snap.first $t@1552@01) ($Snap.second $t@1552@01))))
(assert (= ($Snap.first $t@1552@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1502@01 1))))
(assert (= ($Snap.second $t@1552@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1502@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1553@01 $Snap)
(assert (= $t@1553@01 ($Snap.combine ($Snap.first $t@1553@01) ($Snap.second $t@1553@01))))
(assert (= ($Snap.first $t@1553@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1502@01 2))))
(assert (= ($Snap.second $t@1553@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1502@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@1554@01 $Snap)
(assert (= $t@1554@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@1502@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1555@01 $Snap)
(assert (= $t@1555@01 ($Snap.combine ($Snap.first $t@1555@01) ($Snap.second $t@1555@01))))
(assert (= ($Snap.first $t@1555@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1502@01 4))))
(assert (= ($Snap.second $t@1555@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1502@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@1556@01 $Snap)
(assert (= $t@1556@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@1502@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1557@01 $Snap)
(assert (= $t@1557@01 ($Snap.combine ($Snap.first $t@1557@01) ($Snap.second $t@1557@01))))
(assert (= ($Snap.first $t@1557@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))))
(assert (= ($Snap.second $t@1557@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1558@01 $Snap)
(assert (= $t@1558@01 ($Snap.combine ($Snap.first $t@1558@01) ($Snap.second $t@1558@01))))
(assert (= ($Snap.first $t@1558@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1501@01 1))))
(assert (= ($Snap.second $t@1558@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1501@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1559@01 $Snap)
(assert (= $t@1559@01 ($Snap.combine ($Snap.first $t@1559@01) ($Snap.second $t@1559@01))))
(assert (= ($Snap.first $t@1559@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1501@01 2))))
(assert (= ($Snap.second $t@1559@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1501@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@1560@01 $Snap)
(assert (= $t@1560@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1501@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@1561@01 $Snap)
(assert (= $t@1561@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $t@1562@01 $Snap)
(assert (= $t@1562@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $a@1563@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@1564@01 $Snap)
(assert (= $t@1564@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; l$_sender := ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const l$_sender@1565@01 Int)
(assert (= l$_sender@1565@01 ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))))
; [exec]
; self := ($struct_set(self, 9, ($map_set(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;   l$_sender, ($map_set(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;   l$_sender): $Map[Int, Int]), l$_spender, $unwrap(l$_value)): $Map[Int, Int])): $Map[Int, $Map[Int, Int]])): $Struct)
; [eval] ($struct_set(self, 9, ($map_set(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_sender, ($map_set(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_sender): $Map[Int, Int]), l$_spender, $unwrap(l$_value)): $Map[Int, Int])): $Map[Int, $Map[Int, Int]])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_sender, ($map_set(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_sender): $Map[Int, Int]), l$_spender, $unwrap(l$_value)): $Map[Int, Int])): $Map[Int, $Map[Int, Int]])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] ($map_set(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_sender): $Map[Int, Int]), l$_spender, $unwrap(l$_value)): $Map[Int, Int])
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_sender): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] $unwrap(l$_value)
(declare-const self@1566@01 $Struct)
(assert (=
  self@1566@01
  ($struct_set<$Struct> self@1505@01 9 ($map_set<$Map<Int~_$Map<Int~_Int>>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) l$_sender@1565@01 ($map_set<$Map<Int~_Int>> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1505@01 9)) l$_sender@1565@01) l$_spender@1497@01 ($unwrap<Int> l$_value@1498@01))))))
; [exec]
; inhale acc(e$Approval(l$_sender, l$_spender, $unwrap(l$_value)), write)
; [eval] $unwrap(l$_value)
(declare-const $t@1567@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $res := true
; [exec]
; label return
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@1515@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@1515@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 966 | $out_of_gas@1515@01 | live]
; [else-branch: 966 | !($out_of_gas@1515@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 966 | $out_of_gas@1515@01]
(assert $out_of_gas@1515@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 967 | False | dead]
; [else-branch: 967 | True | live]
(push) ; 4
; [else-branch: 967 | True]
(pop) ; 4
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 968 | True | live]
; [else-branch: 968 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 968 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
; [then-branch: 969 | False | dead]
; [else-branch: 969 | True | live]
(push) ; 6
; [else-branch: 969 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1505@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1505@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 970 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1505@01, 3)) | live]
; [else-branch: 970 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1505@01, 3)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 970 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1505@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1505@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
; [then-branch: 971 | False | live]
; [else-branch: 971 | True | live]
(push) ; 8
; [then-branch: 971 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 971 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 970 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1505@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1505@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1505@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1505@01 3))))))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1568@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 972 | !(0 <= q$a@1568@01) | live]
; [else-branch: 972 | 0 <= q$a@1568@01 | live]
(push) ; 7
; [then-branch: 972 | !(0 <= q$a@1568@01)]
(assert (not (<= 0 q$a@1568@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 972 | 0 <= q$a@1568@01]
(assert (<= 0 q$a@1568@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1568@01) (not (<= 0 q$a@1568@01))))
(push) ; 6
; [then-branch: 973 | 0 <= q$a@1568@01 && q$a@1568@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 973 | !(0 <= q$a@1568@01 && q$a@1568@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 973 | 0 <= q$a@1568@01 && q$a@1568@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1568@01)
  (<= q$a@1568@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 974 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1568@01) | live]
; [else-branch: 974 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1568@01)) | live]
(push) ; 9
; [then-branch: 974 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1568@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
(pop) ; 9
(push) ; 9
; [else-branch: 974 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1568@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01)))
(push) ; 8
; [then-branch: 975 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1568@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1568@01) | live]
; [else-branch: 975 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1568@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1568@01)) | live]
(push) ; 9
; [then-branch: 975 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1568@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1568@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 10
; [then-branch: 976 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1505@01, 1)) | live]
; [else-branch: 976 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1505@01, 1)) | live]
(push) ; 11
; [then-branch: 976 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1505@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1505@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 976 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1505@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1505@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1505@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1505@01 1))))))
(pop) ; 9
(push) ; 9
; [else-branch: 975 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1568@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1568@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1505@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1505@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 973 | !(0 <= q$a@1568@01 && q$a@1568@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1568@01)
    (<= q$a@1568@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1568@01)
    (<= q$a@1568@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1568@01)
    (<= q$a@1568@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1505@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1505@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1568@01)
      (<= q$a@1568@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1568@01)
    (<= q$a@1568@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1568@01 Int)) (!
  (and
    (or (<= 0 q$a@1568@01) (not (<= 0 q$a@1568@01)))
    (=>
      (and
        (<= 0 q$a@1568@01)
        (<= q$a@1568@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1568@01)
        (<= q$a@1568@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1505@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1505@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1568@01)
          (<= q$a@1568@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1568@01)
        (<= q$a@1568@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2426@17@2426@397-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1568@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1568@01)
        (<= q$a@1568@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2426@17@2426@397|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1568@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1568@01)
        (<= q$a@1568@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1568@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2426@17@2426@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1569@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 977 | !(0 <= q$a@1569@01) | live]
; [else-branch: 977 | 0 <= q$a@1569@01 | live]
(push) ; 7
; [then-branch: 977 | !(0 <= q$a@1569@01)]
(assert (not (<= 0 q$a@1569@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 977 | 0 <= q$a@1569@01]
(assert (<= 0 q$a@1569@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1569@01) (not (<= 0 q$a@1569@01))))
(push) ; 6
; [then-branch: 978 | 0 <= q$a@1569@01 && q$a@1569@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 978 | !(0 <= q$a@1569@01 && q$a@1569@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 978 | 0 <= q$a@1569@01 && q$a@1569@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1569@01)
  (<= q$a@1569@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 979 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1569@01)) | live]
; [else-branch: 979 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1569@01) | live]
(push) ; 9
; [then-branch: 979 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1569@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 979 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1569@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01))))
(push) ; 8
; [then-branch: 980 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1569@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1569@01)) | live]
; [else-branch: 980 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1569@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1569@01))) | live]
(push) ; 9
; [then-branch: 980 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1569@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1569@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 981 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) != q$a@1569@01 | live]
; [else-branch: 981 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) == q$a@1569@01 | live]
(push) ; 11
; [then-branch: 981 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) != q$a@1569@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0)) q$a@1569@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 981 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) == q$a@1569@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0)) q$a@1569@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0)) q$a@1569@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0)) q$a@1569@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 980 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1569@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1569@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0)) q$a@1569@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0)) q$a@1569@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 978 | !(0 <= q$a@1569@01 && q$a@1569@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1569@01)
    (<= q$a@1569@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1569@01)
    (<= q$a@1569@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1569@01)
    (<= q$a@1569@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0)) q$a@1569@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0)) q$a@1569@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1569@01)
      (<= q$a@1569@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1569@01)
    (<= q$a@1569@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1569@01 Int)) (!
  (and
    (or (<= 0 q$a@1569@01) (not (<= 0 q$a@1569@01)))
    (=>
      (and
        (<= 0 q$a@1569@01)
        (<= q$a@1569@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1569@01)
        (<= q$a@1569@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0)) q$a@1569@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
                  q$a@1569@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1569@01)
          (<= q$a@1569@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1569@01)
        (<= q$a@1569@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2427@17@2427@361-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1569@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1569@01)
        (<= q$a@1569@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2427@17@2427@361|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1569@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1569@01)
        (<= q$a@1569@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1569@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2427@17@2427@361|)))
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1570@01 $Snap)
(assert (= $t@1570@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1517@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1571@01 $Struct)
(assert (=
  self@1571@01
  ($struct_set<$Struct> self@1505@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1505@01 11))
    l$havoc$1@1517@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 4
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 966 | !($out_of_gas@1515@01)]
(assert (not $out_of_gas@1515@01))
(pop) ; 3
; [eval] !$out_of_gas
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@1515@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@1515@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 982 | !($out_of_gas@1515@01) | live]
; [else-branch: 982 | $out_of_gas@1515@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 982 | !($out_of_gas@1515@01)]
(assert (not $out_of_gas@1515@01))
; [exec]
; label end
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 983 | True | live]
; [else-branch: 983 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 983 | True]
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@1566@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@1505@01 3)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 984 | $struct_get[Int]($struct_loc[Int](self@1566@01, 3)) != $struct_get[Int]($struct_loc[Int](self@1505@01, 3)) | dead]
; [else-branch: 984 | $struct_get[Int]($struct_loc[Int](self@1566@01, 3)) == $struct_get[Int]($struct_loc[Int](self@1505@01, 3)) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 984 | $struct_get[Int]($struct_loc[Int](self@1566@01, 3)) == $struct_get[Int]($struct_loc[Int](self@1505@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1566@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@1505@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1566@01 3))
  ($struct_get<Int> ($struct_loc<Int> self@1505@01 3))))
; [exec]
; assert ($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1566@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1566@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 985 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1566@01, 3)) | live]
; [else-branch: 985 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1566@01, 3)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 985 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1566@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1566@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
; [then-branch: 986 | $struct_get[Int]($struct_loc[Int](self@1566@01, 1)) != $struct_get[Int]($struct_loc[Int](self@1505@01, 1)) | live]
; [else-branch: 986 | $struct_get[Int]($struct_loc[Int](self@1566@01, 1)) == $struct_get[Int]($struct_loc[Int](self@1505@01, 1)) | live]
(push) ; 8
; [then-branch: 986 | $struct_get[Int]($struct_loc[Int](self@1566@01, 1)) != $struct_get[Int]($struct_loc[Int](self@1505@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@1566@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@1505@01 1)))))
(pop) ; 8
(push) ; 8
; [else-branch: 986 | $struct_get[Int]($struct_loc[Int](self@1566@01, 1)) == $struct_get[Int]($struct_loc[Int](self@1505@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1566@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@1505@01 1))))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@1566@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@1505@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1566@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@1505@01 1))))))
(pop) ; 6
(push) ; 6
; [else-branch: 985 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1566@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1566@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1566@01 3))))
  (and
    (not
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1566@01 3))))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> self@1566@01 1))
        ($struct_get<Int> ($struct_loc<Int> self@1505@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> self@1566@01 1))
          ($struct_get<Int> ($struct_loc<Int> self@1505@01 1))))))))
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1566@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1566@01 3))))))
(push) ; 5
(assert (not (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1566@01 3))))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1566@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@1505@01 1)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1566@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1505@01 0)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1566@01 3))))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1566@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@1505@01 1)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@1566@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1505@01 0))))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1572@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 987 | !(0 <= q$a@1572@01) | live]
; [else-branch: 987 | 0 <= q$a@1572@01 | live]
(push) ; 7
; [then-branch: 987 | !(0 <= q$a@1572@01)]
(assert (not (<= 0 q$a@1572@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 987 | 0 <= q$a@1572@01]
(assert (<= 0 q$a@1572@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1572@01) (not (<= 0 q$a@1572@01))))
(push) ; 6
; [then-branch: 988 | 0 <= q$a@1572@01 && q$a@1572@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 988 | !(0 <= q$a@1572@01 && q$a@1572@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 988 | 0 <= q$a@1572@01 && q$a@1572@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1572@01)
  (<= q$a@1572@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 989 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1572@01) | live]
; [else-branch: 989 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1572@01)) | live]
(push) ; 9
; [then-branch: 989 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1572@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
(pop) ; 9
(push) ; 9
; [else-branch: 989 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1572@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01)))
(push) ; 8
; [then-branch: 990 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1572@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1566@01, 2)), q$a@1572@01) | live]
; [else-branch: 990 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1572@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1566@01, 2)), q$a@1572@01)) | live]
(push) ; 9
; [then-branch: 990 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1572@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1566@01, 2)), q$a@1572@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 10
; [then-branch: 991 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1566@01, 1)) | live]
; [else-branch: 991 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1566@01, 1)) | live]
(push) ; 11
; [then-branch: 991 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1566@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1566@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 991 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1566@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1566@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1566@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1566@01 1))))))
(pop) ; 9
(push) ; 9
; [else-branch: 990 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1572@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1566@01, 2)), q$a@1572@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1566@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1566@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 988 | !(0 <= q$a@1572@01 && q$a@1572@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1572@01)
    (<= q$a@1572@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1572@01)
    (<= q$a@1572@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1572@01)
    (<= q$a@1572@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1566@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1566@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1572@01)
      (<= q$a@1572@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1572@01)
    (<= q$a@1572@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1572@01 Int)) (!
  (and
    (or (<= 0 q$a@1572@01) (not (<= 0 q$a@1572@01)))
    (=>
      (and
        (<= 0 q$a@1572@01)
        (<= q$a@1572@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1572@01)
        (<= q$a@1572@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1566@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1566@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1572@01)
          (<= q$a@1572@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1572@01)
        (<= q$a@1572@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2421@13@2421@393-aux|)))
(assert (forall ((q$a@1572@01 Int)) (!
  (and
    (or (<= 0 q$a@1572@01) (not (<= 0 q$a@1572@01)))
    (=>
      (and
        (<= 0 q$a@1572@01)
        (<= q$a@1572@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1572@01)
        (<= q$a@1572@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1566@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1566@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1572@01)
          (<= q$a@1572@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1572@01)
        (<= q$a@1572@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2421@13@2421@393-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1572@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1572@01)
        (<= q$a@1572@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2421@13@2421@393|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1572@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1572@01)
        (<= q$a@1572@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1572@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1572@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2421@13@2421@393|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1573@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 992 | !(0 <= q$a@1573@01) | live]
; [else-branch: 992 | 0 <= q$a@1573@01 | live]
(push) ; 7
; [then-branch: 992 | !(0 <= q$a@1573@01)]
(assert (not (<= 0 q$a@1573@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 992 | 0 <= q$a@1573@01]
(assert (<= 0 q$a@1573@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1573@01) (not (<= 0 q$a@1573@01))))
(push) ; 6
; [then-branch: 993 | 0 <= q$a@1573@01 && q$a@1573@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 993 | !(0 <= q$a@1573@01 && q$a@1573@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 993 | 0 <= q$a@1573@01 && q$a@1573@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1573@01)
  (<= q$a@1573@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 994 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1573@01)) | live]
; [else-branch: 994 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1573@01) | live]
(push) ; 9
; [then-branch: 994 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1573@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 994 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1573@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01))))
(push) ; 8
; [then-branch: 995 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1573@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1566@01, 2)), q$a@1573@01)) | live]
; [else-branch: 995 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1573@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1566@01, 2)), q$a@1573@01))) | live]
(push) ; 9
; [then-branch: 995 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1573@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1566@01, 2)), q$a@1573@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 996 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) != q$a@1573@01 | live]
; [else-branch: 996 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) == q$a@1573@01 | live]
(push) ; 11
; [then-branch: 996 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) != q$a@1573@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0)) q$a@1573@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 996 | $struct_get[Int]($struct_loc[Int](msg@1501@01, 0)) == q$a@1573@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0)) q$a@1573@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0)) q$a@1573@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0)) q$a@1573@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 995 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1505@01, 2)), q$a@1573@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1566@01, 2)), q$a@1573@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0)) q$a@1573@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0)) q$a@1573@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 993 | !(0 <= q$a@1573@01 && q$a@1573@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1573@01)
    (<= q$a@1573@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1573@01)
    (<= q$a@1573@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1573@01)
    (<= q$a@1573@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0)) q$a@1573@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0)) q$a@1573@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1573@01)
      (<= q$a@1573@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1573@01)
    (<= q$a@1573@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1573@01 Int)) (!
  (and
    (or (<= 0 q$a@1573@01) (not (<= 0 q$a@1573@01)))
    (=>
      (and
        (<= 0 q$a@1573@01)
        (<= q$a@1573@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1573@01)
        (<= q$a@1573@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0)) q$a@1573@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
                  q$a@1573@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1573@01)
          (<= q$a@1573@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1573@01)
        (<= q$a@1573@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2422@13@2422@357-aux|)))
(assert (forall ((q$a@1573@01 Int)) (!
  (and
    (or (<= 0 q$a@1573@01) (not (<= 0 q$a@1573@01)))
    (=>
      (and
        (<= 0 q$a@1573@01)
        (<= q$a@1573@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1573@01)
        (<= q$a@1573@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0)) q$a@1573@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1501@01 0))
                  q$a@1573@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1573@01)
          (<= q$a@1573@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1573@01)
        (<= q$a@1573@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2422@13@2422@357-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1573@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1573@01)
        (<= q$a@1573@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2422@13@2422@357|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1573@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1573@01)
        (<= q$a@1573@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1505@01 2)) q$a@1573@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1566@01 2)) q$a@1573@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2422@13@2422@357|)))
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1574@01 $Snap)
(assert (= $t@1574@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1517@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1575@01 $Struct)
(assert (=
  self@1575@01
  ($struct_set<$Struct> self@1566@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1566@01 11))
    l$havoc$1@1517@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 4
; [eval] !$succ
; [then-branch: 997 | False | dead]
; [else-branch: 997 | True | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 997 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 982 | $out_of_gas@1515@01]
(assert $out_of_gas@1515@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$allowance ----------
(declare-const l$_owner@1576@01 Int)
(declare-const l$_spender@1577@01 Int)
(declare-const $succ@1578@01 Bool)
(declare-const $res@1579@01 Int)
(declare-const l$_owner@1580@01 Int)
(declare-const l$_spender@1581@01 Int)
(declare-const $succ@1582@01 Bool)
(declare-const $res@1583@01 Int)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@1584@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@1585@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@1586@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@1587@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@1588@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@1589@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@1590@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@1591@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@1592@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@1593@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@1594@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@1595@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@1596@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@1597@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@1598@01 Int)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@1599@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@1600@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1601@01 $Snap)
(assert (= $t@1601@01 ($Snap.combine ($Snap.first $t@1601@01) ($Snap.second $t@1601@01))))
(assert (= ($Snap.first $t@1601@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1588@01 0))))
(assert (= ($Snap.second $t@1601@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1588@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1602@01 $Snap)
(assert (= $t@1602@01 ($Snap.combine ($Snap.first $t@1602@01) ($Snap.second $t@1602@01))))
(assert (= ($Snap.first $t@1602@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1588@01 1))))
(assert (= ($Snap.second $t@1602@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1588@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1603@01 $Snap)
(assert (= $t@1603@01 ($Snap.combine ($Snap.first $t@1603@01) ($Snap.second $t@1603@01))))
(assert (= ($Snap.first $t@1603@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1588@01 3))))
(assert (= ($Snap.second $t@1603@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1588@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
(declare-const $t@1604@01 $Snap)
(assert (= $t@1604@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])| <= 12
; [eval] |($struct_get($struct_loc(self, 4)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 4)): Seq[Int])
; [eval] $struct_loc(self, 4)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1588@01 4))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
(declare-const $t@1605@01 $Snap)
(assert (= $t@1605@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])| <= 3
; [eval] |($struct_get($struct_loc(self, 5)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 5)): Seq[Int])
; [eval] $struct_loc(self, 5)
(assert (<= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1588@01 5))) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1606@01 $Snap)
(assert (= $t@1606@01 ($Snap.combine ($Snap.first $t@1606@01) ($Snap.second $t@1606@01))))
(assert (= ($Snap.first $t@1606@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1588@01 6))))
(assert (= ($Snap.second $t@1606@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1588@01 6))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1607@01 $Snap)
(assert (= $t@1607@01 ($Snap.combine ($Snap.first $t@1607@01) ($Snap.second $t@1607@01))))
(assert (= ($Snap.first $t@1607@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1588@01 7))))
(assert (= ($Snap.second $t@1607@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1588@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1608@01 $Snap)
(assert (= $t@1608@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@1609@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 998 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1588@01, 8)), $q3@1609@01)) | live]
; [else-branch: 998 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1588@01, 8)), $q3@1609@01) | live]
(push) ; 5
; [then-branch: 998 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1588@01, 8)), $q3@1609@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 8)) $q3@1609@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 998 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1588@01, 8)), $q3@1609@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 8)) $q3@1609@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 8)) $q3@1609@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 8)) $q3@1609@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1609@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 8)) $q3@1609@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 8)) $q3@1609@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 8)) $q3@1609@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2462@11@2462@345-aux|)))
(assert (forall (($q3@1609@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 8)) $q3@1609@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 8)) $q3@1609@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 8)) $q3@1609@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2462@11@2462@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@1610@01 $Snap)
(assert (= $t@1610@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@1611@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1611@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 8)) $q3@1611@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 8)) $q3@1611@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2463@11@2463@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       0 <=
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) &&
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $t@1612@01 $Snap)
(assert (= $t@1612@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(declare-const $q4@1613@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@1614@01 Int)
(push) ; 4
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) && ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(push) ; 5
; [then-branch: 999 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1588@01, 9)), $q4@1613@01), $q5@1614@01)) | live]
; [else-branch: 999 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1588@01, 9)), $q4@1613@01), $q5@1614@01) | live]
(push) ; 6
; [then-branch: 999 | !(0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1588@01, 9)), $q4@1613@01), $q5@1614@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1588@01 9)) $q4@1613@01) $q5@1614@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 999 | 0 <= $map_get[Int]($map_get[$Map[Int, Int]]($struct_get[$Map[Int, $Map[Int, Int]]]($struct_loc[Int](self@1588@01, 9)), $q4@1613@01), $q5@1614@01)]
(assert (<=
  0
  ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1588@01 9)) $q4@1613@01) $q5@1614@01)))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1588@01 9)) $q4@1613@01) $q5@1614@01))
  (not
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1588@01 9)) $q4@1613@01) $q5@1614@01)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@1614@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1588@01 9)) $q4@1613@01) $q5@1614@01))
    (not
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1588@01 9)) $q4@1613@01) $q5@1614@01))))
  :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1588@01 9)) $q4@1613@01) $q5@1614@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2464@131@2464@597-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1613@01 Int)) (!
  (forall (($q5@1614@01 Int)) (!
    (or
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1588@01 9)) $q4@1613@01) $q5@1614@01))
      (not
        (<=
          0
          ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1588@01 9)) $q4@1613@01) $q5@1614@01))))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1588@01 9)) $q4@1613@01) $q5@1614@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2464@131@2464@597-aux|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1588@01 9)) $q4@1613@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2464@11@2464@598-aux|)))
(assert (forall (($q4@1613@01 Int)) (!
  (forall (($q5@1614@01 Int)) (!
    (and
      (<=
        0
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1588@01 9)) $q4@1613@01) $q5@1614@01))
      (<=
        ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1588@01 9)) $q4@1613@01) $q5@1614@01)
        115792089237316195423570985008687907853269984665640564039457584007913129639935))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1588@01 9)) $q4@1613@01) $q5@1614@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2464@131@2464@597|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1588@01 9)) $q4@1613@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2464@11@2464@598|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;     $q4): $Map[Int, Int]) }
;     (forall $q5: Int ::
;       { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) }
;       ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int]), $q5): Int) <=
;       ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;       $q4): $Map[Int, Int])): Int)))
(declare-const $t@1615@01 $Snap)
(assert (= $t@1615@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]) } (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)))
(declare-const $q4@1616@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q5: Int :: { ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) } ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int))
(declare-const $q5@1617@01 Int)
(push) ; 4
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int) <= ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), $q4): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1616@01 Int)) (!
  (forall (($q5@1617@01 Int)) (!
    (<=
      ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1588@01 9)) $q4@1616@01) $q5@1617@01)
      ($map_sum<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1588@01 9)) $q4@1616@01)))
    :pattern (($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1588@01 9)) $q4@1616@01) $q5@1617@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2465@131@2465@505|))
  :pattern (($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1588@01 9)) $q4@1616@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2465@11@2465@506|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 10)): Int) &&
;   ($struct_get($struct_loc(self, 10)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1618@01 $Snap)
(assert (= $t@1618@01 ($Snap.combine ($Snap.first $t@1618@01) ($Snap.second $t@1618@01))))
(assert (= ($Snap.first $t@1618@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 10)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1588@01 10))))
(assert (= ($Snap.second $t@1618@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 10)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 10)): Int)
; [eval] $struct_loc(self, 10)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1588@01 10))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 11)): Int) &&
;   ($struct_get($struct_loc(self, 11)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1619@01 $Snap)
(assert (= $t@1619@01 ($Snap.combine ($Snap.first $t@1619@01) ($Snap.second $t@1619@01))))
(assert (= ($Snap.first $t@1619@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 11)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1588@01 11))))
(assert (= ($Snap.second $t@1619@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 11)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1588@01 11))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 12)): Int) &&
;   ($struct_get($struct_loc(self, 12)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1620@01 $Snap)
(assert (= $t@1620@01 ($Snap.combine ($Snap.first $t@1620@01) ($Snap.second $t@1620@01))))
(assert (= ($Snap.first $t@1620@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 12)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@1588@01 12))))
(assert (= ($Snap.second $t@1620@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 12)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 12)): Int)
; [eval] $struct_loc(self, 12)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1588@01 12))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1621@01 $Snap)
(assert (= $t@1621@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q6@1622@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) && ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(push) ; 4
; [then-branch: 1000 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1588@01, 14)), $q6@1622@01)) | live]
; [else-branch: 1000 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1588@01, 14)), $q6@1622@01) | live]
(push) ; 5
; [then-branch: 1000 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1588@01, 14)), $q6@1622@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 14)) $q6@1622@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 1000 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1588@01, 14)), $q6@1622@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 14)) $q6@1622@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 14)) $q6@1622@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 14)) $q6@1622@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1622@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 14)) $q6@1622@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 14)) $q6@1622@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 14)) $q6@1622@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2469@11@2469@348-aux|)))
(assert (forall (($q6@1622@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 14)) $q6@1622@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 14)) $q6@1622@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 14)) $q6@1622@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2469@11@2469@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $t@1623@01 $Snap)
(assert (= $t@1623@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int))
(declare-const $q6@1624@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int) <= ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $q6): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_sum(($struct_get($struct_loc(self, 14)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1624@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 14)) $q6@1624@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 14))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 14)) $q6@1624@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2470@11@2470@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1625@01 $Snap)
(assert (= $t@1625@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q7@1626@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) && ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(push) ; 4
; [then-branch: 1001 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1588@01, 15)), $q7@1626@01)) | live]
; [else-branch: 1001 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1588@01, 15)), $q7@1626@01) | live]
(push) ; 5
; [then-branch: 1001 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1588@01, 15)), $q7@1626@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 15)) $q7@1626@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 1001 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1588@01, 15)), $q7@1626@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 15)) $q7@1626@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 15)) $q7@1626@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 15)) $q7@1626@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1626@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 15)) $q7@1626@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 15)) $q7@1626@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 15)) $q7@1626@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2471@11@2471@348-aux|)))
(assert (forall (($q7@1626@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 15)) $q7@1626@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 15)) $q7@1626@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 15)) $q7@1626@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2471@11@2471@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) }
;     ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $t@1627@01 $Snap)
(assert (= $t@1627@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) } ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int))
(declare-const $q7@1628@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int) <= ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 15)): $Map[Int, Int]), $q7): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
; [eval] ($map_sum(($struct_get($struct_loc(self, 15)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 15)): $Map[Int, Int])
; [eval] $struct_loc(self, 15)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1628@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 15)) $q7@1628@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 15))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1588@01 15)) $q7@1628@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2472@11@2472@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@1629@01 $Snap)
(assert (= $t@1629@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1588@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1630@01 $Snap)
(assert (= $t@1630@01 ($Snap.combine ($Snap.first $t@1630@01) ($Snap.second $t@1630@01))))
(assert (= ($Snap.first $t@1630@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@1630@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$_owner &&
;   l$_owner <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1631@01 $Snap)
(assert (= $t@1631@01 ($Snap.combine ($Snap.first $t@1631@01) ($Snap.second $t@1631@01))))
(assert (= ($Snap.first $t@1631@01) $Snap.unit))
; [eval] 0 <= l$_owner
(assert (<= 0 l$_owner@1580@01))
(assert (= ($Snap.second $t@1631@01) $Snap.unit))
; [eval] l$_owner <= 1461501637330902918203684832716283019655932542975
(assert (<= l$_owner@1580@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$_spender &&
;   l$_spender <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1632@01 $Snap)
(assert (= $t@1632@01 ($Snap.combine ($Snap.first $t@1632@01) ($Snap.second $t@1632@01))))
(assert (= ($Snap.first $t@1632@01) $Snap.unit))
; [eval] 0 <= l$_spender
(assert (<= 0 l$_spender@1581@01))
(assert (= ($Snap.second $t@1632@01) $Snap.unit))
; [eval] l$_spender <= 1461501637330902918203684832716283019655932542975
(assert (<= l$_spender@1581@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1633@01 $Snap)
(assert (= $t@1633@01 ($Snap.combine ($Snap.first $t@1633@01) ($Snap.second $t@1633@01))))
(assert (= ($Snap.first $t@1633@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1585@01 0))))
(assert (= ($Snap.second $t@1633@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1585@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1634@01 $Snap)
(assert (= $t@1634@01 ($Snap.combine ($Snap.first $t@1634@01) ($Snap.second $t@1634@01))))
(assert (= ($Snap.first $t@1634@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1585@01 1))))
(assert (= ($Snap.second $t@1634@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1585@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1635@01 $Snap)
(assert (= $t@1635@01 ($Snap.combine ($Snap.first $t@1635@01) ($Snap.second $t@1635@01))))
(assert (= ($Snap.first $t@1635@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1585@01 2))))
(assert (= ($Snap.second $t@1635@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1585@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@1636@01 $Snap)
(assert (= $t@1636@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@1585@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1637@01 $Snap)
(assert (= $t@1637@01 ($Snap.combine ($Snap.first $t@1637@01) ($Snap.second $t@1637@01))))
(assert (= ($Snap.first $t@1637@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1585@01 4))))
(assert (= ($Snap.second $t@1637@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1585@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@1638@01 $Snap)
(assert (= $t@1638@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@1585@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1639@01 $Snap)
(assert (= $t@1639@01 ($Snap.combine ($Snap.first $t@1639@01) ($Snap.second $t@1639@01))))
(assert (= ($Snap.first $t@1639@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))))
(assert (= ($Snap.second $t@1639@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1640@01 $Snap)
(assert (= $t@1640@01 ($Snap.combine ($Snap.first $t@1640@01) ($Snap.second $t@1640@01))))
(assert (= ($Snap.first $t@1640@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1584@01 1))))
(assert (= ($Snap.second $t@1640@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1584@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1641@01 $Snap)
(assert (= $t@1641@01 ($Snap.combine ($Snap.first $t@1641@01) ($Snap.second $t@1641@01))))
(assert (= ($Snap.first $t@1641@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1584@01 2))))
(assert (= ($Snap.second $t@1641@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1584@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@1642@01 $Snap)
(assert (= $t@1642@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1584@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@1643@01 $Snap)
(assert (= $t@1643@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $t@1644@01 $Snap)
(assert (= $t@1644@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int))
(declare-const $a@1645@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
; [eval] ($map_get(($struct_get($struct_loc(self, 14)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 14)): $Map[Int, Int])
; [eval] $struct_loc(self, 14)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@1646@01 $Snap)
(assert (= $t@1646@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1584@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $res := $unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]),
;   l$_owner): $Map[Int, Int]), l$_spender): Int)))
; [eval] $unwrap($wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_owner): $Map[Int, Int]), l$_spender): Int)))
; [eval] $wrap(($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_owner): $Map[Int, Int]), l$_spender): Int))
; [eval] ($map_get(($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_owner): $Map[Int, Int]), l$_spender): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]]), l$_owner): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, $Map[Int, Int]])
; [eval] $struct_loc(self, 9)
(declare-const $res@1647@01 Int)
(assert (=
  $res@1647@01
  ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($map_get<$Map<Int~_Int>> ($struct_get<$Map<Int~_$Map<Int~_Int>>> ($struct_loc<Int> self@1588@01 9)) l$_owner@1580@01) l$_spender@1581@01)))))
; [exec]
; label return
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@1597@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@1597@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1002 | $out_of_gas@1597@01 | live]
; [else-branch: 1002 | !($out_of_gas@1597@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1002 | $out_of_gas@1597@01]
(assert $out_of_gas@1597@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 1003 | False | dead]
; [else-branch: 1003 | True | live]
(push) ; 4
; [else-branch: 1003 | True]
(pop) ; 4
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1004 | True | live]
; [else-branch: 1004 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1004 | True]
; [exec]
; assert old(($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] old(($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
; [then-branch: 1005 | False | dead]
; [else-branch: 1005 | True | live]
(push) ; 6
; [else-branch: 1005 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert old(($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] old(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1588@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1588@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1006 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1588@01, 3)) | live]
; [else-branch: 1006 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1588@01, 3)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1006 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1588@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1588@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
; [then-branch: 1007 | False | live]
; [else-branch: 1007 | True | live]
(push) ; 8
; [then-branch: 1007 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1007 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 1006 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1588@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1588@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1588@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1588@01 3))))))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1648@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 1008 | !(0 <= q$a@1648@01) | live]
; [else-branch: 1008 | 0 <= q$a@1648@01 | live]
(push) ; 7
; [then-branch: 1008 | !(0 <= q$a@1648@01)]
(assert (not (<= 0 q$a@1648@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 1008 | 0 <= q$a@1648@01]
(assert (<= 0 q$a@1648@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1648@01) (not (<= 0 q$a@1648@01))))
(push) ; 6
; [then-branch: 1009 | 0 <= q$a@1648@01 && q$a@1648@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 1009 | !(0 <= q$a@1648@01 && q$a@1648@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 1009 | 0 <= q$a@1648@01 && q$a@1648@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1648@01)
  (<= q$a@1648@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 1010 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1648@01) | live]
; [else-branch: 1010 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1648@01)) | live]
(push) ; 9
; [then-branch: 1010 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1648@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1010 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1648@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01)))
(push) ; 8
; [then-branch: 1011 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1648@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1648@01) | live]
; [else-branch: 1011 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1648@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1648@01)) | live]
(push) ; 9
; [then-branch: 1011 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1648@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1648@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 10
; [then-branch: 1012 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1588@01, 1)) | live]
; [else-branch: 1012 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1588@01, 1)) | live]
(push) ; 11
; [then-branch: 1012 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1588@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1588@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 1012 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1588@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1588@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1588@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1588@01 1))))))
(pop) ; 9
(push) ; 9
; [else-branch: 1011 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1648@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1648@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1588@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1588@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 1009 | !(0 <= q$a@1648@01 && q$a@1648@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1648@01)
    (<= q$a@1648@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1648@01)
    (<= q$a@1648@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1648@01)
    (<= q$a@1648@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1588@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1588@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1648@01)
      (<= q$a@1648@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1648@01)
    (<= q$a@1648@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1648@01 Int)) (!
  (and
    (or (<= 0 q$a@1648@01) (not (<= 0 q$a@1648@01)))
    (=>
      (and
        (<= 0 q$a@1648@01)
        (<= q$a@1648@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1648@01)
        (<= q$a@1648@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1588@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1588@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1648@01)
          (<= q$a@1648@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1648@01)
        (<= q$a@1648@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2531@17@2531@397-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1648@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1648@01)
        (<= q$a@1648@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2531@17@2531@397|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1648@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1648@01)
        (<= q$a@1648@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1648@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2531@17@2531@397|)))
; [exec]
; assert old((forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] old((forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1649@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 1013 | !(0 <= q$a@1649@01) | live]
; [else-branch: 1013 | 0 <= q$a@1649@01 | live]
(push) ; 7
; [then-branch: 1013 | !(0 <= q$a@1649@01)]
(assert (not (<= 0 q$a@1649@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 1013 | 0 <= q$a@1649@01]
(assert (<= 0 q$a@1649@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1649@01) (not (<= 0 q$a@1649@01))))
(push) ; 6
; [then-branch: 1014 | 0 <= q$a@1649@01 && q$a@1649@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 1014 | !(0 <= q$a@1649@01 && q$a@1649@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 1014 | 0 <= q$a@1649@01 && q$a@1649@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1649@01)
  (<= q$a@1649@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 1015 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1649@01)) | live]
; [else-branch: 1015 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1649@01) | live]
(push) ; 9
; [then-branch: 1015 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1649@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 1015 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1649@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01))))
(push) ; 8
; [then-branch: 1016 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1649@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1649@01)) | live]
; [else-branch: 1016 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1649@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1649@01))) | live]
(push) ; 9
; [then-branch: 1016 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1649@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1649@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 1017 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) != q$a@1649@01 | live]
; [else-branch: 1017 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) == q$a@1649@01 | live]
(push) ; 11
; [then-branch: 1017 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) != q$a@1649@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0)) q$a@1649@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 1017 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) == q$a@1649@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0)) q$a@1649@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0)) q$a@1649@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0)) q$a@1649@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 1016 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1649@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1649@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0)) q$a@1649@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0)) q$a@1649@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 1014 | !(0 <= q$a@1649@01 && q$a@1649@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1649@01)
    (<= q$a@1649@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1649@01)
    (<= q$a@1649@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1649@01)
    (<= q$a@1649@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0)) q$a@1649@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0)) q$a@1649@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1649@01)
      (<= q$a@1649@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1649@01)
    (<= q$a@1649@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1649@01 Int)) (!
  (and
    (or (<= 0 q$a@1649@01) (not (<= 0 q$a@1649@01)))
    (=>
      (and
        (<= 0 q$a@1649@01)
        (<= q$a@1649@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1649@01)
        (<= q$a@1649@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0)) q$a@1649@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
                  q$a@1649@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1649@01)
          (<= q$a@1649@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1649@01)
        (<= q$a@1649@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2532@17@2532@361-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1649@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1649@01)
        (<= q$a@1649@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2532@17@2532@361|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1649@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1649@01)
        (<= q$a@1649@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1649@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2532@17@2532@361|)))
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1650@01 $Snap)
(assert (= $t@1650@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1599@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1651@01 $Struct)
(assert (=
  self@1651@01
  ($struct_set<$Struct> self@1588@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1588@01 11))
    l$havoc$1@1599@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 4
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 1002 | !($out_of_gas@1597@01)]
(assert (not $out_of_gas@1597@01))
(pop) ; 3
; [eval] !$out_of_gas
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@1597@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@1597@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1018 | !($out_of_gas@1597@01) | live]
; [else-branch: 1018 | $out_of_gas@1597@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1018 | !($out_of_gas@1597@01)]
(assert (not $out_of_gas@1597@01))
; [exec]
; label end
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1019 | True | live]
; [else-branch: 1019 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1019 | True]
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc($old_self, 3)): Int) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(push) ; 5
; [then-branch: 1020 | False | dead]
; [else-branch: 1020 | True | live]
(push) ; 6
; [else-branch: 1020 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(msg, 0)): Int) !=
;   ($struct_get($struct_loc(self, 3)): Int) ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int) ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1588@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1588@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1021 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1588@01, 3)) | live]
; [else-branch: 1021 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1588@01, 3)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1021 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1588@01, 3))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1588@01 3)))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int) && ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
; [then-branch: 1022 | False | live]
; [else-branch: 1022 | True | live]
(push) ; 8
; [then-branch: 1022 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1022 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 1021 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1588@01, 3))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1588@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1588@01 3)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1588@01 3))))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($struct_get($struct_loc(self, 1)): Int) &&
;     perm(e$OpenMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write)
(declare-const q$a@1652@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 1023 | !(0 <= q$a@1652@01) | live]
; [else-branch: 1023 | 0 <= q$a@1652@01 | live]
(push) ; 7
; [then-branch: 1023 | !(0 <= q$a@1652@01)]
(assert (not (<= 0 q$a@1652@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 1023 | 0 <= q$a@1652@01]
(assert (<= 0 q$a@1652@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1652@01) (not (<= 0 q$a@1652@01))))
(push) ; 6
; [then-branch: 1024 | 0 <= q$a@1652@01 && q$a@1652@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 1024 | !(0 <= q$a@1652@01 && q$a@1652@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 1024 | 0 <= q$a@1652@01 && q$a@1652@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1652@01)
  (<= q$a@1652@01 1461501637330902918203684832716283019655932542975)))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 1025 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1652@01) | live]
; [else-branch: 1025 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1652@01)) | live]
(push) ; 9
; [then-branch: 1025 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1652@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1025 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1652@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01)))
(push) ; 8
; [then-branch: 1026 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1652@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1652@01) | live]
; [else-branch: 1026 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1652@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1652@01)) | live]
(push) ; 9
; [then-branch: 1026 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1652@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1652@01)]
(assert (and
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int) && perm(e$OpenMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 10
; [then-branch: 1027 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1588@01, 1)) | live]
; [else-branch: 1027 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1588@01, 1)) | live]
(push) ; 11
; [then-branch: 1027 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) != $struct_get[Int]($struct_loc[Int](self@1588@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1588@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 1027 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) == $struct_get[Int]($struct_loc[Int](self@1588@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@1588@01 1))))
; [eval] perm(e$OpenMinter(q$a)) == 1 * write
; [eval] perm(e$OpenMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@1588@01 1)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
      ($struct_get<Int> ($struct_loc<Int> self@1588@01 1))))))
(pop) ; 9
(push) ; 9
; [else-branch: 1026 | !(!($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1652@01)) && $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1652@01))]
(assert (not
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01)
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
        ($struct_get<Int> ($struct_loc<Int> self@1588@01 1)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
          ($struct_get<Int> ($struct_loc<Int> self@1588@01 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01)))
  (and
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 1024 | !(0 <= q$a@1652@01 && q$a@1652@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1652@01)
    (<= q$a@1652@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1652@01)
    (<= q$a@1652@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1652@01)
    (<= q$a@1652@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
    (=>
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01)
        (or
          (=
            ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
            ($struct_get<Int> ($struct_loc<Int> self@1588@01 1)))
          (not
            (=
              ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
              ($struct_get<Int> ($struct_loc<Int> self@1588@01 1)))))))
    (or
      (not
        (and
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01)))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1652@01)
      (<= q$a@1652@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1652@01)
    (<= q$a@1652@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1652@01 Int)) (!
  (and
    (or (<= 0 q$a@1652@01) (not (<= 0 q$a@1652@01)))
    (=>
      (and
        (<= 0 q$a@1652@01)
        (<= q$a@1652@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1652@01)
        (<= q$a@1652@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
        (=>
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01)
            (or
              (=
                ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
                ($struct_get<Int> ($struct_loc<Int> self@1588@01 1)))
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
                  ($struct_get<Int> ($struct_loc<Int> self@1588@01 1)))))))
        (or
          (not
            (and
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01)))
          (and
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01)))))
    (or
      (not
        (and
          (<= 0 q$a@1652@01)
          (<= q$a@1652@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1652@01)
        (<= q$a@1652@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2526@13@2526@393-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1652@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1652@01)
        (<= q$a@1652@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2526@13@2526@393|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1652@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1652@01)
        (<= q$a@1652@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01)))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1652@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2526@13@2526@393|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) &&
;     !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==>
;     ($struct_get($struct_loc(msg, 0)): Int) == q$a &&
;     perm(e$CloseMinter(q$a)) == 1 * write)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) } { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write)
(declare-const q$a@1653@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 1028 | !(0 <= q$a@1653@01) | live]
; [else-branch: 1028 | 0 <= q$a@1653@01 | live]
(push) ; 7
; [then-branch: 1028 | !(0 <= q$a@1653@01)]
(assert (not (<= 0 q$a@1653@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 1028 | 0 <= q$a@1653@01]
(assert (<= 0 q$a@1653@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@1653@01) (not (<= 0 q$a@1653@01))))
(push) ; 6
; [then-branch: 1029 | 0 <= q$a@1653@01 && q$a@1653@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 1029 | !(0 <= q$a@1653@01 && q$a@1653@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 1029 | 0 <= q$a@1653@01 && q$a@1653@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@1653@01)
  (<= q$a@1653@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool) ==> ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool) && !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, Bool])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 1030 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1653@01)) | live]
; [else-branch: 1030 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1653@01) | live]
(push) ; 9
; [then-branch: 1030 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1653@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 1030 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1653@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01))
; [eval] !($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, Bool]), q$a): Bool)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, Bool])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01))))
(push) ; 8
; [then-branch: 1031 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1653@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1653@01)) | live]
; [else-branch: 1031 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1653@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1653@01))) | live]
(push) ; 9
; [then-branch: 1031 | $map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1653@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1653@01))]
(assert (and
  ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a && perm(e$CloseMinter(q$a)) == 1 * write
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == q$a
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 1032 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) != q$a@1653@01 | live]
; [else-branch: 1032 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) == q$a@1653@01 | live]
(push) ; 11
; [then-branch: 1032 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) != q$a@1653@01]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0)) q$a@1653@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 1032 | $struct_get[Int]($struct_loc[Int](msg@1584@01, 0)) == q$a@1653@01]
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0)) q$a@1653@01))
; [eval] perm(e$CloseMinter(q$a)) == 1 * write
; [eval] perm(e$CloseMinter(q$a))
; [eval] 1 * write
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0)) q$a@1653@01)
  (not (= ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0)) q$a@1653@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 1031 | !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1653@01) && !($map_get[Bool]($struct_get[$Map[Int, Bool]]($struct_loc[Int](self@1588@01, 2)), q$a@1653@01)))]
(assert (not
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01))
    (or
      (= ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0)) q$a@1653@01)
      (not (= ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0)) q$a@1653@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01))))
  (and
    ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)
    (not
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 1029 | !(0 <= q$a@1653@01 && q$a@1653@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@1653@01)
    (<= q$a@1653@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@1653@01)
    (<= q$a@1653@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@1653@01)
    (<= q$a@1653@01 1461501637330902918203684832716283019655932542975)
    (or
      ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)))
    (=>
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01))
        (or
          (= ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0)) q$a@1653@01)
          (not
            (= ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0)) q$a@1653@01)))))
    (or
      (not
        (and
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01))))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@1653@01)
      (<= q$a@1653@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@1653@01)
    (<= q$a@1653@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@1653@01 Int)) (!
  (and
    (or (<= 0 q$a@1653@01) (not (<= 0 q$a@1653@01)))
    (=>
      (and
        (<= 0 q$a@1653@01)
        (<= q$a@1653@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@1653@01)
        (<= q$a@1653@01 1461501637330902918203684832716283019655932542975)
        (or
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)))
        (=>
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01))
            (or
              (= ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0)) q$a@1653@01)
              (not
                (=
                  ($struct_get<Int> ($struct_loc<Int> msg@1584@01 0))
                  q$a@1653@01)))))
        (or
          (not
            (and
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01))))
          (and
            ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)
            (not
              ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01))))))
    (or
      (not
        (and
          (<= 0 q$a@1653@01)
          (<= q$a@1653@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@1653@01)
        (<= q$a@1653@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2527@13@2527@357-aux|)))
(push) ; 5
(assert (not (forall ((q$a@1653@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1653@01)
        (<= q$a@1653@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2527@13@2527@357|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@1653@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@1653@01)
        (<= q$a@1653@01 1461501637330902918203684832716283019655932542975))
      (and
        ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01)
        (not
          ($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01))))
    false)
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Int~_Bool>> ($struct_loc<Int> self@1588@01 2)) q$a@1653@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesserenuscoin.vy.vpr@2527@13@2527@357|)))
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1654@01 $Snap)
(assert (= $t@1654@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1599@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 11, ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 11)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 11)): Int)
; [eval] $struct_loc(self, 11)
(declare-const self@1655@01 $Struct)
(assert (=
  self@1655@01
  ($struct_set<$Struct> self@1588@01 11 (+
    ($struct_get<Int> ($struct_loc<Int> self@1588@01 11))
    l$havoc$1@1599@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 4
; [eval] !$succ
; [then-branch: 1033 | False | dead]
; [else-branch: 1033 | True | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 1033 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 1018 | $out_of_gas@1597@01]
(assert $out_of_gas@1597@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
