(get-info :version)
; (:version "4.12.1")
; Started: 2025-01-27 02:50:11
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int> 0)
(declare-sort $Map<Seq<Int>~_Int> 0)
(declare-sort s$struct$self 0)
(declare-sort $Struct 0)
(declare-sort $MapInt<Seq<Int>> 0)
(declare-sort $Contract 0)
(declare-sort $StructOps<$Map<Int~_$Struct>> 0)
(declare-sort $Convert 0)
(declare-sort $StructOps<$Struct> 0)
(declare-sort s$struct$DocumentTransfer 0)
(declare-sort $Range 0)
(declare-sort $Int 0)
(declare-sort $StructOps<$Map<Int~_Int>> 0)
(declare-sort $Math 0)
(declare-sort $StructOps<Int> 0)
(declare-sort $StructOps<$Map<Seq<Int>~_Int>> 0)
(declare-sort s$resource$$creator 0)
(declare-sort $StructOps<$Map<Seq<Int>~_Bool>> 0)
(declare-sort $Map<Int~_$Struct> 0)
(declare-sort $StructOps<Bool> 0)
(declare-sort $Blockchain 0)
(declare-sort $Array<Int> 0)
(declare-sort $MapInt<Int> 0)
(declare-sort $Map<Int~_Int> 0)
(declare-sort $StructOps<Seq<Int>> 0)
(declare-sort $Map<Seq<Int>~_Bool> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$Map<Seq<Int>~_Int>To$Snap ($Map<Seq<Int>~_Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Seq<Int>~_Int> ($Snap) $Map<Seq<Int>~_Int>)
(assert (forall ((x $Map<Seq<Int>~_Int>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Seq<Int>~_Int>($SortWrappers.$Map<Seq<Int>~_Int>To$Snap x)))
    :pattern (($SortWrappers.$Map<Seq<Int>~_Int>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Seq<Int>~_Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Seq<Int>~_Int>To$Snap($SortWrappers.$SnapTo$Map<Seq<Int>~_Int> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Seq<Int>~_Int> x))
    :qid |$Snap.$Map<Seq<Int>~_Int>To$SnapTo$Map<Seq<Int>~_Int>|
    )))
(declare-fun $SortWrappers.s$struct$selfTo$Snap (s$struct$self) $Snap)
(declare-fun $SortWrappers.$SnapTos$struct$self ($Snap) s$struct$self)
(assert (forall ((x s$struct$self)) (!
    (= x ($SortWrappers.$SnapTos$struct$self($SortWrappers.s$struct$selfTo$Snap x)))
    :pattern (($SortWrappers.s$struct$selfTo$Snap x))
    :qid |$Snap.$SnapTos$struct$selfTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$struct$selfTo$Snap($SortWrappers.$SnapTos$struct$self x)))
    :pattern (($SortWrappers.$SnapTos$struct$self x))
    :qid |$Snap.s$struct$selfTo$SnapTos$struct$self|
    )))
(declare-fun $SortWrappers.$StructTo$Snap ($Struct) $Snap)
(declare-fun $SortWrappers.$SnapTo$Struct ($Snap) $Struct)
(assert (forall ((x $Struct)) (!
    (= x ($SortWrappers.$SnapTo$Struct($SortWrappers.$StructTo$Snap x)))
    :pattern (($SortWrappers.$StructTo$Snap x))
    :qid |$Snap.$SnapTo$StructTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructTo$Snap($SortWrappers.$SnapTo$Struct x)))
    :pattern (($SortWrappers.$SnapTo$Struct x))
    :qid |$Snap.$StructTo$SnapTo$Struct|
    )))
(declare-fun $SortWrappers.$MapInt<Seq<Int>>To$Snap ($MapInt<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$MapInt<Seq<Int>> ($Snap) $MapInt<Seq<Int>>)
(assert (forall ((x $MapInt<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$MapInt<Seq<Int>>($SortWrappers.$MapInt<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$MapInt<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$MapInt<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MapInt<Seq<Int>>To$Snap($SortWrappers.$SnapTo$MapInt<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$MapInt<Seq<Int>> x))
    :qid |$Snap.$MapInt<Seq<Int>>To$SnapTo$MapInt<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$ContractTo$Snap ($Contract) $Snap)
(declare-fun $SortWrappers.$SnapTo$Contract ($Snap) $Contract)
(assert (forall ((x $Contract)) (!
    (= x ($SortWrappers.$SnapTo$Contract($SortWrappers.$ContractTo$Snap x)))
    :pattern (($SortWrappers.$ContractTo$Snap x))
    :qid |$Snap.$SnapTo$ContractTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$ContractTo$Snap($SortWrappers.$SnapTo$Contract x)))
    :pattern (($SortWrappers.$SnapTo$Contract x))
    :qid |$Snap.$ContractTo$SnapTo$Contract|
    )))
(declare-fun $SortWrappers.$StructOps<$Map<Int~_$Struct>>To$Snap ($StructOps<$Map<Int~_$Struct>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Map<Int~_$Struct>> ($Snap) $StructOps<$Map<Int~_$Struct>>)
(assert (forall ((x $StructOps<$Map<Int~_$Struct>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Map<Int~_$Struct>>($SortWrappers.$StructOps<$Map<Int~_$Struct>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Map<Int~_$Struct>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Map<Int~_$Struct>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Map<Int~_$Struct>>To$Snap($SortWrappers.$SnapTo$StructOps<$Map<Int~_$Struct>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Map<Int~_$Struct>> x))
    :qid |$Snap.$StructOps<$Map<Int~_$Struct>>To$SnapTo$StructOps<$Map<Int~_$Struct>>|
    )))
(declare-fun $SortWrappers.$ConvertTo$Snap ($Convert) $Snap)
(declare-fun $SortWrappers.$SnapTo$Convert ($Snap) $Convert)
(assert (forall ((x $Convert)) (!
    (= x ($SortWrappers.$SnapTo$Convert($SortWrappers.$ConvertTo$Snap x)))
    :pattern (($SortWrappers.$ConvertTo$Snap x))
    :qid |$Snap.$SnapTo$ConvertTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$ConvertTo$Snap($SortWrappers.$SnapTo$Convert x)))
    :pattern (($SortWrappers.$SnapTo$Convert x))
    :qid |$Snap.$ConvertTo$SnapTo$Convert|
    )))
(declare-fun $SortWrappers.$StructOps<$Struct>To$Snap ($StructOps<$Struct>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Struct> ($Snap) $StructOps<$Struct>)
(assert (forall ((x $StructOps<$Struct>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Struct>($SortWrappers.$StructOps<$Struct>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Struct>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Struct>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Struct>To$Snap($SortWrappers.$SnapTo$StructOps<$Struct> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Struct> x))
    :qid |$Snap.$StructOps<$Struct>To$SnapTo$StructOps<$Struct>|
    )))
(declare-fun $SortWrappers.s$struct$DocumentTransferTo$Snap (s$struct$DocumentTransfer) $Snap)
(declare-fun $SortWrappers.$SnapTos$struct$DocumentTransfer ($Snap) s$struct$DocumentTransfer)
(assert (forall ((x s$struct$DocumentTransfer)) (!
    (= x ($SortWrappers.$SnapTos$struct$DocumentTransfer($SortWrappers.s$struct$DocumentTransferTo$Snap x)))
    :pattern (($SortWrappers.s$struct$DocumentTransferTo$Snap x))
    :qid |$Snap.$SnapTos$struct$DocumentTransferTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$struct$DocumentTransferTo$Snap($SortWrappers.$SnapTos$struct$DocumentTransfer x)))
    :pattern (($SortWrappers.$SnapTos$struct$DocumentTransfer x))
    :qid |$Snap.s$struct$DocumentTransferTo$SnapTos$struct$DocumentTransfer|
    )))
(declare-fun $SortWrappers.$RangeTo$Snap ($Range) $Snap)
(declare-fun $SortWrappers.$SnapTo$Range ($Snap) $Range)
(assert (forall ((x $Range)) (!
    (= x ($SortWrappers.$SnapTo$Range($SortWrappers.$RangeTo$Snap x)))
    :pattern (($SortWrappers.$RangeTo$Snap x))
    :qid |$Snap.$SnapTo$RangeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RangeTo$Snap($SortWrappers.$SnapTo$Range x)))
    :pattern (($SortWrappers.$SnapTo$Range x))
    :qid |$Snap.$RangeTo$SnapTo$Range|
    )))
(declare-fun $SortWrappers.$IntTo$Snap ($Int) $Snap)
(declare-fun $SortWrappers.$SnapTo$Int ($Snap) $Int)
(assert (forall ((x $Int)) (!
    (= x ($SortWrappers.$SnapTo$Int($SortWrappers.$IntTo$Snap x)))
    :pattern (($SortWrappers.$IntTo$Snap x))
    :qid |$Snap.$SnapTo$IntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$IntTo$Snap($SortWrappers.$SnapTo$Int x)))
    :pattern (($SortWrappers.$SnapTo$Int x))
    :qid |$Snap.$IntTo$SnapTo$Int|
    )))
(declare-fun $SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap ($StructOps<$Map<Int~_Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> ($Snap) $StructOps<$Map<Int~_Int>>)
(assert (forall ((x $StructOps<$Map<Int~_Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>>($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Map<Int~_Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> x))
    :qid |$Snap.$StructOps<$Map<Int~_Int>>To$SnapTo$StructOps<$Map<Int~_Int>>|
    )))
(declare-fun $SortWrappers.$MathTo$Snap ($Math) $Snap)
(declare-fun $SortWrappers.$SnapTo$Math ($Snap) $Math)
(assert (forall ((x $Math)) (!
    (= x ($SortWrappers.$SnapTo$Math($SortWrappers.$MathTo$Snap x)))
    :pattern (($SortWrappers.$MathTo$Snap x))
    :qid |$Snap.$SnapTo$MathTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MathTo$Snap($SortWrappers.$SnapTo$Math x)))
    :pattern (($SortWrappers.$SnapTo$Math x))
    :qid |$Snap.$MathTo$SnapTo$Math|
    )))
(declare-fun $SortWrappers.$StructOps<Int>To$Snap ($StructOps<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Int> ($Snap) $StructOps<Int>)
(assert (forall ((x $StructOps<Int>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Int>($SortWrappers.$StructOps<Int>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Int>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Int>To$Snap($SortWrappers.$SnapTo$StructOps<Int> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Int> x))
    :qid |$Snap.$StructOps<Int>To$SnapTo$StructOps<Int>|
    )))
(declare-fun $SortWrappers.$StructOps<$Map<Seq<Int>~_Int>>To$Snap ($StructOps<$Map<Seq<Int>~_Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Map<Seq<Int>~_Int>> ($Snap) $StructOps<$Map<Seq<Int>~_Int>>)
(assert (forall ((x $StructOps<$Map<Seq<Int>~_Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Map<Seq<Int>~_Int>>($SortWrappers.$StructOps<$Map<Seq<Int>~_Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Map<Seq<Int>~_Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Map<Seq<Int>~_Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Map<Seq<Int>~_Int>>To$Snap($SortWrappers.$SnapTo$StructOps<$Map<Seq<Int>~_Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Map<Seq<Int>~_Int>> x))
    :qid |$Snap.$StructOps<$Map<Seq<Int>~_Int>>To$SnapTo$StructOps<$Map<Seq<Int>~_Int>>|
    )))
(declare-fun $SortWrappers.s$resource$$creatorTo$Snap (s$resource$$creator) $Snap)
(declare-fun $SortWrappers.$SnapTos$resource$$creator ($Snap) s$resource$$creator)
(assert (forall ((x s$resource$$creator)) (!
    (= x ($SortWrappers.$SnapTos$resource$$creator($SortWrappers.s$resource$$creatorTo$Snap x)))
    :pattern (($SortWrappers.s$resource$$creatorTo$Snap x))
    :qid |$Snap.$SnapTos$resource$$creatorTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$resource$$creatorTo$Snap($SortWrappers.$SnapTos$resource$$creator x)))
    :pattern (($SortWrappers.$SnapTos$resource$$creator x))
    :qid |$Snap.s$resource$$creatorTo$SnapTos$resource$$creator|
    )))
(declare-fun $SortWrappers.$StructOps<$Map<Seq<Int>~_Bool>>To$Snap ($StructOps<$Map<Seq<Int>~_Bool>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Map<Seq<Int>~_Bool>> ($Snap) $StructOps<$Map<Seq<Int>~_Bool>>)
(assert (forall ((x $StructOps<$Map<Seq<Int>~_Bool>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Map<Seq<Int>~_Bool>>($SortWrappers.$StructOps<$Map<Seq<Int>~_Bool>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Map<Seq<Int>~_Bool>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Map<Seq<Int>~_Bool>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Map<Seq<Int>~_Bool>>To$Snap($SortWrappers.$SnapTo$StructOps<$Map<Seq<Int>~_Bool>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Map<Seq<Int>~_Bool>> x))
    :qid |$Snap.$StructOps<$Map<Seq<Int>~_Bool>>To$SnapTo$StructOps<$Map<Seq<Int>~_Bool>>|
    )))
(declare-fun $SortWrappers.$Map<Int~_$Struct>To$Snap ($Map<Int~_$Struct>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_$Struct> ($Snap) $Map<Int~_$Struct>)
(assert (forall ((x $Map<Int~_$Struct>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_$Struct>($SortWrappers.$Map<Int~_$Struct>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_$Struct>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_$Struct>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_$Struct>To$Snap($SortWrappers.$SnapTo$Map<Int~_$Struct> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_$Struct> x))
    :qid |$Snap.$Map<Int~_$Struct>To$SnapTo$Map<Int~_$Struct>|
    )))
(declare-fun $SortWrappers.$StructOps<Bool>To$Snap ($StructOps<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Bool> ($Snap) $StructOps<Bool>)
(assert (forall ((x $StructOps<Bool>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Bool>($SortWrappers.$StructOps<Bool>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Bool>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Bool>To$Snap($SortWrappers.$SnapTo$StructOps<Bool> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Bool> x))
    :qid |$Snap.$StructOps<Bool>To$SnapTo$StructOps<Bool>|
    )))
(declare-fun $SortWrappers.$BlockchainTo$Snap ($Blockchain) $Snap)
(declare-fun $SortWrappers.$SnapTo$Blockchain ($Snap) $Blockchain)
(assert (forall ((x $Blockchain)) (!
    (= x ($SortWrappers.$SnapTo$Blockchain($SortWrappers.$BlockchainTo$Snap x)))
    :pattern (($SortWrappers.$BlockchainTo$Snap x))
    :qid |$Snap.$SnapTo$BlockchainTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$BlockchainTo$Snap($SortWrappers.$SnapTo$Blockchain x)))
    :pattern (($SortWrappers.$SnapTo$Blockchain x))
    :qid |$Snap.$BlockchainTo$SnapTo$Blockchain|
    )))
(declare-fun $SortWrappers.$Array<Int>To$Snap ($Array<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Array<Int> ($Snap) $Array<Int>)
(assert (forall ((x $Array<Int>)) (!
    (= x ($SortWrappers.$SnapTo$Array<Int>($SortWrappers.$Array<Int>To$Snap x)))
    :pattern (($SortWrappers.$Array<Int>To$Snap x))
    :qid |$Snap.$SnapTo$Array<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Array<Int>To$Snap($SortWrappers.$SnapTo$Array<Int> x)))
    :pattern (($SortWrappers.$SnapTo$Array<Int> x))
    :qid |$Snap.$Array<Int>To$SnapTo$Array<Int>|
    )))
(declare-fun $SortWrappers.$MapInt<Int>To$Snap ($MapInt<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$MapInt<Int> ($Snap) $MapInt<Int>)
(assert (forall ((x $MapInt<Int>)) (!
    (= x ($SortWrappers.$SnapTo$MapInt<Int>($SortWrappers.$MapInt<Int>To$Snap x)))
    :pattern (($SortWrappers.$MapInt<Int>To$Snap x))
    :qid |$Snap.$SnapTo$MapInt<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MapInt<Int>To$Snap($SortWrappers.$SnapTo$MapInt<Int> x)))
    :pattern (($SortWrappers.$SnapTo$MapInt<Int> x))
    :qid |$Snap.$MapInt<Int>To$SnapTo$MapInt<Int>|
    )))
(declare-fun $SortWrappers.$Map<Int~_Int>To$Snap ($Map<Int~_Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_Int> ($Snap) $Map<Int~_Int>)
(assert (forall ((x $Map<Int~_Int>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_Int>($SortWrappers.$Map<Int~_Int>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_Int>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_Int>To$Snap($SortWrappers.$SnapTo$Map<Int~_Int> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_Int> x))
    :qid |$Snap.$Map<Int~_Int>To$SnapTo$Map<Int~_Int>|
    )))
(declare-fun $SortWrappers.$StructOps<Seq<Int>>To$Snap ($StructOps<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Seq<Int>> ($Snap) $StructOps<Seq<Int>>)
(assert (forall ((x $StructOps<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Seq<Int>>($SortWrappers.$StructOps<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Seq<Int>>To$Snap($SortWrappers.$SnapTo$StructOps<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Seq<Int>> x))
    :qid |$Snap.$StructOps<Seq<Int>>To$SnapTo$StructOps<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$Map<Seq<Int>~_Bool>To$Snap ($Map<Seq<Int>~_Bool>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Seq<Int>~_Bool> ($Snap) $Map<Seq<Int>~_Bool>)
(assert (forall ((x $Map<Seq<Int>~_Bool>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Seq<Int>~_Bool>($SortWrappers.$Map<Seq<Int>~_Bool>To$Snap x)))
    :pattern (($SortWrappers.$Map<Seq<Int>~_Bool>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Seq<Int>~_Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Seq<Int>~_Bool>To$Snap($SortWrappers.$SnapTo$Map<Seq<Int>~_Bool> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Seq<Int>~_Bool> x))
    :qid |$Snap.$Map<Seq<Int>~_Bool>To$SnapTo$Map<Seq<Int>~_Bool>|
    )))
; ////////// Symbols
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_contains_trigger (Seq<Int> Int) Bool)
(declare-fun Seq_skolem (Seq<Int> Int) Int)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_skolem_diff (Seq<Int> Seq<Int>) Int)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun $map_init<$Map<Int~_$Struct>> ($Struct) $Map<Int~_$Struct>)
(declare-fun $map_eq<Bool> ($Map<Int~_$Struct> $Map<Int~_$Struct>) Bool)
(declare-fun $map_get<$Struct> ($Map<Int~_$Struct> Int) $Struct)
(declare-fun $map_set<$Map<Int~_$Struct>> ($Map<Int~_$Struct> Int $Struct) $Map<Int~_$Struct>)
(declare-fun $bytes32_to_signed_int<Int> (Seq<Int>) Int)
(declare-fun $bytes32_to_unsigned_int<Int> (Seq<Int>) Int)
(declare-fun $signed_int_to_bytes32<Seq<Int>> (Int) Seq<Int>)
(declare-fun $unsigned_int_to_bytes32<Seq<Int>> (Int) Seq<Int>)
(declare-fun $pad32<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $struct_get<Int> (Int) Int)
(declare-fun $struct_set<$Struct> ($Struct Int Int) $Struct)
(declare-fun $blockhash<Seq<Int>> (Int) Seq<Int>)
(declare-fun $method_id<Seq<Int>> (Seq<Int> Int) Seq<Int>)
(declare-fun $keccak256<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $sha256<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $ecrecover<Int> (Seq<Int> Int Int Int) Int)
(declare-fun $ecadd<Seq<Int>> (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun $ecmul<Seq<Int>> (Seq<Int> Int) Seq<Int>)
(declare-fun $wrap<$Int> (Int) $Int)
(declare-fun $unwrap<Int> ($Int) Int)
(declare-fun $w_mul<$Int> ($Int $Int) $Int)
(declare-fun $w_mulI<$Int> ($Int $Int) $Int)
(declare-fun $w_mulL<$Int> ($Int $Int) $Int)
(declare-fun $w_abs<Int> ($Int) Int)
(declare-fun $w_mod<$Int> ($Int $Int) $Int)
(declare-fun $w_modL<$Int> ($Int $Int) $Int)
(declare-fun $w_div<$Int> ($Int $Int) $Int)
(declare-fun $w_div_down<$Int> ($Int $Int) $Int)
(declare-fun $w_div_nat<$Int> ($Int $Int) $Int)
(declare-fun $w_div_natL<$Int> ($Int $Int) $Int)
(declare-fun $map_sum<Int> ($Map<Seq<Int>~_Int>) Int)
(declare-fun $map_init<$Map<Seq<Int>~_Int>> (Int) $Map<Seq<Int>~_Int>)
(declare-fun $map_eq<Bool> ($Map<Seq<Int>~_Int> $Map<Seq<Int>~_Int>) Bool)
(declare-fun $map_get<Int> ($Map<Seq<Int>~_Int> Seq<Int>) Int)
(declare-fun $map_set<$Map<Seq<Int>~_Int>> ($Map<Seq<Int>~_Int> Seq<Int> Int) $Map<Seq<Int>~_Int>)
(declare-fun $map_init<$Map<Int~_Int>> (Int) $Map<Int~_Int>)
(declare-fun $map_eq<Bool> ($Map<Int~_Int> $Map<Int~_Int>) Bool)
(declare-fun $map_get<Int> ($Map<Int~_Int> Int) Int)
(declare-fun $map_set<$Map<Int~_Int>> ($Map<Int~_Int> Int Int) $Map<Int~_Int>)
(declare-fun $map_init<$Map<Seq<Int>~_Bool>> (Bool) $Map<Seq<Int>~_Bool>)
(declare-fun $map_eq<Bool> ($Map<Seq<Int>~_Bool> $Map<Seq<Int>~_Bool>) Bool)
(declare-fun $map_get<Bool> ($Map<Seq<Int>~_Bool> Seq<Int>) Bool)
(declare-fun $map_set<$Map<Seq<Int>~_Bool>> ($Map<Seq<Int>~_Bool> Seq<Int> Bool) $Map<Seq<Int>~_Bool>)
(declare-fun $sign<Int> (Int) Int)
(declare-fun $div<Int> (Int Int Int) Int)
(declare-fun $mod<Int> (Int Int Int) Int)
(declare-fun $pow<Int> (Int Int) Int)
(declare-fun $sqrt<Int> (Int) Int)
(declare-fun $floor<Int> (Int Int) Int)
(declare-fun $ceil<Int> (Int Int) Int)
(declare-fun $shift<Int> (Int Int) Int)
(declare-fun $bitwise_not<Int> (Int) Int)
(declare-fun $bitwise_and<Int> (Int Int) Int)
(declare-fun $bitwise_or<Int> (Int Int) Int)
(declare-fun $bitwise_xor<Int> (Int Int) Int)
(declare-fun $struct_get<$Map<Int~_$Struct>> (Int) $Map<Int~_$Struct>)
(declare-fun $struct_set<$Struct> ($Struct Int $Map<Int~_$Struct>) $Struct)
(declare-const $self_address<Int> Int)
(declare-fun $implements<Bool> (Int Int) Bool)
(declare-fun $range<Seq<Int>> (Int Int) Seq<Int>)
(declare-fun s$struct$DocumentTransfer$init<$Struct> (Int Seq<Int> Int Int) $Struct)
(declare-fun s$struct$DocumentTransfer$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $struct_get<Bool> (Int) Bool)
(declare-fun $struct_set<$Struct> ($Struct Int Bool) $Struct)
(declare-fun $struct_get<$Map<Seq<Int>~_Int>> (Int) $Map<Seq<Int>~_Int>)
(declare-fun $struct_set<$Struct> ($Struct Int $Map<Seq<Int>~_Int>) $Struct)
(declare-fun $array_init<Seq<Int>> (Int Int) Seq<Int>)
(declare-fun $struct_get<$Map<Int~_Int>> (Int) $Map<Int~_Int>)
(declare-fun $struct_set<$Struct> ($Struct Int $Map<Int~_Int>) $Struct)
(declare-fun $struct_get<Seq<Int>> (Int) Seq<Int>)
(declare-fun $struct_set<$Struct> ($Struct Int Seq<Int>) $Struct)
(declare-fun s$struct$self$init<$Struct> (Int Int $Map<Int~_$Struct> $Map<Seq<Int>~_Bool> $Map<Seq<Int>~_Int> Int Int Bool $Map<Int~_Int> $Map<Int~_Int> Bool) $Struct)
(declare-fun s$struct$self$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $struct_loc<Int> ($Struct Int) Int)
(declare-fun s$resource$$creator$init<$Struct> ($Struct) $Struct)
(declare-fun s$resource$$creator$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $map_sum<Int> ($Map<Int~_Int>) Int)
(declare-fun $struct_get<$Struct> (Int) $Struct)
(declare-fun $struct_set<$Struct> ($Struct Int $Struct) $Struct)
(declare-fun $struct_get<$Map<Seq<Int>~_Bool>> (Int) $Map<Seq<Int>~_Bool>)
(declare-fun $struct_set<$Struct> ($Struct Int $Map<Seq<Int>~_Bool>) $Struct)
; Declaring symbols related to program functions (from program analysis)
(declare-fun $pure$success_get ($Snap $Struct) Bool)
(declare-fun $pure$success_get%limited ($Snap $Struct) Bool)
(declare-fun $pure$success_get%stateless ($Struct) Bool)
(declare-fun $pure$success_get%precondition ($Snap $Struct) Bool)
(declare-fun $pure$return_get ($Snap $Struct) Int)
(declare-fun $pure$return_get%limited ($Snap $Struct) Int)
(declare-fun $pure$return_get%stateless ($Struct) Bool)
(declare-fun $pure$return_get%precondition ($Snap $Struct) Bool)
(declare-fun $range_sum ($Snap Int Int) Int)
(declare-fun $range_sum%limited ($Snap Int Int) Int)
(declare-fun $range_sum%stateless (Int Int) Bool)
(declare-fun $range_sum%precondition ($Snap Int Int) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun $failed%trigger ($Snap Int) Bool)
(declare-fun $failed_0%trigger ($Snap Int) Bool)
(declare-fun $allocation%trigger ($Snap $Struct Int) Bool)
(declare-fun $allocation_0%trigger ($Snap $Struct Int) Bool)
(declare-fun $offer%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $offer_0%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $trust%trigger ($Snap Int Int) Bool)
(declare-fun $trust_0%trigger ($Snap Int Int) Bool)
(declare-fun $performs$create%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$create_0%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$destroy%trigger ($Snap $Struct Int Int) Bool)
(declare-fun $performs$destroy_0%trigger ($Snap $Struct Int Int) Bool)
(declare-fun $performs$reallocate%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$reallocate_0%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$offer%trigger ($Snap $Struct $Struct Int Int Int Int Int) Bool)
(declare-fun $performs$offer_0%trigger ($Snap $Struct $Struct Int Int Int Int Int) Bool)
(declare-fun $performs$revoke%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $performs$revoke_0%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $performs$trust%trigger ($Snap Int Int Bool) Bool)
(declare-fun $performs$trust_0%trigger ($Snap Int Int Bool) Bool)
(declare-fun e$Document%trigger ($Snap Int Seq<Int> Int Int) Bool)
(declare-fun e$Document_0%trigger ($Snap Int Seq<Int> Int Int) Bool)
(declare-fun $accessible$__init__%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$__init___0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$_document_exists%trigger ($Snap Int Int Int Seq<Int>) Bool)
(declare-fun $accessible$_document_exists_0%trigger ($Snap Int Int Int Seq<Int>) Bool)
(declare-fun $accessible$_create_history%trigger ($Snap Int Int Int Seq<Int> Int Int) Bool)
(declare-fun $accessible$_create_history_0%trigger ($Snap Int Int Int Seq<Int> Int Int) Bool)
(declare-fun $accessible$new_document%trigger ($Snap Int Int Int Seq<Int>) Bool)
(declare-fun $accessible$new_document_0%trigger ($Snap Int Int Int Seq<Int>) Bool)
(declare-fun $accessible$transfer_document%trigger ($Snap Int Int Int Seq<Int> Int) Bool)
(declare-fun $accessible$transfer_document_0%trigger ($Snap Int Int Int Seq<Int> Int) Bool)
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (not (= s1 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (x Int)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Int>) (x Int) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Int>) (b Seq<Int>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Int) (y Int)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((min_ Int) (max Int)) (!
  (and
    (=> (< min_ max) (= (Seq_length (Seq_range min_ max)) (- max min_)))
    (=> (<= max min_) (= (Seq_length (Seq_range min_ max)) 0)))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (j Int)) (!
  (=>
    (and (<= 0 j) (< j (- max min_)))
    (= (Seq_index (Seq_range min_ max) j) (+ min_ j)))
  :pattern ((Seq_index (Seq_range min_ max) j))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (v Int)) (!
  (= (Seq_contains (Seq_range min_ max) v) (and (<= min_ v) (< v max)))
  :pattern ((Seq_contains (Seq_range min_ max) v))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall (($v $Struct) ($k Int)) (!
  (= ($map_get<$Struct> ($map_init<$Map<Int~_$Struct>> $v) $k) $v)
  :pattern (($map_get<$Struct> ($map_init<$Map<Int~_$Struct>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_$Struct>) ($n $Map<Int~_$Struct>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<$Struct> $m $k) ($map_get<$Struct> $n $k))
        :pattern (($map_get<$Struct> $m $k) ($map_get<$Struct> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_$Struct>) ($k Int) ($v $Struct) ($kk Int)) (!
  (=
    ($map_get<$Struct> ($map_set<$Map<Int~_$Struct>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<$Struct> $m $kk)))
  :pattern (($map_get<$Struct> ($map_set<$Map<Int~_$Struct>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (=>
    (<= (Seq_length $bb) 32)
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        ($bytes32_to_signed_int<Int> $bb))
      (<=
        ($bytes32_to_signed_int<Int> $bb)
        57896044618658097711785492504343953926634992332820282019728792003956564819967)))
  :pattern (($bytes32_to_signed_int<Int> $bb))
  :qid |prog.$bytes32_to_signed_int_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (=>
    (<= (Seq_length $bb) 32)
    (and
      (<= 0 ($bytes32_to_unsigned_int<Int> $bb))
      (<=
        ($bytes32_to_unsigned_int<Int> $bb)
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  :pattern (($bytes32_to_unsigned_int<Int> $bb))
  :qid |prog.$bytes32_to_unsigned_int_ax|)))
(assert (forall (($i Int)) (!
  (=>
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        $i)
      (<=
        $i
        57896044618658097711785492504343953926634992332820282019728792003956564819967))
    (= (Seq_length ($signed_int_to_bytes32<Seq<Int>> $i)) 32))
  :pattern (($signed_int_to_bytes32<Seq<Int>> $i))
  :qid |prog.$signed_int_to_bytes32_ax|)))
(assert (forall (($i Int)) (!
  (=>
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        $i)
      (<=
        $i
        57896044618658097711785492504343953926634992332820282019728792003956564819967))
    (= (Seq_length ($unsigned_int_to_bytes32<Seq<Int>> $i)) 32))
  :pattern (($unsigned_int_to_bytes32<Seq<Int>> $i))
  :qid |prog.$unsigned_int_to_bytes32_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (= (Seq_length ($pad32<Seq<Int>> $bb)) 32)
  :pattern (($pad32<Seq<Int>> $bb))
  :qid |prog.$pad32_len_ax|)))
(assert (and
  (forall (($bb Seq<Int>) ($i Int)) (!
    (let ((diff (- 32 (Seq_length $bb)))) true)
    :pattern ((Seq_index ($pad32<Seq<Int>> $bb) $i))
    :qid |prog.$pad32_vals_ax|))
  (forall (($bb Seq<Int>) ($i Int)) (!
    (let ((diff (- 32 (Seq_length $bb)))) (=>
      (and (<= 0 $i) (< $i (Seq_length ($pad32<Seq<Int>> $bb))))
      (=
        (Seq_index ($pad32<Seq<Int>> $bb) $i)
        (ite (< $i diff) 0 (Seq_index $bb (- $i diff))))))
    :pattern ((Seq_index ($pad32<Seq<Int>> $bb) $i))
    :qid |prog.$pad32_vals_ax|))))
(assert (forall (($s $Struct) ($m Int) ($t Int)) (!
  (= ($struct_get<Int> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m)) $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Int)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($no Int)) (!
  (= (Seq_length ($blockhash<Seq<Int>> $no)) 32)
  :pattern (($blockhash<Seq<Int>> $no))
  :qid |prog.$blockhash_ax|)))
(assert (forall (($bb Seq<Int>) ($l Int)) (!
  (= (Seq_length ($method_id<Seq<Int>> $bb $l)) $l)
  :pattern (($method_id<Seq<Int>> $bb $l))
  :qid |prog.$method_id_ax|)))
(assert (forall (($s Seq<Int>)) (!
  (= (Seq_length ($keccak256<Seq<Int>> $s)) 32)
  :pattern (($keccak256<Seq<Int>> $s))
  :qid |prog.$keccak256_ax|)))
(assert (forall (($s Seq<Int>)) (!
  (= (Seq_length ($sha256<Seq<Int>> $s)) 32)
  :pattern (($sha256<Seq<Int>> $s))
  :qid |prog.$sha256_ax|)))
(assert (forall (($p Seq<Int>) ($q Seq<Int>)) (!
  (= (Seq_length ($ecadd<Seq<Int>> $p $q)) 2)
  :pattern (($ecadd<Seq<Int>> $p $q))
  :qid |prog.$ecadd_ax|)))
(assert (forall (($p Seq<Int>) ($s Int)) (!
  (= (Seq_length ($ecmul<Seq<Int>> $p $s)) 2)
  :pattern (($ecmul<Seq<Int>> $p $s))
  :qid |prog.$ecmul_ax|)))
(assert (forall ((i Int)) (!
  (= ($unwrap<Int> ($wrap<$Int> i)) i)
  :pattern (($wrap<$Int> i))
  :qid |prog.$wrap_ax|)))
(assert (forall ((i $Int)) (!
  (= ($wrap<$Int> ($unwrap<Int> i)) i)
  :pattern (($wrap<$Int> ($unwrap<Int> i)))
  :qid |prog.$unwrap_ax|)))
(assert (forall ((i $Int)) (!
  (=> (< ($unwrap<Int> i) 0) (= ($w_abs<Int> i) (- 0 ($unwrap<Int> i))))
  :pattern (($w_abs<Int> i))
  :qid |prog.$w_abs_ax_1|)))
(assert (forall ((i $Int)) (!
  (=> (>= ($unwrap<Int> i) 0) (= ($w_abs<Int> i) ($unwrap<Int> i)))
  :pattern (($w_abs<Int> i))
  :qid |prog.$w_abs_ax_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulI<$Int> i j))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_intermediate|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulL<$Int> i j))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mulI<$Int> i j) ($w_mulL<$Int> i j))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_intermediate_to_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulI<$Int> j i))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_commutative|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (= ($w_mulI<$Int> i ($w_mulI<$Int> j k)) ($w_mulL<$Int> ($w_mulL<$Int> i j) k))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j k)))
  :qid |prog.$w_mul_associative|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (= ($unwrap<Int> j) (+ ($unwrap<Int> k) ($unwrap<Int> l)))
    (=
      ($w_mulI<$Int> i j)
      ($wrap<$Int> (+
        ($unwrap<Int> ($w_mulL<$Int> i k))
        ($unwrap<Int> ($w_mulL<$Int> i l))))))
  :pattern (($w_mulI<$Int> i j) ($w_mulI<$Int> i k) ($w_mulI<$Int> i l))
  :qid |prog.$w_mul_distributive|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_mulI<$Int> i j)
    ($w_mulL<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) ($wrap<$Int> (-
      0
      ($unwrap<Int> j)))))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_sign_1|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_mulI<$Int> i j)
    ($wrap<$Int> (-
      0
      ($unwrap<Int> ($w_mulL<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) j)))))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_sign_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> i) 0) (= ($unwrap<Int> j) 0))
    (= ($unwrap<Int> ($w_mulI<$Int> i j)) 0))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_zero_1|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or
      (and (> ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
      (and (< ($unwrap<Int> i) 0) (< ($unwrap<Int> j) 0)))
    (> ($unwrap<Int> ($w_mulI<$Int> i j)) 0))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_zero_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> i) 1) (= ($unwrap<Int> j) 0))
    (= ($w_mulI<$Int> i j) j))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_neutral|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    (>= ($w_abs<Int> ($w_mulI<$Int> i j)) ($w_abs<Int> j))
    (or (>= ($w_abs<Int> i) 1) (= ($unwrap<Int> j) 0)))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_proportional|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (> ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (> ($unwrap<Int> l) 0))
    (>
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))
      ($unwrap<Int> ($w_mulI<$Int> k l))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (>= ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (> ($unwrap<Int> l) 0))
    (>=
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))
      ($unwrap<Int> ($w_mulI<$Int> k l))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_2|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (> ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (< ($unwrap<Int> l) 0))
    (>
      ($unwrap<Int> ($w_mulI<$Int> k l))
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_3|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (>= ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (< ($unwrap<Int> l) 0))
    (>=
      ($unwrap<Int> ($w_mulI<$Int> k l))
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_4|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (<= ($w_abs<Int> i) ($w_abs<Int> j))
      (<= ($w_abs<Int> k) ($w_abs<Int> l)))
    (<= ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (< ($w_abs<Int> i) ($w_abs<Int> j))
      (and (<= ($w_abs<Int> k) ($w_abs<Int> l)) (not (= ($unwrap<Int> l) 0))))
    (< ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_2|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (<= ($w_abs<Int> i) ($w_abs<Int> j))
      (and (< ($w_abs<Int> k) ($w_abs<Int> l)) (not (= ($unwrap<Int> j) 0))))
    (< ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mod<$Int> i j) ($w_modL<$Int> i j))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (not (= j ($wrap<$Int> 0))) (or (= i j) (= i ($wrap<$Int> 0))))
    (= ($w_mod<$Int> i j) ($wrap<$Int> 0)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_identity|)))
(assert (forall ((i $Int) (j $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and
        (= ($unwrap<Int> i) (+ ($unwrap<Int> l) ($w_abs<Int> j)))
        (or (>= ($unwrap<Int> l) 0) (< ($unwrap<Int> i) 0))))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> l j)))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_basic_1|)))
(assert (forall ((i $Int) (j $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and
        (= ($unwrap<Int> i) (- ($unwrap<Int> l) ($w_abs<Int> j)))
        (or (<= ($unwrap<Int> l) 0) (> ($unwrap<Int> i) 0))))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> l j)))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_basic_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and (<= 0 ($w_abs<Int> i)) (< ($w_abs<Int> i) ($w_abs<Int> j))))
    (= ($w_mod<$Int> i j) i))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_basic_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (< ($w_abs<Int> ($w_mod<$Int> i j)) ($w_abs<Int> j)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_basic_4|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (or
      (=
        ($sign<Int> ($unwrap<Int> ($w_mod<$Int> i j)))
        ($sign<Int> ($unwrap<Int> i)))
      (= ($sign<Int> ($unwrap<Int> ($w_mod<$Int> i j))) 0)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_sign_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and (not (= j ($wrap<$Int> 0))) (= ($unwrap<Int> i) (- 0 ($unwrap<Int> k))))
    (= ($w_mod<$Int> i j) ($wrap<$Int> (- 0 ($unwrap<Int> ($w_modL<$Int> k j))))))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> k j))
  :qid |prog.$w_mod_sign_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> i j) ($w_mod<$Int> i ($wrap<$Int> (- 0 ($unwrap<Int> j))))))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_sign_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> ($w_modL<$Int> i j) j)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_mod|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (<= ($w_abs<Int> ($w_mod<$Int> i j)) ($w_abs<Int> i)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_decrease|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (= ($unwrap<Int> i) (+ ($unwrap<Int> k) ($unwrap<Int> l))))
    (and
      (=>
        (or
          (and
            (>= ($unwrap<Int> i) 0)
            (>=
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0))
          (and
            (<= ($unwrap<Int> i) 0)
            (<=
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0)))
        (or
          (and
            (<=
              ($w_abs<Int> j)
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                (* 2 ($w_abs<Int> j)))
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (-
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))
          (or
            (and
              (<
                (- 0 ($w_abs<Int> j))
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j))))
              (and
                (<
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))
                (=
                  ($w_mod<$Int> i j)
                  ($wrap<$Int> (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))))))
            (and
              (<
                (* (- 0 2) ($w_abs<Int> j))
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j))))
              (and
                (<=
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  (- 0 ($w_abs<Int> j)))
                (=
                  ($w_mod<$Int> i j)
                  ($wrap<$Int> (+
                    (+
                      ($unwrap<Int> ($w_modL<$Int> k j))
                      ($unwrap<Int> ($w_modL<$Int> l j)))
                    ($w_abs<Int> j)))))))))
      (=>
        (or
          (and
            (> ($unwrap<Int> i) 0)
            (<
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0))
          (and
            (< ($unwrap<Int> i) 0)
            (>
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0)))
        (or
          (and
            (<
              0
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                ($w_abs<Int> j))
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (-
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))
          (and
            (<
              (- 0 ($w_abs<Int> j))
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                0)
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (+
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))))))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> k j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_add|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> ($w_mul<$Int> i j) j) ($wrap<$Int> 0)))
  :pattern (($w_mod<$Int> ($w_mul<$Int> i j) j))
  :qid |prog.$w_mod_mul_basic|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (and
      (=
        ($w_mod<$Int> ($w_mulI<$Int> i k) j)
        ($w_modL<$Int> ($w_mulL<$Int> ($w_modL<$Int> i j) k) j))
      (and
        (=
          ($w_mod<$Int> ($w_mulI<$Int> i k) j)
          ($w_modL<$Int> ($w_mulL<$Int> i ($w_modL<$Int> k j)) j))
        (=
          ($w_mod<$Int> ($w_mulI<$Int> i k) j)
          ($w_modL<$Int> ($w_mulL<$Int> ($w_modL<$Int> i j) ($w_modL<$Int> k j)) j)))))
  :pattern (($w_mod<$Int> ($w_mulI<$Int> i k) j))
  :qid |prog.$w_mod_mul_mod_noop|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (=
      ($w_mod<$Int> i j)
      ($w_modL<$Int> ($wrap<$Int> (+
        ($unwrap<Int> ($w_mulL<$Int> k j))
        ($unwrap<Int> i))) j)))
  :pattern (($w_mod<$Int> i j) ($w_mulI<$Int> k j))
  :qid |prog.$w_mod_mul_vanish|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (=
      ($w_div<$Int> i j)
      (ite
        (>= ($unwrap<Int> i) 0)
        ($w_div_down<$Int> i j)
        ($wrap<$Int> (-
          0
          ($unwrap<Int> ($w_div_down<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) j)))))))
  :pattern (($w_div<$Int> i j))
  :qid |prog.$w_div_div_down|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_div_down<$Int> i j)
    (ite
      (>= ($unwrap<Int> j) 0)
      ($w_div_nat<$Int> i j)
      ($wrap<$Int> (-
        0
        ($unwrap<Int> ($w_div_nat<$Int> i ($wrap<$Int> (- 0 ($unwrap<Int> j)))))))))
  :pattern (($w_div_down<$Int> i j))
  :qid |prog.$w_div_down_div_nat|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_div_nat<$Int> i j) ($w_div_natL<$Int> i j))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> j) 1) (= ($unwrap<Int> i) 0))
    (= ($w_div_nat<$Int> i j) i))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_neutral|)))
(assert (forall ((i $Int)) (!
  (=> (> ($unwrap<Int> i) 0) (= ($w_div_nat<$Int> i i) ($wrap<$Int> 1)))
  :pattern (($w_div_nat<$Int> i i))
  :qid |prog.$w_div_nat_self|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (>= ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
    (=
      (< ($unwrap<Int> i) ($unwrap<Int> j))
      (= ($w_div_nat<$Int> i j) ($wrap<$Int> 0))))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_small|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and
          (> ($unwrap<Int> j) 0)
          (and (>= ($unwrap<Int> k) 0) (>= ($unwrap<Int> l) 0))))
      (= ($unwrap<Int> i) (+ ($unwrap<Int> k) ($unwrap<Int> l))))
    (or
      (and
        (<=
          0
          (+ ($unwrap<Int> ($w_mod<$Int> k j)) ($unwrap<Int> ($w_mod<$Int> l j))))
        (and
          (<
            (+
              ($unwrap<Int> ($w_mod<$Int> k j))
              ($unwrap<Int> ($w_mod<$Int> l j)))
            ($unwrap<Int> j))
          (=
            ($w_div_nat<$Int> i j)
            ($wrap<$Int> (+
              ($unwrap<Int> ($w_div_natL<$Int> k j))
              ($unwrap<Int> ($w_div_natL<$Int> l j)))))))
      (and
        (<=
          ($unwrap<Int> j)
          (+ ($unwrap<Int> ($w_mod<$Int> k j)) ($unwrap<Int> ($w_mod<$Int> l j))))
        (and
          (<
            (+
              ($unwrap<Int> ($w_mod<$Int> k j))
              ($unwrap<Int> ($w_mod<$Int> l j)))
            (* 2 ($unwrap<Int> j)))
          (=
            ($w_div_nat<$Int> i j)
            ($wrap<$Int> (+
              (+
                ($unwrap<Int> ($w_div_natL<$Int> k j))
                ($unwrap<Int> ($w_div_natL<$Int> l j)))
              1)))))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> k j) ($w_div_nat<$Int> l j))
  :qid |prog.$w_div_nat_dividend_add|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and (> ($unwrap<Int> j) 0) (>= ($unwrap<Int> k) 0)))
      (<= ($unwrap<Int> i) ($unwrap<Int> k)))
    (<=
      ($unwrap<Int> ($w_div_nat<$Int> i j))
      ($unwrap<Int> ($w_div_natL<$Int> k j))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> k j))
  :qid |prog.$w_div_nat_ordered_by_dividend|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and (> ($unwrap<Int> j) 0) (> ($unwrap<Int> k) 0)))
      (<= ($unwrap<Int> j) ($unwrap<Int> k)))
    (>=
      ($unwrap<Int> ($w_div_nat<$Int> i j))
      ($unwrap<Int> ($w_div_natL<$Int> i k))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> i k))
  :qid |prog.$w_div_nat_ordered_by_divisor|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (> ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 1))
    (< ($unwrap<Int> ($w_div_nat<$Int> i j)) ($unwrap<Int> i)))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_decrease|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (>= ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
    (<= ($unwrap<Int> ($w_div_nat<$Int> i j)) ($unwrap<Int> i)))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_nonincrease|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=> (not (= ($unwrap<Int> j) 0)) (= ($w_div<$Int> ($w_mulI<$Int> i j) j) i))
  :pattern (($w_div<$Int> ($w_mulI<$Int> i j) j))
  :qid |prog.$w_div_mul|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (or
      (=
        ($sign<Int> ($unwrap<Int> ($w_div<$Int> i j)))
        (* ($sign<Int> ($unwrap<Int> i)) ($sign<Int> ($unwrap<Int> j))))
      (= ($sign<Int> ($unwrap<Int> ($w_div<$Int> i j))) 0)))
  :pattern (($w_div<$Int> i j))
  :qid |prog.$w_div_sign|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (=
      ($unwrap<Int> i)
      (+
        ($unwrap<Int> ($w_mulI<$Int> j ($w_div<$Int> i j)))
        ($unwrap<Int> ($w_mod<$Int> i j)))))
  :pattern (($w_div<$Int> i j) ($w_mod<$Int> i j))
  :qid |prog.$w_div_mod_mul|)))
(assert (= ($map_sum<Int> ($map_init<$Map<Int~_Int>> 0)) 0))
(assert (forall (($m $Map<Seq<Int>~_Int>) ($k Seq<Int>) ($v Int)) (!
  (=
    ($map_sum<Int> ($map_set<$Map<Seq<Int>~_Int>> $m $k $v))
    (+ (- ($map_sum<Int> $m) ($map_get<Int> $m $k)) $v))
  :pattern (($map_sum<Int> ($map_set<$Map<Seq<Int>~_Int>> $m $k $v)))
  :qid |prog.$map_sum_set_ax|)))
(assert (forall (($v Int) ($k Seq<Int>)) (!
  (= ($map_get<Int> ($map_init<$Map<Seq<Int>~_Int>> $v) $k) $v)
  :pattern (($map_get<Int> ($map_init<$Map<Seq<Int>~_Int>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Seq<Int>~_Int>) ($n $Map<Seq<Int>~_Int>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Seq<Int>)) (!
        (= ($map_get<Int> $m $k) ($map_get<Int> $n $k))
        :pattern (($map_get<Int> $m $k) ($map_get<Int> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Seq<Int>~_Int>) ($k Seq<Int>) ($v Int) ($kk Seq<Int>)) (!
  (=
    ($map_get<Int> ($map_set<$Map<Seq<Int>~_Int>> $m $k $v) $kk)
    (ite (Seq_equal $k $kk) $v ($map_get<Int> $m $kk)))
  :pattern (($map_get<Int> ($map_set<$Map<Seq<Int>~_Int>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (forall (($v Int) ($k Int)) (!
  (= ($map_get<Int> ($map_init<$Map<Int~_Int>> $v) $k) $v)
  :pattern (($map_get<Int> ($map_init<$Map<Int~_Int>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_Int>) ($n $Map<Int~_Int>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<Int> $m $k) ($map_get<Int> $n $k))
        :pattern (($map_get<Int> $m $k) ($map_get<Int> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_Int>) ($k Int) ($v Int) ($kk Int)) (!
  (=
    ($map_get<Int> ($map_set<$Map<Int~_Int>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<Int> $m $kk)))
  :pattern (($map_get<Int> ($map_set<$Map<Int~_Int>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (forall (($v Bool) ($k Seq<Int>)) (!
  (= ($map_get<Bool> ($map_init<$Map<Seq<Int>~_Bool>> $v) $k) $v)
  :pattern (($map_get<Bool> ($map_init<$Map<Seq<Int>~_Bool>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Seq<Int>~_Bool>) ($n $Map<Seq<Int>~_Bool>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Seq<Int>)) (!
        (= ($map_get<Bool> $m $k) ($map_get<Bool> $n $k))
        :pattern (($map_get<Bool> $m $k) ($map_get<Bool> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Seq<Int>~_Bool>) ($k Seq<Int>) ($v Bool) ($kk Seq<Int>)) (!
  (=
    ($map_get<Bool> ($map_set<$Map<Seq<Int>~_Bool>> $m $k $v) $kk)
    (ite (Seq_equal $k $kk) $v ($map_get<Bool> $m $kk)))
  :pattern (($map_get<Bool> ($map_set<$Map<Seq<Int>~_Bool>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (and
  (= ($sign<Int> 0) 0)
  (forall (($a Int)) (!
    (and
      (=> (> $a 0) (= ($sign<Int> $a) 1))
      (=> (< $a 0) (= ($sign<Int> $a) (- 0 1))))
    :pattern (($sign<Int> $a))
    ))))
(assert (forall (($a Int) ($b Int) ($r Int)) (!
  (=
    ($div<Int> $a $b $r)
    (+ (div $a $b) (ite (or (>= $a 0) (= (mod $a $b) 0)) 0 ($sign<Int> $b))))
  :pattern (($div<Int> $a $b $r))
  :qid |prog.$div_ax|)))
(assert (forall (($a Int) ($b Int) ($r Int)) (!
  (= ($mod<Int> $a $b $r) (- $a (* ($div<Int> $a $b $r) $b)))
  :pattern (($mod<Int> $a $b $r))
  :qid |prog.$mod_ax|)))
(assert (forall (($a Int)) (!
  (=> (not (= $a 0)) (= ($pow<Int> 0 $a) 0))
  :pattern (($pow<Int> 0 $a))
  :qid |prog.$pow0N_ax|)))
(assert (forall (($a Int)) (!
  (=> (not (= $a 0)) (= ($pow<Int> $a 0) 1))
  :pattern (($pow<Int> $a 0))
  :qid |prog.$powN0_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (=> (>= $a 0) (>= ($pow<Int> $a $b) 0))
  :pattern (($pow<Int> $a $b))
  :qid |prog.$pow_non_negative_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (=> (and (> $a 0) (>= $b 0)) (> ($pow<Int> $a $b) 0))
  :pattern (($pow<Int> $a $b))
  :qid |prog.$pow_non_negative_and_non_null_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (=>
    (> $s 0)
    (= ($floor<Int> $a $s) ($div<Int> (ite (< $a 0) (- $a (- $s 1)) $a) $s 0)))
  :pattern (($floor<Int> $a $s))
  :qid |prog.$floor_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (=>
    (> $s 0)
    (= ($ceil<Int> $a $s) ($div<Int> (ite (< $a 0) $a (- (+ $a $s) 1)) $s 0)))
  :pattern (($ceil<Int> $a $s))
  :qid |prog.$ceil_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (>= ($shift<Int> $a $s) 0)
  :pattern (($shift<Int> $a $s))
  :qid |prog.$shift_ax|)))
(assert (forall (($a Int)) (!
  (>= ($bitwise_not<Int> $a) 0)
  :pattern (($bitwise_not<Int> $a))
  :qid |prog.$bitwise_not_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_and<Int> $a $b) 0)
  :pattern (($bitwise_and<Int> $a $b))
  :qid |prog.$bitwise_and_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_or<Int> $a $b) 0)
  :pattern (($bitwise_or<Int> $a $b))
  :qid |prog.$bitwise_or_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_xor<Int> $a $b) 0)
  :pattern (($bitwise_xor<Int> $a $b))
  :qid |prog.$bitwise_xor_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t $Map<Int~_$Struct>)) (!
  (=
    ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Map<Int~_$Struct>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (not (= (as $self_address<Int>  Int) 0)))
(assert (forall (($f Int) ($t Int)) (!
  (= (Seq_length ($range<Seq<Int>> $f $t)) (- $t $f))
  :pattern ((Seq_length ($range<Seq<Int>> $f $t)))
  :qid |prog.$range_len_ax|)))
(assert (forall (($f Int) ($t Int) ($i Int)) (!
  (=>
    (and (<= 0 $i) (< $i (Seq_length ($range<Seq<Int>> $f $t))))
    (= (Seq_index ($range<Seq<Int>> $f $t) $i) (+ $f $i)))
  :pattern ((Seq_index ($range<Seq<Int>> $f $t) $i))
  :qid |prog.$range_lookup_ax|)))
(assert (forall (($arg_0 Int) ($arg_1 Seq<Int>) ($arg_2 Int) ($arg_3 Int)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$struct$DocumentTransfer$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3) (- 0 1)))
      722760475380740992045242976742918181534147582937316800750962)
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> (s$struct$DocumentTransfer$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3) 0))
        $arg_0)
      (and
        (Seq_equal
          ($struct_get<Seq<Int>> ($struct_loc<Int> (s$struct$DocumentTransfer$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3) 1))
          $arg_1)
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> (s$struct$DocumentTransfer$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3) 2))
            $arg_2)
          (=
            ($struct_get<Int> ($struct_loc<Int> (s$struct$DocumentTransfer$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3) 3))
            $arg_3)))))
  :pattern ((s$struct$DocumentTransfer$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3))
  :qid |prog.s$struct$DocumentTransfer$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$struct$DocumentTransfer$eq<Bool> $l $r) (= $l $r))
    (=
      (s$struct$DocumentTransfer$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> $l 0))
            ($struct_get<Int> ($struct_loc<Int> $r 0)))
          (and
            (Seq_equal
              ($struct_get<Seq<Int>> ($struct_loc<Int> $l 1))
              ($struct_get<Seq<Int>> ($struct_loc<Int> $r 1)))
            (and
              (=
                ($struct_get<Int> ($struct_loc<Int> $l 2))
                ($struct_get<Int> ($struct_loc<Int> $r 2)))
              (=
                ($struct_get<Int> ($struct_loc<Int> $l 3))
                ($struct_get<Int> ($struct_loc<Int> $r 3)))))))))
  :pattern ((s$struct$DocumentTransfer$eq<Bool> $l $r))
  :qid |prog.s$struct$DocumentTransfer$eq$ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Bool)) (!
  (=
    ($struct_get<Bool> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Bool)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t $Map<Seq<Int>~_Int>)) (!
  (=
    ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Map<Seq<Int>~_Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($e Int) ($c Int)) (!
  (= (Seq_length ($array_init<Seq<Int>> $e $c)) $c)
  :pattern (($array_init<Seq<Int>> $e $c))
  :qid |prog.$array_init_len_ax|)))
(assert (forall (($e Int) ($c Int) ($i Int)) (!
  (=>
    (and (<= 0 $i) (< $i $c))
    (= (Seq_index ($array_init<Seq<Int>> $e $c) $i) $e))
  :pattern ((Seq_index ($array_init<Seq<Int>> $e $c) $i))
  :qid |prog.$array_init_val_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t $Map<Int~_Int>)) (!
  (=
    ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Map<Int~_Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Seq<Int>)) (!
  (Seq_equal
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Seq<Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($arg_0 Int) ($arg_1 Int) ($arg_2 $Map<Int~_$Struct>) ($arg_3 $Map<Seq<Int>~_Bool>) ($arg_4 $Map<Seq<Int>~_Int>) ($arg_5 Int) ($arg_6 Int) ($arg_7 Bool) ($arg_8 $Map<Int~_Int>) ($arg_9 $Map<Int~_Int>) ($arg_10 Bool)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) (- 0 1)))
      9122519725869122497593506884710)
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 0))
        $arg_0)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 1))
          $arg_1)
        (and
          (=
            ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 2))
            $arg_2)
          (and
            (=
              ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 3))
              $arg_3)
            (and
              (=
                ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 4))
                $arg_4)
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 5))
                  $arg_5)
                (and
                  (=
                    ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 6))
                    $arg_6)
                  (and
                    (=
                      ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 7))
                      $arg_7)
                    (and
                      (=
                        ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 8))
                        $arg_8)
                      (and
                        (=
                          ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 9))
                          $arg_9)
                        (=
                          ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 10))
                          $arg_10))))))))))))
  :pattern ((s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10))
  :qid |prog.s$struct$self$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$struct$self$eq<Bool> $l $r) (= $l $r))
    (=
      (s$struct$self$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> $l 0))
            ($struct_get<Int> ($struct_loc<Int> $r 0)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> $l 1))
              ($struct_get<Int> ($struct_loc<Int> $r 1)))
            (and
              ($map_eq<Bool> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $l 2)) ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $r 2)))
              (and
                ($map_eq<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $l 3)) ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $r 3)))
                (and
                  ($map_eq<Bool> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $l 4)) ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $r 4)))
                  (and
                    (=
                      ($struct_get<Int> ($struct_loc<Int> $l 5))
                      ($struct_get<Int> ($struct_loc<Int> $r 5)))
                    (and
                      (=
                        ($struct_get<Int> ($struct_loc<Int> $l 6))
                        ($struct_get<Int> ($struct_loc<Int> $r 6)))
                      (and
                        (=
                          ($struct_get<Bool> ($struct_loc<Int> $l 7))
                          ($struct_get<Bool> ($struct_loc<Int> $r 7)))
                        (and
                          ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 8)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 8)))
                          (and
                            ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 9)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 9)))
                            (=
                              ($struct_get<Bool> ($struct_loc<Int> $l 10))
                              ($struct_get<Bool> ($struct_loc<Int> $r 10))))))))))))))))
  :pattern ((s$struct$self$eq<Bool> $l $r))
  :qid |prog.s$struct$self$eq$ax|)))
(assert (forall (($arg_0 $Struct)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$resource$$creator$init<$Struct> $arg_0) (- 0 1)))
      2567760667165796382711201132846784524754120562)
    (=
      ($struct_get<$Struct> ($struct_loc<Int> (s$resource$$creator$init<$Struct> $arg_0) 0))
      $arg_0))
  :pattern ((s$resource$$creator$init<$Struct> $arg_0))
  :qid |prog.s$resource$$creator$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$resource$$creator$eq<Bool> $l $r) (= $l $r))
    (=
      (s$resource$$creator$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (=
          ($struct_get<$Struct> ($struct_loc<Int> $l 0))
          ($struct_get<$Struct> ($struct_loc<Int> $r 0))))))
  :pattern ((s$resource$$creator$eq<Bool> $l $r))
  :qid |prog.s$resource$$creator$eq$ax|)))
(assert (forall (($m $Map<Int~_Int>) ($k Int) ($v Int)) (!
  (=
    ($map_sum<Int> ($map_set<$Map<Int~_Int>> $m $k $v))
    (+ (- ($map_sum<Int> $m) ($map_get<Int> $m $k)) $v))
  :pattern (($map_sum<Int> ($map_set<$Map<Int~_Int>> $m $k $v)))
  :qid |prog.$map_sum_set_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t $Struct)) (!
  (=
    ($struct_get<$Struct> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Struct)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t $Map<Seq<Int>~_Bool>)) (!
  (=
    ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Map<Seq<Int>~_Bool>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun letvar@7@00 ($Snap Int Int) Bool)
(declare-fun letvar@8@00 ($Snap Int Int) Bool)
(declare-fun letvar@9@00 ($Snap Int Int) Int)
(declare-fun letvar@10@00 ($Snap Int Int) Int)
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  (= ($pure$success_get%limited s@$ x@0@00) ($pure$success_get s@$ x@0@00))
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1419|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  ($pure$success_get%stateless x@0@00)
  :pattern (($pure$success_get%limited s@$ x@0@00))
  :qid |quant-u-1420|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  (=>
    ($pure$success_get%precondition s@$ x@0@00)
    (=
      ($pure$success_get s@$ x@0@00)
      ($struct_get<Bool> ($struct_loc<Int> x@0@00 0))))
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1425|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  true
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1426|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  (= ($pure$return_get%limited s@$ x@2@00) ($pure$return_get s@$ x@2@00))
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1421|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  ($pure$return_get%stateless x@2@00)
  :pattern (($pure$return_get%limited s@$ x@2@00))
  :qid |quant-u-1422|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  (=>
    ($pure$return_get%precondition s@$ x@2@00)
    (= ($pure$return_get s@$ x@2@00) ($struct_loc<Int> x@2@00 1)))
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1427|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  true
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1428|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (= ($range_sum%limited s@$ $x@4@00 $y@5@00) ($range_sum s@$ $x@4@00 $y@5@00))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1423|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  ($range_sum%stateless $x@4@00 $y@5@00)
  :pattern (($range_sum%limited s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1424|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (=>
    ($range_sum%precondition s@$ $x@4@00 $y@5@00)
    (=
      ($range_sum s@$ $x@4@00 $y@5@00)
      (let (($x_ge_0 (>= $x@4@00 0))) (let (($y_ge_0 (>= $y@5@00 0))) (let (($x_exclusive (ite
        $x_ge_0
        (div (* (- $x@4@00 1) $x@4@00) 2)
        (div (* (- (- 0 $x@4@00) 1) (- 0 $x@4@00)) 2)))) (let (($y_exclusive (ite
        $y_ge_0
        (div (* (- $y@5@00 1) $y@5@00) 2)
        (div (* (- (- 0 $y@5@00) 1) (- 0 $y@5@00)) 2)))) (ite
        (and $x_ge_0 $y_ge_0)
        (- $y_exclusive $x_exclusive)
        (ite
          (and (not $x_ge_0) $y_ge_0)
          (+ (- $y_exclusive $x_exclusive) $x@4@00)
          (+ (- (- $y_exclusive $y@5@00) $x_exclusive) $x@4@00)))))))))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1429|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (=>
    ($range_sum%precondition s@$ $x@4@00 $y@5@00)
    (let (($x_ge_0 (>= $x@4@00 0))) (let (($y_ge_0 (>= $y@5@00 0))) (let (($x_exclusive (ite
      $x_ge_0
      (div (* (- $x@4@00 1) $x@4@00) 2)
      (div (* (- (- 0 $x@4@00) 1) (- 0 $x@4@00)) 2)))) (let (($y_exclusive (ite
      $y_ge_0
      (div (* (- $y@5@00 1) $y@5@00) 2)
      (div (* (- (- 0 $y@5@00) 1) (- 0 $y@5@00)) 2)))) true)))))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1430|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- $transitivity_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var $self$0: $Struct
(declare-const $self$0@0@01 $Struct)
; [exec]
; var $$contracts$0: $Map[Int, $Struct]
(declare-const $$contracts$0@1@01 $Map<Int~_$Struct>)
; [exec]
; var $self$1: $Struct
(declare-const $self$1@2@01 $Struct)
; [exec]
; var $$contracts$1: $Map[Int, $Struct]
(declare-const $$contracts$1@3@01 $Map<Int~_$Struct>)
; [exec]
; var $self$2: $Struct
(declare-const $self$2@4@01 $Struct)
; [exec]
; var $$contracts$2: $Map[Int, $Struct]
(declare-const $$contracts$2@5@01 $Map<Int~_$Struct>)
; [exec]
; var block: $Struct
(declare-const block@6@01 $Struct)
; [exec]
; var $post: Bool
(declare-const $post@7@01 Bool)
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 0)): Int) &&
;   ($struct_get($struct_loc($self$0, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@8@01 $Snap)
(assert (= $t@8@01 ($Snap.combine ($Snap.first $t@8@01) ($Snap.second $t@8@01))))
(assert (= ($Snap.first $t@8@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
(assert (= ($Snap.second $t@8@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 1)): Int) &&
;   ($struct_get($struct_loc($self$0, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@9@01 $Snap)
(assert (= $t@9@01 ($Snap.combine ($Snap.first $t@9@01) ($Snap.second $t@9@01))))
(assert (= ($Snap.first $t@9@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
(assert (= ($Snap.second $t@9@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 0)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 0)): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@10@01 $Snap)
(assert (= $t@10@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@11@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
(push) ; 4
; [then-branch: 0 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@0@01, 2)), $q0@11@01), 0))) | live]
; [else-branch: 0 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@0@01, 2)), $q0@11@01), 0)) | live]
(push) ; 5
; [then-branch: 0 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@0@01, 2)), $q0@11@01), 0)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@11@01) 0)))))
(pop) ; 5
(push) ; 5
; [else-branch: 0 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@0@01, 2)), $q0@11@01), 0))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@11@01) 0))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@11@01) 0)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@11@01) 0))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@11@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@11@01) 0)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@11@01) 0)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@11@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@635@11@635@450-aux|)))
(assert (forall (($q0@11@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@11@01) 0)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@11@01) 0))
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@11@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@635@11@635@450|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 1)): Seq[Int])| ==
;     32)
(declare-const $t@12@01 $Snap)
(assert (= $t@12@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct) } |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| == 32)
(declare-const $q0@13@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@13@01 Int)) (!
  (=
    (Seq_length
      ($struct_get<Seq<Int>> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@13@01) 1)))
    32)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@13@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@636@11@636@252|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 2)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 2)): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@14@01 $Snap)
(assert (= $t@14@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q0@15@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
(push) ; 4
; [then-branch: 1 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@0@01, 2)), $q0@15@01), 2))) | live]
; [else-branch: 1 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@0@01, 2)), $q0@15@01), 2)) | live]
(push) ; 5
; [then-branch: 1 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@0@01, 2)), $q0@15@01), 2)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@15@01) 2)))))
(pop) ; 5
(push) ; 5
; [else-branch: 1 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@0@01, 2)), $q0@15@01), 2))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@15@01) 2))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@15@01) 2)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@15@01) 2))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@15@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@15@01) 2)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@15@01) 2)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@15@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@637@11@637@421-aux|)))
(assert (forall (($q0@15@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@15@01) 2)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@15@01) 2))
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@15@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@637@11@637@421|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 3)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 3)): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@16@01 $Snap)
(assert (= $t@16@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q0@17@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
(push) ; 4
; [then-branch: 2 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@0@01, 2)), $q0@17@01), 3))) | live]
; [else-branch: 2 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@0@01, 2)), $q0@17@01), 3)) | live]
(push) ; 5
; [then-branch: 2 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@0@01, 2)), $q0@17@01), 3)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@17@01) 3)))))
(pop) ; 5
(push) ; 5
; [else-branch: 2 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@0@01, 2)), $q0@17@01), 3))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@17@01) 3))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@17@01) 3)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@17@01) 3))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@17@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@17@01) 3)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@17@01) 3)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@17@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@638@11@638@421-aux|)))
(assert (forall (($q0@17@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@17@01) 3)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@17@01) 3))
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@17@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@638@11@638@421|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), -1)): Int) ==
;     722760475380740992045242976742918181534147582937316800750962)
(declare-const $t@18@01 $Snap)
(assert (= $t@18@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct) } ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int) == 722760475380740992045242976742918181534147582937316800750962)
(declare-const $q0@19@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int) == 722760475380740992045242976742918181534147582937316800750962
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
; [eval] -1
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@19@01 Int)) (!
  (=
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@19@01) (- 0 1)))
    722760475380740992045242976742918181534147582937316800750962)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) $q0@19@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@639@11@639@304|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]),
;     $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@20@01 $Snap)
(assert (= $t@20@01 $Snap.unit))
; [eval] (forall $q3: Seq[Int] :: { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q3@21@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$0, 4)
(push) ; 4
; [then-branch: 3 | !(0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$0@0@01, 4)), $q3@21@01)) | live]
; [else-branch: 3 | 0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$0@0@01, 4)), $q3@21@01) | live]
(push) ; 5
; [then-branch: 3 | !(0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$0@0@01, 4)), $q3@21@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q3@21@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 3 | 0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$0@0@01, 4)), $q3@21@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q3@21@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$0, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q3@21@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q3@21@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@21@01 Seq<Int>)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q3@21@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q3@21@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q3@21@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@640@11@640@345-aux|)))
(assert (forall (($q3@21@01 Seq<Int>)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q3@21@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q3@21@01)
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q3@21@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@640@11@640@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]),
;     $q3): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int])): Int))
(declare-const $t@22@01 $Snap)
(assert (= $t@22@01 $Snap.unit))
; [eval] (forall $q3: Seq[Int] :: { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) } ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int])): Int))
(declare-const $q3@23@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$0, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$0, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@23@01 Seq<Int>)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q3@23@01)
    ($map_sum<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q3@23@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@641@11@641@282|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 5)): Int) &&
;   ($struct_get($struct_loc($self$0, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@24@01 $Snap)
(assert (= $t@24@01 ($Snap.combine ($Snap.first $t@24@01) ($Snap.second $t@24@01))))
(assert (= ($Snap.first $t@24@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 5))))
(assert (= ($Snap.second $t@24@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 6)): Int) &&
;   ($struct_get($struct_loc($self$0, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@25@01 $Snap)
(assert (= $t@25@01 ($Snap.combine ($Snap.first $t@25@01) ($Snap.second $t@25@01))))
(assert (= ($Snap.first $t@25@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] $struct_loc($self$0, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 6))))
(assert (= ($Snap.second $t@25@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] $struct_loc($self$0, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@26@01 $Snap)
(assert (= $t@26@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q4@27@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(push) ; 4
; [then-branch: 4 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q4@27@01)) | live]
; [else-branch: 4 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q4@27@01) | live]
(push) ; 5
; [then-branch: 4 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q4@27@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q4@27@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 4 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q4@27@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q4@27@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q4@27@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q4@27@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@27@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q4@27@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q4@27@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q4@27@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@644@11@644@354-aux|)))
(assert (forall (($q4@27@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q4@27@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q4@27@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q4@27@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@644@11@644@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $t@28@01 $Snap)
(assert (= $t@28@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) } ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $q4@29@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@29@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q4@29@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q4@29@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@645@11@645@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q5: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@30@01 $Snap)
(assert (= $t@30@01 $Snap.unit))
; [eval] (forall $q5: Int :: { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) && ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@31@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) && ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
(push) ; 4
; [then-branch: 5 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 9)), $q5@31@01)) | live]
; [else-branch: 5 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 9)), $q5@31@01) | live]
(push) ; 5
; [then-branch: 5 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 9)), $q5@31@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q5@31@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 5 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 9)), $q5@31@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q5@31@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q5@31@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q5@31@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@31@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q5@31@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q5@31@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q5@31@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@646@11@646@354-aux|)))
(assert (forall (($q5@31@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q5@31@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q5@31@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q5@31@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@646@11@646@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q5: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int))
(declare-const $t@32@01 $Snap)
(assert (= $t@32@01 $Snap.unit))
; [eval] (forall $q5: Int :: { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) } ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int))
(declare-const $q5@33@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@33@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q5@33@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q5@33@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@647@11@647@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@34@01 $Snap)
(assert (= $t@34@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$0, -1)): Int)
; [eval] $struct_loc($self$0, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 0)): Int) &&
;   ($struct_get($struct_loc($self$1, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@35@01 $Snap)
(assert (= $t@35@01 ($Snap.combine ($Snap.first $t@35@01) ($Snap.second $t@35@01))))
(assert (= ($Snap.first $t@35@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
(assert (= ($Snap.second $t@35@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 1)): Int) &&
;   ($struct_get($struct_loc($self$1, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@36@01 $Snap)
(assert (= $t@36@01 ($Snap.combine ($Snap.first $t@36@01) ($Snap.second $t@36@01))))
(assert (= ($Snap.first $t@36@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
(assert (= ($Snap.second $t@36@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 0)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 0)): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@37@01 $Snap)
(assert (= $t@37@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@38@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
(push) ; 4
; [then-branch: 6 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@2@01, 2)), $q0@38@01), 0))) | live]
; [else-branch: 6 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@2@01, 2)), $q0@38@01), 0)) | live]
(push) ; 5
; [then-branch: 6 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@2@01, 2)), $q0@38@01), 0)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@38@01) 0)))))
(pop) ; 5
(push) ; 5
; [else-branch: 6 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@2@01, 2)), $q0@38@01), 0))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@38@01) 0))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@38@01) 0)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@38@01) 0))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@38@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@38@01) 0)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@38@01) 0)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@38@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@651@11@651@450-aux|)))
(assert (forall (($q0@38@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@38@01) 0)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@38@01) 0))
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@38@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@651@11@651@450|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 1)): Seq[Int])| ==
;     32)
(declare-const $t@39@01 $Snap)
(assert (= $t@39@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct) } |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| == 32)
(declare-const $q0@40@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@40@01 Int)) (!
  (=
    (Seq_length
      ($struct_get<Seq<Int>> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@40@01) 1)))
    32)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@40@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@652@11@652@252|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 2)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 2)): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@41@01 $Snap)
(assert (= $t@41@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q0@42@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
(push) ; 4
; [then-branch: 7 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@2@01, 2)), $q0@42@01), 2))) | live]
; [else-branch: 7 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@2@01, 2)), $q0@42@01), 2)) | live]
(push) ; 5
; [then-branch: 7 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@2@01, 2)), $q0@42@01), 2)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@42@01) 2)))))
(pop) ; 5
(push) ; 5
; [else-branch: 7 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@2@01, 2)), $q0@42@01), 2))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@42@01) 2))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@42@01) 2)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@42@01) 2))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@42@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@42@01) 2)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@42@01) 2)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@42@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@653@11@653@421-aux|)))
(assert (forall (($q0@42@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@42@01) 2)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@42@01) 2))
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@42@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@653@11@653@421|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 3)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 3)): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@43@01 $Snap)
(assert (= $t@43@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q0@44@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
(push) ; 4
; [then-branch: 8 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@2@01, 2)), $q0@44@01), 3))) | live]
; [else-branch: 8 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@2@01, 2)), $q0@44@01), 3)) | live]
(push) ; 5
; [then-branch: 8 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@2@01, 2)), $q0@44@01), 3)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@44@01) 3)))))
(pop) ; 5
(push) ; 5
; [else-branch: 8 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@2@01, 2)), $q0@44@01), 3))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@44@01) 3))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@44@01) 3)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@44@01) 3))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@44@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@44@01) 3)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@44@01) 3)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@44@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@654@11@654@421-aux|)))
(assert (forall (($q0@44@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@44@01) 3)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@44@01) 3))
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@44@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@654@11@654@421|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), -1)): Int) ==
;     722760475380740992045242976742918181534147582937316800750962)
(declare-const $t@45@01 $Snap)
(assert (= $t@45@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct) } ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int) == 722760475380740992045242976742918181534147582937316800750962)
(declare-const $q0@46@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int) == 722760475380740992045242976742918181534147582937316800750962
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
; [eval] -1
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@46@01 Int)) (!
  (=
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@46@01) (- 0 1)))
    722760475380740992045242976742918181534147582937316800750962)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) $q0@46@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@655@11@655@304|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]),
;     $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@47@01 $Snap)
(assert (= $t@47@01 $Snap.unit))
; [eval] (forall $q3: Seq[Int] :: { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q3@48@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$1, 4)
(push) ; 4
; [then-branch: 9 | !(0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$1@2@01, 4)), $q3@48@01)) | live]
; [else-branch: 9 | 0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$1@2@01, 4)), $q3@48@01) | live]
(push) ; 5
; [then-branch: 9 | !(0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$1@2@01, 4)), $q3@48@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q3@48@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 9 | 0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$1@2@01, 4)), $q3@48@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q3@48@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$1, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q3@48@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q3@48@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@48@01 Seq<Int>)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q3@48@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q3@48@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q3@48@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@656@11@656@345-aux|)))
(assert (forall (($q3@48@01 Seq<Int>)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q3@48@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q3@48@01)
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q3@48@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@656@11@656@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]),
;     $q3): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int])): Int))
(declare-const $t@49@01 $Snap)
(assert (= $t@49@01 $Snap.unit))
; [eval] (forall $q3: Seq[Int] :: { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) } ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int])): Int))
(declare-const $q3@50@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$1, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$1, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@50@01 Seq<Int>)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q3@50@01)
    ($map_sum<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q3@50@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@657@11@657@282|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 5)): Int) &&
;   ($struct_get($struct_loc($self$1, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@51@01 $Snap)
(assert (= $t@51@01 ($Snap.combine ($Snap.first $t@51@01) ($Snap.second $t@51@01))))
(assert (= ($Snap.first $t@51@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 5))))
(assert (= ($Snap.second $t@51@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 6)): Int) &&
;   ($struct_get($struct_loc($self$1, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@52@01 $Snap)
(assert (= $t@52@01 ($Snap.combine ($Snap.first $t@52@01) ($Snap.second $t@52@01))))
(assert (= ($Snap.first $t@52@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] $struct_loc($self$1, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 6))))
(assert (= ($Snap.second $t@52@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] $struct_loc($self$1, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@53@01 $Snap)
(assert (= $t@53@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q4@54@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(push) ; 4
; [then-branch: 10 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q4@54@01)) | live]
; [else-branch: 10 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q4@54@01) | live]
(push) ; 5
; [then-branch: 10 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q4@54@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q4@54@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 10 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q4@54@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q4@54@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q4@54@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q4@54@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@54@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q4@54@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q4@54@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q4@54@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@660@11@660@354-aux|)))
(assert (forall (($q4@54@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q4@54@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q4@54@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q4@54@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@660@11@660@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $t@55@01 $Snap)
(assert (= $t@55@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $q4@56@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@56@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q4@56@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q4@56@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@661@11@661@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q5: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@57@01 $Snap)
(assert (= $t@57@01 $Snap.unit))
; [eval] (forall $q5: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) && ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@58@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) && ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
(push) ; 4
; [then-branch: 11 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 9)), $q5@58@01)) | live]
; [else-branch: 11 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 9)), $q5@58@01) | live]
(push) ; 5
; [then-branch: 11 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 9)), $q5@58@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q5@58@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 11 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 9)), $q5@58@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q5@58@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q5@58@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q5@58@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@58@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q5@58@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q5@58@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q5@58@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@662@11@662@354-aux|)))
(assert (forall (($q5@58@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q5@58@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q5@58@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q5@58@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@662@11@662@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q5: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int))
(declare-const $t@59@01 $Snap)
(assert (= $t@59@01 $Snap.unit))
; [eval] (forall $q5: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) } ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int))
(declare-const $q5@60@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@60@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q5@60@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q5@60@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@663@11@663@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@61@01 $Snap)
(assert (= $t@61@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$1, -1)): Int)
; [eval] $struct_loc($self$1, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 0)): Int) &&
;   ($struct_get($struct_loc($self$2, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@62@01 $Snap)
(assert (= $t@62@01 ($Snap.combine ($Snap.first $t@62@01) ($Snap.second $t@62@01))))
(assert (= ($Snap.first $t@62@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
(assert (= ($Snap.second $t@62@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 1)): Int) &&
;   ($struct_get($struct_loc($self$2, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@63@01 $Snap)
(assert (= $t@63@01 ($Snap.combine ($Snap.first $t@63@01) ($Snap.second $t@63@01))))
(assert (= ($Snap.first $t@63@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
(assert (= ($Snap.second $t@63@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 0)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 0)): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@64@01 $Snap)
(assert (= $t@64@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@65@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$2, 2)
(push) ; 4
; [then-branch: 12 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$2@4@01, 2)), $q0@65@01), 0))) | live]
; [else-branch: 12 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$2@4@01, 2)), $q0@65@01), 0)) | live]
(push) ; 5
; [then-branch: 12 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$2@4@01, 2)), $q0@65@01), 0)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@65@01) 0)))))
(pop) ; 5
(push) ; 5
; [else-branch: 12 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$2@4@01, 2)), $q0@65@01), 0))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@65@01) 0))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$2, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@65@01) 0)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@65@01) 0))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@65@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@65@01) 0)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@65@01) 0)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@65@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@667@11@667@450-aux|)))
(assert (forall (($q0@65@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@65@01) 0)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@65@01) 0))
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@65@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@667@11@667@450|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 1)): Seq[Int])| ==
;     32)
(declare-const $t@66@01 $Snap)
(assert (= $t@66@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct) } |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| == 32)
(declare-const $q0@67@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$2, 2)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@67@01 Int)) (!
  (=
    (Seq_length
      ($struct_get<Seq<Int>> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@67@01) 1)))
    32)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@67@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@668@11@668@252|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 2)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 2)): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@68@01 $Snap)
(assert (= $t@68@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q0@69@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$2, 2)
(push) ; 4
; [then-branch: 13 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$2@4@01, 2)), $q0@69@01), 2))) | live]
; [else-branch: 13 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$2@4@01, 2)), $q0@69@01), 2)) | live]
(push) ; 5
; [then-branch: 13 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$2@4@01, 2)), $q0@69@01), 2)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@69@01) 2)))))
(pop) ; 5
(push) ; 5
; [else-branch: 13 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$2@4@01, 2)), $q0@69@01), 2))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@69@01) 2))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$2, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@69@01) 2)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@69@01) 2))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@69@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@69@01) 2)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@69@01) 2)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@69@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@669@11@669@421-aux|)))
(assert (forall (($q0@69@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@69@01) 2)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@69@01) 2))
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@69@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@669@11@669@421|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 3)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 3)): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@70@01 $Snap)
(assert (= $t@70@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q0@71@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$2, 2)
(push) ; 4
; [then-branch: 14 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$2@4@01, 2)), $q0@71@01), 3))) | live]
; [else-branch: 14 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$2@4@01, 2)), $q0@71@01), 3)) | live]
(push) ; 5
; [then-branch: 14 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$2@4@01, 2)), $q0@71@01), 3)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@71@01) 3)))))
(pop) ; 5
(push) ; 5
; [else-branch: 14 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$2@4@01, 2)), $q0@71@01), 3))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@71@01) 3))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$2, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@71@01) 3)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@71@01) 3))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@71@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@71@01) 3)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@71@01) 3)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@71@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@670@11@670@421-aux|)))
(assert (forall (($q0@71@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@71@01) 3)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@71@01) 3))
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@71@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@670@11@670@421|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), -1)): Int) ==
;     722760475380740992045242976742918181534147582937316800750962)
(declare-const $t@72@01 $Snap)
(assert (= $t@72@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct) } ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int) == 722760475380740992045242976742918181534147582937316800750962)
(declare-const $q0@73@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int) == 722760475380740992045242976742918181534147582937316800750962
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$2, 2)
; [eval] -1
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@73@01 Int)) (!
  (=
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@73@01) (- 0 1)))
    722760475380740992045242976742918181534147582937316800750962)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) $q0@73@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@671@11@671@304|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]),
;     $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), $q3): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@74@01 $Snap)
(assert (= $t@74@01 $Snap.unit))
; [eval] (forall $q3: Seq[Int] :: { ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q3@75@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$2, 4)
(push) ; 4
; [then-branch: 15 | !(0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$2@4@01, 4)), $q3@75@01)) | live]
; [else-branch: 15 | 0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$2@4@01, 4)), $q3@75@01) | live]
(push) ; 5
; [then-branch: 15 | !(0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$2@4@01, 4)), $q3@75@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q3@75@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 15 | 0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$2@4@01, 4)), $q3@75@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q3@75@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$2, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q3@75@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q3@75@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@75@01 Seq<Int>)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q3@75@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q3@75@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q3@75@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@672@11@672@345-aux|)))
(assert (forall (($q3@75@01 Seq<Int>)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q3@75@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q3@75@01)
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q3@75@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@672@11@672@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]),
;     $q3): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int])): Int))
(declare-const $t@76@01 $Snap)
(assert (= $t@76@01 $Snap.unit))
; [eval] (forall $q3: Seq[Int] :: { ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), $q3): Int) } ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int])): Int))
(declare-const $q3@77@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$2, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$2, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@77@01 Seq<Int>)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q3@77@01)
    ($map_sum<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q3@77@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@673@11@673@282|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 5)): Int) &&
;   ($struct_get($struct_loc($self$2, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@78@01 $Snap)
(assert (= $t@78@01 ($Snap.combine ($Snap.first $t@78@01) ($Snap.second $t@78@01))))
(assert (= ($Snap.first $t@78@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] $struct_loc($self$2, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 5))))
(assert (= ($Snap.second $t@78@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] $struct_loc($self$2, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$2, 6)): Int) &&
;   ($struct_get($struct_loc($self$2, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@79@01 $Snap)
(assert (= $t@79@01 ($Snap.combine ($Snap.first $t@79@01) ($Snap.second $t@79@01))))
(assert (= ($Snap.first $t@79@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$2, 6)): Int)
; [eval] $struct_loc($self$2, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 6))))
(assert (= ($Snap.second $t@79@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$2, 6)): Int)
; [eval] $struct_loc($self$2, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q4): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q4): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q4): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@80@01 $Snap)
(assert (= $t@80@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q4): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q4): Int) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q4@81@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q4): Int) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(push) ; 4
; [then-branch: 16 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q4@81@01)) | live]
; [else-branch: 16 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q4@81@01) | live]
(push) ; 5
; [then-branch: 16 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q4@81@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q4@81@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 16 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q4@81@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q4@81@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q4@81@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q4@81@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@81@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q4@81@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q4@81@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q4@81@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@676@11@676@354-aux|)))
(assert (forall (($q4@81@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q4@81@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q4@81@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q4@81@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@676@11@676@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q4): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q4): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int))
(declare-const $t@82@01 $Snap)
(assert (= $t@82@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q4): Int) } ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q4): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int))
(declare-const $q4@83@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q4): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@83@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q4@83@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q4@83@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@677@11@677@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q5: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q5): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q5): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q5): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@84@01 $Snap)
(assert (= $t@84@01 $Snap.unit))
; [eval] (forall $q5: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q5): Int) && ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@85@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q5): Int) && ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
(push) ; 4
; [then-branch: 17 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 9)), $q5@85@01)) | live]
; [else-branch: 17 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 9)), $q5@85@01) | live]
(push) ; 5
; [then-branch: 17 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 9)), $q5@85@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q5@85@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 17 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 9)), $q5@85@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q5@85@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q5@85@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q5@85@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@85@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q5@85@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q5@85@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q5@85@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@678@11@678@354-aux|)))
(assert (forall (($q5@85@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q5@85@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q5@85@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q5@85@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@678@11@678@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q5: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q5): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q5): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])): Int))
(declare-const $t@86@01 $Snap)
(assert (= $t@86@01 $Snap.unit))
; [eval] (forall $q5: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q5): Int) } ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q5): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])): Int))
(declare-const $q5@87@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q5): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@87@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q5@87@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q5@87@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@679@11@679@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@88@01 $Snap)
(assert (= $t@88@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$2, -1)): Int)
; [eval] $struct_loc($self$2, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@89@01 $Snap)
(assert (= $t@89@01 ($Snap.combine ($Snap.first $t@89@01) ($Snap.second $t@89@01))))
(assert (= ($Snap.first $t@89@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 0))))
(assert (= ($Snap.second $t@89@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@90@01 $Snap)
(assert (= $t@90@01 ($Snap.combine ($Snap.first $t@90@01) ($Snap.second $t@90@01))))
(assert (= ($Snap.first $t@90@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 1))))
(assert (= ($Snap.second $t@90@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@91@01 $Snap)
(assert (= $t@91@01 ($Snap.combine ($Snap.first $t@91@01) ($Snap.second $t@91@01))))
(assert (= ($Snap.first $t@91@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 2))))
(assert (= ($Snap.second $t@91@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@92@01 $Snap)
(assert (= $t@92@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@6@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@93@01 $Snap)
(assert (= $t@93@01 ($Snap.combine ($Snap.first $t@93@01) ($Snap.second $t@93@01))))
(assert (= ($Snap.first $t@93@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 4))))
(assert (= ($Snap.second $t@93@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@94@01 $Snap)
(assert (= $t@94@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@95@01 $Snap)
(assert (= $t@95@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@96@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int) }
;     { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool))
(declare-const $t@97@01 $Snap)
(assert (= $t@97@01 $Snap.unit))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const q$bb@98@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 4
; [then-branch: 18 | |q$bb@98@01| == 32 | live]
; [else-branch: 18 | |q$bb@98@01| != 32 | live]
(push) ; 5
; [then-branch: 18 | |q$bb@98@01| == 32]
(assert (= (Seq_length q$bb@98@01) 32))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$0, 4)
(push) ; 6
; [then-branch: 19 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$0@0@01, 4)), q$bb@98@01) != 0 | live]
; [else-branch: 19 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$0@0@01, 4)), q$bb@98@01) == 0 | live]
(push) ; 7
; [then-branch: 19 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$0@0@01, 4)), q$bb@98@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) q$bb@98@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc($self$0, 3)
(pop) ; 7
(push) ; 7
; [else-branch: 19 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$0@0@01, 4)), q$bb@98@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) q$bb@98@01)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) q$bb@98@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) q$bb@98@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 18 | |q$bb@98@01| != 32]
(assert (not (= (Seq_length q$bb@98@01) 32)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@98@01) 32)
  (and
    (= (Seq_length q$bb@98@01) 32)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) q$bb@98@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) q$bb@98@01)
          0))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@98@01) 32)) (= (Seq_length q$bb@98@01) 32)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@98@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@98@01) 32)
      (and
        (= (Seq_length q$bb@98@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) q$bb@98@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) q$bb@98@01)
              0)))))
    (or (not (= (Seq_length q$bb@98@01) 32)) (= (Seq_length q$bb@98@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) q$bb@98@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@688@11@688@405-aux|)))
(assert (forall ((q$bb@98@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@98@01) 32)
      (and
        (= (Seq_length q$bb@98@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) q$bb@98@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) q$bb@98@01)
              0)))))
    (or (not (= (Seq_length q$bb@98@01) 32)) (= (Seq_length q$bb@98@01) 32)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$0@0@01 3)) q$bb@98@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@688@11@688@405-aux|)))
(assert (forall ((q$bb@98@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@98@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) q$bb@98@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$0@0@01 3)) q$bb@98@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@0@01 4)) q$bb@98@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$0@0@01 3)) q$bb@98@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@688@11@688@405|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 1)): Int) >=
;   ($struct_get($struct_loc($self$0, 1)): Int)
(declare-const $t@99@01 $Snap)
(assert (= $t@99@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) >= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     q$i <= ($struct_get($struct_loc($self$0, 1)): Int) ==>
;     s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$0,
;     2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$0,
;     2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const $t@100@01 $Snap)
(assert (= $t@100@01 $Snap.unit))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($self$0, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const q$i@101@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($self$0, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 4
; [then-branch: 20 | !(0 <= q$i@101@01) | live]
; [else-branch: 20 | 0 <= q$i@101@01 | live]
(push) ; 5
; [then-branch: 20 | !(0 <= q$i@101@01)]
(assert (not (<= 0 q$i@101@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 20 | 0 <= q$i@101@01]
(assert (<= 0 q$i@101@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@101@01) (not (<= 0 q$i@101@01))))
(push) ; 4
; [then-branch: 21 | 0 <= q$i@101@01 && q$i@101@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 21 | !(0 <= q$i@101@01 && q$i@101@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 5
; [then-branch: 21 | 0 <= q$i@101@01 && q$i@101@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@101@01)
  (<=
    q$i@101@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] q$i <= ($struct_get($struct_loc($self$0, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] q$i <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(push) ; 6
; [then-branch: 22 | q$i@101@01 <= $struct_get[Int]($struct_loc[Int]($self$0@0@01, 1)) | live]
; [else-branch: 22 | !(q$i@101@01 <= $struct_get[Int]($struct_loc[Int]($self$0@0@01, 1))) | live]
(push) ; 7
; [then-branch: 22 | q$i@101@01 <= $struct_get[Int]($struct_loc[Int]($self$0@0@01, 1))]
(assert (<= q$i@101@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
(pop) ; 7
(push) ; 7
; [else-branch: 22 | !(q$i@101@01 <= $struct_get[Int]($struct_loc[Int]($self$0@0@01, 1)))]
(assert (not (<= q$i@101@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (<= q$i@101@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
  (<= q$i@101@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))
(pop) ; 5
(push) ; 5
; [else-branch: 21 | !(0 <= q$i@101@01 && q$i@101@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@101@01)
    (<=
      q$i@101@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@101@01)
    (<=
      q$i@101@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@101@01)
    (<=
      q$i@101@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not (<= q$i@101@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
      (<= q$i@101@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@101@01)
      (<=
        q$i@101@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@101@01)
    (<=
      q$i@101@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@101@01 Int)) (!
  (and
    (or (<= 0 q$i@101@01) (not (<= 0 q$i@101@01)))
    (=>
      (and
        (<= 0 q$i@101@01)
        (<=
          q$i@101@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@101@01)
        (<=
          q$i@101@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (<= q$i@101@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
          (<= q$i@101@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))))
    (or
      (not
        (and
          (<= 0 q$i@101@01)
          (<=
            q$i@101@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@101@01)
        (<=
          q$i@101@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) q$i@101@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@690@11@690@476-aux|)))
(assert (forall ((q$i@101@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@101@01)
        (<=
          q$i@101@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@101@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) q$i@101@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) q$i@101@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) q$i@101@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@690@11@690@476|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@102@01 $Snap)
(assert (= $t@102@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@103@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@103@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $a@103@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $a@103@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $a@103@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@691@11@691@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int) }
;     { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool))
(declare-const $t@104@01 $Snap)
(assert (= $t@104@01 $Snap.unit))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const q$bb@105@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 4
; [then-branch: 23 | |q$bb@105@01| == 32 | live]
; [else-branch: 23 | |q$bb@105@01| != 32 | live]
(push) ; 5
; [then-branch: 23 | |q$bb@105@01| == 32]
(assert (= (Seq_length q$bb@105@01) 32))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$1, 4)
(push) ; 6
; [then-branch: 24 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$1@2@01, 4)), q$bb@105@01) != 0 | live]
; [else-branch: 24 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$1@2@01, 4)), q$bb@105@01) == 0 | live]
(push) ; 7
; [then-branch: 24 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$1@2@01, 4)), q$bb@105@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) q$bb@105@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc($self$1, 3)
(pop) ; 7
(push) ; 7
; [else-branch: 24 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$1@2@01, 4)), q$bb@105@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) q$bb@105@01)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) q$bb@105@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) q$bb@105@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 23 | |q$bb@105@01| != 32]
(assert (not (= (Seq_length q$bb@105@01) 32)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@105@01) 32)
  (and
    (= (Seq_length q$bb@105@01) 32)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) q$bb@105@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) q$bb@105@01)
          0))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@105@01) 32)) (= (Seq_length q$bb@105@01) 32)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@105@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@105@01) 32)
      (and
        (= (Seq_length q$bb@105@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) q$bb@105@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) q$bb@105@01)
              0)))))
    (or (not (= (Seq_length q$bb@105@01) 32)) (= (Seq_length q$bb@105@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) q$bb@105@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@692@11@692@405-aux|)))
(assert (forall ((q$bb@105@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@105@01) 32)
      (and
        (= (Seq_length q$bb@105@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) q$bb@105@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) q$bb@105@01)
              0)))))
    (or (not (= (Seq_length q$bb@105@01) 32)) (= (Seq_length q$bb@105@01) 32)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$1@2@01 3)) q$bb@105@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@692@11@692@405-aux|)))
(assert (forall ((q$bb@105@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@105@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) q$bb@105@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$1@2@01 3)) q$bb@105@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@2@01 4)) q$bb@105@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$1@2@01 3)) q$bb@105@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@692@11@692@405|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 1)): Int) >=
;   ($struct_get($struct_loc($self$0, 1)): Int)
(declare-const $t@106@01 $Snap)
(assert (= $t@106@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) >= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     q$i <= ($struct_get($struct_loc($self$0, 1)): Int) ==>
;     s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$1,
;     2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$0,
;     2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const $t@107@01 $Snap)
(assert (= $t@107@01 $Snap.unit))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($self$0, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const q$i@108@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($self$0, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 4
; [then-branch: 25 | !(0 <= q$i@108@01) | live]
; [else-branch: 25 | 0 <= q$i@108@01 | live]
(push) ; 5
; [then-branch: 25 | !(0 <= q$i@108@01)]
(assert (not (<= 0 q$i@108@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 25 | 0 <= q$i@108@01]
(assert (<= 0 q$i@108@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@108@01) (not (<= 0 q$i@108@01))))
(push) ; 4
; [then-branch: 26 | 0 <= q$i@108@01 && q$i@108@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 26 | !(0 <= q$i@108@01 && q$i@108@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 5
; [then-branch: 26 | 0 <= q$i@108@01 && q$i@108@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@108@01)
  (<=
    q$i@108@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] q$i <= ($struct_get($struct_loc($self$0, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] q$i <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(push) ; 6
; [then-branch: 27 | q$i@108@01 <= $struct_get[Int]($struct_loc[Int]($self$0@0@01, 1)) | live]
; [else-branch: 27 | !(q$i@108@01 <= $struct_get[Int]($struct_loc[Int]($self$0@0@01, 1))) | live]
(push) ; 7
; [then-branch: 27 | q$i@108@01 <= $struct_get[Int]($struct_loc[Int]($self$0@0@01, 1))]
(assert (<= q$i@108@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
(pop) ; 7
(push) ; 7
; [else-branch: 27 | !(q$i@108@01 <= $struct_get[Int]($struct_loc[Int]($self$0@0@01, 1)))]
(assert (not (<= q$i@108@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (<= q$i@108@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
  (<= q$i@108@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))
(pop) ; 5
(push) ; 5
; [else-branch: 26 | !(0 <= q$i@108@01 && q$i@108@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@108@01)
    (<=
      q$i@108@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@108@01)
    (<=
      q$i@108@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@108@01)
    (<=
      q$i@108@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not (<= q$i@108@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
      (<= q$i@108@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@108@01)
      (<=
        q$i@108@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@108@01)
    (<=
      q$i@108@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@108@01 Int)) (!
  (and
    (or (<= 0 q$i@108@01) (not (<= 0 q$i@108@01)))
    (=>
      (and
        (<= 0 q$i@108@01)
        (<=
          q$i@108@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@108@01)
        (<=
          q$i@108@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (<= q$i@108@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
          (<= q$i@108@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))))
    (or
      (not
        (and
          (<= 0 q$i@108@01)
          (<=
            q$i@108@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@108@01)
        (<=
          q$i@108@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) q$i@108@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@694@11@694@476-aux|)))
(assert (forall ((q$i@108@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@108@01)
        (<=
          q$i@108@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@108@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) q$i@108@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) q$i@108@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) q$i@108@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@694@11@694@476|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@109@01 $Snap)
(assert (= $t@109@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@110@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@110@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $a@110@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $a@110@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $a@110@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@695@11@695@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int) }
;     { ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool))
(declare-const $t@111@01 $Snap)
(assert (= $t@111@01 $Snap.unit))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const q$bb@112@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 4
; [then-branch: 28 | |q$bb@112@01| == 32 | live]
; [else-branch: 28 | |q$bb@112@01| != 32 | live]
(push) ; 5
; [then-branch: 28 | |q$bb@112@01| == 32]
(assert (= (Seq_length q$bb@112@01) 32))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$2, 4)
(push) ; 6
; [then-branch: 29 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$2@4@01, 4)), q$bb@112@01) != 0 | live]
; [else-branch: 29 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$2@4@01, 4)), q$bb@112@01) == 0 | live]
(push) ; 7
; [then-branch: 29 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$2@4@01, 4)), q$bb@112@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@112@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(push) ; 7
; [else-branch: 29 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$2@4@01, 4)), q$bb@112@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@112@01)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@112@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@112@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 28 | |q$bb@112@01| != 32]
(assert (not (= (Seq_length q$bb@112@01) 32)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@112@01) 32)
  (and
    (= (Seq_length q$bb@112@01) 32)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@112@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@112@01)
          0))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@112@01) 32)) (= (Seq_length q$bb@112@01) 32)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@112@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@112@01) 32)
      (and
        (= (Seq_length q$bb@112@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@112@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@112@01)
              0)))))
    (or (not (= (Seq_length q$bb@112@01) 32)) (= (Seq_length q$bb@112@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@112@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@696@11@696@405-aux|)))
(assert (forall ((q$bb@112@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@112@01) 32)
      (and
        (= (Seq_length q$bb@112@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@112@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@112@01)
              0)))))
    (or (not (= (Seq_length q$bb@112@01) 32)) (= (Seq_length q$bb@112@01) 32)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$2@4@01 3)) q$bb@112@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@696@11@696@405-aux|)))
(assert (forall ((q$bb@112@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@112@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@112@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$2@4@01 3)) q$bb@112@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@112@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$2@4@01 3)) q$bb@112@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@696@11@696@405|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 1)): Int) >=
;   ($struct_get($struct_loc($self$1, 1)): Int)
(declare-const $t@113@01 $Snap)
(assert (= $t@113@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) >= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]),
;     q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     q$i <= ($struct_get($struct_loc($self$1, 1)): Int) ==>
;     s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$2,
;     2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$1,
;     2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const $t@114@01 $Snap)
(assert (= $t@114@01 $Snap.unit))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($self$1, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const q$i@115@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($self$1, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 4
; [then-branch: 30 | !(0 <= q$i@115@01) | live]
; [else-branch: 30 | 0 <= q$i@115@01 | live]
(push) ; 5
; [then-branch: 30 | !(0 <= q$i@115@01)]
(assert (not (<= 0 q$i@115@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 30 | 0 <= q$i@115@01]
(assert (<= 0 q$i@115@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@115@01) (not (<= 0 q$i@115@01))))
(push) ; 4
; [then-branch: 31 | 0 <= q$i@115@01 && q$i@115@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 31 | !(0 <= q$i@115@01 && q$i@115@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 5
; [then-branch: 31 | 0 <= q$i@115@01 && q$i@115@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@115@01)
  (<=
    q$i@115@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] q$i <= ($struct_get($struct_loc($self$1, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] q$i <= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(push) ; 6
; [then-branch: 32 | q$i@115@01 <= $struct_get[Int]($struct_loc[Int]($self$1@2@01, 1)) | live]
; [else-branch: 32 | !(q$i@115@01 <= $struct_get[Int]($struct_loc[Int]($self$1@2@01, 1))) | live]
(push) ; 7
; [then-branch: 32 | q$i@115@01 <= $struct_get[Int]($struct_loc[Int]($self$1@2@01, 1))]
(assert (<= q$i@115@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$2, 2)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
(pop) ; 7
(push) ; 7
; [else-branch: 32 | !(q$i@115@01 <= $struct_get[Int]($struct_loc[Int]($self$1@2@01, 1)))]
(assert (not (<= q$i@115@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (<= q$i@115@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
  (<= q$i@115@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1)))))
(pop) ; 5
(push) ; 5
; [else-branch: 31 | !(0 <= q$i@115@01 && q$i@115@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@115@01)
    (<=
      q$i@115@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@115@01)
    (<=
      q$i@115@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@115@01)
    (<=
      q$i@115@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not (<= q$i@115@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
      (<= q$i@115@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@115@01)
      (<=
        q$i@115@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@115@01)
    (<=
      q$i@115@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@115@01 Int)) (!
  (and
    (or (<= 0 q$i@115@01) (not (<= 0 q$i@115@01)))
    (=>
      (and
        (<= 0 q$i@115@01)
        (<=
          q$i@115@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@115@01)
        (<=
          q$i@115@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (<= q$i@115@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
          (<= q$i@115@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))))
    (or
      (not
        (and
          (<= 0 q$i@115@01)
          (<=
            q$i@115@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@115@01)
        (<=
          q$i@115@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) q$i@115@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@698@11@698@476-aux|)))
(assert (forall ((q$i@115@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@115@01)
        (<=
          q$i@115@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@115@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) q$i@115@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@2@01 2)) q$i@115@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) q$i@115@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@698@11@698@476|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int) }
;     { ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const q$bb@116@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 4
; [then-branch: 33 | |q$bb@116@01| == 32 | live]
; [else-branch: 33 | |q$bb@116@01| != 32 | live]
(push) ; 5
; [then-branch: 33 | |q$bb@116@01| == 32]
(assert (= (Seq_length q$bb@116@01) 32))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$2, 4)
(push) ; 6
; [then-branch: 34 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$2@4@01, 4)), q$bb@116@01) != 0 | live]
; [else-branch: 34 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$2@4@01, 4)), q$bb@116@01) == 0 | live]
(push) ; 7
; [then-branch: 34 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$2@4@01, 4)), q$bb@116@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@116@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(push) ; 7
; [else-branch: 34 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$2@4@01, 4)), q$bb@116@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@116@01)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@116@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@116@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 33 | |q$bb@116@01| != 32]
(assert (not (= (Seq_length q$bb@116@01) 32)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@116@01) 32)
  (and
    (= (Seq_length q$bb@116@01) 32)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@116@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@116@01)
          0))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@116@01) 32)) (= (Seq_length q$bb@116@01) 32)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@116@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@116@01) 32)
      (and
        (= (Seq_length q$bb@116@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@116@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@116@01)
              0)))))
    (or (not (= (Seq_length q$bb@116@01) 32)) (= (Seq_length q$bb@116@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@116@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@699@11@699@405-aux|)))
(assert (forall ((q$bb@116@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@116@01) 32)
      (and
        (= (Seq_length q$bb@116@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@116@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@116@01)
              0)))))
    (or (not (= (Seq_length q$bb@116@01) 32)) (= (Seq_length q$bb@116@01) 32)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$2@4@01 3)) q$bb@116@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@699@11@699@405-aux|)))
(push) ; 3
(assert (not (forall ((q$bb@116@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@116@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@116@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$2@4@01 3)) q$bb@116@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@116@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$2@4@01 3)) q$bb@116@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@699@11@699@405|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$bb@116@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@116@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@116@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$2@4@01 3)) q$bb@116@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$2@4@01 4)) q$bb@116@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$2@4@01 3)) q$bb@116@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@699@11@699@405|)))
; [exec]
; assert ($struct_get($struct_loc($self$2, 1)): Int) >=
;   ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) >= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(push) ; 3
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
; [exec]
; assert (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]),
;     q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     q$i <= ($struct_get($struct_loc($self$0, 1)): Int) ==>
;     s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$2,
;     2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$0,
;     2)): $Map[Int, $Struct]), q$i): $Struct)))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($self$0, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const q$i@117@01 Int)
(push) ; 3
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($self$0, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 4
; [then-branch: 35 | !(0 <= q$i@117@01) | live]
; [else-branch: 35 | 0 <= q$i@117@01 | live]
(push) ; 5
; [then-branch: 35 | !(0 <= q$i@117@01)]
(assert (not (<= 0 q$i@117@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 35 | 0 <= q$i@117@01]
(assert (<= 0 q$i@117@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@117@01) (not (<= 0 q$i@117@01))))
(push) ; 4
; [then-branch: 36 | 0 <= q$i@117@01 && q$i@117@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 36 | !(0 <= q$i@117@01 && q$i@117@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 5
; [then-branch: 36 | 0 <= q$i@117@01 && q$i@117@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@117@01)
  (<=
    q$i@117@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] q$i <= ($struct_get($struct_loc($self$0, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] q$i <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(push) ; 6
; [then-branch: 37 | q$i@117@01 <= $struct_get[Int]($struct_loc[Int]($self$0@0@01, 1)) | live]
; [else-branch: 37 | !(q$i@117@01 <= $struct_get[Int]($struct_loc[Int]($self$0@0@01, 1))) | live]
(push) ; 7
; [then-branch: 37 | q$i@117@01 <= $struct_get[Int]($struct_loc[Int]($self$0@0@01, 1))]
(assert (<= q$i@117@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($self$2, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$2, 2)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
(pop) ; 7
(push) ; 7
; [else-branch: 37 | !(q$i@117@01 <= $struct_get[Int]($struct_loc[Int]($self$0@0@01, 1)))]
(assert (not (<= q$i@117@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (<= q$i@117@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
  (<= q$i@117@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))
(pop) ; 5
(push) ; 5
; [else-branch: 36 | !(0 <= q$i@117@01 && q$i@117@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@117@01)
    (<=
      q$i@117@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@117@01)
    (<=
      q$i@117@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@117@01)
    (<=
      q$i@117@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not (<= q$i@117@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
      (<= q$i@117@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@117@01)
      (<=
        q$i@117@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@117@01)
    (<=
      q$i@117@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@117@01 Int)) (!
  (and
    (or (<= 0 q$i@117@01) (not (<= 0 q$i@117@01)))
    (=>
      (and
        (<= 0 q$i@117@01)
        (<=
          q$i@117@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@117@01)
        (<=
          q$i@117@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (<= q$i@117@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
          (<= q$i@117@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))))
    (or
      (not
        (and
          (<= 0 q$i@117@01)
          (<=
            q$i@117@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@117@01)
        (<=
          q$i@117@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) q$i@117@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@701@11@701@476-aux|)))
(push) ; 3
(assert (not (forall ((q$i@117@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@117@01)
        (<=
          q$i@117@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@117@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) q$i@117@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) q$i@117@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) q$i@117@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@701@11@701@476|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@117@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@117@01)
        (<=
          q$i@117@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@117@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) q$i@117@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@0@01 2)) q$i@117@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$2@4@01 2)) q$i@117@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@701@11@701@476|)))
(pop) ; 2
(pop) ; 1
; ---------- $reflexivity_check ----------
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var $self$0: $Struct
(declare-const $self$0@118@01 $Struct)
; [exec]
; var $$contracts$0: $Map[Int, $Struct]
(declare-const $$contracts$0@119@01 $Map<Int~_$Struct>)
; [exec]
; var $self$1: $Struct
(declare-const $self$1@120@01 $Struct)
; [exec]
; var $$contracts$1: $Map[Int, $Struct]
(declare-const $$contracts$1@121@01 $Map<Int~_$Struct>)
; [exec]
; var block: $Struct
(declare-const block@122@01 $Struct)
; [exec]
; var $post: Bool
(declare-const $post@123@01 Bool)
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 0)): Int) &&
;   ($struct_get($struct_loc($self$0, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@124@01 $Snap)
(assert (= $t@124@01 ($Snap.combine ($Snap.first $t@124@01) ($Snap.second $t@124@01))))
(assert (= ($Snap.first $t@124@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@118@01 0))))
(assert (= ($Snap.second $t@124@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@118@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 1)): Int) &&
;   ($struct_get($struct_loc($self$0, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@125@01 $Snap)
(assert (= $t@125@01 ($Snap.combine ($Snap.first $t@125@01) ($Snap.second $t@125@01))))
(assert (= ($Snap.first $t@125@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@118@01 1))))
(assert (= ($Snap.second $t@125@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@118@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 0)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 0)): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@126@01 $Snap)
(assert (= $t@126@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@127@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
(push) ; 4
; [then-branch: 38 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@118@01, 2)), $q0@127@01), 0))) | live]
; [else-branch: 38 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@118@01, 2)), $q0@127@01), 0)) | live]
(push) ; 5
; [then-branch: 38 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@118@01, 2)), $q0@127@01), 0)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@127@01) 0)))))
(pop) ; 5
(push) ; 5
; [else-branch: 38 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@118@01, 2)), $q0@127@01), 0))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@127@01) 0))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@127@01) 0)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@127@01) 0))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@127@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@127@01) 0)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@127@01) 0)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@127@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@714@11@714@450-aux|)))
(assert (forall (($q0@127@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@127@01) 0)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@127@01) 0))
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@127@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@714@11@714@450|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 1)): Seq[Int])| ==
;     32)
(declare-const $t@128@01 $Snap)
(assert (= $t@128@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct) } |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| == 32)
(declare-const $q0@129@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@129@01 Int)) (!
  (=
    (Seq_length
      ($struct_get<Seq<Int>> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@129@01) 1)))
    32)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@129@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@715@11@715@252|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 2)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 2)): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@130@01 $Snap)
(assert (= $t@130@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q0@131@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
(push) ; 4
; [then-branch: 39 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@118@01, 2)), $q0@131@01), 2))) | live]
; [else-branch: 39 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@118@01, 2)), $q0@131@01), 2)) | live]
(push) ; 5
; [then-branch: 39 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@118@01, 2)), $q0@131@01), 2)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@131@01) 2)))))
(pop) ; 5
(push) ; 5
; [else-branch: 39 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@118@01, 2)), $q0@131@01), 2))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@131@01) 2))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@131@01) 2)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@131@01) 2))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@131@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@131@01) 2)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@131@01) 2)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@131@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@716@11@716@421-aux|)))
(assert (forall (($q0@131@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@131@01) 2)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@131@01) 2))
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@131@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@716@11@716@421|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 3)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 3)): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@132@01 $Snap)
(assert (= $t@132@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q0@133@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
(push) ; 4
; [then-branch: 40 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@118@01, 2)), $q0@133@01), 3))) | live]
; [else-branch: 40 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@118@01, 2)), $q0@133@01), 3)) | live]
(push) ; 5
; [then-branch: 40 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@118@01, 2)), $q0@133@01), 3)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@133@01) 3)))))
(pop) ; 5
(push) ; 5
; [else-branch: 40 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$0@118@01, 2)), $q0@133@01), 3))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@133@01) 3))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@133@01) 3)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@133@01) 3))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@133@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@133@01) 3)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@133@01) 3)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@133@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@717@11@717@421-aux|)))
(assert (forall (($q0@133@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@133@01) 3)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@133@01) 3))
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@133@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@717@11@717@421|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), -1)): Int) ==
;     722760475380740992045242976742918181534147582937316800750962)
(declare-const $t@134@01 $Snap)
(assert (= $t@134@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct) } ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int) == 722760475380740992045242976742918181534147582937316800750962)
(declare-const $q0@135@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int) == 722760475380740992045242976742918181534147582937316800750962
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
; [eval] -1
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@135@01 Int)) (!
  (=
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@135@01) (- 0 1)))
    722760475380740992045242976742918181534147582937316800750962)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) $q0@135@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@718@11@718@304|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]),
;     $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@136@01 $Snap)
(assert (= $t@136@01 $Snap.unit))
; [eval] (forall $q3: Seq[Int] :: { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q3@137@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$0, 4)
(push) ; 4
; [then-branch: 41 | !(0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$0@118@01, 4)), $q3@137@01)) | live]
; [else-branch: 41 | 0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$0@118@01, 4)), $q3@137@01) | live]
(push) ; 5
; [then-branch: 41 | !(0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$0@118@01, 4)), $q3@137@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@118@01 4)) $q3@137@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 41 | 0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$0@118@01, 4)), $q3@137@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@118@01 4)) $q3@137@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$0, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@118@01 4)) $q3@137@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@118@01 4)) $q3@137@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@137@01 Seq<Int>)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@118@01 4)) $q3@137@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@118@01 4)) $q3@137@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@118@01 4)) $q3@137@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@719@11@719@345-aux|)))
(assert (forall (($q3@137@01 Seq<Int>)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@118@01 4)) $q3@137@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@118@01 4)) $q3@137@01)
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@118@01 4)) $q3@137@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@719@11@719@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]),
;     $q3): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int])): Int))
(declare-const $t@138@01 $Snap)
(assert (= $t@138@01 $Snap.unit))
; [eval] (forall $q3: Seq[Int] :: { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) } ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int])): Int))
(declare-const $q3@139@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$0, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$0, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@139@01 Seq<Int>)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@118@01 4)) $q3@139@01)
    ($map_sum<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@118@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$0@118@01 4)) $q3@139@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@720@11@720@282|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 5)): Int) &&
;   ($struct_get($struct_loc($self$0, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@140@01 $Snap)
(assert (= $t@140@01 ($Snap.combine ($Snap.first $t@140@01) ($Snap.second $t@140@01))))
(assert (= ($Snap.first $t@140@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@118@01 5))))
(assert (= ($Snap.second $t@140@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@118@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 6)): Int) &&
;   ($struct_get($struct_loc($self$0, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@141@01 $Snap)
(assert (= $t@141@01 ($Snap.combine ($Snap.first $t@141@01) ($Snap.second $t@141@01))))
(assert (= ($Snap.first $t@141@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] $struct_loc($self$0, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@118@01 6))))
(assert (= ($Snap.second $t@141@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] $struct_loc($self$0, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@118@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@142@01 $Snap)
(assert (= $t@142@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q4@143@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(push) ; 4
; [then-branch: 42 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@118@01, 8)), $q4@143@01)) | live]
; [else-branch: 42 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@118@01, 8)), $q4@143@01) | live]
(push) ; 5
; [then-branch: 42 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@118@01, 8)), $q4@143@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 8)) $q4@143@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 42 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@118@01, 8)), $q4@143@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 8)) $q4@143@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 8)) $q4@143@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 8)) $q4@143@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@143@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 8)) $q4@143@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 8)) $q4@143@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 8)) $q4@143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@723@11@723@354-aux|)))
(assert (forall (($q4@143@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 8)) $q4@143@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 8)) $q4@143@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 8)) $q4@143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@723@11@723@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $t@144@01 $Snap)
(assert (= $t@144@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) } ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $q4@145@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@145@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 8)) $q4@145@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 8)) $q4@145@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@724@11@724@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q5: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@146@01 $Snap)
(assert (= $t@146@01 $Snap.unit))
; [eval] (forall $q5: Int :: { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) && ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@147@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) && ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
(push) ; 4
; [then-branch: 43 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@118@01, 9)), $q5@147@01)) | live]
; [else-branch: 43 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@118@01, 9)), $q5@147@01) | live]
(push) ; 5
; [then-branch: 43 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@118@01, 9)), $q5@147@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 9)) $q5@147@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 43 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@118@01, 9)), $q5@147@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 9)) $q5@147@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 9)) $q5@147@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 9)) $q5@147@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@147@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 9)) $q5@147@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 9)) $q5@147@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 9)) $q5@147@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@725@11@725@354-aux|)))
(assert (forall (($q5@147@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 9)) $q5@147@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 9)) $q5@147@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 9)) $q5@147@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@725@11@725@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q5: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int))
(declare-const $t@148@01 $Snap)
(assert (= $t@148@01 $Snap.unit))
; [eval] (forall $q5: Int :: { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) } ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int))
(declare-const $q5@149@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@149@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 9)) $q5@149@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 9)) $q5@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@726@11@726@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@150@01 $Snap)
(assert (= $t@150@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$0, -1)): Int)
; [eval] $struct_loc($self$0, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@118@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 0)): Int) &&
;   ($struct_get($struct_loc($self$1, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@151@01 $Snap)
(assert (= $t@151@01 ($Snap.combine ($Snap.first $t@151@01) ($Snap.second $t@151@01))))
(assert (= ($Snap.first $t@151@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@120@01 0))))
(assert (= ($Snap.second $t@151@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@120@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 1)): Int) &&
;   ($struct_get($struct_loc($self$1, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@152@01 $Snap)
(assert (= $t@152@01 ($Snap.combine ($Snap.first $t@152@01) ($Snap.second $t@152@01))))
(assert (= ($Snap.first $t@152@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@120@01 1))))
(assert (= ($Snap.second $t@152@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@120@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 0)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 0)): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@153@01 $Snap)
(assert (= $t@153@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@154@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
(push) ; 4
; [then-branch: 44 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@120@01, 2)), $q0@154@01), 0))) | live]
; [else-branch: 44 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@120@01, 2)), $q0@154@01), 0)) | live]
(push) ; 5
; [then-branch: 44 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@120@01, 2)), $q0@154@01), 0)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@154@01) 0)))))
(pop) ; 5
(push) ; 5
; [else-branch: 44 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@120@01, 2)), $q0@154@01), 0))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@154@01) 0))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@154@01) 0)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@154@01) 0))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@154@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@154@01) 0)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@154@01) 0)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@154@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@730@11@730@450-aux|)))
(assert (forall (($q0@154@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@154@01) 0)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@154@01) 0))
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@154@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@730@11@730@450|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 1)): Seq[Int])| ==
;     32)
(declare-const $t@155@01 $Snap)
(assert (= $t@155@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct) } |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| == 32)
(declare-const $q0@156@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@156@01 Int)) (!
  (=
    (Seq_length
      ($struct_get<Seq<Int>> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@156@01) 1)))
    32)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@156@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@731@11@731@252|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 2)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 2)): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@157@01 $Snap)
(assert (= $t@157@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q0@158@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
(push) ; 4
; [then-branch: 45 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@120@01, 2)), $q0@158@01), 2))) | live]
; [else-branch: 45 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@120@01, 2)), $q0@158@01), 2)) | live]
(push) ; 5
; [then-branch: 45 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@120@01, 2)), $q0@158@01), 2)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@158@01) 2)))))
(pop) ; 5
(push) ; 5
; [else-branch: 45 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@120@01, 2)), $q0@158@01), 2))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@158@01) 2))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@158@01) 2)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@158@01) 2))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@158@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@158@01) 2)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@158@01) 2)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@158@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@732@11@732@421-aux|)))
(assert (forall (($q0@158@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@158@01) 2)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@158@01) 2))
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@158@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@732@11@732@421|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 3)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 3)): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@159@01 $Snap)
(assert (= $t@159@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q0@160@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
(push) ; 4
; [then-branch: 46 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@120@01, 2)), $q0@160@01), 3))) | live]
; [else-branch: 46 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@120@01, 2)), $q0@160@01), 3)) | live]
(push) ; 5
; [then-branch: 46 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@120@01, 2)), $q0@160@01), 3)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@160@01) 3)))))
(pop) ; 5
(push) ; 5
; [else-branch: 46 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($self$1@120@01, 2)), $q0@160@01), 3))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@160@01) 3))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@160@01) 3)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@160@01) 3))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@160@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@160@01) 3)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@160@01) 3)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@733@11@733@421-aux|)))
(assert (forall (($q0@160@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@160@01) 3)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@160@01) 3))
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@733@11@733@421|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), -1)): Int) ==
;     722760475380740992045242976742918181534147582937316800750962)
(declare-const $t@161@01 $Snap)
(assert (= $t@161@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct) } ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int) == 722760475380740992045242976742918181534147582937316800750962)
(declare-const $q0@162@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int) == 722760475380740992045242976742918181534147582937316800750962
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
; [eval] -1
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@162@01 Int)) (!
  (=
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@162@01) (- 0 1)))
    722760475380740992045242976742918181534147582937316800750962)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) $q0@162@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@734@11@734@304|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]),
;     $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@163@01 $Snap)
(assert (= $t@163@01 $Snap.unit))
; [eval] (forall $q3: Seq[Int] :: { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q3@164@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$1, 4)
(push) ; 4
; [then-branch: 47 | !(0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$1@120@01, 4)), $q3@164@01)) | live]
; [else-branch: 47 | 0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$1@120@01, 4)), $q3@164@01) | live]
(push) ; 5
; [then-branch: 47 | !(0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$1@120@01, 4)), $q3@164@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) $q3@164@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 47 | 0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$1@120@01, 4)), $q3@164@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) $q3@164@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$1, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) $q3@164@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) $q3@164@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@164@01 Seq<Int>)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) $q3@164@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) $q3@164@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) $q3@164@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@735@11@735@345-aux|)))
(assert (forall (($q3@164@01 Seq<Int>)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) $q3@164@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) $q3@164@01)
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) $q3@164@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@735@11@735@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]),
;     $q3): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int])): Int))
(declare-const $t@165@01 $Snap)
(assert (= $t@165@01 $Snap.unit))
; [eval] (forall $q3: Seq[Int] :: { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) } ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int])): Int))
(declare-const $q3@166@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$1, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$1, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@166@01 Seq<Int>)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) $q3@166@01)
    ($map_sum<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) $q3@166@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@736@11@736@282|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 5)): Int) &&
;   ($struct_get($struct_loc($self$1, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@167@01 $Snap)
(assert (= $t@167@01 ($Snap.combine ($Snap.first $t@167@01) ($Snap.second $t@167@01))))
(assert (= ($Snap.first $t@167@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@120@01 5))))
(assert (= ($Snap.second $t@167@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@120@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 6)): Int) &&
;   ($struct_get($struct_loc($self$1, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@168@01 $Snap)
(assert (= $t@168@01 ($Snap.combine ($Snap.first $t@168@01) ($Snap.second $t@168@01))))
(assert (= ($Snap.first $t@168@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] $struct_loc($self$1, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@120@01 6))))
(assert (= ($Snap.second $t@168@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] $struct_loc($self$1, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@120@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@169@01 $Snap)
(assert (= $t@169@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q4@170@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(push) ; 4
; [then-branch: 48 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@120@01, 8)), $q4@170@01)) | live]
; [else-branch: 48 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@120@01, 8)), $q4@170@01) | live]
(push) ; 5
; [then-branch: 48 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@120@01, 8)), $q4@170@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 8)) $q4@170@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 48 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@120@01, 8)), $q4@170@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 8)) $q4@170@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 8)) $q4@170@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 8)) $q4@170@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@170@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 8)) $q4@170@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 8)) $q4@170@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 8)) $q4@170@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@739@11@739@354-aux|)))
(assert (forall (($q4@170@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 8)) $q4@170@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 8)) $q4@170@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 8)) $q4@170@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@739@11@739@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $t@171@01 $Snap)
(assert (= $t@171@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $q4@172@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@172@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 8)) $q4@172@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 8)) $q4@172@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@740@11@740@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q5: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@173@01 $Snap)
(assert (= $t@173@01 $Snap.unit))
; [eval] (forall $q5: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) && ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@174@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) && ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
(push) ; 4
; [then-branch: 49 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@120@01, 9)), $q5@174@01)) | live]
; [else-branch: 49 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@120@01, 9)), $q5@174@01) | live]
(push) ; 5
; [then-branch: 49 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@120@01, 9)), $q5@174@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 9)) $q5@174@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 49 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@120@01, 9)), $q5@174@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 9)) $q5@174@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 9)) $q5@174@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 9)) $q5@174@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@174@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 9)) $q5@174@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 9)) $q5@174@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 9)) $q5@174@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@741@11@741@354-aux|)))
(assert (forall (($q5@174@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 9)) $q5@174@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 9)) $q5@174@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 9)) $q5@174@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@741@11@741@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q5: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int))
(declare-const $t@175@01 $Snap)
(assert (= $t@175@01 $Snap.unit))
; [eval] (forall $q5: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) } ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int))
(declare-const $q5@176@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@176@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 9)) $q5@176@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 9)) $q5@176@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@742@11@742@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@177@01 $Snap)
(assert (= $t@177@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$1, -1)): Int)
; [eval] $struct_loc($self$1, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@120@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@178@01 $Snap)
(assert (= $t@178@01 ($Snap.combine ($Snap.first $t@178@01) ($Snap.second $t@178@01))))
(assert (= ($Snap.first $t@178@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@122@01 0))))
(assert (= ($Snap.second $t@178@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@122@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@179@01 $Snap)
(assert (= $t@179@01 ($Snap.combine ($Snap.first $t@179@01) ($Snap.second $t@179@01))))
(assert (= ($Snap.first $t@179@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@122@01 1))))
(assert (= ($Snap.second $t@179@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@122@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@180@01 $Snap)
(assert (= $t@180@01 ($Snap.combine ($Snap.first $t@180@01) ($Snap.second $t@180@01))))
(assert (= ($Snap.first $t@180@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@122@01 2))))
(assert (= ($Snap.second $t@180@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@122@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@181@01 $Snap)
(assert (= $t@181@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@122@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@182@01 $Snap)
(assert (= $t@182@01 ($Snap.combine ($Snap.first $t@182@01) ($Snap.second $t@182@01))))
(assert (= ($Snap.first $t@182@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@122@01 4))))
(assert (= ($Snap.second $t@182@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@122@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@183@01 $Snap)
(assert (= $t@183@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@122@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@184@01 $Snap)
(assert (= $t@184@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@185@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@185@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 8)) $a@185@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@118@01 8)) $a@185@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@120@01 8)) $a@185@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@750@11@750@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int) }
;     { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool))
(declare-const $t@186@01 $Snap)
(assert (= $t@186@01 $Snap.unit))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const q$bb@187@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 4
; [then-branch: 50 | |q$bb@187@01| == 32 | live]
; [else-branch: 50 | |q$bb@187@01| != 32 | live]
(push) ; 5
; [then-branch: 50 | |q$bb@187@01| == 32]
(assert (= (Seq_length q$bb@187@01) 32))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$1, 4)
(push) ; 6
; [then-branch: 51 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$1@120@01, 4)), q$bb@187@01) != 0 | live]
; [else-branch: 51 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$1@120@01, 4)), q$bb@187@01) == 0 | live]
(push) ; 7
; [then-branch: 51 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$1@120@01, 4)), q$bb@187@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@187@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc($self$1, 3)
(pop) ; 7
(push) ; 7
; [else-branch: 51 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$1@120@01, 4)), q$bb@187@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@187@01)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@187@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@187@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 50 | |q$bb@187@01| != 32]
(assert (not (= (Seq_length q$bb@187@01) 32)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@187@01) 32)
  (and
    (= (Seq_length q$bb@187@01) 32)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@187@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@187@01)
          0))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@187@01) 32)) (= (Seq_length q$bb@187@01) 32)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@187@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@187@01) 32)
      (and
        (= (Seq_length q$bb@187@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@187@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@187@01)
              0)))))
    (or (not (= (Seq_length q$bb@187@01) 32)) (= (Seq_length q$bb@187@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@187@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@751@11@751@405-aux|)))
(assert (forall ((q$bb@187@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@187@01) 32)
      (and
        (= (Seq_length q$bb@187@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@187@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@187@01)
              0)))))
    (or (not (= (Seq_length q$bb@187@01) 32)) (= (Seq_length q$bb@187@01) 32)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$1@120@01 3)) q$bb@187@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@751@11@751@405-aux|)))
(assert (forall ((q$bb@187@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@187@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@187@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$1@120@01 3)) q$bb@187@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@187@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$1@120@01 3)) q$bb@187@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@751@11@751@405|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 1)): Int) >=
;   ($struct_get($struct_loc($self$0, 1)): Int)
(declare-const $t@188@01 $Snap)
(assert (= $t@188@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) >= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> $self$1@120@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@118@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     q$i <= ($struct_get($struct_loc($self$0, 1)): Int) ==>
;     s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$1,
;     2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$0,
;     2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const $t@189@01 $Snap)
(assert (= $t@189@01 $Snap.unit))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($self$0, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const q$i@190@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($self$0, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 4
; [then-branch: 52 | !(0 <= q$i@190@01) | live]
; [else-branch: 52 | 0 <= q$i@190@01 | live]
(push) ; 5
; [then-branch: 52 | !(0 <= q$i@190@01)]
(assert (not (<= 0 q$i@190@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 52 | 0 <= q$i@190@01]
(assert (<= 0 q$i@190@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@190@01) (not (<= 0 q$i@190@01))))
(push) ; 4
; [then-branch: 53 | 0 <= q$i@190@01 && q$i@190@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 53 | !(0 <= q$i@190@01 && q$i@190@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 5
; [then-branch: 53 | 0 <= q$i@190@01 && q$i@190@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@190@01)
  (<=
    q$i@190@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] q$i <= ($struct_get($struct_loc($self$0, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] q$i <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(push) ; 6
; [then-branch: 54 | q$i@190@01 <= $struct_get[Int]($struct_loc[Int]($self$0@118@01, 1)) | live]
; [else-branch: 54 | !(q$i@190@01 <= $struct_get[Int]($struct_loc[Int]($self$0@118@01, 1))) | live]
(push) ; 7
; [then-branch: 54 | q$i@190@01 <= $struct_get[Int]($struct_loc[Int]($self$0@118@01, 1))]
(assert (<= q$i@190@01 ($struct_get<Int> ($struct_loc<Int> $self$0@118@01 1))))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$0, 2)
(pop) ; 7
(push) ; 7
; [else-branch: 54 | !(q$i@190@01 <= $struct_get[Int]($struct_loc[Int]($self$0@118@01, 1)))]
(assert (not (<= q$i@190@01 ($struct_get<Int> ($struct_loc<Int> $self$0@118@01 1)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (<= q$i@190@01 ($struct_get<Int> ($struct_loc<Int> $self$0@118@01 1))))
  (<= q$i@190@01 ($struct_get<Int> ($struct_loc<Int> $self$0@118@01 1)))))
(pop) ; 5
(push) ; 5
; [else-branch: 53 | !(0 <= q$i@190@01 && q$i@190@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@190@01)
    (<=
      q$i@190@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@190@01)
    (<=
      q$i@190@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@190@01)
    (<=
      q$i@190@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (<= q$i@190@01 ($struct_get<Int> ($struct_loc<Int> $self$0@118@01 1))))
      (<= q$i@190@01 ($struct_get<Int> ($struct_loc<Int> $self$0@118@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@190@01)
      (<=
        q$i@190@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@190@01)
    (<=
      q$i@190@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@190@01 Int)) (!
  (and
    (or (<= 0 q$i@190@01) (not (<= 0 q$i@190@01)))
    (=>
      (and
        (<= 0 q$i@190@01)
        (<=
          q$i@190@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@190@01)
        (<=
          q$i@190@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (<=
              q$i@190@01
              ($struct_get<Int> ($struct_loc<Int> $self$0@118@01 1))))
          (<= q$i@190@01 ($struct_get<Int> ($struct_loc<Int> $self$0@118@01 1))))))
    (or
      (not
        (and
          (<= 0 q$i@190@01)
          (<=
            q$i@190@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@190@01)
        (<=
          q$i@190@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) q$i@190@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@753@11@753@476-aux|)))
(assert (forall ((q$i@190@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@190@01)
        (<=
          q$i@190@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@190@01 ($struct_get<Int> ($struct_loc<Int> $self$0@118@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) q$i@190@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$0@118@01 2)) q$i@190@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) q$i@190@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@753@11@753@476|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int) }
;     { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const q$bb@191@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 4
; [then-branch: 55 | |q$bb@191@01| == 32 | live]
; [else-branch: 55 | |q$bb@191@01| != 32 | live]
(push) ; 5
; [then-branch: 55 | |q$bb@191@01| == 32]
(assert (= (Seq_length q$bb@191@01) 32))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($self$1, 4)
(push) ; 6
; [then-branch: 56 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$1@120@01, 4)), q$bb@191@01) != 0 | live]
; [else-branch: 56 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$1@120@01, 4)), q$bb@191@01) == 0 | live]
(push) ; 7
; [then-branch: 56 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$1@120@01, 4)), q$bb@191@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@191@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc($self$1, 3)
(pop) ; 7
(push) ; 7
; [else-branch: 56 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($self$1@120@01, 4)), q$bb@191@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@191@01)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@191@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@191@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 55 | |q$bb@191@01| != 32]
(assert (not (= (Seq_length q$bb@191@01) 32)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@191@01) 32)
  (and
    (= (Seq_length q$bb@191@01) 32)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@191@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@191@01)
          0))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@191@01) 32)) (= (Seq_length q$bb@191@01) 32)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@191@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@191@01) 32)
      (and
        (= (Seq_length q$bb@191@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@191@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@191@01)
              0)))))
    (or (not (= (Seq_length q$bb@191@01) 32)) (= (Seq_length q$bb@191@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@191@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@754@11@754@405-aux|)))
(assert (forall ((q$bb@191@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@191@01) 32)
      (and
        (= (Seq_length q$bb@191@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@191@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@191@01)
              0)))))
    (or (not (= (Seq_length q$bb@191@01) 32)) (= (Seq_length q$bb@191@01) 32)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$1@120@01 3)) q$bb@191@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@754@11@754@405-aux|)))
(push) ; 3
(assert (not (forall ((q$bb@191@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@191@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@191@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$1@120@01 3)) q$bb@191@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@191@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$1@120@01 3)) q$bb@191@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@754@11@754@405|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$bb@191@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@191@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@191@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$1@120@01 3)) q$bb@191@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $self$1@120@01 4)) q$bb@191@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> $self$1@120@01 3)) q$bb@191@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@754@11@754@405|)))
; [exec]
; assert ($struct_get($struct_loc($self$1, 1)): Int) >=
;   ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) >= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [exec]
; assert (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]),
;     q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     q$i <= ($struct_get($struct_loc($self$1, 1)): Int) ==>
;     s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$1,
;     2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$1,
;     2)): $Map[Int, $Struct]), q$i): $Struct)))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($self$1, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const q$i@192@01 Int)
(push) ; 3
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($self$1, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 4
; [then-branch: 57 | !(0 <= q$i@192@01) | live]
; [else-branch: 57 | 0 <= q$i@192@01 | live]
(push) ; 5
; [then-branch: 57 | !(0 <= q$i@192@01)]
(assert (not (<= 0 q$i@192@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 57 | 0 <= q$i@192@01]
(assert (<= 0 q$i@192@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@192@01) (not (<= 0 q$i@192@01))))
(push) ; 4
; [then-branch: 58 | 0 <= q$i@192@01 && q$i@192@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 58 | !(0 <= q$i@192@01 && q$i@192@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 5
; [then-branch: 58 | 0 <= q$i@192@01 && q$i@192@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@192@01)
  (<=
    q$i@192@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] q$i <= ($struct_get($struct_loc($self$1, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] q$i <= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(push) ; 6
; [then-branch: 59 | q$i@192@01 <= $struct_get[Int]($struct_loc[Int]($self$1@120@01, 1)) | live]
; [else-branch: 59 | !(q$i@192@01 <= $struct_get[Int]($struct_loc[Int]($self$1@120@01, 1))) | live]
(push) ; 7
; [then-branch: 59 | q$i@192@01 <= $struct_get[Int]($struct_loc[Int]($self$1@120@01, 1))]
(assert (<= q$i@192@01 ($struct_get<Int> ($struct_loc<Int> $self$1@120@01 1))))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($self$1, 2)
(pop) ; 7
(push) ; 7
; [else-branch: 59 | !(q$i@192@01 <= $struct_get[Int]($struct_loc[Int]($self$1@120@01, 1)))]
(assert (not (<= q$i@192@01 ($struct_get<Int> ($struct_loc<Int> $self$1@120@01 1)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (<= q$i@192@01 ($struct_get<Int> ($struct_loc<Int> $self$1@120@01 1))))
  (<= q$i@192@01 ($struct_get<Int> ($struct_loc<Int> $self$1@120@01 1)))))
(pop) ; 5
(push) ; 5
; [else-branch: 58 | !(0 <= q$i@192@01 && q$i@192@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@192@01)
    (<=
      q$i@192@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@192@01)
    (<=
      q$i@192@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@192@01)
    (<=
      q$i@192@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (<= q$i@192@01 ($struct_get<Int> ($struct_loc<Int> $self$1@120@01 1))))
      (<= q$i@192@01 ($struct_get<Int> ($struct_loc<Int> $self$1@120@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@192@01)
      (<=
        q$i@192@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@192@01)
    (<=
      q$i@192@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@192@01 Int)) (!
  (and
    (or (<= 0 q$i@192@01) (not (<= 0 q$i@192@01)))
    (=>
      (and
        (<= 0 q$i@192@01)
        (<=
          q$i@192@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@192@01)
        (<=
          q$i@192@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (<=
              q$i@192@01
              ($struct_get<Int> ($struct_loc<Int> $self$1@120@01 1))))
          (<= q$i@192@01 ($struct_get<Int> ($struct_loc<Int> $self$1@120@01 1))))))
    (or
      (not
        (and
          (<= 0 q$i@192@01)
          (<=
            q$i@192@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@192@01)
        (<=
          q$i@192@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) q$i@192@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@756@11@756@476-aux|)))
(push) ; 3
(assert (not (forall ((q$i@192@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@192@01)
        (<=
          q$i@192@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@192@01 ($struct_get<Int> ($struct_loc<Int> $self$1@120@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) q$i@192@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) q$i@192@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) q$i@192@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@756@11@756@476|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@192@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@192@01)
        (<=
          q$i@192@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@192@01 ($struct_get<Int> ($struct_loc<Int> $self$1@120@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) q$i@192@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) q$i@192@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $self$1@120@01 2)) q$i@192@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@756@11@756@476|)))
(pop) ; 2
(pop) ; 1
; ---------- $forced_ether_check ----------
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var self: $Struct
(declare-const self@193@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@194@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@195@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@196@01 $Map<Int~_$Struct>)
; [exec]
; var $post: Bool
(declare-const $post@197@01 Bool)
; [exec]
; var $havoc: Int
(declare-const $havoc@198@01 Int)
; [exec]
; var block: $Struct
(declare-const block@199@01 $Struct)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@200@01 $Snap)
(assert (= $t@200@01 ($Snap.combine ($Snap.first $t@200@01) ($Snap.second $t@200@01))))
(assert (= ($Snap.first $t@200@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@193@01 0))))
(assert (= ($Snap.second $t@200@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@193@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@201@01 $Snap)
(assert (= $t@201@01 ($Snap.combine ($Snap.first $t@201@01) ($Snap.second $t@201@01))))
(assert (= ($Snap.first $t@201@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@193@01 1))))
(assert (= ($Snap.second $t@201@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@193@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 0)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 0)): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@202@01 $Snap)
(assert (= $t@202@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@203@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(push) ; 4
; [then-branch: 60 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@193@01, 2)), $q0@203@01), 0))) | live]
; [else-branch: 60 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@193@01, 2)), $q0@203@01), 0)) | live]
(push) ; 5
; [then-branch: 60 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@193@01, 2)), $q0@203@01), 0)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@203@01) 0)))))
(pop) ; 5
(push) ; 5
; [else-branch: 60 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@193@01, 2)), $q0@203@01), 0))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@203@01) 0))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@203@01) 0)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@203@01) 0))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@203@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@203@01) 0)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@203@01) 0)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@203@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@770@11@770@441-aux|)))
(assert (forall (($q0@203@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@203@01) 0)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@203@01) 0))
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@203@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@770@11@770@441|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) }
;     |($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 1)): Seq[Int])| ==
;     32)
(declare-const $t@204@01 $Snap)
(assert (= $t@204@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) } |($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| == 32)
(declare-const $q0@205@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@205@01 Int)) (!
  (=
    (Seq_length
      ($struct_get<Seq<Int>> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@205@01) 1)))
    32)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@205@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@771@11@771@246|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 2)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 2)): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@206@01 $Snap)
(assert (= $t@206@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q0@207@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(push) ; 4
; [then-branch: 61 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@193@01, 2)), $q0@207@01), 2))) | live]
; [else-branch: 61 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@193@01, 2)), $q0@207@01), 2)) | live]
(push) ; 5
; [then-branch: 61 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@193@01, 2)), $q0@207@01), 2)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@207@01) 2)))))
(pop) ; 5
(push) ; 5
; [else-branch: 61 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@193@01, 2)), $q0@207@01), 2))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@207@01) 2))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@207@01) 2)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@207@01) 2))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@207@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@207@01) 2)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@207@01) 2)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@207@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@772@11@772@412-aux|)))
(assert (forall (($q0@207@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@207@01) 2)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@207@01) 2))
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@207@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@772@11@772@412|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 3)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 3)): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@208@01 $Snap)
(assert (= $t@208@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q0@209@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(push) ; 4
; [then-branch: 62 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@193@01, 2)), $q0@209@01), 3))) | live]
; [else-branch: 62 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@193@01, 2)), $q0@209@01), 3)) | live]
(push) ; 5
; [then-branch: 62 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@193@01, 2)), $q0@209@01), 3)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@209@01) 3)))))
(pop) ; 5
(push) ; 5
; [else-branch: 62 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@193@01, 2)), $q0@209@01), 3))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@209@01) 3))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@209@01) 3)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@209@01) 3))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@209@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@209@01) 3)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@209@01) 3)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@209@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@773@11@773@412-aux|)))
(assert (forall (($q0@209@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@209@01) 3)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@209@01) 3))
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@209@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@773@11@773@412|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) }
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), -1)): Int) ==
;     722760475380740992045242976742918181534147582937316800750962)
(declare-const $t@210@01 $Snap)
(assert (= $t@210@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) } ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int) == 722760475380740992045242976742918181534147582937316800750962)
(declare-const $q0@211@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int) == 722760475380740992045242976742918181534147582937316800750962
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] -1
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@211@01 Int)) (!
  (=
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@211@01) (- 0 1)))
    722760475380740992045242976742918181534147582937316800750962)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) $q0@211@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@774@11@774@298|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@212@01 $Snap)
(assert (= $t@212@01 $Snap.unit))
; [eval] (forall $q3: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q3@213@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(push) ; 4
; [then-branch: 63 | !(0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@193@01, 4)), $q3@213@01)) | live]
; [else-branch: 63 | 0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@193@01, 4)), $q3@213@01) | live]
(push) ; 5
; [then-branch: 63 | !(0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@193@01, 4)), $q3@213@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) $q3@213@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 63 | 0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@193@01, 4)), $q3@213@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) $q3@213@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) $q3@213@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) $q3@213@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@213@01 Seq<Int>)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) $q3@213@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) $q3@213@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) $q3@213@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@775@11@775@336-aux|)))
(assert (forall (($q3@213@01 Seq<Int>)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) $q3@213@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) $q3@213@01)
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) $q3@213@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@775@11@775@336|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])): Int))
(declare-const $t@214@01 $Snap)
(assert (= $t@214@01 $Snap.unit))
; [eval] (forall $q3: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])): Int))
(declare-const $q3@215@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@215@01 Seq<Int>)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) $q3@215@01)
    ($map_sum<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) $q3@215@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@776@11@776@273|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@216@01 $Snap)
(assert (= $t@216@01 ($Snap.combine ($Snap.first $t@216@01) ($Snap.second $t@216@01))))
(assert (= ($Snap.first $t@216@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@193@01 5))))
(assert (= ($Snap.second $t@216@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@193@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@217@01 $Snap)
(assert (= $t@217@01 ($Snap.combine ($Snap.first $t@217@01) ($Snap.second $t@217@01))))
(assert (= ($Snap.first $t@217@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@193@01 6))))
(assert (= ($Snap.second $t@217@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@193@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@218@01 $Snap)
(assert (= $t@218@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q4@219@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 64 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@193@01, 8)), $q4@219@01)) | live]
; [else-branch: 64 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@193@01, 8)), $q4@219@01) | live]
(push) ; 5
; [then-branch: 64 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@193@01, 8)), $q4@219@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 8)) $q4@219@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 64 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@193@01, 8)), $q4@219@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 8)) $q4@219@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 8)) $q4@219@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 8)) $q4@219@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@219@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 8)) $q4@219@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 8)) $q4@219@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 8)) $q4@219@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@779@11@779@345-aux|)))
(assert (forall (($q4@219@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 8)) $q4@219@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 8)) $q4@219@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 8)) $q4@219@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@779@11@779@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@220@01 $Snap)
(assert (= $t@220@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q4@221@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@221@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 8)) $q4@221@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 8)) $q4@221@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@780@11@780@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q5: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@222@01 $Snap)
(assert (= $t@222@01 $Snap.unit))
; [eval] (forall $q5: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@223@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 65 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@193@01, 9)), $q5@223@01)) | live]
; [else-branch: 65 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@193@01, 9)), $q5@223@01) | live]
(push) ; 5
; [then-branch: 65 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@193@01, 9)), $q5@223@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 9)) $q5@223@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 65 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@193@01, 9)), $q5@223@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 9)) $q5@223@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 9)) $q5@223@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 9)) $q5@223@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@223@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 9)) $q5@223@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 9)) $q5@223@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 9)) $q5@223@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@781@11@781@345-aux|)))
(assert (forall (($q5@223@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 9)) $q5@223@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 9)) $q5@223@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 9)) $q5@223@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@781@11@781@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q5: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@224@01 $Snap)
(assert (= $t@224@01 $Snap.unit))
; [eval] (forall $q5: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q5@225@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@225@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 9)) $q5@225@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@193@01 9)) $q5@225@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@782@11@782@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@226@01 $Snap)
(assert (= $t@226@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@193@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 0)): Int) &&
;   ($struct_get($struct_loc($pre_self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@227@01 $Snap)
(assert (= $t@227@01 ($Snap.combine ($Snap.first $t@227@01) ($Snap.second $t@227@01))))
(assert (= ($Snap.first $t@227@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@195@01 0))))
(assert (= ($Snap.second $t@227@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@195@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 1)): Int) &&
;   ($struct_get($struct_loc($pre_self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@228@01 $Snap)
(assert (= $t@228@01 ($Snap.combine ($Snap.first $t@228@01) ($Snap.second $t@228@01))))
(assert (= ($Snap.first $t@228@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@195@01 1))))
(assert (= ($Snap.second $t@228@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@195@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 0)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 0)): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@229@01 $Snap)
(assert (= $t@229@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@230@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($pre_self, 2)
(push) ; 4
; [then-branch: 66 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($pre_self@195@01, 2)), $q0@230@01), 0))) | live]
; [else-branch: 66 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($pre_self@195@01, 2)), $q0@230@01), 0)) | live]
(push) ; 5
; [then-branch: 66 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($pre_self@195@01, 2)), $q0@230@01), 0)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@230@01) 0)))))
(pop) ; 5
(push) ; 5
; [else-branch: 66 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($pre_self@195@01, 2)), $q0@230@01), 0))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@230@01) 0))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($pre_self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@230@01) 0)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@230@01) 0))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@230@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@230@01) 0)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@230@01) 0)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@230@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@786@11@786@456-aux|)))
(assert (forall (($q0@230@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@230@01) 0)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@230@01) 0))
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@230@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@786@11@786@456|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self,
;     2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| ==
;     32)
(declare-const $t@231@01 $Snap)
(assert (= $t@231@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct) } |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| == 32)
(declare-const $q0@232@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($pre_self, 2)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@232@01 Int)) (!
  (=
    (Seq_length
      ($struct_get<Seq<Int>> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@232@01) 1)))
    32)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@232@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@787@11@787@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 2)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 2)): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@233@01 $Snap)
(assert (= $t@233@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q0@234@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($pre_self, 2)
(push) ; 4
; [then-branch: 67 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($pre_self@195@01, 2)), $q0@234@01), 2))) | live]
; [else-branch: 67 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($pre_self@195@01, 2)), $q0@234@01), 2)) | live]
(push) ; 5
; [then-branch: 67 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($pre_self@195@01, 2)), $q0@234@01), 2)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@234@01) 2)))))
(pop) ; 5
(push) ; 5
; [else-branch: 67 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($pre_self@195@01, 2)), $q0@234@01), 2))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@234@01) 2))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($pre_self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@234@01) 2)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@234@01) 2))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@234@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@234@01) 2)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@234@01) 2)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@234@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@788@11@788@427-aux|)))
(assert (forall (($q0@234@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@234@01) 2)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@234@01) 2))
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@234@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@788@11@788@427|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 3)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 3)): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@235@01 $Snap)
(assert (= $t@235@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q0@236@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($pre_self, 2)
(push) ; 4
; [then-branch: 68 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($pre_self@195@01, 2)), $q0@236@01), 3))) | live]
; [else-branch: 68 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($pre_self@195@01, 2)), $q0@236@01), 3)) | live]
(push) ; 5
; [then-branch: 68 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($pre_self@195@01, 2)), $q0@236@01), 3)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@236@01) 3)))))
(pop) ; 5
(push) ; 5
; [else-branch: 68 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int]($pre_self@195@01, 2)), $q0@236@01), 3))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@236@01) 3))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($pre_self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@236@01) 3)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@236@01) 3))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@236@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@236@01) 3)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@236@01) 3)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@236@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@789@11@789@427-aux|)))
(assert (forall (($q0@236@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@236@01) 3)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@236@01) 3))
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@236@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@789@11@789@427|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct) }
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), -1)): Int) ==
;     722760475380740992045242976742918181534147582937316800750962)
(declare-const $t@237@01 $Snap)
(assert (= $t@237@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct) } ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int) == 722760475380740992045242976742918181534147582937316800750962)
(declare-const $q0@238@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int) == 722760475380740992045242976742918181534147582937316800750962
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc($pre_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($pre_self, 2)
; [eval] -1
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@238@01 Int)) (!
  (=
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@238@01) (- 0 1)))
    722760475380740992045242976742918181534147582937316800750962)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> $pre_self@195@01 2)) $q0@238@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@790@11@790@308|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int]),
;     $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int]),
;     $q3): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int]),
;     $q3): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@239@01 $Snap)
(assert (= $t@239@01 $Snap.unit))
; [eval] (forall $q3: Seq[Int] :: { ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q3@240@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($pre_self, 4)
(push) ; 4
; [then-branch: 69 | !(0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($pre_self@195@01, 4)), $q3@240@01)) | live]
; [else-branch: 69 | 0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($pre_self@195@01, 4)), $q3@240@01) | live]
(push) ; 5
; [then-branch: 69 | !(0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($pre_self@195@01, 4)), $q3@240@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $pre_self@195@01 4)) $q3@240@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 69 | 0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int]($pre_self@195@01, 4)), $q3@240@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $pre_self@195@01 4)) $q3@240@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($pre_self, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $pre_self@195@01 4)) $q3@240@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $pre_self@195@01 4)) $q3@240@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@240@01 Seq<Int>)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $pre_self@195@01 4)) $q3@240@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $pre_self@195@01 4)) $q3@240@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $pre_self@195@01 4)) $q3@240@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@791@11@791@351-aux|)))
(assert (forall (($q3@240@01 Seq<Int>)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $pre_self@195@01 4)) $q3@240@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $pre_self@195@01 4)) $q3@240@01)
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $pre_self@195@01 4)) $q3@240@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@791@11@791@351|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int]),
;     $q3): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int]),
;     $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int])): Int))
(declare-const $t@241@01 $Snap)
(assert (= $t@241@01 $Snap.unit))
; [eval] (forall $q3: Seq[Int] :: { ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int]), $q3): Int) } ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int])): Int))
(declare-const $q3@242@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($pre_self, 4)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($pre_self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@242@01 Seq<Int>)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $pre_self@195@01 4)) $q3@242@01)
    ($map_sum<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $pre_self@195@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> $pre_self@195@01 4)) $q3@242@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@792@11@792@288|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 5)): Int) &&
;   ($struct_get($struct_loc($pre_self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@243@01 $Snap)
(assert (= $t@243@01 ($Snap.combine ($Snap.first $t@243@01) ($Snap.second $t@243@01))))
(assert (= ($Snap.first $t@243@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 5)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 5)): Int)
; [eval] $struct_loc($pre_self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@195@01 5))))
(assert (= ($Snap.second $t@243@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 5)): Int)
; [eval] $struct_loc($pre_self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@195@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($pre_self, 6)): Int) &&
;   ($struct_get($struct_loc($pre_self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@244@01 $Snap)
(assert (= $t@244@01 ($Snap.combine ($Snap.first $t@244@01) ($Snap.second $t@244@01))))
(assert (= ($Snap.first $t@244@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($pre_self, 6)): Int)
; [eval] $struct_loc($pre_self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $pre_self@195@01 6))))
(assert (= ($Snap.second $t@244@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($pre_self, 6)): Int)
; [eval] $struct_loc($pre_self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@195@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q4): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q4): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q4): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@245@01 $Snap)
(assert (= $t@245@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q4): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q4): Int) && ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q4@246@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q4): Int) && ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(push) ; 4
; [then-branch: 70 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@195@01, 8)), $q4@246@01)) | live]
; [else-branch: 70 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@195@01, 8)), $q4@246@01) | live]
(push) ; 5
; [then-branch: 70 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@195@01, 8)), $q4@246@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 8)) $q4@246@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 70 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@195@01, 8)), $q4@246@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 8)) $q4@246@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 8)) $q4@246@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 8)) $q4@246@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@246@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 8)) $q4@246@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 8)) $q4@246@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 8)) $q4@246@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@795@11@795@360-aux|)))
(assert (forall (($q4@246@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 8)) $q4@246@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 8)) $q4@246@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 8)) $q4@246@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@795@11@795@360|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q4): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q4): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int))
(declare-const $t@247@01 $Snap)
(assert (= $t@247@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q4): Int) } ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q4): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int))
(declare-const $q4@248@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q4): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@248@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 8)) $q4@248@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 8)) $q4@248@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@796@11@796@268|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q5: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q5): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q5): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q5): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@249@01 $Snap)
(assert (= $t@249@01 $Snap.unit))
; [eval] (forall $q5: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q5): Int) && ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@250@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q5): Int) && ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 9)
(push) ; 4
; [then-branch: 71 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@195@01, 9)), $q5@250@01)) | live]
; [else-branch: 71 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@195@01, 9)), $q5@250@01) | live]
(push) ; 5
; [then-branch: 71 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@195@01, 9)), $q5@250@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 9)) $q5@250@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 71 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@195@01, 9)), $q5@250@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 9)) $q5@250@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 9)) $q5@250@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 9)) $q5@250@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@250@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 9)) $q5@250@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 9)) $q5@250@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 9)) $q5@250@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@797@11@797@360-aux|)))
(assert (forall (($q5@250@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 9)) $q5@250@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 9)) $q5@250@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 9)) $q5@250@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@797@11@797@360|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q5: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q5): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q5): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])): Int))
(declare-const $t@251@01 $Snap)
(assert (= $t@251@01 $Snap.unit))
; [eval] (forall $q5: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q5): Int) } ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q5): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])): Int))
(declare-const $q5@252@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q5): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 9)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@252@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 9)) $q5@252@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@195@01 9)) $q5@252@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@798@11@798@268|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($pre_self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@253@01 $Snap)
(assert (= $t@253@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($pre_self, -1)): Int)
; [eval] $struct_loc($pre_self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@195@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@254@01 $Snap)
(assert (= $t@254@01 ($Snap.combine ($Snap.first $t@254@01) ($Snap.second $t@254@01))))
(assert (= ($Snap.first $t@254@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@199@01 0))))
(assert (= ($Snap.second $t@254@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@199@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@255@01 $Snap)
(assert (= $t@255@01 ($Snap.combine ($Snap.first $t@255@01) ($Snap.second $t@255@01))))
(assert (= ($Snap.first $t@255@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@199@01 1))))
(assert (= ($Snap.second $t@255@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@199@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@256@01 $Snap)
(assert (= $t@256@01 ($Snap.combine ($Snap.first $t@256@01) ($Snap.second $t@256@01))))
(assert (= ($Snap.first $t@256@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@199@01 2))))
(assert (= ($Snap.second $t@256@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@199@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@257@01 $Snap)
(assert (= $t@257@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@199@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@258@01 $Snap)
(assert (= $t@258@01 ($Snap.combine ($Snap.first $t@258@01) ($Snap.second $t@258@01))))
(assert (= ($Snap.first $t@258@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@199@01 4))))
(assert (= ($Snap.second $t@258@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@199@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@259@01 $Snap)
(assert (= $t@259@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@199@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale $havoc >= 0
(declare-const $t@260@01 $Snap)
(assert (= $t@260@01 $Snap.unit))
; [eval] $havoc >= 0
(assert (>= $havoc@198@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@261@01 $Snap)
(assert (= $t@261@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@262@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const $t@263@01 $Snap)
(assert (= $t@263@01 $Snap.unit))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const q$bb@264@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 4
; [then-branch: 72 | |q$bb@264@01| == 32 | live]
; [else-branch: 72 | |q$bb@264@01| != 32 | live]
(push) ; 5
; [then-branch: 72 | |q$bb@264@01| == 32]
(assert (= (Seq_length q$bb@264@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(push) ; 6
; [then-branch: 73 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@193@01, 4)), q$bb@264@01) != 0 | live]
; [else-branch: 73 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@193@01, 4)), q$bb@264@01) == 0 | live]
(push) ; 7
; [then-branch: 73 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@193@01, 4)), q$bb@264@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) q$bb@264@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc(self, 3)
(pop) ; 7
(push) ; 7
; [else-branch: 73 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@193@01, 4)), q$bb@264@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) q$bb@264@01)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) q$bb@264@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) q$bb@264@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 72 | |q$bb@264@01| != 32]
(assert (not (= (Seq_length q$bb@264@01) 32)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@264@01) 32)
  (and
    (= (Seq_length q$bb@264@01) 32)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) q$bb@264@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) q$bb@264@01)
          0))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@264@01) 32)) (= (Seq_length q$bb@264@01) 32)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@264@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@264@01) 32)
      (and
        (= (Seq_length q$bb@264@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) q$bb@264@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) q$bb@264@01)
              0)))))
    (or (not (= (Seq_length q$bb@264@01) 32)) (= (Seq_length q$bb@264@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) q$bb@264@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@808@11@808@393-aux|)))
(assert (forall ((q$bb@264@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@264@01) 32)
      (and
        (= (Seq_length q$bb@264@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) q$bb@264@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) q$bb@264@01)
              0)))))
    (or (not (= (Seq_length q$bb@264@01) 32)) (= (Seq_length q$bb@264@01) 32)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@193@01 3)) q$bb@264@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@808@11@808@393-aux|)))
(assert (forall ((q$bb@264@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@264@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) q$bb@264@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@193@01 3)) q$bb@264@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@193@01 4)) q$bb@264@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@193@01 3)) q$bb@264@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@808@11@808@393|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) >=
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@265@01 $Snap)
(assert (= $t@265@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) >= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     q$i <= ($struct_get($struct_loc(self, 1)): Int) ==>
;     s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)))
(declare-const $t@266@01 $Snap)
(assert (= $t@266@01 $Snap.unit))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc(self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const q$i@267@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc(self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 4
; [then-branch: 74 | !(0 <= q$i@267@01) | live]
; [else-branch: 74 | 0 <= q$i@267@01 | live]
(push) ; 5
; [then-branch: 74 | !(0 <= q$i@267@01)]
(assert (not (<= 0 q$i@267@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 74 | 0 <= q$i@267@01]
(assert (<= 0 q$i@267@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@267@01) (not (<= 0 q$i@267@01))))
(push) ; 4
; [then-branch: 75 | 0 <= q$i@267@01 && q$i@267@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 75 | !(0 <= q$i@267@01 && q$i@267@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 5
; [then-branch: 75 | 0 <= q$i@267@01 && q$i@267@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@267@01)
  (<=
    q$i@267@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] q$i <= ($struct_get($struct_loc(self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] q$i <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 6
; [then-branch: 76 | q$i@267@01 <= $struct_get[Int]($struct_loc[Int](self@193@01, 1)) | live]
; [else-branch: 76 | !(q$i@267@01 <= $struct_get[Int]($struct_loc[Int](self@193@01, 1))) | live]
(push) ; 7
; [then-branch: 76 | q$i@267@01 <= $struct_get[Int]($struct_loc[Int](self@193@01, 1))]
(assert (<= q$i@267@01 ($struct_get<Int> ($struct_loc<Int> self@193@01 1))))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(pop) ; 7
(push) ; 7
; [else-branch: 76 | !(q$i@267@01 <= $struct_get[Int]($struct_loc[Int](self@193@01, 1)))]
(assert (not (<= q$i@267@01 ($struct_get<Int> ($struct_loc<Int> self@193@01 1)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (<= q$i@267@01 ($struct_get<Int> ($struct_loc<Int> self@193@01 1))))
  (<= q$i@267@01 ($struct_get<Int> ($struct_loc<Int> self@193@01 1)))))
(pop) ; 5
(push) ; 5
; [else-branch: 75 | !(0 <= q$i@267@01 && q$i@267@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@267@01)
    (<=
      q$i@267@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@267@01)
    (<=
      q$i@267@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@267@01)
    (<=
      q$i@267@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not (<= q$i@267@01 ($struct_get<Int> ($struct_loc<Int> self@193@01 1))))
      (<= q$i@267@01 ($struct_get<Int> ($struct_loc<Int> self@193@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@267@01)
      (<=
        q$i@267@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@267@01)
    (<=
      q$i@267@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@267@01 Int)) (!
  (and
    (or (<= 0 q$i@267@01) (not (<= 0 q$i@267@01)))
    (=>
      (and
        (<= 0 q$i@267@01)
        (<=
          q$i@267@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@267@01)
        (<=
          q$i@267@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (<= q$i@267@01 ($struct_get<Int> ($struct_loc<Int> self@193@01 1))))
          (<= q$i@267@01 ($struct_get<Int> ($struct_loc<Int> self@193@01 1))))))
    (or
      (not
        (and
          (<= 0 q$i@267@01)
          (<=
            q$i@267@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@267@01)
        (<=
          q$i@267@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) q$i@267@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@810@11@810@464-aux|)))
(assert (forall ((q$i@267@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@267@01)
        (<=
          q$i@267@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@267@01 ($struct_get<Int> ($struct_loc<Int> self@193@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) q$i@267@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) q$i@267@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@193@01 2)) q$i@267@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@810@11@810@464|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   $havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + $havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + $havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@268@01 $Struct)
(assert (=
  self@268@01
  ($struct_set<$Struct> self@193@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@193@01 5))
    $havoc@198@01))))
(pop) ; 2
(pop) ; 1
; ---------- f$__init__ ----------
(declare-const $succ@269@01 Bool)
(declare-const $succ@270@01 Bool)
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@271@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@272@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@273@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@274@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@275@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@276@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@277@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@278@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@279@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@280@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@281@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@282@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@283@01 Bool)
; [exec]
; var $first_public_state: Bool
(declare-const $first_public_state@284@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@285@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@286@01 Bool)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@287@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@288@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@289@01 $Snap)
(assert (= $t@289@01 ($Snap.combine ($Snap.first $t@289@01) ($Snap.second $t@289@01))))
(assert (= ($Snap.first $t@289@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@275@01 0))))
(assert (= ($Snap.second $t@289@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@275@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@290@01 $Snap)
(assert (= $t@290@01 ($Snap.combine ($Snap.first $t@290@01) ($Snap.second $t@290@01))))
(assert (= ($Snap.first $t@290@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@275@01 1))))
(assert (= ($Snap.second $t@290@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@275@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 0)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 0)): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@291@01 $Snap)
(assert (= $t@291@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@292@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(push) ; 4
; [then-branch: 77 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@275@01, 2)), $q0@292@01), 0))) | live]
; [else-branch: 77 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@275@01, 2)), $q0@292@01), 0)) | live]
(push) ; 5
; [then-branch: 77 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@275@01, 2)), $q0@292@01), 0)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@292@01) 0)))))
(pop) ; 5
(push) ; 5
; [else-branch: 77 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@275@01, 2)), $q0@292@01), 0))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@292@01) 0))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@292@01) 0)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@292@01) 0))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@292@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@292@01) 0)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@292@01) 0)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@292@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@840@11@840@441-aux|)))
(assert (forall (($q0@292@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@292@01) 0)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@292@01) 0))
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@292@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@840@11@840@441|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) }
;     |($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 1)): Seq[Int])| ==
;     32)
(declare-const $t@293@01 $Snap)
(assert (= $t@293@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) } |($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| == 32)
(declare-const $q0@294@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@294@01 Int)) (!
  (=
    (Seq_length
      ($struct_get<Seq<Int>> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@294@01) 1)))
    32)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@294@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@841@11@841@246|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 2)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 2)): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@295@01 $Snap)
(assert (= $t@295@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q0@296@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(push) ; 4
; [then-branch: 78 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@275@01, 2)), $q0@296@01), 2))) | live]
; [else-branch: 78 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@275@01, 2)), $q0@296@01), 2)) | live]
(push) ; 5
; [then-branch: 78 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@275@01, 2)), $q0@296@01), 2)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@296@01) 2)))))
(pop) ; 5
(push) ; 5
; [else-branch: 78 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@275@01, 2)), $q0@296@01), 2))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@296@01) 2))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@296@01) 2)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@296@01) 2))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@296@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@296@01) 2)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@296@01) 2)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@296@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@842@11@842@412-aux|)))
(assert (forall (($q0@296@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@296@01) 2)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@296@01) 2))
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@296@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@842@11@842@412|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 3)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 3)): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@297@01 $Snap)
(assert (= $t@297@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q0@298@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(push) ; 4
; [then-branch: 79 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@275@01, 2)), $q0@298@01), 3))) | live]
; [else-branch: 79 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@275@01, 2)), $q0@298@01), 3)) | live]
(push) ; 5
; [then-branch: 79 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@275@01, 2)), $q0@298@01), 3)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@298@01) 3)))))
(pop) ; 5
(push) ; 5
; [else-branch: 79 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@275@01, 2)), $q0@298@01), 3))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@298@01) 3))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@298@01) 3)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@298@01) 3))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@298@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@298@01) 3)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@298@01) 3)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@298@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@843@11@843@412-aux|)))
(assert (forall (($q0@298@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@298@01) 3)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@298@01) 3))
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@298@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@843@11@843@412|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) }
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), -1)): Int) ==
;     722760475380740992045242976742918181534147582937316800750962)
(declare-const $t@299@01 $Snap)
(assert (= $t@299@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) } ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int) == 722760475380740992045242976742918181534147582937316800750962)
(declare-const $q0@300@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int) == 722760475380740992045242976742918181534147582937316800750962
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] -1
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@300@01 Int)) (!
  (=
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@300@01) (- 0 1)))
    722760475380740992045242976742918181534147582937316800750962)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@275@01 2)) $q0@300@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@844@11@844@298|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@301@01 $Snap)
(assert (= $t@301@01 $Snap.unit))
; [eval] (forall $q3: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q3@302@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(push) ; 4
; [then-branch: 80 | !(0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@275@01, 4)), $q3@302@01)) | live]
; [else-branch: 80 | 0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@275@01, 4)), $q3@302@01) | live]
(push) ; 5
; [then-branch: 80 | !(0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@275@01, 4)), $q3@302@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@275@01 4)) $q3@302@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 80 | 0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@275@01, 4)), $q3@302@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@275@01 4)) $q3@302@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@275@01 4)) $q3@302@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@275@01 4)) $q3@302@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@302@01 Seq<Int>)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@275@01 4)) $q3@302@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@275@01 4)) $q3@302@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@275@01 4)) $q3@302@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@845@11@845@336-aux|)))
(assert (forall (($q3@302@01 Seq<Int>)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@275@01 4)) $q3@302@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@275@01 4)) $q3@302@01)
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@275@01 4)) $q3@302@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@845@11@845@336|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])): Int))
(declare-const $t@303@01 $Snap)
(assert (= $t@303@01 $Snap.unit))
; [eval] (forall $q3: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])): Int))
(declare-const $q3@304@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@304@01 Seq<Int>)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@275@01 4)) $q3@304@01)
    ($map_sum<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@275@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@275@01 4)) $q3@304@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@846@11@846@273|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@305@01 $Snap)
(assert (= $t@305@01 ($Snap.combine ($Snap.first $t@305@01) ($Snap.second $t@305@01))))
(assert (= ($Snap.first $t@305@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@275@01 5))))
(assert (= ($Snap.second $t@305@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@275@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@306@01 $Snap)
(assert (= $t@306@01 ($Snap.combine ($Snap.first $t@306@01) ($Snap.second $t@306@01))))
(assert (= ($Snap.first $t@306@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@275@01 6))))
(assert (= ($Snap.second $t@306@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@275@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@307@01 $Snap)
(assert (= $t@307@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q4@308@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 81 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@275@01, 8)), $q4@308@01)) | live]
; [else-branch: 81 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@275@01, 8)), $q4@308@01) | live]
(push) ; 5
; [then-branch: 81 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@275@01, 8)), $q4@308@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q4@308@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 81 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@275@01, 8)), $q4@308@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q4@308@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q4@308@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q4@308@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@308@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q4@308@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q4@308@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q4@308@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@849@11@849@345-aux|)))
(assert (forall (($q4@308@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q4@308@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q4@308@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q4@308@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@849@11@849@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@309@01 $Snap)
(assert (= $t@309@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q4@310@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@310@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q4@310@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 8)) $q4@310@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@850@11@850@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q5: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@311@01 $Snap)
(assert (= $t@311@01 $Snap.unit))
; [eval] (forall $q5: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@312@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 82 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@275@01, 9)), $q5@312@01)) | live]
; [else-branch: 82 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@275@01, 9)), $q5@312@01) | live]
(push) ; 5
; [then-branch: 82 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@275@01, 9)), $q5@312@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 9)) $q5@312@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 82 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@275@01, 9)), $q5@312@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 9)) $q5@312@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 9)) $q5@312@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 9)) $q5@312@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@312@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 9)) $q5@312@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 9)) $q5@312@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 9)) $q5@312@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@851@11@851@345-aux|)))
(assert (forall (($q5@312@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 9)) $q5@312@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 9)) $q5@312@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 9)) $q5@312@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@851@11@851@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q5: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@313@01 $Snap)
(assert (= $t@313@01 $Snap.unit))
; [eval] (forall $q5: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q5@314@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@314@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 9)) $q5@314@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@275@01 9)) $q5@314@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@852@11@852@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@315@01 $Snap)
(assert (= $t@315@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@275@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@316@01 $Snap)
(assert (= $t@316@01 ($Snap.combine ($Snap.first $t@316@01) ($Snap.second $t@316@01))))
(assert (= ($Snap.first $t@316@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@316@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@317@01 $Snap)
(assert (= $t@317@01 ($Snap.combine ($Snap.first $t@317@01) ($Snap.second $t@317@01))))
(assert (= ($Snap.first $t@317@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@272@01 0))))
(assert (= ($Snap.second $t@317@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@272@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@318@01 $Snap)
(assert (= $t@318@01 ($Snap.combine ($Snap.first $t@318@01) ($Snap.second $t@318@01))))
(assert (= ($Snap.first $t@318@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@272@01 1))))
(assert (= ($Snap.second $t@318@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@272@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@319@01 $Snap)
(assert (= $t@319@01 ($Snap.combine ($Snap.first $t@319@01) ($Snap.second $t@319@01))))
(assert (= ($Snap.first $t@319@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@272@01 2))))
(assert (= ($Snap.second $t@319@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@272@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@320@01 $Snap)
(assert (= $t@320@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@272@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@321@01 $Snap)
(assert (= $t@321@01 ($Snap.combine ($Snap.first $t@321@01) ($Snap.second $t@321@01))))
(assert (= ($Snap.first $t@321@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@272@01 4))))
(assert (= ($Snap.second $t@321@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@272@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@322@01 $Snap)
(assert (= $t@322@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@272@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@323@01 $Snap)
(assert (= $t@323@01 ($Snap.combine ($Snap.first $t@323@01) ($Snap.second $t@323@01))))
(assert (= ($Snap.first $t@323@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@271@01 0))))
(assert (= ($Snap.second $t@323@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@271@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@324@01 $Snap)
(assert (= $t@324@01 ($Snap.combine ($Snap.first $t@324@01) ($Snap.second $t@324@01))))
(assert (= ($Snap.first $t@324@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@271@01 1))))
(assert (= ($Snap.second $t@324@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@271@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@325@01 $Snap)
(assert (= $t@325@01 ($Snap.combine ($Snap.first $t@325@01) ($Snap.second $t@325@01))))
(assert (= ($Snap.first $t@325@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@271@01 2))))
(assert (= ($Snap.second $t@325@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@271@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@326@01 $Snap)
(assert (= $t@326@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@271@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@327@01 $Snap)
(assert (= $t@327@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@271@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; $first_public_state := true
; [exec]
; self := s$struct$self$init(0, 0, ($map_init(s$struct$DocumentTransfer$init(0,
;   ($array_init(0, 32): Seq[Int]), 0, 0)): $Map[Int, $Struct]), ($map_init(false): $Map[Seq[Int], Bool]),
;   ($map_init(0): $Map[Seq[Int], Int]), 0, 0, false, ($map_init(0): $Map[Int, Int]),
;   ($map_init(0): $Map[Int, Int]), false)
; [eval] s$struct$self$init(0, 0, ($map_init(s$struct$DocumentTransfer$init(0, ($array_init(0, 32): Seq[Int]), 0, 0)): $Map[Int, $Struct]), ($map_init(false): $Map[Seq[Int], Bool]), ($map_init(0): $Map[Seq[Int], Int]), 0, 0, false, ($map_init(0): $Map[Int, Int]), ($map_init(0): $Map[Int, Int]), false)
; [eval] ($map_init(s$struct$DocumentTransfer$init(0, ($array_init(0, 32): Seq[Int]), 0, 0)): $Map[Int, $Struct])
; [eval] s$struct$DocumentTransfer$init(0, ($array_init(0, 32): Seq[Int]), 0, 0)
; [eval] ($array_init(0, 32): Seq[Int])
; [eval] ($map_init(false): $Map[Seq[Int], Bool])
; [eval] ($map_init(0): $Map[Seq[Int], Int])
; [eval] ($map_init(0): $Map[Int, Int])
; [eval] ($map_init(0): $Map[Int, Int])
(declare-const self@328@01 $Struct)
(assert (=
  self@328@01
  (s$struct$self$init<$Struct> 0 0 ($map_init<$Map<Int~_$Struct>> (s$struct$DocumentTransfer$init<$Struct> 0 ($array_init<Seq<Int>> 0 32) 0 0)) ($map_init<$Map<Seq<Int>~_Bool>> false) ($map_init<$Map<Seq<Int>~_Int>> 0) 0 0 false ($map_init<$Map<Int~_Int>> 0) ($map_init<$Map<Int~_Int>> 0) false)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@329@01 $Snap)
(assert (= $t@329@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@285@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@330@01 $Struct)
(assert (=
  self@330@01
  ($struct_set<$Struct> self@328@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@328@01 5))
    l$havoc@285@01))))
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@331@01 $Snap)
(assert (= $t@331@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@271@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(msg, 0)): Int)): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(msg, 0)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const self@332@01 $Struct)
(assert (=
  self@332@01
  ($struct_set<$Struct> self@330@01 0 ($struct_get<Int> ($struct_loc<Int> msg@271@01 0)))))
; [exec]
; label return
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@286@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@286@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 83 | $out_of_gas@286@01 | live]
; [else-branch: 83 | !($out_of_gas@286@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 83 | $out_of_gas@286@01]
(assert $out_of_gas@286@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 84 | True | live]
; [else-branch: 84 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 84 | True]
; [exec]
; $old_self := self
; [then-branch: 85 | False | dead]
; [else-branch: 85 | True | live]
(push) ; 5
; [else-branch: 85 | True]
(pop) ; 5
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 86 | True | live]
; [else-branch: 86 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 86 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@333@01 $Snap)
(assert (= $t@333@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@287@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@334@01 $Struct)
(assert (=
  self@334@01
  ($struct_set<$Struct> self@275@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@275@01 5))
    l$havoc$1@287@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 87 | True | live]
; [else-branch: 87 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 87 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
; [eval] $succ ==> (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(push) ; 7
; [then-branch: 88 | False | dead]
; [else-branch: 88 | True | live]
(push) ; 8
; [else-branch: 88 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 1)): Int) >=
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 1)): Int) >= ($struct_get($struct_loc($old_self, 1)): Int)
(push) ; 7
; [then-branch: 89 | False | dead]
; [else-branch: 89 | True | live]
(push) ; 8
; [else-branch: 89 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==>
;     s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)))
; [eval] $succ ==> (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(push) ; 7
; [then-branch: 90 | False | dead]
; [else-branch: 90 | True | live]
(push) ; 8
; [else-branch: 90 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
; [eval] !$first_public_state
; [then-branch: 91 | False | dead]
; [else-branch: 91 | True | live]
(push) ; 6
; [else-branch: 91 | True]
(pop) ; 6
(pop) ; 5
(pop) ; 4
; [eval] !$first_public_state
; [then-branch: 92 | False | dead]
; [else-branch: 92 | True | live]
(push) ; 4
; [else-branch: 92 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 83 | !($out_of_gas@286@01)]
(assert (not $out_of_gas@286@01))
(pop) ; 3
; [eval] !$out_of_gas
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@286@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@286@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 93 | !($out_of_gas@286@01) | live]
; [else-branch: 93 | $out_of_gas@286@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 93 | !($out_of_gas@286@01)]
(assert (not $out_of_gas@286@01))
; [exec]
; label end
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 94 | True | live]
; [else-branch: 94 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 94 | True]
; [exec]
; $old_self := self
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 95 | True | live]
; [else-branch: 95 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 95 | True]
; [exec]
; assert (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int) ==>
;     !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool) ||
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int))
(declare-const q$bb@335@01 Seq<Int>)
(push) ; 6
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 7
; [then-branch: 96 | |q$bb@335@01| == 32 | live]
; [else-branch: 96 | |q$bb@335@01| != 32 | live]
(push) ; 8
; [then-branch: 96 | |q$bb@335@01| == 32]
(assert (= (Seq_length q$bb@335@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($old_self, 4)
(push) ; 9
; [then-branch: 97 | False | dead]
; [else-branch: 97 | True | live]
(push) ; 10
; [else-branch: 97 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 96 | |q$bb@335@01| != 32]
(assert (not (= (Seq_length q$bb@335@01) 32)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@335@01) 32)) (= (Seq_length q$bb@335@01) 32)))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@335@01 Seq<Int>)) (!
  (or (not (= (Seq_length q$bb@335@01) 32)) (= (Seq_length q$bb@335@01) 32))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@332@01 4)) q$bb@335@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@904@13@904@529-aux|)))
; [exec]
; assert (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)) ==>
;     perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) ==
;     1 * write)
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write)
(declare-const q$i@336@01 Int)
(push) ; 6
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 7
; [then-branch: 98 | !(0 <= q$i@336@01) | live]
; [else-branch: 98 | 0 <= q$i@336@01 | live]
(push) ; 8
; [then-branch: 98 | !(0 <= q$i@336@01)]
(assert (not (<= 0 q$i@336@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 98 | 0 <= q$i@336@01]
(assert (<= 0 q$i@336@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@336@01) (not (<= 0 q$i@336@01))))
(push) ; 7
; [then-branch: 99 | 0 <= q$i@336@01 && q$i@336@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 99 | !(0 <= q$i@336@01 && q$i@336@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 8
; [then-branch: 99 | 0 <= q$i@336@01 && q$i@336@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@336@01)
  (<=
    q$i@336@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 100 | !(s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@332@01, 2)), q$i@336@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@332@01, 2)), q$i@336@01))) | live]
; [else-branch: 100 | s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@332@01, 2)), q$i@336@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@332@01, 2)), q$i@336@01)) | live]
(push) ; 10
; [then-branch: 100 | !(s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@332@01, 2)), q$i@336@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@332@01, 2)), q$i@336@01)))]
(assert (not
  (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01))))
; [eval] perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int)))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] 1 * write
(pop) ; 10
(push) ; 10
; [else-branch: 100 | s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@332@01, 2)), q$i@336@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@332@01, 2)), q$i@336@01))]
(assert (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01))
  (not
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 99 | !(0 <= q$i@336@01 && q$i@336@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@336@01)
    (<=
      q$i@336@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@336@01)
    (<=
      q$i@336@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@336@01)
    (<=
      q$i@336@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@336@01)
      (<=
        q$i@336@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@336@01)
    (<=
      q$i@336@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@336@01 Int)) (!
  (and
    (or (<= 0 q$i@336@01) (not (<= 0 q$i@336@01)))
    (=>
      (and
        (<= 0 q$i@336@01)
        (<=
          q$i@336@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@336@01)
        (<=
          q$i@336@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01))
          (not
            (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01))))))
    (or
      (not
        (and
          (<= 0 q$i@336@01)
          (<=
            q$i@336@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@336@01)
        (<=
          q$i@336@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@905@13@905@935-aux|)))
(push) ; 6
(assert (not (forall ((q$i@336@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@336@01)
        (<=
          q$i@336@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01))))
    false)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@905@13@905@935|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@336@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@336@01)
        (<=
          q$i@336@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01))))
    false)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@332@01 2)) q$i@336@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@905@13@905@935|)))
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@337@01 $Snap)
(assert (= $t@337@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@287@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@338@01 $Struct)
(assert (=
  self@338@01
  ($struct_set<$Struct> self@332@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@332@01 5))
    l$havoc$1@287@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 101 | True | live]
; [else-branch: 101 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 101 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
; [eval] $succ ==> (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 102 | True | live]
; [else-branch: 102 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 102 | True]
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const q$bb@339@01 Seq<Int>)
(push) ; 9
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 10
; [then-branch: 103 | |q$bb@339@01| == 32 | live]
; [else-branch: 103 | |q$bb@339@01| != 32 | live]
(push) ; 11
; [then-branch: 103 | |q$bb@339@01| == 32]
(assert (= (Seq_length q$bb@339@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(push) ; 12
; [then-branch: 104 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@338@01, 4)), q$bb@339@01) != 0 | live]
; [else-branch: 104 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@338@01, 4)), q$bb@339@01) == 0 | live]
(push) ; 13
; [then-branch: 104 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@338@01, 4)), q$bb@339@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@338@01 4)) q$bb@339@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc(self, 3)
(pop) ; 13
(push) ; 13
; [else-branch: 104 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@338@01, 4)), q$bb@339@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@338@01 4)) q$bb@339@01)
  0))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@338@01 4)) q$bb@339@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@338@01 4)) q$bb@339@01)
      0))))
(pop) ; 11
(push) ; 11
; [else-branch: 103 | |q$bb@339@01| != 32]
(assert (not (= (Seq_length q$bb@339@01) 32)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@339@01) 32)
  (and
    (= (Seq_length q$bb@339@01) 32)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@338@01 4)) q$bb@339@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@338@01 4)) q$bb@339@01)
          0))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@339@01) 32)) (= (Seq_length q$bb@339@01) 32)))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@339@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@339@01) 32)
      (and
        (= (Seq_length q$bb@339@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@338@01 4)) q$bb@339@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@338@01 4)) q$bb@339@01)
              0)))))
    (or (not (= (Seq_length q$bb@339@01) 32)) (= (Seq_length q$bb@339@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@338@01 4)) q$bb@339@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@915@21@915@403-aux|)))
(assert (forall ((q$bb@339@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@339@01) 32)
      (and
        (= (Seq_length q$bb@339@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@338@01 4)) q$bb@339@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@338@01 4)) q$bb@339@01)
              0)))))
    (or (not (= (Seq_length q$bb@339@01) 32)) (= (Seq_length q$bb@339@01) 32)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@338@01 3)) q$bb@339@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@915@21@915@403-aux|)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (and
  (forall ((q$bb@339@01 Seq<Int>)) (!
    (and
      (=>
        (= (Seq_length q$bb@339@01) 32)
        (and
          (= (Seq_length q$bb@339@01) 32)
          (or
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@338@01 4)) q$bb@339@01)
              0)
            (not
              (=
                ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@338@01 4)) q$bb@339@01)
                0)))))
      (or (not (= (Seq_length q$bb@339@01) 32)) (= (Seq_length q$bb@339@01) 32)))
    :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@338@01 4)) q$bb@339@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@915@21@915@403-aux|))
  (forall ((q$bb@339@01 Seq<Int>)) (!
    (and
      (=>
        (= (Seq_length q$bb@339@01) 32)
        (and
          (= (Seq_length q$bb@339@01) 32)
          (or
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@338@01 4)) q$bb@339@01)
              0)
            (not
              (=
                ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@338@01 4)) q$bb@339@01)
                0)))))
      (or (not (= (Seq_length q$bb@339@01) 32)) (= (Seq_length q$bb@339@01) 32)))
    :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@338@01 3)) q$bb@339@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@915@21@915@403-aux|))))
(push) ; 7
(assert (not (forall ((q$bb@339@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@339@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@338@01 4)) q$bb@339@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@338@01 3)) q$bb@339@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@338@01 4)) q$bb@339@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@338@01 3)) q$bb@339@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@915@21@915@403|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$bb@339@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@339@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@338@01 4)) q$bb@339@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@338@01 3)) q$bb@339@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@338@01 4)) q$bb@339@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@338@01 3)) q$bb@339@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@915@21@915@403|)))
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 1)): Int) >=
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 1)): Int) >= ($struct_get($struct_loc($old_self, 1)): Int)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 105 | True | live]
; [else-branch: 105 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 105 | True]
; [eval] ($struct_get($struct_loc(self, 1)): Int) >= ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==>
;     s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)))
; [eval] $succ ==> (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 106 | True | live]
; [else-branch: 106 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 106 | True]
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const q$i@340@01 Int)
(push) ; 9
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 10
; [then-branch: 107 | !(0 <= q$i@340@01) | live]
; [else-branch: 107 | 0 <= q$i@340@01 | live]
(push) ; 11
; [then-branch: 107 | !(0 <= q$i@340@01)]
(assert (not (<= 0 q$i@340@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 107 | 0 <= q$i@340@01]
(assert (<= 0 q$i@340@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@340@01) (not (<= 0 q$i@340@01))))
(push) ; 10
; [then-branch: 108 | 0 <= q$i@340@01 && q$i@340@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 108 | !(0 <= q$i@340@01 && q$i@340@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 11
; [then-branch: 108 | 0 <= q$i@340@01 && q$i@340@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@340@01)
  (<=
    q$i@340@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] q$i <= ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 12
; [then-branch: 109 | q$i@340@01 <= $struct_get[Int]($struct_loc[Int](self@338@01, 1)) | live]
; [else-branch: 109 | !(q$i@340@01 <= $struct_get[Int]($struct_loc[Int](self@338@01, 1))) | live]
(push) ; 13
; [then-branch: 109 | q$i@340@01 <= $struct_get[Int]($struct_loc[Int](self@338@01, 1))]
(assert (<= q$i@340@01 ($struct_get<Int> ($struct_loc<Int> self@338@01 1))))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($old_self, 2)
(pop) ; 13
(push) ; 13
; [else-branch: 109 | !(q$i@340@01 <= $struct_get[Int]($struct_loc[Int](self@338@01, 1)))]
(assert (not (<= q$i@340@01 ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not (<= q$i@340@01 ($struct_get<Int> ($struct_loc<Int> self@338@01 1))))
  (<= q$i@340@01 ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 108 | !(0 <= q$i@340@01 && q$i@340@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@340@01)
    (<=
      q$i@340@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@340@01)
    (<=
      q$i@340@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@340@01)
    (<=
      q$i@340@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not (<= q$i@340@01 ($struct_get<Int> ($struct_loc<Int> self@338@01 1))))
      (<= q$i@340@01 ($struct_get<Int> ($struct_loc<Int> self@338@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@340@01)
      (<=
        q$i@340@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@340@01)
    (<=
      q$i@340@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@340@01 Int)) (!
  (and
    (or (<= 0 q$i@340@01) (not (<= 0 q$i@340@01)))
    (=>
      (and
        (<= 0 q$i@340@01)
        (<=
          q$i@340@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@340@01)
        (<=
          q$i@340@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (<= q$i@340@01 ($struct_get<Int> ($struct_loc<Int> self@338@01 1))))
          (<= q$i@340@01 ($struct_get<Int> ($struct_loc<Int> self@338@01 1))))))
    (or
      (not
        (and
          (<= 0 q$i@340@01)
          (<=
            q$i@340@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@340@01)
        (<=
          q$i@340@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@338@01 2)) q$i@340@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@917@21@917@484-aux|)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((q$i@340@01 Int)) (!
  (and
    (or (<= 0 q$i@340@01) (not (<= 0 q$i@340@01)))
    (=>
      (and
        (<= 0 q$i@340@01)
        (<=
          q$i@340@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@340@01)
        (<=
          q$i@340@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (<= q$i@340@01 ($struct_get<Int> ($struct_loc<Int> self@338@01 1))))
          (<= q$i@340@01 ($struct_get<Int> ($struct_loc<Int> self@338@01 1))))))
    (or
      (not
        (and
          (<= 0 q$i@340@01)
          (<=
            q$i@340@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@340@01)
        (<=
          q$i@340@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@338@01 2)) q$i@340@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@917@21@917@484-aux|)))
(push) ; 7
(assert (not (forall ((q$i@340@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@340@01)
        (<=
          q$i@340@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@340@01 ($struct_get<Int> ($struct_loc<Int> self@338@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@338@01 2)) q$i@340@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@338@01 2)) q$i@340@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@338@01 2)) q$i@340@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@917@21@917@484|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@340@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@340@01)
        (<=
          q$i@340@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@340@01 ($struct_get<Int> ($struct_loc<Int> self@338@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@338@01 2)) q$i@340@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@338@01 2)) q$i@340@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@338@01 2)) q$i@340@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@917@21@917@484|)))
(pop) ; 6
; [eval] !$first_public_state
; [then-branch: 110 | False | dead]
; [else-branch: 110 | True | live]
(push) ; 6
; [else-branch: 110 | True]
(pop) ; 6
(pop) ; 5
; [eval] !$succ
; [then-branch: 111 | False | dead]
; [else-branch: 111 | True | live]
(push) ; 5
; [else-branch: 111 | True]
(pop) ; 5
(pop) ; 4
; [eval] !$first_public_state
; [then-branch: 112 | False | dead]
; [else-branch: 112 | True | live]
(push) ; 4
; [else-branch: 112 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 93 | $out_of_gas@286@01]
(assert $out_of_gas@286@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$new_document ----------
(declare-const l$hash@341@01 Seq<Int>)
(declare-const $succ@342@01 Bool)
(declare-const l$hash@343@01 Seq<Int>)
(declare-const $succ@344@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@345@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@346@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@347@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@348@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@349@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@350@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@351@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@352@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@353@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@354@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@355@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@356@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@357@01 Bool)
; [exec]
; var l$i0$hash: Seq[Int]
(declare-const l$i0$hash@358@01 Seq<Int>)
; [exec]
; var i0$$res: Bool
(declare-const i0$$res@359@01 Bool)
; [exec]
; var l$i1$hash: Seq[Int]
(declare-const l$i1$hash@360@01 Seq<Int>)
; [exec]
; var l$i1$frm: Int
(declare-const l$i1$frm@361@01 Int)
; [exec]
; var l$i1$to: Int
(declare-const l$i1$to@362@01 Int)
; [exec]
; var i1$$pre_self: $Struct
(declare-const i1$$pre_self@363@01 $Struct)
; [exec]
; var i1$$pre_$contracts: $Map[Int, $Struct]
(declare-const i1$$pre_$contracts@364@01 $Map<Int~_$Struct>)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@365@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@366@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@367@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@368@01 $Snap)
(assert (= $t@368@01 ($Snap.combine ($Snap.first $t@368@01) ($Snap.second $t@368@01))))
(assert (= ($Snap.first $t@368@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@349@01 0))))
(assert (= ($Snap.second $t@368@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@349@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@369@01 $Snap)
(assert (= $t@369@01 ($Snap.combine ($Snap.first $t@369@01) ($Snap.second $t@369@01))))
(assert (= ($Snap.first $t@369@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
(assert (= ($Snap.second $t@369@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@349@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 0)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 0)): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@370@01 $Snap)
(assert (= $t@370@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@371@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(push) ; 4
; [then-branch: 113 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), $q0@371@01), 0))) | live]
; [else-branch: 113 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), $q0@371@01), 0)) | live]
(push) ; 5
; [then-branch: 113 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), $q0@371@01), 0)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@371@01) 0)))))
(pop) ; 5
(push) ; 5
; [else-branch: 113 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), $q0@371@01), 0))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@371@01) 0))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@371@01) 0)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@371@01) 0))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@371@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@371@01) 0)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@371@01) 0)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@371@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@948@11@948@441-aux|)))
(assert (forall (($q0@371@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@371@01) 0)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@371@01) 0))
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@371@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@948@11@948@441|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) }
;     |($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 1)): Seq[Int])| ==
;     32)
(declare-const $t@372@01 $Snap)
(assert (= $t@372@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) } |($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| == 32)
(declare-const $q0@373@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@373@01 Int)) (!
  (=
    (Seq_length
      ($struct_get<Seq<Int>> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@373@01) 1)))
    32)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@373@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@949@11@949@246|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 2)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 2)): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@374@01 $Snap)
(assert (= $t@374@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q0@375@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(push) ; 4
; [then-branch: 114 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), $q0@375@01), 2))) | live]
; [else-branch: 114 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), $q0@375@01), 2)) | live]
(push) ; 5
; [then-branch: 114 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), $q0@375@01), 2)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@375@01) 2)))))
(pop) ; 5
(push) ; 5
; [else-branch: 114 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), $q0@375@01), 2))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@375@01) 2))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@375@01) 2)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@375@01) 2))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@375@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@375@01) 2)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@375@01) 2)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@375@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@950@11@950@412-aux|)))
(assert (forall (($q0@375@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@375@01) 2)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@375@01) 2))
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@375@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@950@11@950@412|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 3)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 3)): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@376@01 $Snap)
(assert (= $t@376@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q0@377@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(push) ; 4
; [then-branch: 115 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), $q0@377@01), 3))) | live]
; [else-branch: 115 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), $q0@377@01), 3)) | live]
(push) ; 5
; [then-branch: 115 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), $q0@377@01), 3)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@377@01) 3)))))
(pop) ; 5
(push) ; 5
; [else-branch: 115 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), $q0@377@01), 3))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@377@01) 3))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@377@01) 3)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@377@01) 3))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@377@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@377@01) 3)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@377@01) 3)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@377@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@951@11@951@412-aux|)))
(assert (forall (($q0@377@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@377@01) 3)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@377@01) 3))
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@377@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@951@11@951@412|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) }
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), -1)): Int) ==
;     722760475380740992045242976742918181534147582937316800750962)
(declare-const $t@378@01 $Snap)
(assert (= $t@378@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) } ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int) == 722760475380740992045242976742918181534147582937316800750962)
(declare-const $q0@379@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int) == 722760475380740992045242976742918181534147582937316800750962
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] -1
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@379@01 Int)) (!
  (=
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@379@01) (- 0 1)))
    722760475380740992045242976742918181534147582937316800750962)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) $q0@379@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@952@11@952@298|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@380@01 $Snap)
(assert (= $t@380@01 $Snap.unit))
; [eval] (forall $q3: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q3@381@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(push) ; 4
; [then-branch: 116 | !(0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@349@01, 4)), $q3@381@01)) | live]
; [else-branch: 116 | 0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@349@01, 4)), $q3@381@01) | live]
(push) ; 5
; [then-branch: 116 | !(0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@349@01, 4)), $q3@381@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) $q3@381@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 116 | 0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@349@01, 4)), $q3@381@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) $q3@381@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) $q3@381@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) $q3@381@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@381@01 Seq<Int>)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) $q3@381@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) $q3@381@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) $q3@381@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@953@11@953@336-aux|)))
(assert (forall (($q3@381@01 Seq<Int>)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) $q3@381@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) $q3@381@01)
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) $q3@381@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@953@11@953@336|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])): Int))
(declare-const $t@382@01 $Snap)
(assert (= $t@382@01 $Snap.unit))
; [eval] (forall $q3: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])): Int))
(declare-const $q3@383@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@383@01 Seq<Int>)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) $q3@383@01)
    ($map_sum<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) $q3@383@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@954@11@954@273|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@384@01 $Snap)
(assert (= $t@384@01 ($Snap.combine ($Snap.first $t@384@01) ($Snap.second $t@384@01))))
(assert (= ($Snap.first $t@384@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@349@01 5))))
(assert (= ($Snap.second $t@384@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@349@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@385@01 $Snap)
(assert (= $t@385@01 ($Snap.combine ($Snap.first $t@385@01) ($Snap.second $t@385@01))))
(assert (= ($Snap.first $t@385@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@349@01 6))))
(assert (= ($Snap.second $t@385@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@349@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@386@01 $Snap)
(assert (= $t@386@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q4@387@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 117 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@349@01, 8)), $q4@387@01)) | live]
; [else-branch: 117 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@349@01, 8)), $q4@387@01) | live]
(push) ; 5
; [then-branch: 117 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@349@01, 8)), $q4@387@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 8)) $q4@387@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 117 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@349@01, 8)), $q4@387@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 8)) $q4@387@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 8)) $q4@387@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 8)) $q4@387@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@387@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 8)) $q4@387@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 8)) $q4@387@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 8)) $q4@387@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@957@11@957@345-aux|)))
(assert (forall (($q4@387@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 8)) $q4@387@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 8)) $q4@387@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 8)) $q4@387@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@957@11@957@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@388@01 $Snap)
(assert (= $t@388@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q4@389@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@389@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 8)) $q4@389@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 8)) $q4@389@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@958@11@958@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q5: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@390@01 $Snap)
(assert (= $t@390@01 $Snap.unit))
; [eval] (forall $q5: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@391@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 118 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@349@01, 9)), $q5@391@01)) | live]
; [else-branch: 118 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@349@01, 9)), $q5@391@01) | live]
(push) ; 5
; [then-branch: 118 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@349@01, 9)), $q5@391@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 9)) $q5@391@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 118 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@349@01, 9)), $q5@391@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 9)) $q5@391@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 9)) $q5@391@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 9)) $q5@391@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@391@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 9)) $q5@391@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 9)) $q5@391@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 9)) $q5@391@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@959@11@959@345-aux|)))
(assert (forall (($q5@391@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 9)) $q5@391@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 9)) $q5@391@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 9)) $q5@391@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@959@11@959@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q5: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@392@01 $Snap)
(assert (= $t@392@01 $Snap.unit))
; [eval] (forall $q5: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q5@393@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@393@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 9)) $q5@393@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@349@01 9)) $q5@393@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@960@11@960@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@394@01 $Snap)
(assert (= $t@394@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@349@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@395@01 $Snap)
(assert (= $t@395@01 ($Snap.combine ($Snap.first $t@395@01) ($Snap.second $t@395@01))))
(assert (= ($Snap.first $t@395@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@395@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |l$hash| == 32
(declare-const $t@396@01 $Snap)
(assert (= $t@396@01 $Snap.unit))
; [eval] |l$hash| == 32
; [eval] |l$hash|
(assert (= (Seq_length l$hash@343@01) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@397@01 $Snap)
(assert (= $t@397@01 ($Snap.combine ($Snap.first $t@397@01) ($Snap.second $t@397@01))))
(assert (= ($Snap.first $t@397@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@346@01 0))))
(assert (= ($Snap.second $t@397@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@346@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@398@01 $Snap)
(assert (= $t@398@01 ($Snap.combine ($Snap.first $t@398@01) ($Snap.second $t@398@01))))
(assert (= ($Snap.first $t@398@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@346@01 1))))
(assert (= ($Snap.second $t@398@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@346@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@399@01 $Snap)
(assert (= $t@399@01 ($Snap.combine ($Snap.first $t@399@01) ($Snap.second $t@399@01))))
(assert (= ($Snap.first $t@399@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@346@01 2))))
(assert (= ($Snap.second $t@399@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@346@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@400@01 $Snap)
(assert (= $t@400@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@346@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@401@01 $Snap)
(assert (= $t@401@01 ($Snap.combine ($Snap.first $t@401@01) ($Snap.second $t@401@01))))
(assert (= ($Snap.first $t@401@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@346@01 4))))
(assert (= ($Snap.second $t@401@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@346@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@402@01 $Snap)
(assert (= $t@402@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@346@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@403@01 $Snap)
(assert (= $t@403@01 ($Snap.combine ($Snap.first $t@403@01) ($Snap.second $t@403@01))))
(assert (= ($Snap.first $t@403@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@345@01 0))))
(assert (= ($Snap.second $t@403@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@345@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@404@01 $Snap)
(assert (= $t@404@01 ($Snap.combine ($Snap.first $t@404@01) ($Snap.second $t@404@01))))
(assert (= ($Snap.first $t@404@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@345@01 1))))
(assert (= ($Snap.second $t@404@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@345@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@405@01 $Snap)
(assert (= $t@405@01 ($Snap.combine ($Snap.first $t@405@01) ($Snap.second $t@405@01))))
(assert (= ($Snap.first $t@405@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@345@01 2))))
(assert (= ($Snap.second $t@405@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@345@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@406@01 $Snap)
(assert (= $t@406@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@345@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@407@01 $Snap)
(assert (= $t@407@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@345@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@408@01 $Snap)
(assert (= $t@408@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@409@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const $t@410@01 $Snap)
(assert (= $t@410@01 $Snap.unit))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const q$bb@411@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 4
; [then-branch: 119 | |q$bb@411@01| == 32 | live]
; [else-branch: 119 | |q$bb@411@01| != 32 | live]
(push) ; 5
; [then-branch: 119 | |q$bb@411@01| == 32]
(assert (= (Seq_length q$bb@411@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(push) ; 6
; [then-branch: 120 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@349@01, 4)), q$bb@411@01) != 0 | live]
; [else-branch: 120 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@349@01, 4)), q$bb@411@01) == 0 | live]
(push) ; 7
; [then-branch: 120 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@349@01, 4)), q$bb@411@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@411@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc(self, 3)
(pop) ; 7
(push) ; 7
; [else-branch: 120 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@349@01, 4)), q$bb@411@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@411@01)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@411@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@411@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 119 | |q$bb@411@01| != 32]
(assert (not (= (Seq_length q$bb@411@01) 32)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@411@01) 32)
  (and
    (= (Seq_length q$bb@411@01) 32)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@411@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@411@01)
          0))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@411@01) 32)) (= (Seq_length q$bb@411@01) 32)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@411@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@411@01) 32)
      (and
        (= (Seq_length q$bb@411@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@411@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@411@01)
              0)))))
    (or (not (= (Seq_length q$bb@411@01) 32)) (= (Seq_length q$bb@411@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@411@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@981@11@981@393-aux|)))
(assert (forall ((q$bb@411@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@411@01) 32)
      (and
        (= (Seq_length q$bb@411@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@411@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@411@01)
              0)))))
    (or (not (= (Seq_length q$bb@411@01) 32)) (= (Seq_length q$bb@411@01) 32)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@349@01 3)) q$bb@411@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@981@11@981@393-aux|)))
(assert (forall ((q$bb@411@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@411@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@411@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@349@01 3)) q$bb@411@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@411@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@349@01 3)) q$bb@411@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@981@11@981@393|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) >=
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@412@01 $Snap)
(assert (= $t@412@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) >= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     q$i <= ($struct_get($struct_loc(self, 1)): Int) ==>
;     s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)))
(declare-const $t@413@01 $Snap)
(assert (= $t@413@01 $Snap.unit))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc(self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const q$i@414@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc(self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 4
; [then-branch: 121 | !(0 <= q$i@414@01) | live]
; [else-branch: 121 | 0 <= q$i@414@01 | live]
(push) ; 5
; [then-branch: 121 | !(0 <= q$i@414@01)]
(assert (not (<= 0 q$i@414@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 121 | 0 <= q$i@414@01]
(assert (<= 0 q$i@414@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@414@01) (not (<= 0 q$i@414@01))))
(push) ; 4
; [then-branch: 122 | 0 <= q$i@414@01 && q$i@414@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 122 | !(0 <= q$i@414@01 && q$i@414@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 5
; [then-branch: 122 | 0 <= q$i@414@01 && q$i@414@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@414@01)
  (<=
    q$i@414@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] q$i <= ($struct_get($struct_loc(self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] q$i <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 6
; [then-branch: 123 | q$i@414@01 <= $struct_get[Int]($struct_loc[Int](self@349@01, 1)) | live]
; [else-branch: 123 | !(q$i@414@01 <= $struct_get[Int]($struct_loc[Int](self@349@01, 1))) | live]
(push) ; 7
; [then-branch: 123 | q$i@414@01 <= $struct_get[Int]($struct_loc[Int](self@349@01, 1))]
(assert (<= q$i@414@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(pop) ; 7
(push) ; 7
; [else-branch: 123 | !(q$i@414@01 <= $struct_get[Int]($struct_loc[Int](self@349@01, 1)))]
(assert (not (<= q$i@414@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (<= q$i@414@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
  (<= q$i@414@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1)))))
(pop) ; 5
(push) ; 5
; [else-branch: 122 | !(0 <= q$i@414@01 && q$i@414@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@414@01)
    (<=
      q$i@414@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@414@01)
    (<=
      q$i@414@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@414@01)
    (<=
      q$i@414@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not (<= q$i@414@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
      (<= q$i@414@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@414@01)
      (<=
        q$i@414@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@414@01)
    (<=
      q$i@414@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@414@01 Int)) (!
  (and
    (or (<= 0 q$i@414@01) (not (<= 0 q$i@414@01)))
    (=>
      (and
        (<= 0 q$i@414@01)
        (<=
          q$i@414@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@414@01)
        (<=
          q$i@414@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (<= q$i@414@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
          (<= q$i@414@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))))
    (or
      (not
        (and
          (<= 0 q$i@414@01)
          (<=
            q$i@414@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@414@01)
        (<=
          q$i@414@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@414@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@983@11@983@464-aux|)))
(assert (forall ((q$i@414@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@414@01)
        (<=
          q$i@414@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@414@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@414@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@414@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@414@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@983@11@983@464|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@415@01 $Snap)
(assert (= $t@415@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@345@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; l$i0$hash := l$hash
; [exec]
; i0$$res := ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]),
;   l$i0$hash): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), l$i0$hash): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc(self, 3)
(declare-const i0$$res@416@01 Bool)
(assert (=
  i0$$res@416@01
  ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@349@01 3)) l$hash@343@01)))
; [exec]
; label i0$return
; [eval] !!i0$$res
; [eval] !i0$$res
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not i0$$res@416@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not i0$$res@416@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 124 | i0$$res@416@01 | live]
; [else-branch: 124 | !(i0$$res@416@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 124 | i0$$res@416@01]
(assert i0$$res@416@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 125 | False | dead]
; [else-branch: 125 | True | live]
(push) ; 4
; [else-branch: 125 | True]
(pop) ; 4
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 126 | True | live]
; [else-branch: 126 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 126 | True]
; [exec]
; assert old((forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int) ==>
;     !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool) ||
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int)))
; [eval] old((forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int))
(declare-const q$bb@417@01 Seq<Int>)
(push) ; 5
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 6
; [then-branch: 127 | |q$bb@417@01| == 32 | live]
; [else-branch: 127 | |q$bb@417@01| != 32 | live]
(push) ; 7
; [then-branch: 127 | |q$bb@417@01| == 32]
(assert (= (Seq_length q$bb@417@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($old_self, 4)
(push) ; 8
; [then-branch: 128 | False | dead]
; [else-branch: 128 | True | live]
(push) ; 9
; [else-branch: 128 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 127 | |q$bb@417@01| != 32]
(assert (not (= (Seq_length q$bb@417@01) 32)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@417@01) 32)) (= (Seq_length q$bb@417@01) 32)))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@417@01 Seq<Int>)) (!
  (or (not (= (Seq_length q$bb@417@01) 32)) (= (Seq_length q$bb@417@01) 32))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@417@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1043@17@1043@533-aux|)))
; [exec]
; assert old((forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)) ==>
;     perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) ==
;     1 * write))
; [eval] old((forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write)
(declare-const q$i@418@01 Int)
(push) ; 5
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 6
; [then-branch: 129 | !(0 <= q$i@418@01) | live]
; [else-branch: 129 | 0 <= q$i@418@01 | live]
(push) ; 7
; [then-branch: 129 | !(0 <= q$i@418@01)]
(assert (not (<= 0 q$i@418@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 129 | 0 <= q$i@418@01]
(assert (<= 0 q$i@418@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@418@01) (not (<= 0 q$i@418@01))))
(push) ; 6
; [then-branch: 130 | 0 <= q$i@418@01 && q$i@418@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 130 | !(0 <= q$i@418@01 && q$i@418@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 7
; [then-branch: 130 | 0 <= q$i@418@01 && q$i@418@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@418@01)
  (<=
    q$i@418@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 131 | !(s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@418@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@418@01))) | live]
; [else-branch: 131 | s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@418@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@418@01)) | live]
(push) ; 9
; [then-branch: 131 | !(s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@418@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@418@01)))]
(assert (not
  (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01))))
; [eval] perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int)))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] 1 * write
(pop) ; 9
(push) ; 9
; [else-branch: 131 | s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@418@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@418@01))]
(assert (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01))
  (not
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 130 | !(0 <= q$i@418@01 && q$i@418@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@418@01)
    (<=
      q$i@418@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@418@01)
    (<=
      q$i@418@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@418@01)
    (<=
      q$i@418@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@418@01)
      (<=
        q$i@418@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@418@01)
    (<=
      q$i@418@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@418@01 Int)) (!
  (and
    (or (<= 0 q$i@418@01) (not (<= 0 q$i@418@01)))
    (=>
      (and
        (<= 0 q$i@418@01)
        (<=
          q$i@418@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@418@01)
        (<=
          q$i@418@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01))
          (not
            (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01))))))
    (or
      (not
        (and
          (<= 0 q$i@418@01)
          (<=
            q$i@418@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@418@01)
        (<=
          q$i@418@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1044@17@1044@939-aux|)))
(push) ; 5
(assert (not (forall ((q$i@418@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@418@01)
        (<=
          q$i@418@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01))))
    false)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1044@17@1044@939|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@418@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@418@01)
        (<=
          q$i@418@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01))))
    false)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@418@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1044@17@1044@939|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@419@01 $Snap)
(assert (= $t@419@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@366@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@420@01 $Struct)
(assert (=
  self@420@01
  ($struct_set<$Struct> self@349@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@349@01 5))
    l$havoc@366@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const q$bb@421@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 5
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 6
; [then-branch: 132 | |q$bb@421@01| == 32 | live]
; [else-branch: 132 | |q$bb@421@01| != 32 | live]
(push) ; 7
; [then-branch: 132 | |q$bb@421@01| == 32]
(assert (= (Seq_length q$bb@421@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(push) ; 8
; [then-branch: 133 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@420@01, 4)), q$bb@421@01) != 0 | live]
; [else-branch: 133 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@420@01, 4)), q$bb@421@01) == 0 | live]
(push) ; 9
; [then-branch: 133 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@420@01, 4)), q$bb@421@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@420@01 4)) q$bb@421@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc(self, 3)
(pop) ; 9
(push) ; 9
; [else-branch: 133 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@420@01, 4)), q$bb@421@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@420@01 4)) q$bb@421@01)
  0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@420@01 4)) q$bb@421@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@420@01 4)) q$bb@421@01)
      0))))
(pop) ; 7
(push) ; 7
; [else-branch: 132 | |q$bb@421@01| != 32]
(assert (not (= (Seq_length q$bb@421@01) 32)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@421@01) 32)
  (and
    (= (Seq_length q$bb@421@01) 32)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@420@01 4)) q$bb@421@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@420@01 4)) q$bb@421@01)
          0))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@421@01) 32)) (= (Seq_length q$bb@421@01) 32)))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@421@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@421@01) 32)
      (and
        (= (Seq_length q$bb@421@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@420@01 4)) q$bb@421@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@420@01 4)) q$bb@421@01)
              0)))))
    (or (not (= (Seq_length q$bb@421@01) 32)) (= (Seq_length q$bb@421@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@420@01 4)) q$bb@421@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1051@11@1051@393-aux|)))
(assert (forall ((q$bb@421@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@421@01) 32)
      (and
        (= (Seq_length q$bb@421@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@420@01 4)) q$bb@421@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@420@01 4)) q$bb@421@01)
              0)))))
    (or (not (= (Seq_length q$bb@421@01) 32)) (= (Seq_length q$bb@421@01) 32)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@420@01 3)) q$bb@421@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1051@11@1051@393-aux|)))
(push) ; 5
(assert (not (forall ((q$bb@421@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@421@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@420@01 4)) q$bb@421@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@420@01 3)) q$bb@421@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@420@01 4)) q$bb@421@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@420@01 3)) q$bb@421@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1051@11@1051@393|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$bb@421@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@421@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@420@01 4)) q$bb@421@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@420@01 3)) q$bb@421@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@420@01 4)) q$bb@421@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@420@01 3)) q$bb@421@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1051@11@1051@393|)))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) >=
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) >= ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 5
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@420@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@349@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@420@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
; [exec]
; assert (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==>
;     s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const q$i@422@01 Int)
(push) ; 5
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 6
; [then-branch: 134 | !(0 <= q$i@422@01) | live]
; [else-branch: 134 | 0 <= q$i@422@01 | live]
(push) ; 7
; [then-branch: 134 | !(0 <= q$i@422@01)]
(assert (not (<= 0 q$i@422@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 134 | 0 <= q$i@422@01]
(assert (<= 0 q$i@422@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@422@01) (not (<= 0 q$i@422@01))))
(push) ; 6
; [then-branch: 135 | 0 <= q$i@422@01 && q$i@422@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 135 | !(0 <= q$i@422@01 && q$i@422@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 7
; [then-branch: 135 | 0 <= q$i@422@01 && q$i@422@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@422@01)
  (<=
    q$i@422@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] q$i <= ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 8
; [then-branch: 136 | q$i@422@01 <= $struct_get[Int]($struct_loc[Int](self@349@01, 1)) | live]
; [else-branch: 136 | !(q$i@422@01 <= $struct_get[Int]($struct_loc[Int](self@349@01, 1))) | live]
(push) ; 9
; [then-branch: 136 | q$i@422@01 <= $struct_get[Int]($struct_loc[Int](self@349@01, 1))]
(assert (<= q$i@422@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($old_self, 2)
(pop) ; 9
(push) ; 9
; [else-branch: 136 | !(q$i@422@01 <= $struct_get[Int]($struct_loc[Int](self@349@01, 1)))]
(assert (not (<= q$i@422@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (<= q$i@422@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
  (<= q$i@422@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1)))))
(pop) ; 7
(push) ; 7
; [else-branch: 135 | !(0 <= q$i@422@01 && q$i@422@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@422@01)
    (<=
      q$i@422@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@422@01)
    (<=
      q$i@422@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@422@01)
    (<=
      q$i@422@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not (<= q$i@422@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
      (<= q$i@422@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@422@01)
      (<=
        q$i@422@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@422@01)
    (<=
      q$i@422@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@422@01 Int)) (!
  (and
    (or (<= 0 q$i@422@01) (not (<= 0 q$i@422@01)))
    (=>
      (and
        (<= 0 q$i@422@01)
        (<=
          q$i@422@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@422@01)
        (<=
          q$i@422@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (<= q$i@422@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
          (<= q$i@422@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))))
    (or
      (not
        (and
          (<= 0 q$i@422@01)
          (<=
            q$i@422@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@422@01)
        (<=
          q$i@422@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@420@01 2)) q$i@422@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1053@11@1053@474-aux|)))
(push) ; 5
(assert (not (forall ((q$i@422@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@422@01)
        (<=
          q$i@422@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@422@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@420@01 2)) q$i@422@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@422@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@420@01 2)) q$i@422@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1053@11@1053@474|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@422@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@422@01)
        (<=
          q$i@422@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@422@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@420@01 2)) q$i@422@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@422@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@420@01 2)) q$i@422@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1053@11@1053@474|)))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 124 | !(i0$$res@416@01)]
(assert (not i0$$res@416@01))
(pop) ; 3
; [eval] !!!i0$$res
; [eval] !!i0$$res
; [eval] !i0$$res
(push) ; 3
(set-option :timeout 10)
(assert (not i0$$res@416@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not i0$$res@416@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 137 | !(i0$$res@416@01) | live]
; [else-branch: 137 | i0$$res@416@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 137 | !(i0$$res@416@01)]
(assert (not i0$$res@416@01))
; [exec]
; i1$$pre_self := self
; [exec]
; i1$$pre_$contracts := $contracts
; [exec]
; l$i1$hash := l$hash
; [exec]
; l$i1$frm := ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const l$i1$frm@423@01 Int)
(assert (= l$i1$frm@423@01 ($struct_get<Int> ($struct_loc<Int> msg@345@01 0))))
; [exec]
; l$i1$to := ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const l$i1$to@424@01 Int)
(assert (= l$i1$to@424@01 ($struct_get<Int> ($struct_loc<Int> msg@345@01 0))))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1 < 0
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
      1)
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 138 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@349@01, 1)))) + 1 < 0 | dead]
; [else-branch: 138 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@349@01, 1)))) + 1 < 0) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 138 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@349@01, 1)))) + 1 < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
      1)
    0)))
(pop) ; 4
; [eval] !($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1 < 0)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1 < 0
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 4
(set-option :timeout 10)
(assert (not (<
  (+
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
    1)
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
      1)
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 139 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@349@01, 1)))) + 1 < 0) | live]
; [else-branch: 139 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@349@01, 1)))) + 1 < 0 | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 139 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@349@01, 1)))) + 1 < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
      1)
    0)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
      1)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
    1)
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 140 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@349@01, 1)))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 140 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@349@01, 1)))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 140 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@349@01, 1)))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
    1)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 141 | False | dead]
; [else-branch: 141 | True | live]
(push) ; 6
; [else-branch: 141 | True]
(pop) ; 6
; [eval] !$succ
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 142 | True | live]
; [else-branch: 142 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 142 | True]
; [exec]
; assert old((forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int) ==>
;     !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool) ||
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int)))
; [eval] old((forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int))
(declare-const q$bb@425@01 Seq<Int>)
(push) ; 7
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 8
; [then-branch: 143 | |q$bb@425@01| == 32 | live]
; [else-branch: 143 | |q$bb@425@01| != 32 | live]
(push) ; 9
; [then-branch: 143 | |q$bb@425@01| == 32]
(assert (= (Seq_length q$bb@425@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($old_self, 4)
(push) ; 10
; [then-branch: 144 | False | dead]
; [else-branch: 144 | True | live]
(push) ; 11
; [else-branch: 144 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 143 | |q$bb@425@01| != 32]
(assert (not (= (Seq_length q$bb@425@01) 32)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@425@01) 32)) (= (Seq_length q$bb@425@01) 32)))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@425@01 Seq<Int>)) (!
  (or (not (= (Seq_length q$bb@425@01) 32)) (= (Seq_length q$bb@425@01) 32))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@425@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1043@17@1043@533-aux|)))
; [exec]
; assert old((forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)) ==>
;     perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) ==
;     1 * write))
; [eval] old((forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write)
(declare-const q$i@426@01 Int)
(push) ; 7
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 8
; [then-branch: 145 | !(0 <= q$i@426@01) | live]
; [else-branch: 145 | 0 <= q$i@426@01 | live]
(push) ; 9
; [then-branch: 145 | !(0 <= q$i@426@01)]
(assert (not (<= 0 q$i@426@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 145 | 0 <= q$i@426@01]
(assert (<= 0 q$i@426@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@426@01) (not (<= 0 q$i@426@01))))
(push) ; 8
; [then-branch: 146 | 0 <= q$i@426@01 && q$i@426@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 146 | !(0 <= q$i@426@01 && q$i@426@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 9
; [then-branch: 146 | 0 <= q$i@426@01 && q$i@426@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@426@01)
  (<=
    q$i@426@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($old_self, 2)
(push) ; 10
; [then-branch: 147 | !(s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@426@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@426@01))) | live]
; [else-branch: 147 | s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@426@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@426@01)) | live]
(push) ; 11
; [then-branch: 147 | !(s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@426@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@426@01)))]
(assert (not
  (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01))))
; [eval] perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int)))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] 1 * write
(pop) ; 11
(push) ; 11
; [else-branch: 147 | s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@426@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@426@01))]
(assert (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01))
  (not
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01)))))
(pop) ; 9
(push) ; 9
; [else-branch: 146 | !(0 <= q$i@426@01 && q$i@426@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@426@01)
    (<=
      q$i@426@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@426@01)
    (<=
      q$i@426@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@426@01)
    (<=
      q$i@426@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@426@01)
      (<=
        q$i@426@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@426@01)
    (<=
      q$i@426@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@426@01 Int)) (!
  (and
    (or (<= 0 q$i@426@01) (not (<= 0 q$i@426@01)))
    (=>
      (and
        (<= 0 q$i@426@01)
        (<=
          q$i@426@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@426@01)
        (<=
          q$i@426@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01))
          (not
            (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01))))))
    (or
      (not
        (and
          (<= 0 q$i@426@01)
          (<=
            q$i@426@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@426@01)
        (<=
          q$i@426@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1044@17@1044@939-aux|)))
(push) ; 7
(assert (not (forall ((q$i@426@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@426@01)
        (<=
          q$i@426@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01))))
    false)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1044@17@1044@939|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@426@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@426@01)
        (<=
          q$i@426@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01))))
    false)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@426@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1044@17@1044@939|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@427@01 $Snap)
(assert (= $t@427@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@366@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@428@01 $Struct)
(assert (=
  self@428@01
  ($struct_set<$Struct> self@349@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@349@01 5))
    l$havoc@366@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const q$bb@429@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 7
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 8
; [then-branch: 148 | |q$bb@429@01| == 32 | live]
; [else-branch: 148 | |q$bb@429@01| != 32 | live]
(push) ; 9
; [then-branch: 148 | |q$bb@429@01| == 32]
(assert (= (Seq_length q$bb@429@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(push) ; 10
; [then-branch: 149 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@428@01, 4)), q$bb@429@01) != 0 | live]
; [else-branch: 149 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@428@01, 4)), q$bb@429@01) == 0 | live]
(push) ; 11
; [then-branch: 149 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@428@01, 4)), q$bb@429@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@428@01 4)) q$bb@429@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc(self, 3)
(pop) ; 11
(push) ; 11
; [else-branch: 149 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@428@01, 4)), q$bb@429@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@428@01 4)) q$bb@429@01)
  0))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@428@01 4)) q$bb@429@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@428@01 4)) q$bb@429@01)
      0))))
(pop) ; 9
(push) ; 9
; [else-branch: 148 | |q$bb@429@01| != 32]
(assert (not (= (Seq_length q$bb@429@01) 32)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@429@01) 32)
  (and
    (= (Seq_length q$bb@429@01) 32)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@428@01 4)) q$bb@429@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@428@01 4)) q$bb@429@01)
          0))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@429@01) 32)) (= (Seq_length q$bb@429@01) 32)))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@429@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@429@01) 32)
      (and
        (= (Seq_length q$bb@429@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@428@01 4)) q$bb@429@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@428@01 4)) q$bb@429@01)
              0)))))
    (or (not (= (Seq_length q$bb@429@01) 32)) (= (Seq_length q$bb@429@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@428@01 4)) q$bb@429@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1051@11@1051@393-aux|)))
(assert (forall ((q$bb@429@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@429@01) 32)
      (and
        (= (Seq_length q$bb@429@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@428@01 4)) q$bb@429@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@428@01 4)) q$bb@429@01)
              0)))))
    (or (not (= (Seq_length q$bb@429@01) 32)) (= (Seq_length q$bb@429@01) 32)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@428@01 3)) q$bb@429@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1051@11@1051@393-aux|)))
(push) ; 7
(assert (not (forall ((q$bb@429@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@429@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@428@01 4)) q$bb@429@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@428@01 3)) q$bb@429@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@428@01 4)) q$bb@429@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@428@01 3)) q$bb@429@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1051@11@1051@393|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$bb@429@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@429@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@428@01 4)) q$bb@429@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@428@01 3)) q$bb@429@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@428@01 4)) q$bb@429@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@428@01 3)) q$bb@429@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1051@11@1051@393|)))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) >=
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) >= ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@428@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@349@01 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@428@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
; [exec]
; assert (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==>
;     s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const q$i@430@01 Int)
(push) ; 7
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 8
; [then-branch: 150 | !(0 <= q$i@430@01) | live]
; [else-branch: 150 | 0 <= q$i@430@01 | live]
(push) ; 9
; [then-branch: 150 | !(0 <= q$i@430@01)]
(assert (not (<= 0 q$i@430@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 150 | 0 <= q$i@430@01]
(assert (<= 0 q$i@430@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@430@01) (not (<= 0 q$i@430@01))))
(push) ; 8
; [then-branch: 151 | 0 <= q$i@430@01 && q$i@430@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 151 | !(0 <= q$i@430@01 && q$i@430@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 9
; [then-branch: 151 | 0 <= q$i@430@01 && q$i@430@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@430@01)
  (<=
    q$i@430@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] q$i <= ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 10
; [then-branch: 152 | q$i@430@01 <= $struct_get[Int]($struct_loc[Int](self@349@01, 1)) | live]
; [else-branch: 152 | !(q$i@430@01 <= $struct_get[Int]($struct_loc[Int](self@349@01, 1))) | live]
(push) ; 11
; [then-branch: 152 | q$i@430@01 <= $struct_get[Int]($struct_loc[Int](self@349@01, 1))]
(assert (<= q$i@430@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($old_self, 2)
(pop) ; 11
(push) ; 11
; [else-branch: 152 | !(q$i@430@01 <= $struct_get[Int]($struct_loc[Int](self@349@01, 1)))]
(assert (not (<= q$i@430@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not (<= q$i@430@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
  (<= q$i@430@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1)))))
(pop) ; 9
(push) ; 9
; [else-branch: 151 | !(0 <= q$i@430@01 && q$i@430@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@430@01)
    (<=
      q$i@430@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@430@01)
    (<=
      q$i@430@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@430@01)
    (<=
      q$i@430@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not (<= q$i@430@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
      (<= q$i@430@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@430@01)
      (<=
        q$i@430@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@430@01)
    (<=
      q$i@430@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@430@01 Int)) (!
  (and
    (or (<= 0 q$i@430@01) (not (<= 0 q$i@430@01)))
    (=>
      (and
        (<= 0 q$i@430@01)
        (<=
          q$i@430@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@430@01)
        (<=
          q$i@430@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (<= q$i@430@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
          (<= q$i@430@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))))
    (or
      (not
        (and
          (<= 0 q$i@430@01)
          (<=
            q$i@430@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@430@01)
        (<=
          q$i@430@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@428@01 2)) q$i@430@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1053@11@1053@474-aux|)))
(push) ; 7
(assert (not (forall ((q$i@430@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@430@01)
        (<=
          q$i@430@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@430@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@428@01 2)) q$i@430@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@430@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@428@01 2)) q$i@430@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1053@11@1053@474|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@430@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@430@01)
        (<=
          q$i@430@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@430@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@428@01 2)) q$i@430@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@430@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@428@01 2)) q$i@430@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1053@11@1053@474|)))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 140 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@349@01, 1)))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
      1)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 5
; [eval] !($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 5
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
    1)
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
      1)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 153 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@349@01, 1)))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 153 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@349@01, 1)))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 153 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@349@01, 1)))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
      1)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 1, $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) +
;   1): $Struct)
; [eval] ($struct_set(self, 1, $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1): $Struct)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(declare-const self@431@01 $Struct)
(assert (=
  self@431@01
  ($struct_set<$Struct> self@349@01 1 (+
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
    1))))
; [exec]
; self := ($struct_set(self, 4, ($map_set(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]),
;   l$i1$hash, l$i1$to): $Map[Seq[Int], Int])): $Struct)
; [eval] ($struct_set(self, 4, ($map_set(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), l$i1$hash, l$i1$to): $Map[Seq[Int], Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), l$i1$hash, l$i1$to): $Map[Seq[Int], Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(declare-const self@432@01 $Struct)
(assert (=
  self@432@01
  ($struct_set<$Struct> self@431@01 4 ($map_set<$Map<Seq<Int>~_Int>> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@431@01 4)) l$hash@343@01 l$i1$to@424@01))))
; [exec]
; self := ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]),
;   l$i1$hash, true): $Map[Seq[Int], Bool])): $Struct)
; [eval] ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), l$i1$hash, true): $Map[Seq[Int], Bool])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), l$i1$hash, true): $Map[Seq[Int], Bool])
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc(self, 3)
(declare-const self@433@01 $Struct)
(assert (=
  self@433@01
  ($struct_set<$Struct> self@432@01 3 ($map_set<$Map<Seq<Int>~_Bool>> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@432@01 3)) l$hash@343@01 true))))
; [exec]
; self := ($struct_set(self, 2, ($map_set(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;   ($struct_get($struct_loc(self, 1)): Int), s$struct$DocumentTransfer$init(($struct_get($struct_loc(block,
;   2)): Int), l$i1$hash, l$i1$frm, l$i1$to)): $Map[Int, $Struct])): $Struct)
; [eval] ($struct_set(self, 2, ($map_set(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), ($struct_get($struct_loc(self, 1)): Int), s$struct$DocumentTransfer$init(($struct_get($struct_loc(block, 2)): Int), l$i1$hash, l$i1$frm, l$i1$to)): $Map[Int, $Struct])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), ($struct_get($struct_loc(self, 1)): Int), s$struct$DocumentTransfer$init(($struct_get($struct_loc(block, 2)): Int), l$i1$hash, l$i1$frm, l$i1$to)): $Map[Int, $Struct])
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] s$struct$DocumentTransfer$init(($struct_get($struct_loc(block, 2)): Int), l$i1$hash, l$i1$frm, l$i1$to)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(declare-const self@434@01 $Struct)
(assert (=
  self@434@01
  ($struct_set<$Struct> self@433@01 2 ($map_set<$Map<Int~_$Struct>> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@433@01 2)) ($struct_get<Int> ($struct_loc<Int> self@433@01 1)) (s$struct$DocumentTransfer$init<$Struct> ($struct_get<Int> ($struct_loc<Int> block@346@01 2)) l$hash@343@01 l$i1$frm@423@01 l$i1$to@424@01)))))
; [exec]
; inhale acc(e$Document(($struct_get($struct_loc(block, 2)): Int), l$i1$hash,
;   l$i1$frm, l$i1$to), write)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(declare-const $t@435@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label i1$return
; [exec]
; label return
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@365@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@365@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 154 | $out_of_gas@365@01 | live]
; [else-branch: 154 | !($out_of_gas@365@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 154 | $out_of_gas@365@01]
(assert $out_of_gas@365@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 155 | False | dead]
; [else-branch: 155 | True | live]
(push) ; 7
; [else-branch: 155 | True]
(pop) ; 7
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 156 | True | live]
; [else-branch: 156 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 156 | True]
; [exec]
; assert old((forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int) ==>
;     !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool) ||
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int)))
; [eval] old((forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int))
(declare-const q$bb@436@01 Seq<Int>)
(push) ; 8
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 9
; [then-branch: 157 | |q$bb@436@01| == 32 | live]
; [else-branch: 157 | |q$bb@436@01| != 32 | live]
(push) ; 10
; [then-branch: 157 | |q$bb@436@01| == 32]
(assert (= (Seq_length q$bb@436@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($old_self, 4)
(push) ; 11
; [then-branch: 158 | False | dead]
; [else-branch: 158 | True | live]
(push) ; 12
; [else-branch: 158 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 157 | |q$bb@436@01| != 32]
(assert (not (= (Seq_length q$bb@436@01) 32)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@436@01) 32)) (= (Seq_length q$bb@436@01) 32)))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@436@01 Seq<Int>)) (!
  (or (not (= (Seq_length q$bb@436@01) 32)) (= (Seq_length q$bb@436@01) 32))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@436@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1043@17@1043@533-aux|)))
; [exec]
; assert old((forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)) ==>
;     perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) ==
;     1 * write))
; [eval] old((forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write)
(declare-const q$i@437@01 Int)
(push) ; 8
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 9
; [then-branch: 159 | !(0 <= q$i@437@01) | live]
; [else-branch: 159 | 0 <= q$i@437@01 | live]
(push) ; 10
; [then-branch: 159 | !(0 <= q$i@437@01)]
(assert (not (<= 0 q$i@437@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 159 | 0 <= q$i@437@01]
(assert (<= 0 q$i@437@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@437@01) (not (<= 0 q$i@437@01))))
(push) ; 9
; [then-branch: 160 | 0 <= q$i@437@01 && q$i@437@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 160 | !(0 <= q$i@437@01 && q$i@437@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 10
; [then-branch: 160 | 0 <= q$i@437@01 && q$i@437@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@437@01)
  (<=
    q$i@437@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($old_self, 2)
(push) ; 11
; [then-branch: 161 | !(s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@437@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@437@01))) | live]
; [else-branch: 161 | s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@437@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@437@01)) | live]
(push) ; 12
; [then-branch: 161 | !(s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@437@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@437@01)))]
(assert (not
  (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01))))
; [eval] perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int)))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] 1 * write
(pop) ; 12
(push) ; 12
; [else-branch: 161 | s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@437@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@437@01))]
(assert (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01))
  (not
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01)))))
(pop) ; 10
(push) ; 10
; [else-branch: 160 | !(0 <= q$i@437@01 && q$i@437@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@437@01)
    (<=
      q$i@437@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@437@01)
    (<=
      q$i@437@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@437@01)
    (<=
      q$i@437@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@437@01)
      (<=
        q$i@437@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@437@01)
    (<=
      q$i@437@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@437@01 Int)) (!
  (and
    (or (<= 0 q$i@437@01) (not (<= 0 q$i@437@01)))
    (=>
      (and
        (<= 0 q$i@437@01)
        (<=
          q$i@437@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@437@01)
        (<=
          q$i@437@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01))
          (not
            (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01))))))
    (or
      (not
        (and
          (<= 0 q$i@437@01)
          (<=
            q$i@437@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@437@01)
        (<=
          q$i@437@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1044@17@1044@939-aux|)))
(push) ; 8
(assert (not (forall ((q$i@437@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@437@01)
        (<=
          q$i@437@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01))))
    false)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1044@17@1044@939|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@437@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@437@01)
        (<=
          q$i@437@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01))))
    false)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@437@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1044@17@1044@939|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@438@01 $Snap)
(assert (= $t@438@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@366@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@439@01 $Struct)
(assert (=
  self@439@01
  ($struct_set<$Struct> self@349@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@349@01 5))
    l$havoc@366@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const q$bb@440@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 8
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 9
; [then-branch: 162 | |q$bb@440@01| == 32 | live]
; [else-branch: 162 | |q$bb@440@01| != 32 | live]
(push) ; 10
; [then-branch: 162 | |q$bb@440@01| == 32]
(assert (= (Seq_length q$bb@440@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(push) ; 11
; [then-branch: 163 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@439@01, 4)), q$bb@440@01) != 0 | live]
; [else-branch: 163 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@439@01, 4)), q$bb@440@01) == 0 | live]
(push) ; 12
; [then-branch: 163 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@439@01, 4)), q$bb@440@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@439@01 4)) q$bb@440@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc(self, 3)
(pop) ; 12
(push) ; 12
; [else-branch: 163 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@439@01, 4)), q$bb@440@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@439@01 4)) q$bb@440@01)
  0))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@439@01 4)) q$bb@440@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@439@01 4)) q$bb@440@01)
      0))))
(pop) ; 10
(push) ; 10
; [else-branch: 162 | |q$bb@440@01| != 32]
(assert (not (= (Seq_length q$bb@440@01) 32)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@440@01) 32)
  (and
    (= (Seq_length q$bb@440@01) 32)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@439@01 4)) q$bb@440@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@439@01 4)) q$bb@440@01)
          0))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@440@01) 32)) (= (Seq_length q$bb@440@01) 32)))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@440@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@440@01) 32)
      (and
        (= (Seq_length q$bb@440@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@439@01 4)) q$bb@440@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@439@01 4)) q$bb@440@01)
              0)))))
    (or (not (= (Seq_length q$bb@440@01) 32)) (= (Seq_length q$bb@440@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@439@01 4)) q$bb@440@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1051@11@1051@393-aux|)))
(assert (forall ((q$bb@440@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@440@01) 32)
      (and
        (= (Seq_length q$bb@440@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@439@01 4)) q$bb@440@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@439@01 4)) q$bb@440@01)
              0)))))
    (or (not (= (Seq_length q$bb@440@01) 32)) (= (Seq_length q$bb@440@01) 32)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@439@01 3)) q$bb@440@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1051@11@1051@393-aux|)))
(push) ; 8
(assert (not (forall ((q$bb@440@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@440@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@439@01 4)) q$bb@440@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@439@01 3)) q$bb@440@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@439@01 4)) q$bb@440@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@439@01 3)) q$bb@440@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1051@11@1051@393|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$bb@440@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@440@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@439@01 4)) q$bb@440@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@439@01 3)) q$bb@440@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@439@01 4)) q$bb@440@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@439@01 3)) q$bb@440@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1051@11@1051@393|)))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) >=
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) >= ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 8
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@439@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@349@01 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@439@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
; [exec]
; assert (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==>
;     s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const q$i@441@01 Int)
(push) ; 8
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 9
; [then-branch: 164 | !(0 <= q$i@441@01) | live]
; [else-branch: 164 | 0 <= q$i@441@01 | live]
(push) ; 10
; [then-branch: 164 | !(0 <= q$i@441@01)]
(assert (not (<= 0 q$i@441@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 164 | 0 <= q$i@441@01]
(assert (<= 0 q$i@441@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@441@01) (not (<= 0 q$i@441@01))))
(push) ; 9
; [then-branch: 165 | 0 <= q$i@441@01 && q$i@441@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 165 | !(0 <= q$i@441@01 && q$i@441@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 10
; [then-branch: 165 | 0 <= q$i@441@01 && q$i@441@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@441@01)
  (<=
    q$i@441@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] q$i <= ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 11
; [then-branch: 166 | q$i@441@01 <= $struct_get[Int]($struct_loc[Int](self@349@01, 1)) | live]
; [else-branch: 166 | !(q$i@441@01 <= $struct_get[Int]($struct_loc[Int](self@349@01, 1))) | live]
(push) ; 12
; [then-branch: 166 | q$i@441@01 <= $struct_get[Int]($struct_loc[Int](self@349@01, 1))]
(assert (<= q$i@441@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($old_self, 2)
(pop) ; 12
(push) ; 12
; [else-branch: 166 | !(q$i@441@01 <= $struct_get[Int]($struct_loc[Int](self@349@01, 1)))]
(assert (not (<= q$i@441@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (<= q$i@441@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
  (<= q$i@441@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 165 | !(0 <= q$i@441@01 && q$i@441@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@441@01)
    (<=
      q$i@441@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@441@01)
    (<=
      q$i@441@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@441@01)
    (<=
      q$i@441@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not (<= q$i@441@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
      (<= q$i@441@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@441@01)
      (<=
        q$i@441@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@441@01)
    (<=
      q$i@441@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@441@01 Int)) (!
  (and
    (or (<= 0 q$i@441@01) (not (<= 0 q$i@441@01)))
    (=>
      (and
        (<= 0 q$i@441@01)
        (<=
          q$i@441@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@441@01)
        (<=
          q$i@441@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (<= q$i@441@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
          (<= q$i@441@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))))
    (or
      (not
        (and
          (<= 0 q$i@441@01)
          (<=
            q$i@441@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@441@01)
        (<=
          q$i@441@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@439@01 2)) q$i@441@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1053@11@1053@474-aux|)))
(push) ; 8
(assert (not (forall ((q$i@441@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@441@01)
        (<=
          q$i@441@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@441@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@439@01 2)) q$i@441@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@441@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@439@01 2)) q$i@441@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1053@11@1053@474|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@441@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@441@01)
        (<=
          q$i@441@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@441@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@439@01 2)) q$i@441@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@441@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@439@01 2)) q$i@441@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1053@11@1053@474|)))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 154 | !($out_of_gas@365@01)]
(assert (not $out_of_gas@365@01))
(pop) ; 6
; [eval] !$out_of_gas
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@365@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@365@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 167 | !($out_of_gas@365@01) | live]
; [else-branch: 167 | $out_of_gas@365@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 167 | !($out_of_gas@365@01)]
(assert (not $out_of_gas@365@01))
; [exec]
; label end
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 168 | True | live]
; [else-branch: 168 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 168 | True]
; [exec]
; assert (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int) ==>
;     !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool) ||
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int))
(declare-const q$bb@442@01 Seq<Int>)
(push) ; 8
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 9
; [then-branch: 169 | |q$bb@442@01| == 32 | live]
; [else-branch: 169 | |q$bb@442@01| != 32 | live]
(push) ; 10
; [then-branch: 169 | |q$bb@442@01| == 32]
(assert (= (Seq_length q$bb@442@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($old_self, 4)
(push) ; 11
; [then-branch: 170 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@434@01, 4)), q$bb@442@01) != $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@349@01, 4)), q$bb@442@01) | live]
; [else-branch: 170 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@434@01, 4)), q$bb@442@01) == $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@349@01, 4)), q$bb@442@01) | live]
(push) ; 12
; [then-branch: 170 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@434@01, 4)), q$bb@442@01) != $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@349@01, 4)), q$bb@442@01)]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@434@01 4)) q$bb@442@01)
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@442@01))))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc($old_self, 3)
(push) ; 13
; [then-branch: 171 | !($map_get[Bool]($struct_get[$Map[Seq[Int], Bool]]($struct_loc[Int](self@349@01, 3)), q$bb@442@01)) | live]
; [else-branch: 171 | $map_get[Bool]($struct_get[$Map[Seq[Int], Bool]]($struct_loc[Int](self@349@01, 3)), q$bb@442@01) | live]
(push) ; 14
; [then-branch: 171 | !($map_get[Bool]($struct_get[$Map[Seq[Int], Bool]]($struct_loc[Int](self@349@01, 3)), q$bb@442@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@349@01 3)) q$bb@442@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 171 | $map_get[Bool]($struct_get[$Map[Seq[Int], Bool]]($struct_loc[Int](self@349@01, 3)), q$bb@442@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@349@01 3)) q$bb@442@01))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($old_self, 4)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@349@01 3)) q$bb@442@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@349@01 3)) q$bb@442@01))))
(pop) ; 12
(push) ; 12
; [else-branch: 170 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@434@01, 4)), q$bb@442@01) == $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@349@01, 4)), q$bb@442@01)]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@434@01 4)) q$bb@442@01)
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@442@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@434@01 4)) q$bb@442@01)
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@442@01)))
  (and
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@434@01 4)) q$bb@442@01)
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@442@01)))
    (or
      ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@349@01 3)) q$bb@442@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@349@01 3)) q$bb@442@01))))))
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@434@01 4)) q$bb@442@01)
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@442@01))
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@434@01 4)) q$bb@442@01)
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@442@01)))))
(pop) ; 10
(push) ; 10
; [else-branch: 169 | |q$bb@442@01| != 32]
(assert (not (= (Seq_length q$bb@442@01) 32)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@442@01) 32)
  (and
    (= (Seq_length q$bb@442@01) 32)
    (=>
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@434@01 4)) q$bb@442@01)
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@442@01)))
      (and
        (not
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@434@01 4)) q$bb@442@01)
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@442@01)))
        (or
          ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@349@01 3)) q$bb@442@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@349@01 3)) q$bb@442@01)))))
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@434@01 4)) q$bb@442@01)
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@442@01))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@434@01 4)) q$bb@442@01)
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@442@01)))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@442@01) 32)) (= (Seq_length q$bb@442@01) 32)))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@442@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@442@01) 32)
      (and
        (= (Seq_length q$bb@442@01) 32)
        (=>
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@434@01 4)) q$bb@442@01)
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@442@01)))
          (and
            (not
              (=
                ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@434@01 4)) q$bb@442@01)
                ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@442@01)))
            (or
              ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@349@01 3)) q$bb@442@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@349@01 3)) q$bb@442@01)))))
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@434@01 4)) q$bb@442@01)
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@442@01))
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@434@01 4)) q$bb@442@01)
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@442@01))))))
    (or (not (= (Seq_length q$bb@442@01) 32)) (= (Seq_length q$bb@442@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@434@01 4)) q$bb@442@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1040@13@1040@529-aux|)))
(push) ; 8
(assert (not (forall ((q$bb@442@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@442@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@434@01 4)) q$bb@442@01)
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@442@01))))
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@349@01 3)) q$bb@442@01))
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@345@01 0))
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@442@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@434@01 4)) q$bb@442@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1040@13@1040@529|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$bb@442@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@442@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@434@01 4)) q$bb@442@01)
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@442@01))))
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@349@01 3)) q$bb@442@01))
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@345@01 0))
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@349@01 4)) q$bb@442@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@434@01 4)) q$bb@442@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1040@13@1040@529|)))
; [exec]
; assert (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)) ==>
;     perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) ==
;     1 * write)
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write)
(declare-const q$i@443@01 Int)
(push) ; 8
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 9
; [then-branch: 172 | !(0 <= q$i@443@01) | live]
; [else-branch: 172 | 0 <= q$i@443@01 | live]
(push) ; 10
; [then-branch: 172 | !(0 <= q$i@443@01)]
(assert (not (<= 0 q$i@443@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 172 | 0 <= q$i@443@01]
(assert (<= 0 q$i@443@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@443@01) (not (<= 0 q$i@443@01))))
(push) ; 9
; [then-branch: 173 | 0 <= q$i@443@01 && q$i@443@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 173 | !(0 <= q$i@443@01 && q$i@443@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 10
; [then-branch: 173 | 0 <= q$i@443@01 && q$i@443@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@443@01)
  (<=
    q$i@443@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($old_self, 2)
(push) ; 11
; [then-branch: 174 | !(s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@434@01, 2)), q$i@443@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@443@01))) | live]
; [else-branch: 174 | s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@434@01, 2)), q$i@443@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@443@01)) | live]
(push) ; 12
; [then-branch: 174 | !(s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@434@01, 2)), q$i@443@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@443@01)))]
(assert (not
  (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@443@01))))
; [eval] perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int)))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] 1 * write
(pop) ; 12
(push) ; 12
; [else-branch: 174 | s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@434@01, 2)), q$i@443@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@349@01, 2)), q$i@443@01))]
(assert (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@443@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@443@01))
  (not
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@443@01)))))
(pop) ; 10
(push) ; 10
; [else-branch: 173 | !(0 <= q$i@443@01 && q$i@443@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@443@01)
    (<=
      q$i@443@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@443@01)
    (<=
      q$i@443@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@443@01)
    (<=
      q$i@443@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@443@01))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@443@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@443@01)
      (<=
        q$i@443@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@443@01)
    (<=
      q$i@443@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@443@01 Int)) (!
  (and
    (or (<= 0 q$i@443@01) (not (<= 0 q$i@443@01)))
    (=>
      (and
        (<= 0 q$i@443@01)
        (<=
          q$i@443@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@443@01)
        (<=
          q$i@443@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@443@01))
          (not
            (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@443@01))))))
    (or
      (not
        (and
          (<= 0 q$i@443@01)
          (<=
            q$i@443@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@443@01)
        (<=
          q$i@443@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1041@13@1041@935-aux|)))
(push) ; 8
(assert (not (forall ((q$i@443@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@443@01)
        (<=
          q$i@443@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@443@01))))
    (=
      (ite
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01) 0))
            ($struct_get<Int> ($struct_loc<Int> block@346@01 2)))
          (Seq_equal
            ($struct_get<Seq<Int>> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01) 1))
            l$hash@343@01)
          (=
            ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01) 2))
            l$i1$frm@423@01)
          (=
            ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01) 3))
            l$i1$to@424@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1041@13@1041@935|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@443@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@443@01)
        (<=
          q$i@443@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@443@01))))
    (=
      (ite
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01) 0))
            ($struct_get<Int> ($struct_loc<Int> block@346@01 2)))
          (Seq_equal
            ($struct_get<Seq<Int>> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01) 1))
            l$hash@343@01)
          (=
            ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01) 2))
            l$i1$frm@423@01)
          (=
            ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01) 3))
            l$i1$to@424@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@434@01 2)) q$i@443@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1041@13@1041@935|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@444@01 $Snap)
(assert (= $t@444@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@366@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@445@01 $Struct)
(assert (=
  self@445@01
  ($struct_set<$Struct> self@434@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@434@01 5))
    l$havoc@366@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const q$bb@446@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 8
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 9
; [then-branch: 175 | |q$bb@446@01| == 32 | live]
; [else-branch: 175 | |q$bb@446@01| != 32 | live]
(push) ; 10
; [then-branch: 175 | |q$bb@446@01| == 32]
(assert (= (Seq_length q$bb@446@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(push) ; 11
; [then-branch: 176 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@445@01, 4)), q$bb@446@01) != 0 | live]
; [else-branch: 176 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@445@01, 4)), q$bb@446@01) == 0 | live]
(push) ; 12
; [then-branch: 176 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@445@01, 4)), q$bb@446@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@445@01 4)) q$bb@446@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc(self, 3)
(pop) ; 12
(push) ; 12
; [else-branch: 176 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@445@01, 4)), q$bb@446@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@445@01 4)) q$bb@446@01)
  0))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@445@01 4)) q$bb@446@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@445@01 4)) q$bb@446@01)
      0))))
(pop) ; 10
(push) ; 10
; [else-branch: 175 | |q$bb@446@01| != 32]
(assert (not (= (Seq_length q$bb@446@01) 32)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@446@01) 32)
  (and
    (= (Seq_length q$bb@446@01) 32)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@445@01 4)) q$bb@446@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@445@01 4)) q$bb@446@01)
          0))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@446@01) 32)) (= (Seq_length q$bb@446@01) 32)))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@446@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@446@01) 32)
      (and
        (= (Seq_length q$bb@446@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@445@01 4)) q$bb@446@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@445@01 4)) q$bb@446@01)
              0)))))
    (or (not (= (Seq_length q$bb@446@01) 32)) (= (Seq_length q$bb@446@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@445@01 4)) q$bb@446@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1051@11@1051@393-aux|)))
(assert (forall ((q$bb@446@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@446@01) 32)
      (and
        (= (Seq_length q$bb@446@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@445@01 4)) q$bb@446@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@445@01 4)) q$bb@446@01)
              0)))))
    (or (not (= (Seq_length q$bb@446@01) 32)) (= (Seq_length q$bb@446@01) 32)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@445@01 3)) q$bb@446@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1051@11@1051@393-aux|)))
(push) ; 8
(assert (not (forall ((q$bb@446@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@446@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@445@01 4)) q$bb@446@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@445@01 3)) q$bb@446@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@445@01 4)) q$bb@446@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@445@01 3)) q$bb@446@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1051@11@1051@393|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$bb@446@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@446@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@445@01 4)) q$bb@446@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@445@01 3)) q$bb@446@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@445@01 4)) q$bb@446@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@445@01 3)) q$bb@446@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1051@11@1051@393|)))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) >=
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) >= ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 8
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@445@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@349@01 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@445@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
; [exec]
; assert (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==>
;     s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const q$i@447@01 Int)
(push) ; 8
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 9
; [then-branch: 177 | !(0 <= q$i@447@01) | live]
; [else-branch: 177 | 0 <= q$i@447@01 | live]
(push) ; 10
; [then-branch: 177 | !(0 <= q$i@447@01)]
(assert (not (<= 0 q$i@447@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 177 | 0 <= q$i@447@01]
(assert (<= 0 q$i@447@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@447@01) (not (<= 0 q$i@447@01))))
(push) ; 9
; [then-branch: 178 | 0 <= q$i@447@01 && q$i@447@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 178 | !(0 <= q$i@447@01 && q$i@447@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 10
; [then-branch: 178 | 0 <= q$i@447@01 && q$i@447@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@447@01)
  (<=
    q$i@447@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] q$i <= ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 11
; [then-branch: 179 | q$i@447@01 <= $struct_get[Int]($struct_loc[Int](self@349@01, 1)) | live]
; [else-branch: 179 | !(q$i@447@01 <= $struct_get[Int]($struct_loc[Int](self@349@01, 1))) | live]
(push) ; 12
; [then-branch: 179 | q$i@447@01 <= $struct_get[Int]($struct_loc[Int](self@349@01, 1))]
(assert (<= q$i@447@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($old_self, 2)
(pop) ; 12
(push) ; 12
; [else-branch: 179 | !(q$i@447@01 <= $struct_get[Int]($struct_loc[Int](self@349@01, 1)))]
(assert (not (<= q$i@447@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (<= q$i@447@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
  (<= q$i@447@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 178 | !(0 <= q$i@447@01 && q$i@447@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@447@01)
    (<=
      q$i@447@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@447@01)
    (<=
      q$i@447@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@447@01)
    (<=
      q$i@447@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not (<= q$i@447@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
      (<= q$i@447@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@447@01)
      (<=
        q$i@447@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@447@01)
    (<=
      q$i@447@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@447@01 Int)) (!
  (and
    (or (<= 0 q$i@447@01) (not (<= 0 q$i@447@01)))
    (=>
      (and
        (<= 0 q$i@447@01)
        (<=
          q$i@447@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@447@01)
        (<=
          q$i@447@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (<= q$i@447@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
          (<= q$i@447@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))))
    (or
      (not
        (and
          (<= 0 q$i@447@01)
          (<=
            q$i@447@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@447@01)
        (<=
          q$i@447@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@445@01 2)) q$i@447@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1053@11@1053@474-aux|)))
(push) ; 8
(assert (not (forall ((q$i@447@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@447@01)
        (<=
          q$i@447@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@447@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@445@01 2)) q$i@447@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@447@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@445@01 2)) q$i@447@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1053@11@1053@474|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@447@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@447@01)
        (<=
          q$i@447@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@447@01 ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@445@01 2)) q$i@447@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@349@01 2)) q$i@447@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@445@01 2)) q$i@447@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1053@11@1053@474|)))
(pop) ; 7
; [eval] !$succ
; [then-branch: 180 | False | dead]
; [else-branch: 180 | True | live]
(push) ; 7
; [else-branch: 180 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 167 | $out_of_gas@365@01]
(assert $out_of_gas@365@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 153 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@349@01, 1)))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@349@01 1))))
    1)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 137 | i0$$res@416@01]
(assert i0$$res@416@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$transfer_document ----------
(declare-const l$hash@448@01 Seq<Int>)
(declare-const l$recipient@449@01 Int)
(declare-const $succ@450@01 Bool)
(declare-const l$hash@451@01 Seq<Int>)
(declare-const l$recipient@452@01 Int)
(declare-const $succ@453@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@454@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@455@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@456@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@457@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@458@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@459@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@460@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@461@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@462@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@463@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@464@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@465@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@466@01 Bool)
; [exec]
; var l$i0$hash: Seq[Int]
(declare-const l$i0$hash@467@01 Seq<Int>)
; [exec]
; var i0$$res: Bool
(declare-const i0$$res@468@01 Bool)
; [exec]
; var l$i1$hash: Seq[Int]
(declare-const l$i1$hash@469@01 Seq<Int>)
; [exec]
; var l$i1$frm: Int
(declare-const l$i1$frm@470@01 Int)
; [exec]
; var l$i1$to: Int
(declare-const l$i1$to@471@01 Int)
; [exec]
; var i1$$pre_self: $Struct
(declare-const i1$$pre_self@472@01 $Struct)
; [exec]
; var i1$$pre_$contracts: $Map[Int, $Struct]
(declare-const i1$$pre_$contracts@473@01 $Map<Int~_$Struct>)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@474@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@475@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@476@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@477@01 $Snap)
(assert (= $t@477@01 ($Snap.combine ($Snap.first $t@477@01) ($Snap.second $t@477@01))))
(assert (= ($Snap.first $t@477@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@458@01 0))))
(assert (= ($Snap.second $t@477@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@458@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@478@01 $Snap)
(assert (= $t@478@01 ($Snap.combine ($Snap.first $t@478@01) ($Snap.second $t@478@01))))
(assert (= ($Snap.first $t@478@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
(assert (= ($Snap.second $t@478@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@458@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 0)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 0)): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@479@01 $Snap)
(assert (= $t@479@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@480@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(push) ; 4
; [then-branch: 181 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), $q0@480@01), 0))) | live]
; [else-branch: 181 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), $q0@480@01), 0)) | live]
(push) ; 5
; [then-branch: 181 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), $q0@480@01), 0)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@480@01) 0)))))
(pop) ; 5
(push) ; 5
; [else-branch: 181 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), $q0@480@01), 0))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@480@01) 0))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@480@01) 0)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@480@01) 0))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@480@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@480@01) 0)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@480@01) 0)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@480@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1084@11@1084@441-aux|)))
(assert (forall (($q0@480@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@480@01) 0)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@480@01) 0))
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@480@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1084@11@1084@441|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) }
;     |($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 1)): Seq[Int])| ==
;     32)
(declare-const $t@481@01 $Snap)
(assert (= $t@481@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) } |($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| == 32)
(declare-const $q0@482@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@482@01 Int)) (!
  (=
    (Seq_length
      ($struct_get<Seq<Int>> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@482@01) 1)))
    32)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@482@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1085@11@1085@246|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 2)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 2)): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@483@01 $Snap)
(assert (= $t@483@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q0@484@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(push) ; 4
; [then-branch: 182 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), $q0@484@01), 2))) | live]
; [else-branch: 182 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), $q0@484@01), 2)) | live]
(push) ; 5
; [then-branch: 182 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), $q0@484@01), 2)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@484@01) 2)))))
(pop) ; 5
(push) ; 5
; [else-branch: 182 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), $q0@484@01), 2))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@484@01) 2))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@484@01) 2)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@484@01) 2))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@484@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@484@01) 2)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@484@01) 2)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@484@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1086@11@1086@412-aux|)))
(assert (forall (($q0@484@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@484@01) 2)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@484@01) 2))
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@484@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1086@11@1086@412|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) }
;     0 <=
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 3)): Int) &&
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), 3)): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@485@01 $Snap)
(assert (= $t@485@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) } 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q0@486@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) && ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(push) ; 4
; [then-branch: 183 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), $q0@486@01), 3))) | live]
; [else-branch: 183 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), $q0@486@01), 3)) | live]
(push) ; 5
; [then-branch: 183 | !(0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), $q0@486@01), 3)))]
(assert (not
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@486@01) 3)))))
(pop) ; 5
(push) ; 5
; [else-branch: 183 | 0 <= $struct_get[Int]($struct_loc[Int]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), $q0@486@01), 3))]
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@486@01) 3))))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@486@01) 3)))
  (not
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@486@01) 3))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@486@01 Int)) (!
  (or
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@486@01) 3)))
    (not
      (<=
        0
        ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@486@01) 3)))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@486@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1087@11@1087@412-aux|)))
(assert (forall (($q0@486@01 Int)) (!
  (and
    (<=
      0
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@486@01) 3)))
    (<=
      ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@486@01) 3))
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@486@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1087@11@1087@412|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) }
;     ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     $q0): $Struct), -1)): Int) ==
;     722760475380740992045242976742918181534147582937316800750962)
(declare-const $t@487@01 $Snap)
(assert (= $t@487@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct) } ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int) == 722760475380740992045242976742918181534147582937316800750962)
(declare-const $q0@488@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int) == 722760475380740992045242976742918181534147582937316800750962
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct), -1)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), $q0): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] -1
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@488@01 Int)) (!
  (=
    ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@488@01) (- 0 1)))
    722760475380740992045242976742918181534147582937316800750962)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) $q0@488@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1088@11@1088@298|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <=
;     1461501637330902918203684832716283019655932542975)
(declare-const $t@489@01 $Snap)
(assert (= $t@489@01 $Snap.unit))
; [eval] (forall $q3: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975)
(declare-const $q3@490@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(push) ; 4
; [then-branch: 184 | !(0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@458@01, 4)), $q3@490@01)) | live]
; [else-branch: 184 | 0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@458@01, 4)), $q3@490@01) | live]
(push) ; 5
; [then-branch: 184 | !(0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@458@01, 4)), $q3@490@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) $q3@490@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 184 | 0 <= $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@458@01, 4)), $q3@490@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) $q3@490@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) $q3@490@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) $q3@490@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@490@01 Seq<Int>)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) $q3@490@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) $q3@490@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) $q3@490@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1089@11@1089@336-aux|)))
(assert (forall (($q3@490@01 Seq<Int>)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) $q3@490@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) $q3@490@01)
      1461501637330902918203684832716283019655932542975))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) $q3@490@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1089@11@1089@336|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])): Int))
(declare-const $t@491@01 $Snap)
(assert (= $t@491@01 $Snap.unit))
; [eval] (forall $q3: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])): Int))
(declare-const $q3@492@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@492@01 Seq<Int>)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) $q3@492@01)
    ($map_sum<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) $q3@492@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1090@11@1090@273|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@493@01 $Snap)
(assert (= $t@493@01 ($Snap.combine ($Snap.first $t@493@01) ($Snap.second $t@493@01))))
(assert (= ($Snap.first $t@493@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@458@01 5))))
(assert (= ($Snap.second $t@493@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@458@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@494@01 $Snap)
(assert (= $t@494@01 ($Snap.combine ($Snap.first $t@494@01) ($Snap.second $t@494@01))))
(assert (= ($Snap.first $t@494@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@458@01 6))))
(assert (= ($Snap.second $t@494@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@458@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@495@01 $Snap)
(assert (= $t@495@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q4@496@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 185 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@458@01, 8)), $q4@496@01)) | live]
; [else-branch: 185 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@458@01, 8)), $q4@496@01) | live]
(push) ; 5
; [then-branch: 185 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@458@01, 8)), $q4@496@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 8)) $q4@496@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 185 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@458@01, 8)), $q4@496@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 8)) $q4@496@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 8)) $q4@496@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 8)) $q4@496@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@496@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 8)) $q4@496@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 8)) $q4@496@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 8)) $q4@496@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1093@11@1093@345-aux|)))
(assert (forall (($q4@496@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 8)) $q4@496@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 8)) $q4@496@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 8)) $q4@496@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1093@11@1093@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q4: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@497@01 $Snap)
(assert (= $t@497@01 $Snap.unit))
; [eval] (forall $q4: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q4@498@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q4): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@498@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 8)) $q4@498@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 8)) $q4@498@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1094@11@1094@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q5: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@499@01 $Snap)
(assert (= $t@499@01 $Snap.unit))
; [eval] (forall $q5: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q5@500@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 186 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@458@01, 9)), $q5@500@01)) | live]
; [else-branch: 186 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@458@01, 9)), $q5@500@01) | live]
(push) ; 5
; [then-branch: 186 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@458@01, 9)), $q5@500@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 9)) $q5@500@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 186 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@458@01, 9)), $q5@500@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 9)) $q5@500@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 9)) $q5@500@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 9)) $q5@500@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@500@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 9)) $q5@500@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 9)) $q5@500@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 9)) $q5@500@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1095@11@1095@345-aux|)))
(assert (forall (($q5@500@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 9)) $q5@500@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 9)) $q5@500@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 9)) $q5@500@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1095@11@1095@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q5: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@501@01 $Snap)
(assert (= $t@501@01 $Snap.unit))
; [eval] (forall $q5: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q5@502@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q5): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@502@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 9)) $q5@502@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@458@01 9)) $q5@502@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1096@11@1096@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@503@01 $Snap)
(assert (= $t@503@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@458@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@504@01 $Snap)
(assert (= $t@504@01 ($Snap.combine ($Snap.first $t@504@01) ($Snap.second $t@504@01))))
(assert (= ($Snap.first $t@504@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@504@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |l$hash| == 32
(declare-const $t@505@01 $Snap)
(assert (= $t@505@01 $Snap.unit))
; [eval] |l$hash| == 32
; [eval] |l$hash|
(assert (= (Seq_length l$hash@451@01) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$recipient &&
;   l$recipient <= 1461501637330902918203684832716283019655932542975
(declare-const $t@506@01 $Snap)
(assert (= $t@506@01 ($Snap.combine ($Snap.first $t@506@01) ($Snap.second $t@506@01))))
(assert (= ($Snap.first $t@506@01) $Snap.unit))
; [eval] 0 <= l$recipient
(assert (<= 0 l$recipient@452@01))
(assert (= ($Snap.second $t@506@01) $Snap.unit))
; [eval] l$recipient <= 1461501637330902918203684832716283019655932542975
(assert (<= l$recipient@452@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@507@01 $Snap)
(assert (= $t@507@01 ($Snap.combine ($Snap.first $t@507@01) ($Snap.second $t@507@01))))
(assert (= ($Snap.first $t@507@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@455@01 0))))
(assert (= ($Snap.second $t@507@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@455@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@508@01 $Snap)
(assert (= $t@508@01 ($Snap.combine ($Snap.first $t@508@01) ($Snap.second $t@508@01))))
(assert (= ($Snap.first $t@508@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@455@01 1))))
(assert (= ($Snap.second $t@508@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@455@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@509@01 $Snap)
(assert (= $t@509@01 ($Snap.combine ($Snap.first $t@509@01) ($Snap.second $t@509@01))))
(assert (= ($Snap.first $t@509@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@455@01 2))))
(assert (= ($Snap.second $t@509@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@455@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@510@01 $Snap)
(assert (= $t@510@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@455@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@511@01 $Snap)
(assert (= $t@511@01 ($Snap.combine ($Snap.first $t@511@01) ($Snap.second $t@511@01))))
(assert (= ($Snap.first $t@511@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@455@01 4))))
(assert (= ($Snap.second $t@511@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@455@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@512@01 $Snap)
(assert (= $t@512@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@455@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@513@01 $Snap)
(assert (= $t@513@01 ($Snap.combine ($Snap.first $t@513@01) ($Snap.second $t@513@01))))
(assert (= ($Snap.first $t@513@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@454@01 0))))
(assert (= ($Snap.second $t@513@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@454@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@514@01 $Snap)
(assert (= $t@514@01 ($Snap.combine ($Snap.first $t@514@01) ($Snap.second $t@514@01))))
(assert (= ($Snap.first $t@514@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@454@01 1))))
(assert (= ($Snap.second $t@514@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@454@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@515@01 $Snap)
(assert (= $t@515@01 ($Snap.combine ($Snap.first $t@515@01) ($Snap.second $t@515@01))))
(assert (= ($Snap.first $t@515@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@454@01 2))))
(assert (= ($Snap.second $t@515@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@454@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@516@01 $Snap)
(assert (= $t@516@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@454@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@517@01 $Snap)
(assert (= $t@517@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@454@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@518@01 $Snap)
(assert (= $t@518@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@519@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const $t@520@01 $Snap)
(assert (= $t@520@01 $Snap.unit))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const q$bb@521@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 3
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 4
; [then-branch: 187 | |q$bb@521@01| == 32 | live]
; [else-branch: 187 | |q$bb@521@01| != 32 | live]
(push) ; 5
; [then-branch: 187 | |q$bb@521@01| == 32]
(assert (= (Seq_length q$bb@521@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(push) ; 6
; [then-branch: 188 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@458@01, 4)), q$bb@521@01) != 0 | live]
; [else-branch: 188 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@458@01, 4)), q$bb@521@01) == 0 | live]
(push) ; 7
; [then-branch: 188 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@458@01, 4)), q$bb@521@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@521@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc(self, 3)
(pop) ; 7
(push) ; 7
; [else-branch: 188 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@458@01, 4)), q$bb@521@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@521@01)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@521@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@521@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 187 | |q$bb@521@01| != 32]
(assert (not (= (Seq_length q$bb@521@01) 32)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@521@01) 32)
  (and
    (= (Seq_length q$bb@521@01) 32)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@521@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@521@01)
          0))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@521@01) 32)) (= (Seq_length q$bb@521@01) 32)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@521@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@521@01) 32)
      (and
        (= (Seq_length q$bb@521@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@521@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@521@01)
              0)))))
    (or (not (= (Seq_length q$bb@521@01) 32)) (= (Seq_length q$bb@521@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@521@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1118@11@1118@393-aux|)))
(assert (forall ((q$bb@521@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@521@01) 32)
      (and
        (= (Seq_length q$bb@521@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@521@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@521@01)
              0)))))
    (or (not (= (Seq_length q$bb@521@01) 32)) (= (Seq_length q$bb@521@01) 32)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@458@01 3)) q$bb@521@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1118@11@1118@393-aux|)))
(assert (forall ((q$bb@521@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@521@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@521@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@458@01 3)) q$bb@521@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@521@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@458@01 3)) q$bb@521@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1118@11@1118@393|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) >=
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@522@01 $Snap)
(assert (= $t@522@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) >= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     q$i <= ($struct_get($struct_loc(self, 1)): Int) ==>
;     s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)))
(declare-const $t@523@01 $Snap)
(assert (= $t@523@01 $Snap.unit))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc(self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const q$i@524@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc(self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 4
; [then-branch: 189 | !(0 <= q$i@524@01) | live]
; [else-branch: 189 | 0 <= q$i@524@01 | live]
(push) ; 5
; [then-branch: 189 | !(0 <= q$i@524@01)]
(assert (not (<= 0 q$i@524@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 189 | 0 <= q$i@524@01]
(assert (<= 0 q$i@524@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@524@01) (not (<= 0 q$i@524@01))))
(push) ; 4
; [then-branch: 190 | 0 <= q$i@524@01 && q$i@524@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 190 | !(0 <= q$i@524@01 && q$i@524@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 5
; [then-branch: 190 | 0 <= q$i@524@01 && q$i@524@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@524@01)
  (<=
    q$i@524@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] q$i <= ($struct_get($struct_loc(self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] q$i <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 6
; [then-branch: 191 | q$i@524@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1)) | live]
; [else-branch: 191 | !(q$i@524@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1))) | live]
(push) ; 7
; [then-branch: 191 | q$i@524@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1))]
(assert (<= q$i@524@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
(pop) ; 7
(push) ; 7
; [else-branch: 191 | !(q$i@524@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1)))]
(assert (not (<= q$i@524@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (<= q$i@524@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
  (<= q$i@524@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))
(pop) ; 5
(push) ; 5
; [else-branch: 190 | !(0 <= q$i@524@01 && q$i@524@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@524@01)
    (<=
      q$i@524@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@524@01)
    (<=
      q$i@524@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@524@01)
    (<=
      q$i@524@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not (<= q$i@524@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
      (<= q$i@524@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@524@01)
      (<=
        q$i@524@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@524@01)
    (<=
      q$i@524@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@524@01 Int)) (!
  (and
    (or (<= 0 q$i@524@01) (not (<= 0 q$i@524@01)))
    (=>
      (and
        (<= 0 q$i@524@01)
        (<=
          q$i@524@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@524@01)
        (<=
          q$i@524@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (<= q$i@524@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
          (<= q$i@524@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))))
    (or
      (not
        (and
          (<= 0 q$i@524@01)
          (<=
            q$i@524@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@524@01)
        (<=
          q$i@524@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@524@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1120@11@1120@464-aux|)))
(assert (forall ((q$i@524@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@524@01)
        (<=
          q$i@524@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@524@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@524@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@524@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@524@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1120@11@1120@464|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@525@01 $Snap)
(assert (= $t@525@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@454@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; l$i0$hash := l$hash
; [exec]
; i0$$res := ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]),
;   l$i0$hash): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), l$i0$hash): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc(self, 3)
(declare-const i0$$res@526@01 Bool)
(assert (=
  i0$$res@526@01
  ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@458@01 3)) l$hash@451@01)))
; [exec]
; label i0$return
; [eval] !i0$$res
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not i0$$res@526@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not i0$$res@526@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 192 | !(i0$$res@526@01) | live]
; [else-branch: 192 | i0$$res@526@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 192 | !(i0$$res@526@01)]
(assert (not i0$$res@526@01))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 193 | False | dead]
; [else-branch: 193 | True | live]
(push) ; 4
; [else-branch: 193 | True]
(pop) ; 4
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 194 | True | live]
; [else-branch: 194 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 194 | True]
; [exec]
; assert old((forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int) ==>
;     !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool) ||
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int)))
; [eval] old((forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int))
(declare-const q$bb@527@01 Seq<Int>)
(push) ; 5
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 6
; [then-branch: 195 | |q$bb@527@01| == 32 | live]
; [else-branch: 195 | |q$bb@527@01| != 32 | live]
(push) ; 7
; [then-branch: 195 | |q$bb@527@01| == 32]
(assert (= (Seq_length q$bb@527@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($old_self, 4)
(push) ; 8
; [then-branch: 196 | False | dead]
; [else-branch: 196 | True | live]
(push) ; 9
; [else-branch: 196 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 195 | |q$bb@527@01| != 32]
(assert (not (= (Seq_length q$bb@527@01) 32)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@527@01) 32)) (= (Seq_length q$bb@527@01) 32)))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@527@01 Seq<Int>)) (!
  (or (not (= (Seq_length q$bb@527@01) 32)) (= (Seq_length q$bb@527@01) 32))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@527@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1183@17@1183@533-aux|)))
; [exec]
; assert old((forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)) ==>
;     perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) ==
;     1 * write))
; [eval] old((forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write)
(declare-const q$i@528@01 Int)
(push) ; 5
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 6
; [then-branch: 197 | !(0 <= q$i@528@01) | live]
; [else-branch: 197 | 0 <= q$i@528@01 | live]
(push) ; 7
; [then-branch: 197 | !(0 <= q$i@528@01)]
(assert (not (<= 0 q$i@528@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 197 | 0 <= q$i@528@01]
(assert (<= 0 q$i@528@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@528@01) (not (<= 0 q$i@528@01))))
(push) ; 6
; [then-branch: 198 | 0 <= q$i@528@01 && q$i@528@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 198 | !(0 <= q$i@528@01 && q$i@528@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 7
; [then-branch: 198 | 0 <= q$i@528@01 && q$i@528@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@528@01)
  (<=
    q$i@528@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($old_self, 2)
(push) ; 8
; [then-branch: 199 | !(s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@528@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@528@01))) | live]
; [else-branch: 199 | s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@528@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@528@01)) | live]
(push) ; 9
; [then-branch: 199 | !(s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@528@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@528@01)))]
(assert (not
  (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01))))
; [eval] perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int)))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] 1 * write
(pop) ; 9
(push) ; 9
; [else-branch: 199 | s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@528@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@528@01))]
(assert (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01))
  (not
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01)))))
(pop) ; 7
(push) ; 7
; [else-branch: 198 | !(0 <= q$i@528@01 && q$i@528@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@528@01)
    (<=
      q$i@528@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@528@01)
    (<=
      q$i@528@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@528@01)
    (<=
      q$i@528@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@528@01)
      (<=
        q$i@528@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@528@01)
    (<=
      q$i@528@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@528@01 Int)) (!
  (and
    (or (<= 0 q$i@528@01) (not (<= 0 q$i@528@01)))
    (=>
      (and
        (<= 0 q$i@528@01)
        (<=
          q$i@528@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@528@01)
        (<=
          q$i@528@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01))
          (not
            (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01))))))
    (or
      (not
        (and
          (<= 0 q$i@528@01)
          (<=
            q$i@528@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@528@01)
        (<=
          q$i@528@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1184@17@1184@939-aux|)))
(push) ; 5
(assert (not (forall ((q$i@528@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@528@01)
        (<=
          q$i@528@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01))))
    false)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1184@17@1184@939|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@528@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@528@01)
        (<=
          q$i@528@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01))))
    false)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@528@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1184@17@1184@939|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@529@01 $Snap)
(assert (= $t@529@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@475@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@530@01 $Struct)
(assert (=
  self@530@01
  ($struct_set<$Struct> self@458@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@458@01 5))
    l$havoc@475@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const q$bb@531@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 5
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 6
; [then-branch: 200 | |q$bb@531@01| == 32 | live]
; [else-branch: 200 | |q$bb@531@01| != 32 | live]
(push) ; 7
; [then-branch: 200 | |q$bb@531@01| == 32]
(assert (= (Seq_length q$bb@531@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(push) ; 8
; [then-branch: 201 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@530@01, 4)), q$bb@531@01) != 0 | live]
; [else-branch: 201 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@530@01, 4)), q$bb@531@01) == 0 | live]
(push) ; 9
; [then-branch: 201 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@530@01, 4)), q$bb@531@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@530@01 4)) q$bb@531@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc(self, 3)
(pop) ; 9
(push) ; 9
; [else-branch: 201 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@530@01, 4)), q$bb@531@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@530@01 4)) q$bb@531@01)
  0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@530@01 4)) q$bb@531@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@530@01 4)) q$bb@531@01)
      0))))
(pop) ; 7
(push) ; 7
; [else-branch: 200 | |q$bb@531@01| != 32]
(assert (not (= (Seq_length q$bb@531@01) 32)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@531@01) 32)
  (and
    (= (Seq_length q$bb@531@01) 32)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@530@01 4)) q$bb@531@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@530@01 4)) q$bb@531@01)
          0))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@531@01) 32)) (= (Seq_length q$bb@531@01) 32)))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@531@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@531@01) 32)
      (and
        (= (Seq_length q$bb@531@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@530@01 4)) q$bb@531@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@530@01 4)) q$bb@531@01)
              0)))))
    (or (not (= (Seq_length q$bb@531@01) 32)) (= (Seq_length q$bb@531@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@530@01 4)) q$bb@531@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1191@11@1191@393-aux|)))
(assert (forall ((q$bb@531@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@531@01) 32)
      (and
        (= (Seq_length q$bb@531@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@530@01 4)) q$bb@531@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@530@01 4)) q$bb@531@01)
              0)))))
    (or (not (= (Seq_length q$bb@531@01) 32)) (= (Seq_length q$bb@531@01) 32)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@530@01 3)) q$bb@531@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1191@11@1191@393-aux|)))
(push) ; 5
(assert (not (forall ((q$bb@531@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@531@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@530@01 4)) q$bb@531@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@530@01 3)) q$bb@531@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@530@01 4)) q$bb@531@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@530@01 3)) q$bb@531@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1191@11@1191@393|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$bb@531@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@531@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@530@01 4)) q$bb@531@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@530@01 3)) q$bb@531@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@530@01 4)) q$bb@531@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@530@01 3)) q$bb@531@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1191@11@1191@393|)))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) >=
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) >= ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 5
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@530@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@530@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
; [exec]
; assert (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==>
;     s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const q$i@532@01 Int)
(push) ; 5
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 6
; [then-branch: 202 | !(0 <= q$i@532@01) | live]
; [else-branch: 202 | 0 <= q$i@532@01 | live]
(push) ; 7
; [then-branch: 202 | !(0 <= q$i@532@01)]
(assert (not (<= 0 q$i@532@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 202 | 0 <= q$i@532@01]
(assert (<= 0 q$i@532@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@532@01) (not (<= 0 q$i@532@01))))
(push) ; 6
; [then-branch: 203 | 0 <= q$i@532@01 && q$i@532@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 203 | !(0 <= q$i@532@01 && q$i@532@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 7
; [then-branch: 203 | 0 <= q$i@532@01 && q$i@532@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@532@01)
  (<=
    q$i@532@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] q$i <= ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 8
; [then-branch: 204 | q$i@532@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1)) | live]
; [else-branch: 204 | !(q$i@532@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1))) | live]
(push) ; 9
; [then-branch: 204 | q$i@532@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1))]
(assert (<= q$i@532@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($old_self, 2)
(pop) ; 9
(push) ; 9
; [else-branch: 204 | !(q$i@532@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1)))]
(assert (not (<= q$i@532@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (<= q$i@532@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
  (<= q$i@532@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))
(pop) ; 7
(push) ; 7
; [else-branch: 203 | !(0 <= q$i@532@01 && q$i@532@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@532@01)
    (<=
      q$i@532@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@532@01)
    (<=
      q$i@532@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@532@01)
    (<=
      q$i@532@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not (<= q$i@532@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
      (<= q$i@532@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@532@01)
      (<=
        q$i@532@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@532@01)
    (<=
      q$i@532@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@532@01 Int)) (!
  (and
    (or (<= 0 q$i@532@01) (not (<= 0 q$i@532@01)))
    (=>
      (and
        (<= 0 q$i@532@01)
        (<=
          q$i@532@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@532@01)
        (<=
          q$i@532@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (<= q$i@532@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
          (<= q$i@532@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))))
    (or
      (not
        (and
          (<= 0 q$i@532@01)
          (<=
            q$i@532@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@532@01)
        (<=
          q$i@532@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@530@01 2)) q$i@532@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1193@11@1193@474-aux|)))
(push) ; 5
(assert (not (forall ((q$i@532@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@532@01)
        (<=
          q$i@532@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@532@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@530@01 2)) q$i@532@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@532@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@530@01 2)) q$i@532@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1193@11@1193@474|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@532@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@532@01)
        (<=
          q$i@532@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@532@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@530@01 2)) q$i@532@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@532@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@530@01 2)) q$i@532@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1193@11@1193@474|)))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 192 | i0$$res@526@01]
(assert i0$$res@526@01)
(pop) ; 3
; [eval] !!i0$$res
; [eval] !i0$$res
(push) ; 3
(set-option :timeout 10)
(assert (not (not i0$$res@526@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not i0$$res@526@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 205 | i0$$res@526@01 | live]
; [else-branch: 205 | !(i0$$res@526@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 205 | i0$$res@526@01]
(assert i0$$res@526@01)
; [eval] !(($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), l$hash): Int) == ($struct_get($struct_loc(msg, 0)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), l$hash): Int) == ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), l$hash): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) l$hash@451@01)
  ($struct_get<Int> ($struct_loc<Int> msg@454@01 0)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) l$hash@451@01)
    ($struct_get<Int> ($struct_loc<Int> msg@454@01 0))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 206 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@458@01, 4)), l$hash@451@01) != $struct_get[Int]($struct_loc[Int](msg@454@01, 0)) | live]
; [else-branch: 206 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@458@01, 4)), l$hash@451@01) == $struct_get[Int]($struct_loc[Int](msg@454@01, 0)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 206 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@458@01, 4)), l$hash@451@01) != $struct_get[Int]($struct_loc[Int](msg@454@01, 0))]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) l$hash@451@01)
    ($struct_get<Int> ($struct_loc<Int> msg@454@01 0)))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 207 | False | dead]
; [else-branch: 207 | True | live]
(push) ; 5
; [else-branch: 207 | True]
(pop) ; 5
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 208 | True | live]
; [else-branch: 208 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 208 | True]
; [exec]
; assert old((forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int) ==>
;     !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool) ||
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int)))
; [eval] old((forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int))
(declare-const q$bb@533@01 Seq<Int>)
(push) ; 6
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 7
; [then-branch: 209 | |q$bb@533@01| == 32 | live]
; [else-branch: 209 | |q$bb@533@01| != 32 | live]
(push) ; 8
; [then-branch: 209 | |q$bb@533@01| == 32]
(assert (= (Seq_length q$bb@533@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($old_self, 4)
(push) ; 9
; [then-branch: 210 | False | dead]
; [else-branch: 210 | True | live]
(push) ; 10
; [else-branch: 210 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 209 | |q$bb@533@01| != 32]
(assert (not (= (Seq_length q$bb@533@01) 32)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@533@01) 32)) (= (Seq_length q$bb@533@01) 32)))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@533@01 Seq<Int>)) (!
  (or (not (= (Seq_length q$bb@533@01) 32)) (= (Seq_length q$bb@533@01) 32))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@533@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1183@17@1183@533-aux|)))
; [exec]
; assert old((forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)) ==>
;     perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) ==
;     1 * write))
; [eval] old((forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write)
(declare-const q$i@534@01 Int)
(push) ; 6
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 7
; [then-branch: 211 | !(0 <= q$i@534@01) | live]
; [else-branch: 211 | 0 <= q$i@534@01 | live]
(push) ; 8
; [then-branch: 211 | !(0 <= q$i@534@01)]
(assert (not (<= 0 q$i@534@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 211 | 0 <= q$i@534@01]
(assert (<= 0 q$i@534@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@534@01) (not (<= 0 q$i@534@01))))
(push) ; 7
; [then-branch: 212 | 0 <= q$i@534@01 && q$i@534@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 212 | !(0 <= q$i@534@01 && q$i@534@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 8
; [then-branch: 212 | 0 <= q$i@534@01 && q$i@534@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@534@01)
  (<=
    q$i@534@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($old_self, 2)
(push) ; 9
; [then-branch: 213 | !(s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@534@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@534@01))) | live]
; [else-branch: 213 | s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@534@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@534@01)) | live]
(push) ; 10
; [then-branch: 213 | !(s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@534@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@534@01)))]
(assert (not
  (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01))))
; [eval] perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int)))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] 1 * write
(pop) ; 10
(push) ; 10
; [else-branch: 213 | s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@534@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@534@01))]
(assert (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01))
  (not
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 212 | !(0 <= q$i@534@01 && q$i@534@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@534@01)
    (<=
      q$i@534@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@534@01)
    (<=
      q$i@534@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@534@01)
    (<=
      q$i@534@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@534@01)
      (<=
        q$i@534@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@534@01)
    (<=
      q$i@534@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@534@01 Int)) (!
  (and
    (or (<= 0 q$i@534@01) (not (<= 0 q$i@534@01)))
    (=>
      (and
        (<= 0 q$i@534@01)
        (<=
          q$i@534@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@534@01)
        (<=
          q$i@534@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01))
          (not
            (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01))))))
    (or
      (not
        (and
          (<= 0 q$i@534@01)
          (<=
            q$i@534@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@534@01)
        (<=
          q$i@534@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1184@17@1184@939-aux|)))
(push) ; 6
(assert (not (forall ((q$i@534@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@534@01)
        (<=
          q$i@534@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01))))
    false)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1184@17@1184@939|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@534@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@534@01)
        (<=
          q$i@534@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01))))
    false)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@534@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1184@17@1184@939|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@535@01 $Snap)
(assert (= $t@535@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@475@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@536@01 $Struct)
(assert (=
  self@536@01
  ($struct_set<$Struct> self@458@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@458@01 5))
    l$havoc@475@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const q$bb@537@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 6
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 7
; [then-branch: 214 | |q$bb@537@01| == 32 | live]
; [else-branch: 214 | |q$bb@537@01| != 32 | live]
(push) ; 8
; [then-branch: 214 | |q$bb@537@01| == 32]
(assert (= (Seq_length q$bb@537@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(push) ; 9
; [then-branch: 215 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@536@01, 4)), q$bb@537@01) != 0 | live]
; [else-branch: 215 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@536@01, 4)), q$bb@537@01) == 0 | live]
(push) ; 10
; [then-branch: 215 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@536@01, 4)), q$bb@537@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@536@01 4)) q$bb@537@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc(self, 3)
(pop) ; 10
(push) ; 10
; [else-branch: 215 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@536@01, 4)), q$bb@537@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@536@01 4)) q$bb@537@01)
  0))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@536@01 4)) q$bb@537@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@536@01 4)) q$bb@537@01)
      0))))
(pop) ; 8
(push) ; 8
; [else-branch: 214 | |q$bb@537@01| != 32]
(assert (not (= (Seq_length q$bb@537@01) 32)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@537@01) 32)
  (and
    (= (Seq_length q$bb@537@01) 32)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@536@01 4)) q$bb@537@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@536@01 4)) q$bb@537@01)
          0))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@537@01) 32)) (= (Seq_length q$bb@537@01) 32)))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@537@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@537@01) 32)
      (and
        (= (Seq_length q$bb@537@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@536@01 4)) q$bb@537@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@536@01 4)) q$bb@537@01)
              0)))))
    (or (not (= (Seq_length q$bb@537@01) 32)) (= (Seq_length q$bb@537@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@536@01 4)) q$bb@537@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1191@11@1191@393-aux|)))
(assert (forall ((q$bb@537@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@537@01) 32)
      (and
        (= (Seq_length q$bb@537@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@536@01 4)) q$bb@537@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@536@01 4)) q$bb@537@01)
              0)))))
    (or (not (= (Seq_length q$bb@537@01) 32)) (= (Seq_length q$bb@537@01) 32)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@536@01 3)) q$bb@537@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1191@11@1191@393-aux|)))
(push) ; 6
(assert (not (forall ((q$bb@537@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@537@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@536@01 4)) q$bb@537@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@536@01 3)) q$bb@537@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@536@01 4)) q$bb@537@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@536@01 3)) q$bb@537@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1191@11@1191@393|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$bb@537@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@537@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@536@01 4)) q$bb@537@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@536@01 3)) q$bb@537@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@536@01 4)) q$bb@537@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@536@01 3)) q$bb@537@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1191@11@1191@393|)))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) >=
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) >= ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 6
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@536@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@536@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
; [exec]
; assert (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==>
;     s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const q$i@538@01 Int)
(push) ; 6
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 7
; [then-branch: 216 | !(0 <= q$i@538@01) | live]
; [else-branch: 216 | 0 <= q$i@538@01 | live]
(push) ; 8
; [then-branch: 216 | !(0 <= q$i@538@01)]
(assert (not (<= 0 q$i@538@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 216 | 0 <= q$i@538@01]
(assert (<= 0 q$i@538@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@538@01) (not (<= 0 q$i@538@01))))
(push) ; 7
; [then-branch: 217 | 0 <= q$i@538@01 && q$i@538@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 217 | !(0 <= q$i@538@01 && q$i@538@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 8
; [then-branch: 217 | 0 <= q$i@538@01 && q$i@538@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@538@01)
  (<=
    q$i@538@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] q$i <= ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 9
; [then-branch: 218 | q$i@538@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1)) | live]
; [else-branch: 218 | !(q$i@538@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1))) | live]
(push) ; 10
; [then-branch: 218 | q$i@538@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1))]
(assert (<= q$i@538@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($old_self, 2)
(pop) ; 10
(push) ; 10
; [else-branch: 218 | !(q$i@538@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1)))]
(assert (not (<= q$i@538@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not (<= q$i@538@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
  (<= q$i@538@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))
(pop) ; 8
(push) ; 8
; [else-branch: 217 | !(0 <= q$i@538@01 && q$i@538@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@538@01)
    (<=
      q$i@538@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@538@01)
    (<=
      q$i@538@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@538@01)
    (<=
      q$i@538@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not (<= q$i@538@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
      (<= q$i@538@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@538@01)
      (<=
        q$i@538@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@538@01)
    (<=
      q$i@538@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@538@01 Int)) (!
  (and
    (or (<= 0 q$i@538@01) (not (<= 0 q$i@538@01)))
    (=>
      (and
        (<= 0 q$i@538@01)
        (<=
          q$i@538@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@538@01)
        (<=
          q$i@538@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (<= q$i@538@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
          (<= q$i@538@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))))
    (or
      (not
        (and
          (<= 0 q$i@538@01)
          (<=
            q$i@538@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@538@01)
        (<=
          q$i@538@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@536@01 2)) q$i@538@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1193@11@1193@474-aux|)))
(push) ; 6
(assert (not (forall ((q$i@538@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@538@01)
        (<=
          q$i@538@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@538@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@536@01 2)) q$i@538@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@538@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@536@01 2)) q$i@538@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1193@11@1193@474|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@538@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@538@01)
        (<=
          q$i@538@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@538@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@536@01 2)) q$i@538@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@538@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@536@01 2)) q$i@538@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1193@11@1193@474|)))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 206 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@458@01, 4)), l$hash@451@01) == $struct_get[Int]($struct_loc[Int](msg@454@01, 0))]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) l$hash@451@01)
  ($struct_get<Int> ($struct_loc<Int> msg@454@01 0))))
(pop) ; 4
; [eval] !!(($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), l$hash): Int) == ($struct_get($struct_loc(msg, 0)): Int))
; [eval] !(($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), l$hash): Int) == ($struct_get($struct_loc(msg, 0)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), l$hash): Int) == ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), l$hash): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) l$hash@451@01)
    ($struct_get<Int> ($struct_loc<Int> msg@454@01 0))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) l$hash@451@01)
  ($struct_get<Int> ($struct_loc<Int> msg@454@01 0)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 219 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@458@01, 4)), l$hash@451@01) == $struct_get[Int]($struct_loc[Int](msg@454@01, 0)) | live]
; [else-branch: 219 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@458@01, 4)), l$hash@451@01) != $struct_get[Int]($struct_loc[Int](msg@454@01, 0)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 219 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@458@01, 4)), l$hash@451@01) == $struct_get[Int]($struct_loc[Int](msg@454@01, 0))]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) l$hash@451@01)
  ($struct_get<Int> ($struct_loc<Int> msg@454@01 0))))
; [exec]
; i1$$pre_self := self
; [exec]
; i1$$pre_$contracts := $contracts
; [exec]
; l$i1$hash := l$hash
; [exec]
; l$i1$frm := ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const l$i1$frm@539@01 Int)
(assert (= l$i1$frm@539@01 ($struct_get<Int> ($struct_loc<Int> msg@454@01 0))))
; [exec]
; l$i1$to := l$recipient
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1 < 0
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
      1)
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 220 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@458@01, 1)))) + 1 < 0 | dead]
; [else-branch: 220 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@458@01, 1)))) + 1 < 0) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 220 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@458@01, 1)))) + 1 < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
      1)
    0)))
(pop) ; 5
; [eval] !($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1 < 0)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1 < 0
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  (+
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
    1)
  0)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
      1)
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 221 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@458@01, 1)))) + 1 < 0) | live]
; [else-branch: 221 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@458@01, 1)))) + 1 < 0 | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 221 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@458@01, 1)))) + 1 < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
      1)
    0)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
      1)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
    1)
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 222 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@458@01, 1)))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 222 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@458@01, 1)))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 222 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@458@01, 1)))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
    1)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 223 | False | dead]
; [else-branch: 223 | True | live]
(push) ; 7
; [else-branch: 223 | True]
(pop) ; 7
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 224 | True | live]
; [else-branch: 224 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 224 | True]
; [exec]
; assert old((forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int) ==>
;     !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool) ||
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int)))
; [eval] old((forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int))
(declare-const q$bb@540@01 Seq<Int>)
(push) ; 8
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 9
; [then-branch: 225 | |q$bb@540@01| == 32 | live]
; [else-branch: 225 | |q$bb@540@01| != 32 | live]
(push) ; 10
; [then-branch: 225 | |q$bb@540@01| == 32]
(assert (= (Seq_length q$bb@540@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($old_self, 4)
(push) ; 11
; [then-branch: 226 | False | dead]
; [else-branch: 226 | True | live]
(push) ; 12
; [else-branch: 226 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 225 | |q$bb@540@01| != 32]
(assert (not (= (Seq_length q$bb@540@01) 32)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@540@01) 32)) (= (Seq_length q$bb@540@01) 32)))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@540@01 Seq<Int>)) (!
  (or (not (= (Seq_length q$bb@540@01) 32)) (= (Seq_length q$bb@540@01) 32))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@540@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1183@17@1183@533-aux|)))
; [exec]
; assert old((forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)) ==>
;     perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) ==
;     1 * write))
; [eval] old((forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write)
(declare-const q$i@541@01 Int)
(push) ; 8
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 9
; [then-branch: 227 | !(0 <= q$i@541@01) | live]
; [else-branch: 227 | 0 <= q$i@541@01 | live]
(push) ; 10
; [then-branch: 227 | !(0 <= q$i@541@01)]
(assert (not (<= 0 q$i@541@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 227 | 0 <= q$i@541@01]
(assert (<= 0 q$i@541@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@541@01) (not (<= 0 q$i@541@01))))
(push) ; 9
; [then-branch: 228 | 0 <= q$i@541@01 && q$i@541@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 228 | !(0 <= q$i@541@01 && q$i@541@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 10
; [then-branch: 228 | 0 <= q$i@541@01 && q$i@541@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@541@01)
  (<=
    q$i@541@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($old_self, 2)
(push) ; 11
; [then-branch: 229 | !(s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@541@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@541@01))) | live]
; [else-branch: 229 | s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@541@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@541@01)) | live]
(push) ; 12
; [then-branch: 229 | !(s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@541@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@541@01)))]
(assert (not
  (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01))))
; [eval] perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int)))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] 1 * write
(pop) ; 12
(push) ; 12
; [else-branch: 229 | s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@541@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@541@01))]
(assert (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01))
  (not
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01)))))
(pop) ; 10
(push) ; 10
; [else-branch: 228 | !(0 <= q$i@541@01 && q$i@541@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@541@01)
    (<=
      q$i@541@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@541@01)
    (<=
      q$i@541@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@541@01)
    (<=
      q$i@541@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@541@01)
      (<=
        q$i@541@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@541@01)
    (<=
      q$i@541@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@541@01 Int)) (!
  (and
    (or (<= 0 q$i@541@01) (not (<= 0 q$i@541@01)))
    (=>
      (and
        (<= 0 q$i@541@01)
        (<=
          q$i@541@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@541@01)
        (<=
          q$i@541@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01))
          (not
            (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01))))))
    (or
      (not
        (and
          (<= 0 q$i@541@01)
          (<=
            q$i@541@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@541@01)
        (<=
          q$i@541@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1184@17@1184@939-aux|)))
(push) ; 8
(assert (not (forall ((q$i@541@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@541@01)
        (<=
          q$i@541@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01))))
    false)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1184@17@1184@939|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@541@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@541@01)
        (<=
          q$i@541@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01))))
    false)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@541@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1184@17@1184@939|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@542@01 $Snap)
(assert (= $t@542@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@475@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@543@01 $Struct)
(assert (=
  self@543@01
  ($struct_set<$Struct> self@458@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@458@01 5))
    l$havoc@475@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const q$bb@544@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 8
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 9
; [then-branch: 230 | |q$bb@544@01| == 32 | live]
; [else-branch: 230 | |q$bb@544@01| != 32 | live]
(push) ; 10
; [then-branch: 230 | |q$bb@544@01| == 32]
(assert (= (Seq_length q$bb@544@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(push) ; 11
; [then-branch: 231 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@543@01, 4)), q$bb@544@01) != 0 | live]
; [else-branch: 231 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@543@01, 4)), q$bb@544@01) == 0 | live]
(push) ; 12
; [then-branch: 231 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@543@01, 4)), q$bb@544@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@543@01 4)) q$bb@544@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc(self, 3)
(pop) ; 12
(push) ; 12
; [else-branch: 231 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@543@01, 4)), q$bb@544@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@543@01 4)) q$bb@544@01)
  0))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@543@01 4)) q$bb@544@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@543@01 4)) q$bb@544@01)
      0))))
(pop) ; 10
(push) ; 10
; [else-branch: 230 | |q$bb@544@01| != 32]
(assert (not (= (Seq_length q$bb@544@01) 32)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@544@01) 32)
  (and
    (= (Seq_length q$bb@544@01) 32)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@543@01 4)) q$bb@544@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@543@01 4)) q$bb@544@01)
          0))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@544@01) 32)) (= (Seq_length q$bb@544@01) 32)))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@544@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@544@01) 32)
      (and
        (= (Seq_length q$bb@544@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@543@01 4)) q$bb@544@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@543@01 4)) q$bb@544@01)
              0)))))
    (or (not (= (Seq_length q$bb@544@01) 32)) (= (Seq_length q$bb@544@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@543@01 4)) q$bb@544@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1191@11@1191@393-aux|)))
(assert (forall ((q$bb@544@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@544@01) 32)
      (and
        (= (Seq_length q$bb@544@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@543@01 4)) q$bb@544@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@543@01 4)) q$bb@544@01)
              0)))))
    (or (not (= (Seq_length q$bb@544@01) 32)) (= (Seq_length q$bb@544@01) 32)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@543@01 3)) q$bb@544@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1191@11@1191@393-aux|)))
(push) ; 8
(assert (not (forall ((q$bb@544@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@544@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@543@01 4)) q$bb@544@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@543@01 3)) q$bb@544@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@543@01 4)) q$bb@544@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@543@01 3)) q$bb@544@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1191@11@1191@393|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$bb@544@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@544@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@543@01 4)) q$bb@544@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@543@01 3)) q$bb@544@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@543@01 4)) q$bb@544@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@543@01 3)) q$bb@544@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1191@11@1191@393|)))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) >=
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) >= ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 8
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@543@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@543@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
; [exec]
; assert (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==>
;     s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const q$i@545@01 Int)
(push) ; 8
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 9
; [then-branch: 232 | !(0 <= q$i@545@01) | live]
; [else-branch: 232 | 0 <= q$i@545@01 | live]
(push) ; 10
; [then-branch: 232 | !(0 <= q$i@545@01)]
(assert (not (<= 0 q$i@545@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 232 | 0 <= q$i@545@01]
(assert (<= 0 q$i@545@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@545@01) (not (<= 0 q$i@545@01))))
(push) ; 9
; [then-branch: 233 | 0 <= q$i@545@01 && q$i@545@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 233 | !(0 <= q$i@545@01 && q$i@545@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 10
; [then-branch: 233 | 0 <= q$i@545@01 && q$i@545@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@545@01)
  (<=
    q$i@545@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] q$i <= ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 11
; [then-branch: 234 | q$i@545@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1)) | live]
; [else-branch: 234 | !(q$i@545@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1))) | live]
(push) ; 12
; [then-branch: 234 | q$i@545@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1))]
(assert (<= q$i@545@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($old_self, 2)
(pop) ; 12
(push) ; 12
; [else-branch: 234 | !(q$i@545@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1)))]
(assert (not (<= q$i@545@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (<= q$i@545@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
  (<= q$i@545@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 233 | !(0 <= q$i@545@01 && q$i@545@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@545@01)
    (<=
      q$i@545@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@545@01)
    (<=
      q$i@545@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@545@01)
    (<=
      q$i@545@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not (<= q$i@545@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
      (<= q$i@545@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@545@01)
      (<=
        q$i@545@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@545@01)
    (<=
      q$i@545@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@545@01 Int)) (!
  (and
    (or (<= 0 q$i@545@01) (not (<= 0 q$i@545@01)))
    (=>
      (and
        (<= 0 q$i@545@01)
        (<=
          q$i@545@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@545@01)
        (<=
          q$i@545@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (<= q$i@545@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
          (<= q$i@545@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))))
    (or
      (not
        (and
          (<= 0 q$i@545@01)
          (<=
            q$i@545@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@545@01)
        (<=
          q$i@545@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@543@01 2)) q$i@545@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1193@11@1193@474-aux|)))
(push) ; 8
(assert (not (forall ((q$i@545@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@545@01)
        (<=
          q$i@545@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@545@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@543@01 2)) q$i@545@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@545@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@543@01 2)) q$i@545@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1193@11@1193@474|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@545@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@545@01)
        (<=
          q$i@545@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@545@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@543@01 2)) q$i@545@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@545@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@543@01 2)) q$i@545@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1193@11@1193@474|)))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 222 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@458@01, 1)))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
      1)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 6
; [eval] !($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
    1)
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
      1)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 235 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@458@01, 1)))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 235 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@458@01, 1)))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 235 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@458@01, 1)))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
      1)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 1, $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) +
;   1): $Struct)
; [eval] ($struct_set(self, 1, $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1): $Struct)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) + 1
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(declare-const self@546@01 $Struct)
(assert (=
  self@546@01
  ($struct_set<$Struct> self@458@01 1 (+
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
    1))))
; [exec]
; self := ($struct_set(self, 4, ($map_set(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]),
;   l$i1$hash, l$i1$to): $Map[Seq[Int], Int])): $Struct)
; [eval] ($struct_set(self, 4, ($map_set(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), l$i1$hash, l$i1$to): $Map[Seq[Int], Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), l$i1$hash, l$i1$to): $Map[Seq[Int], Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(declare-const self@547@01 $Struct)
(assert (=
  self@547@01
  ($struct_set<$Struct> self@546@01 4 ($map_set<$Map<Seq<Int>~_Int>> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@546@01 4)) l$hash@451@01 l$recipient@452@01))))
; [exec]
; self := ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]),
;   l$i1$hash, true): $Map[Seq[Int], Bool])): $Struct)
; [eval] ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), l$i1$hash, true): $Map[Seq[Int], Bool])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), l$i1$hash, true): $Map[Seq[Int], Bool])
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc(self, 3)
(declare-const self@548@01 $Struct)
(assert (=
  self@548@01
  ($struct_set<$Struct> self@547@01 3 ($map_set<$Map<Seq<Int>~_Bool>> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@547@01 3)) l$hash@451@01 true))))
; [exec]
; self := ($struct_set(self, 2, ($map_set(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;   ($struct_get($struct_loc(self, 1)): Int), s$struct$DocumentTransfer$init(($struct_get($struct_loc(block,
;   2)): Int), l$i1$hash, l$i1$frm, l$i1$to)): $Map[Int, $Struct])): $Struct)
; [eval] ($struct_set(self, 2, ($map_set(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), ($struct_get($struct_loc(self, 1)): Int), s$struct$DocumentTransfer$init(($struct_get($struct_loc(block, 2)): Int), l$i1$hash, l$i1$frm, l$i1$to)): $Map[Int, $Struct])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), ($struct_get($struct_loc(self, 1)): Int), s$struct$DocumentTransfer$init(($struct_get($struct_loc(block, 2)): Int), l$i1$hash, l$i1$frm, l$i1$to)): $Map[Int, $Struct])
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] s$struct$DocumentTransfer$init(($struct_get($struct_loc(block, 2)): Int), l$i1$hash, l$i1$frm, l$i1$to)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(declare-const self@549@01 $Struct)
(assert (=
  self@549@01
  ($struct_set<$Struct> self@548@01 2 ($map_set<$Map<Int~_$Struct>> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@548@01 2)) ($struct_get<Int> ($struct_loc<Int> self@548@01 1)) (s$struct$DocumentTransfer$init<$Struct> ($struct_get<Int> ($struct_loc<Int> block@455@01 2)) l$hash@451@01 l$i1$frm@539@01 l$recipient@452@01)))))
; [exec]
; inhale acc(e$Document(($struct_get($struct_loc(block, 2)): Int), l$i1$hash,
;   l$i1$frm, l$i1$to), write)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(declare-const $t@550@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label i1$return
; [exec]
; label return
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not $out_of_gas@474@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not $out_of_gas@474@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 236 | $out_of_gas@474@01 | live]
; [else-branch: 236 | !($out_of_gas@474@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 236 | $out_of_gas@474@01]
(assert $out_of_gas@474@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 237 | False | dead]
; [else-branch: 237 | True | live]
(push) ; 8
; [else-branch: 237 | True]
(pop) ; 8
; [eval] !$succ
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 238 | True | live]
; [else-branch: 238 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 238 | True]
; [exec]
; assert old((forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int) ==>
;     !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool) ||
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int)))
; [eval] old((forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int))
(declare-const q$bb@551@01 Seq<Int>)
(push) ; 9
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 10
; [then-branch: 239 | |q$bb@551@01| == 32 | live]
; [else-branch: 239 | |q$bb@551@01| != 32 | live]
(push) ; 11
; [then-branch: 239 | |q$bb@551@01| == 32]
(assert (= (Seq_length q$bb@551@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($old_self, 4)
(push) ; 12
; [then-branch: 240 | False | dead]
; [else-branch: 240 | True | live]
(push) ; 13
; [else-branch: 240 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 239 | |q$bb@551@01| != 32]
(assert (not (= (Seq_length q$bb@551@01) 32)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@551@01) 32)) (= (Seq_length q$bb@551@01) 32)))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@551@01 Seq<Int>)) (!
  (or (not (= (Seq_length q$bb@551@01) 32)) (= (Seq_length q$bb@551@01) 32))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@551@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1183@17@1183@533-aux|)))
; [exec]
; assert old((forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)) ==>
;     perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) ==
;     1 * write))
; [eval] old((forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write)
(declare-const q$i@552@01 Int)
(push) ; 9
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 10
; [then-branch: 241 | !(0 <= q$i@552@01) | live]
; [else-branch: 241 | 0 <= q$i@552@01 | live]
(push) ; 11
; [then-branch: 241 | !(0 <= q$i@552@01)]
(assert (not (<= 0 q$i@552@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 241 | 0 <= q$i@552@01]
(assert (<= 0 q$i@552@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@552@01) (not (<= 0 q$i@552@01))))
(push) ; 10
; [then-branch: 242 | 0 <= q$i@552@01 && q$i@552@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 242 | !(0 <= q$i@552@01 && q$i@552@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 11
; [then-branch: 242 | 0 <= q$i@552@01 && q$i@552@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@552@01)
  (<=
    q$i@552@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($old_self, 2)
(push) ; 12
; [then-branch: 243 | !(s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@552@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@552@01))) | live]
; [else-branch: 243 | s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@552@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@552@01)) | live]
(push) ; 13
; [then-branch: 243 | !(s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@552@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@552@01)))]
(assert (not
  (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01))))
; [eval] perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int)))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] 1 * write
(pop) ; 13
(push) ; 13
; [else-branch: 243 | s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@552@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@552@01))]
(assert (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01))
  (not
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 242 | !(0 <= q$i@552@01 && q$i@552@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@552@01)
    (<=
      q$i@552@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@552@01)
    (<=
      q$i@552@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@552@01)
    (<=
      q$i@552@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@552@01)
      (<=
        q$i@552@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@552@01)
    (<=
      q$i@552@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@552@01 Int)) (!
  (and
    (or (<= 0 q$i@552@01) (not (<= 0 q$i@552@01)))
    (=>
      (and
        (<= 0 q$i@552@01)
        (<=
          q$i@552@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@552@01)
        (<=
          q$i@552@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01))
          (not
            (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01))))))
    (or
      (not
        (and
          (<= 0 q$i@552@01)
          (<=
            q$i@552@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@552@01)
        (<=
          q$i@552@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1184@17@1184@939-aux|)))
(push) ; 9
(assert (not (forall ((q$i@552@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@552@01)
        (<=
          q$i@552@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01))))
    false)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1184@17@1184@939|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@552@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@552@01)
        (<=
          q$i@552@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01))))
    false)
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@552@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1184@17@1184@939|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@553@01 $Snap)
(assert (= $t@553@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@475@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@554@01 $Struct)
(assert (=
  self@554@01
  ($struct_set<$Struct> self@458@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@458@01 5))
    l$havoc@475@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const q$bb@555@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 9
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 10
; [then-branch: 244 | |q$bb@555@01| == 32 | live]
; [else-branch: 244 | |q$bb@555@01| != 32 | live]
(push) ; 11
; [then-branch: 244 | |q$bb@555@01| == 32]
(assert (= (Seq_length q$bb@555@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(push) ; 12
; [then-branch: 245 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@554@01, 4)), q$bb@555@01) != 0 | live]
; [else-branch: 245 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@554@01, 4)), q$bb@555@01) == 0 | live]
(push) ; 13
; [then-branch: 245 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@554@01, 4)), q$bb@555@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@554@01 4)) q$bb@555@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc(self, 3)
(pop) ; 13
(push) ; 13
; [else-branch: 245 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@554@01, 4)), q$bb@555@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@554@01 4)) q$bb@555@01)
  0))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@554@01 4)) q$bb@555@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@554@01 4)) q$bb@555@01)
      0))))
(pop) ; 11
(push) ; 11
; [else-branch: 244 | |q$bb@555@01| != 32]
(assert (not (= (Seq_length q$bb@555@01) 32)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@555@01) 32)
  (and
    (= (Seq_length q$bb@555@01) 32)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@554@01 4)) q$bb@555@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@554@01 4)) q$bb@555@01)
          0))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@555@01) 32)) (= (Seq_length q$bb@555@01) 32)))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@555@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@555@01) 32)
      (and
        (= (Seq_length q$bb@555@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@554@01 4)) q$bb@555@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@554@01 4)) q$bb@555@01)
              0)))))
    (or (not (= (Seq_length q$bb@555@01) 32)) (= (Seq_length q$bb@555@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@554@01 4)) q$bb@555@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1191@11@1191@393-aux|)))
(assert (forall ((q$bb@555@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@555@01) 32)
      (and
        (= (Seq_length q$bb@555@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@554@01 4)) q$bb@555@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@554@01 4)) q$bb@555@01)
              0)))))
    (or (not (= (Seq_length q$bb@555@01) 32)) (= (Seq_length q$bb@555@01) 32)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@554@01 3)) q$bb@555@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1191@11@1191@393-aux|)))
(push) ; 9
(assert (not (forall ((q$bb@555@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@555@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@554@01 4)) q$bb@555@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@554@01 3)) q$bb@555@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@554@01 4)) q$bb@555@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@554@01 3)) q$bb@555@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1191@11@1191@393|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$bb@555@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@555@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@554@01 4)) q$bb@555@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@554@01 3)) q$bb@555@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@554@01 4)) q$bb@555@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@554@01 3)) q$bb@555@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1191@11@1191@393|)))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) >=
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) >= ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 9
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@554@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@554@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
; [exec]
; assert (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==>
;     s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const q$i@556@01 Int)
(push) ; 9
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 10
; [then-branch: 246 | !(0 <= q$i@556@01) | live]
; [else-branch: 246 | 0 <= q$i@556@01 | live]
(push) ; 11
; [then-branch: 246 | !(0 <= q$i@556@01)]
(assert (not (<= 0 q$i@556@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 246 | 0 <= q$i@556@01]
(assert (<= 0 q$i@556@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@556@01) (not (<= 0 q$i@556@01))))
(push) ; 10
; [then-branch: 247 | 0 <= q$i@556@01 && q$i@556@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 247 | !(0 <= q$i@556@01 && q$i@556@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 11
; [then-branch: 247 | 0 <= q$i@556@01 && q$i@556@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@556@01)
  (<=
    q$i@556@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] q$i <= ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 12
; [then-branch: 248 | q$i@556@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1)) | live]
; [else-branch: 248 | !(q$i@556@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1))) | live]
(push) ; 13
; [then-branch: 248 | q$i@556@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1))]
(assert (<= q$i@556@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($old_self, 2)
(pop) ; 13
(push) ; 13
; [else-branch: 248 | !(q$i@556@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1)))]
(assert (not (<= q$i@556@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not (<= q$i@556@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
  (<= q$i@556@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 247 | !(0 <= q$i@556@01 && q$i@556@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@556@01)
    (<=
      q$i@556@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@556@01)
    (<=
      q$i@556@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@556@01)
    (<=
      q$i@556@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not (<= q$i@556@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
      (<= q$i@556@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@556@01)
      (<=
        q$i@556@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@556@01)
    (<=
      q$i@556@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@556@01 Int)) (!
  (and
    (or (<= 0 q$i@556@01) (not (<= 0 q$i@556@01)))
    (=>
      (and
        (<= 0 q$i@556@01)
        (<=
          q$i@556@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@556@01)
        (<=
          q$i@556@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (<= q$i@556@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
          (<= q$i@556@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))))
    (or
      (not
        (and
          (<= 0 q$i@556@01)
          (<=
            q$i@556@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@556@01)
        (<=
          q$i@556@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@554@01 2)) q$i@556@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1193@11@1193@474-aux|)))
(push) ; 9
(assert (not (forall ((q$i@556@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@556@01)
        (<=
          q$i@556@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@556@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@554@01 2)) q$i@556@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@556@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@554@01 2)) q$i@556@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1193@11@1193@474|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@556@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@556@01)
        (<=
          q$i@556@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@556@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@554@01 2)) q$i@556@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@556@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@554@01 2)) q$i@556@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1193@11@1193@474|)))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 236 | !($out_of_gas@474@01)]
(assert (not $out_of_gas@474@01))
(pop) ; 7
; [eval] !$out_of_gas
(push) ; 7
(set-option :timeout 10)
(assert (not $out_of_gas@474@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not $out_of_gas@474@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 249 | !($out_of_gas@474@01) | live]
; [else-branch: 249 | $out_of_gas@474@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 249 | !($out_of_gas@474@01)]
(assert (not $out_of_gas@474@01))
; [exec]
; label end
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 250 | True | live]
; [else-branch: 250 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 250 | True]
; [exec]
; assert (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int) ==>
;     !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]),
;     q$bb): Bool) ||
;     ($struct_get($struct_loc(msg, 0)): Int) ==
;     ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]),
;     q$bb): Int))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int))
(declare-const q$bb@557@01 Seq<Int>)
(push) ; 9
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 10
; [then-branch: 251 | |q$bb@557@01| == 32 | live]
; [else-branch: 251 | |q$bb@557@01| != 32 | live]
(push) ; 11
; [then-branch: 251 | |q$bb@557@01| == 32]
(assert (= (Seq_length q$bb@557@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int) ==> !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($old_self, 4)
(push) ; 12
; [then-branch: 252 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@549@01, 4)), q$bb@557@01) != $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@458@01, 4)), q$bb@557@01) | live]
; [else-branch: 252 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@549@01, 4)), q$bb@557@01) == $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@458@01, 4)), q$bb@557@01) | live]
(push) ; 13
; [then-branch: 252 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@549@01, 4)), q$bb@557@01) != $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@458@01, 4)), q$bb@557@01)]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@549@01 4)) q$bb@557@01)
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@557@01))))
; [eval] !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) || ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] !($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc($old_self, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc($old_self, 3)
(push) ; 14
; [then-branch: 253 | !($map_get[Bool]($struct_get[$Map[Seq[Int], Bool]]($struct_loc[Int](self@458@01, 3)), q$bb@557@01)) | live]
; [else-branch: 253 | $map_get[Bool]($struct_get[$Map[Seq[Int], Bool]]($struct_loc[Int](self@458@01, 3)), q$bb@557@01) | live]
(push) ; 15
; [then-branch: 253 | !($map_get[Bool]($struct_get[$Map[Seq[Int], Bool]]($struct_loc[Int](self@458@01, 3)), q$bb@557@01))]
(assert (not
  ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@458@01 3)) q$bb@557@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 253 | $map_get[Bool]($struct_get[$Map[Seq[Int], Bool]]($struct_loc[Int](self@458@01, 3)), q$bb@557@01)]
(assert ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@458@01 3)) q$bb@557@01))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc($old_self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc($old_self, 4)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@458@01 3)) q$bb@557@01)
  (not
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@458@01 3)) q$bb@557@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 252 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@549@01, 4)), q$bb@557@01) == $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@458@01, 4)), q$bb@557@01)]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@549@01 4)) q$bb@557@01)
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@557@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@549@01 4)) q$bb@557@01)
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@557@01)))
  (and
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@549@01 4)) q$bb@557@01)
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@557@01)))
    (or
      ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@458@01 3)) q$bb@557@01)
      (not
        ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@458@01 3)) q$bb@557@01))))))
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@549@01 4)) q$bb@557@01)
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@557@01))
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@549@01 4)) q$bb@557@01)
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@557@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 251 | |q$bb@557@01| != 32]
(assert (not (= (Seq_length q$bb@557@01) 32)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@557@01) 32)
  (and
    (= (Seq_length q$bb@557@01) 32)
    (=>
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@549@01 4)) q$bb@557@01)
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@557@01)))
      (and
        (not
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@549@01 4)) q$bb@557@01)
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@557@01)))
        (or
          ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@458@01 3)) q$bb@557@01)
          (not
            ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@458@01 3)) q$bb@557@01)))))
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@549@01 4)) q$bb@557@01)
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@557@01))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@549@01 4)) q$bb@557@01)
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@557@01)))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@557@01) 32)) (= (Seq_length q$bb@557@01) 32)))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@557@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@557@01) 32)
      (and
        (= (Seq_length q$bb@557@01) 32)
        (=>
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@549@01 4)) q$bb@557@01)
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@557@01)))
          (and
            (not
              (=
                ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@549@01 4)) q$bb@557@01)
                ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@557@01)))
            (or
              ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@458@01 3)) q$bb@557@01)
              (not
                ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@458@01 3)) q$bb@557@01)))))
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@549@01 4)) q$bb@557@01)
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@557@01))
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@549@01 4)) q$bb@557@01)
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@557@01))))))
    (or (not (= (Seq_length q$bb@557@01) 32)) (= (Seq_length q$bb@557@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@549@01 4)) q$bb@557@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1180@13@1180@529-aux|)))
(push) ; 9
(assert (not (forall ((q$bb@557@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@557@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@549@01 4)) q$bb@557@01)
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@557@01))))
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@458@01 3)) q$bb@557@01))
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@454@01 0))
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@557@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@549@01 4)) q$bb@557@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1180@13@1180@529|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$bb@557@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@557@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@549@01 4)) q$bb@557@01)
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@557@01))))
    (or
      (not
        ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@458@01 3)) q$bb@557@01))
      (=
        ($struct_get<Int> ($struct_loc<Int> msg@454@01 0))
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) q$bb@557@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@549@01 4)) q$bb@557@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1180@13@1180@529|)))
; [exec]
; assert (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)) ==>
;     perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self,
;     2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) ==
;     1 * write)
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write)
(declare-const q$i@558@01 Int)
(push) ; 9
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 10
; [then-branch: 254 | !(0 <= q$i@558@01) | live]
; [else-branch: 254 | 0 <= q$i@558@01 | live]
(push) ; 11
; [then-branch: 254 | !(0 <= q$i@558@01)]
(assert (not (<= 0 q$i@558@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 254 | 0 <= q$i@558@01]
(assert (<= 0 q$i@558@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@558@01) (not (<= 0 q$i@558@01))))
(push) ; 10
; [then-branch: 255 | 0 <= q$i@558@01 && q$i@558@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 255 | !(0 <= q$i@558@01 && q$i@558@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 11
; [then-branch: 255 | 0 <= q$i@558@01 && q$i@558@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@558@01)
  (<=
    q$i@558@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)) ==> perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] !s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($old_self, 2)
(push) ; 12
; [then-branch: 256 | !(s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@549@01, 2)), q$i@558@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@558@01))) | live]
; [else-branch: 256 | s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@549@01, 2)), q$i@558@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@558@01)) | live]
(push) ; 13
; [then-branch: 256 | !(s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@549@01, 2)), q$i@558@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@558@01)))]
(assert (not
  (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@558@01))))
; [eval] perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int))) == 1 * write
; [eval] perm(e$Document(($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int), ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int)))
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)): Int)
; [eval] $struct_loc(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] 1 * write
(pop) ; 13
(push) ; 13
; [else-branch: 256 | s$struct$DocumentTransfer$eq[Bool]($map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@549@01, 2)), q$i@558@01), $map_get[$Struct]($struct_get[$Map[Int, $Struct]]($struct_loc[Int](self@458@01, 2)), q$i@558@01))]
(assert (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@558@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@558@01))
  (not
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@558@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 255 | !(0 <= q$i@558@01 && q$i@558@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@558@01)
    (<=
      q$i@558@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@558@01)
    (<=
      q$i@558@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@558@01)
    (<=
      q$i@558@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@558@01))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@558@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@558@01)
      (<=
        q$i@558@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@558@01)
    (<=
      q$i@558@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@558@01 Int)) (!
  (and
    (or (<= 0 q$i@558@01) (not (<= 0 q$i@558@01)))
    (=>
      (and
        (<= 0 q$i@558@01)
        (<=
          q$i@558@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@558@01)
        (<=
          q$i@558@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@558@01))
          (not
            (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@558@01))))))
    (or
      (not
        (and
          (<= 0 q$i@558@01)
          (<=
            q$i@558@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@558@01)
        (<=
          q$i@558@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1181@13@1181@935-aux|)))
(push) ; 9
(assert (not (forall ((q$i@558@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@558@01)
        (<=
          q$i@558@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@558@01))))
    (=
      (ite
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01) 0))
            ($struct_get<Int> ($struct_loc<Int> block@455@01 2)))
          (Seq_equal
            ($struct_get<Seq<Int>> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01) 1))
            l$hash@451@01)
          (=
            ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01) 2))
            l$i1$frm@539@01)
          (=
            ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01) 3))
            l$recipient@452@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1181@13@1181@935|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@558@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@558@01)
        (<=
          q$i@558@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (not
        (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@558@01))))
    (=
      (ite
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01) 0))
            ($struct_get<Int> ($struct_loc<Int> block@455@01 2)))
          (Seq_equal
            ($struct_get<Seq<Int>> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01) 1))
            l$hash@451@01)
          (=
            ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01) 2))
            l$i1$frm@539@01)
          (=
            ($struct_get<Int> ($struct_loc<Int> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01) 3))
            l$recipient@452@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@549@01 2)) q$i@558@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1181@13@1181@935|)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@559@01 $Snap)
(assert (= $t@559@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@475@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@560@01 $Struct)
(assert (=
  self@560@01
  ($struct_set<$Struct> self@549@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@549@01 5))
    l$havoc@475@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert (forall q$bb: Seq[Int] ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) }
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) }
;     |q$bb| == 32 ==>
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
; [eval] (forall q$bb: Seq[Int] :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) } { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool) } |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool))
(declare-const q$bb@561@01 Seq<Int>)
(set-option :timeout 0)
(push) ; 9
; [eval] |q$bb| == 32 ==> ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] |q$bb| == 32
; [eval] |q$bb|
(push) ; 10
; [then-branch: 257 | |q$bb@561@01| == 32 | live]
; [else-branch: 257 | |q$bb@561@01| != 32 | live]
(push) ; 11
; [then-branch: 257 | |q$bb@561@01| == 32]
(assert (= (Seq_length q$bb@561@01) 32))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int]), q$bb): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Seq[Int], Int])
; [eval] $struct_loc(self, 4)
(push) ; 12
; [then-branch: 258 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@560@01, 4)), q$bb@561@01) != 0 | live]
; [else-branch: 258 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@560@01, 4)), q$bb@561@01) == 0 | live]
(push) ; 13
; [then-branch: 258 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@560@01, 4)), q$bb@561@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@560@01 4)) q$bb@561@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool]), q$bb): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Seq[Int], Bool])
; [eval] $struct_loc(self, 3)
(pop) ; 13
(push) ; 13
; [else-branch: 258 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@560@01, 4)), q$bb@561@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@560@01 4)) q$bb@561@01)
  0))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@560@01 4)) q$bb@561@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@560@01 4)) q$bb@561@01)
      0))))
(pop) ; 11
(push) ; 11
; [else-branch: 257 | |q$bb@561@01| != 32]
(assert (not (= (Seq_length q$bb@561@01) 32)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (= (Seq_length q$bb@561@01) 32)
  (and
    (= (Seq_length q$bb@561@01) 32)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@560@01 4)) q$bb@561@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@560@01 4)) q$bb@561@01)
          0))))))
; Joined path conditions
(assert (or (not (= (Seq_length q$bb@561@01) 32)) (= (Seq_length q$bb@561@01) 32)))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$bb@561@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@561@01) 32)
      (and
        (= (Seq_length q$bb@561@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@560@01 4)) q$bb@561@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@560@01 4)) q$bb@561@01)
              0)))))
    (or (not (= (Seq_length q$bb@561@01) 32)) (= (Seq_length q$bb@561@01) 32)))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@560@01 4)) q$bb@561@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1191@11@1191@393-aux|)))
(assert (forall ((q$bb@561@01 Seq<Int>)) (!
  (and
    (=>
      (= (Seq_length q$bb@561@01) 32)
      (and
        (= (Seq_length q$bb@561@01) 32)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@560@01 4)) q$bb@561@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@560@01 4)) q$bb@561@01)
              0)))))
    (or (not (= (Seq_length q$bb@561@01) 32)) (= (Seq_length q$bb@561@01) 32)))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@560@01 3)) q$bb@561@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1191@11@1191@393-aux|)))
(push) ; 9
(assert (not (forall ((q$bb@561@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@561@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@560@01 4)) q$bb@561@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@560@01 3)) q$bb@561@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@560@01 4)) q$bb@561@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@560@01 3)) q$bb@561@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1191@11@1191@393|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$bb@561@01 Seq<Int>)) (!
  (=>
    (and
      (= (Seq_length q$bb@561@01) 32)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@560@01 4)) q$bb@561@01)
          0)))
    ($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@560@01 3)) q$bb@561@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@560@01 4)) q$bb@561@01))
  :pattern (($map_get<Bool> ($struct_get<$Map<Seq<Int>~_Bool>> ($struct_loc<Int> self@560@01 3)) q$bb@561@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1191@11@1191@393|)))
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) >=
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) >= ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 9
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@560@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@560@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
; [exec]
; assert (forall q$i: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) }
;     0 <= q$i &&
;     q$i <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 ==>
;     q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==>
;     s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]),
;     q$i): $Struct)))
; [eval] (forall q$i: Int :: { ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct) } 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)))
(declare-const q$i@562@01 Int)
(push) ; 9
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 ==> q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] 0 <= q$i && q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= q$i
(push) ; 10
; [then-branch: 259 | !(0 <= q$i@562@01) | live]
; [else-branch: 259 | 0 <= q$i@562@01 | live]
(push) ; 11
; [then-branch: 259 | !(0 <= q$i@562@01)]
(assert (not (<= 0 q$i@562@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 259 | 0 <= q$i@562@01]
(assert (<= 0 q$i@562@01))
; [eval] q$i <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@562@01) (not (<= 0 q$i@562@01))))
(push) ; 10
; [then-branch: 260 | 0 <= q$i@562@01 && q$i@562@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 260 | !(0 <= q$i@562@01 && q$i@562@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 11
; [then-branch: 260 | 0 <= q$i@562@01 && q$i@562@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$i@562@01)
  (<=
    q$i@562@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] q$i <= ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] q$i <= ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 12
; [then-branch: 261 | q$i@562@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1)) | live]
; [else-branch: 261 | !(q$i@562@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1))) | live]
(push) ; 13
; [then-branch: 261 | q$i@562@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1))]
(assert (<= q$i@562@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
; [eval] s$struct$DocumentTransfer$eq(($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct), ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct))
; [eval] ($map_get(($struct_get($struct_loc(self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc(self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct]), q$i): $Struct)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Map[Int, $Struct])
; [eval] $struct_loc($old_self, 2)
(pop) ; 13
(push) ; 13
; [else-branch: 261 | !(q$i@562@01 <= $struct_get[Int]($struct_loc[Int](self@458@01, 1)))]
(assert (not (<= q$i@562@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not (<= q$i@562@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
  (<= q$i@562@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 260 | !(0 <= q$i@562@01 && q$i@562@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$i@562@01)
    (<=
      q$i@562@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$i@562@01)
    (<=
      q$i@562@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  (and
    (<= 0 q$i@562@01)
    (<=
      q$i@562@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not (<= q$i@562@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
      (<= q$i@562@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$i@562@01)
      (<=
        q$i@562@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and
    (<= 0 q$i@562@01)
    (<=
      q$i@562@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@562@01 Int)) (!
  (and
    (or (<= 0 q$i@562@01) (not (<= 0 q$i@562@01)))
    (=>
      (and
        (<= 0 q$i@562@01)
        (<=
          q$i@562@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (and
        (<= 0 q$i@562@01)
        (<=
          q$i@562@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (<= q$i@562@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
          (<= q$i@562@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))))
    (or
      (not
        (and
          (<= 0 q$i@562@01)
          (<=
            q$i@562@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))
      (and
        (<= 0 q$i@562@01)
        (<=
          q$i@562@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@560@01 2)) q$i@562@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1193@11@1193@474-aux|)))
(push) ; 9
(assert (not (forall ((q$i@562@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@562@01)
        (<=
          q$i@562@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@562@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@560@01 2)) q$i@562@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@562@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@560@01 2)) q$i@562@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1193@11@1193@474|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$i@562@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$i@562@01)
        (<=
          q$i@562@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (<= q$i@562@01 ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
    (s$struct$DocumentTransfer$eq<Bool> ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@560@01 2)) q$i@562@01) ($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@458@01 2)) q$i@562@01)))
  :pattern (($map_get<$Struct> ($struct_get<$Map<Int~_$Struct>> ($struct_loc<Int> self@560@01 2)) q$i@562@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesNoterEth.vy.vpr@1193@11@1193@474|)))
(pop) ; 8
; [eval] !$succ
; [then-branch: 262 | False | dead]
; [else-branch: 262 | True | live]
(push) ; 8
; [else-branch: 262 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 249 | $out_of_gas@474@01]
(assert $out_of_gas@474@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 235 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@458@01, 1)))) + 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@458@01 1))))
    1)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 219 | $map_get[Int]($struct_get[$Map[Seq[Int], Int]]($struct_loc[Int](self@458@01, 4)), l$hash@451@01) != $struct_get[Int]($struct_loc[Int](msg@454@01, 0))]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Seq<Int>~_Int>> ($struct_loc<Int> self@458@01 4)) l$hash@451@01)
    ($struct_get<Int> ($struct_loc<Int> msg@454@01 0)))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 205 | !(i0$$res@526@01)]
(assert (not i0$$res@526@01))
(pop) ; 3
(pop) ; 2
(pop) ; 1
